
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c6e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ecc  0802c8b0  0802c8b0  0003c8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0803177c  0803177c  0004177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08031794  08031794  0018b5ec  2**0
                  CONTENTS
  5 .ARM          00000008  08031794  08031794  00041794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0803179c  0803179c  0018b5ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0803179c  0803179c  0004179c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080317b8  080317b8  000417b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  080317c0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00017010  20000124  080318e4  00050124  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20017134  080318e4  00057134  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0018b5ec  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00190000  2**2
                  ALLOC
 14 ExtFlashSection 00127e10  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000037b0  90127e10  90127e10  00187e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 0000002c  9012b5c0  9012b5c0  0018b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000e6347  00000000  00000000  0018b61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00018873  00000000  00000000  00271963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000032b0  00000000  00000000  0028a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00005750  00000000  00000000  0028d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00039b19  00000000  00000000  00292bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00072092  00000000  00000000  002cc6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0012a49a  00000000  00000000  0033e783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  00468c1d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009f44  00000000  00000000  00468cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    0005105a  00000000  00000000  00472c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802c898 	.word	0x0802c898

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802c898 	.word	0x0802c898

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vApplicationIdleHook+0x8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f007 bfe0 	b.w	8008db8 <vTaskSetApplicationTaskTag>
 8000df8:	08001ef9 	.word	0x08001ef9

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f006 f9dc 	bl	80071bc <osDelay>
  for(;;)
 8000e04:	e7fb      	b.n	8000dfe <StartDefaultTask+0x2>
	...

08000e08 <secondTaskFunction>:
{
  /* USER CODE BEGIN secondTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	  xQueueSend(messageQ, &val, 0);
 8000e08:	4c07      	ldr	r4, [pc, #28]	; (8000e28 <secondTaskFunction+0x20>)
 8000e0a:	4d08      	ldr	r5, [pc, #32]	; (8000e2c <secondTaskFunction+0x24>)
{
 8000e0c:	b508      	push	{r3, lr}
	  xQueueSend(messageQ, &val, 0);
 8000e0e:	2300      	movs	r3, #0
 8000e10:	4905      	ldr	r1, [pc, #20]	; (8000e28 <secondTaskFunction+0x20>)
 8000e12:	6828      	ldr	r0, [r5, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	f007 f89e 	bl	8007f56 <xQueueGenericSend>
	  val++;
 8000e1a:	6823      	ldr	r3, [r4, #0]
    osDelay(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
	  val++;
 8000e1e:	3301      	adds	r3, #1
 8000e20:	6023      	str	r3, [r4, #0]
    osDelay(100);
 8000e22:	f006 f9cb 	bl	80071bc <osDelay>
  for(;;)
 8000e26:	e7f2      	b.n	8000e0e <secondTaskFunction+0x6>
 8000e28:	2000033c 	.word	0x2000033c
 8000e2c:	20003bdc 	.word	0x20003bdc

08000e30 <SystemClock_Config>:
{
 8000e30:	b510      	push	{r4, lr}
 8000e32:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e34:	2210      	movs	r2, #16
 8000e36:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e38:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	a80a      	add	r0, sp, #40	; 0x28
 8000e3c:	f02a fb2c 	bl	802b498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	2214      	movs	r2, #20
 8000e42:	2100      	movs	r1, #0
 8000e44:	a803      	add	r0, sp, #12
 8000e46:	f02a fb27 	bl	802b498 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e4c:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <SystemClock_Config+0x94>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e84:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e88:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e8c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e90:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e94:	f005 f950 	bl	8006138 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e98:	f004 fdfc 	bl	8005a94 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e9e:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ea0:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eaa:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eb2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eb6:	f005 fb2b 	bl	8006510 <HAL_RCC_ClockConfig>
}
 8000eba:	b014      	add	sp, #80	; 0x50
 8000ebc:	bd10      	pop	{r4, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <main>:
{
 8000ec8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ecc:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ece:	2210      	movs	r2, #16
 8000ed0:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ed2:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ed4:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ed6:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eda:	f02a fadd 	bl	802b498 <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ede:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000ee0:	f003 fd2c 	bl	800493c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ee4:	4bc6      	ldr	r3, [pc, #792]	; (8001200 <main+0x338>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee6:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ee8:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eec:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eee:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ef2:	f003 fd41 	bl	8004978 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ef6:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ef8:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000efa:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000efe:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f02:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f06:	f003 fd37 	bl	8004978 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f003 fd24 	bl	8004958 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f14:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f18:	4aba      	ldr	r2, [pc, #744]	; (8001204 <main+0x33c>)
 8000f1a:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f22:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f26:	6953      	ldr	r3, [r2, #20]
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f32:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f36:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f3e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f42:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f46:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f4a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f4e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f50:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f54:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f56:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f5a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f5c:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f60:	d2f9      	bcs.n	8000f56 <main+0x8e>
    } while(sets-- != 0U);
 8000f62:	3b20      	subs	r3, #32
 8000f64:	f113 0f20 	cmn.w	r3, #32
 8000f68:	d1f2      	bne.n	8000f50 <main+0x88>
 8000f6a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f6e:	6953      	ldr	r3, [r2, #20]
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f7a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f7e:	f003 fc41 	bl	8004804 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f84:	f7ff ff54 	bl	8000e30 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	2214      	movs	r2, #20
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	a80d      	add	r0, sp, #52	; 0x34
 8000f8e:	f02a fa83 	bl	802b498 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4b9d      	ldr	r3, [pc, #628]	; (8001208 <main+0x340>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f94:	2110      	movs	r1, #16
 8000f96:	489d      	ldr	r0, [pc, #628]	; (800120c <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2701      	movs	r7, #1
 8000f9c:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa4:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000fa8:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000fac:	4d98      	ldr	r5, [pc, #608]	; (8001210 <main+0x348>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fae:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000fb6:	4e97      	ldr	r6, [pc, #604]	; (8001214 <main+0x34c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb8:	f002 0210 	and.w	r2, r2, #16
 8000fbc:	9202      	str	r2, [sp, #8]
 8000fbe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc2:	f042 0202 	orr.w	r2, r2, #2
 8000fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fca:	f002 0202 	and.w	r2, r2, #2
 8000fce:	9203      	str	r2, [sp, #12]
 8000fd0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fdc:	f002 0201 	and.w	r2, r2, #1
 8000fe0:	9204      	str	r2, [sp, #16]
 8000fe2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
 8000fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fee:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ff2:	9205      	str	r2, [sp, #20]
 8000ff4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001000:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001004:	9206      	str	r2, [sp, #24]
 8001006:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f042 0208 	orr.w	r2, r2, #8
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
 8001010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001012:	f002 0208 	and.w	r2, r2, #8
 8001016:	9207      	str	r2, [sp, #28]
 8001018:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001024:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001028:	9208      	str	r2, [sp, #32]
 800102a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
 8001034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001036:	f002 0220 	and.w	r2, r2, #32
 800103a:	9209      	str	r2, [sp, #36]	; 0x24
 800103c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800103e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
 8001046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001048:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800104c:	920a      	str	r2, [sp, #40]	; 0x28
 800104e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
 8001058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800105e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	f042 0204 	orr.w	r2, r2, #4
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	930c      	str	r3, [sp, #48]	; 0x30
 8001074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001076:	f003 ffd9 	bl	800502c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2108      	movs	r1, #8
 800107e:	4866      	ldr	r0, [pc, #408]	; (8001218 <main+0x350>)
 8001080:	f003 ffd4 	bl	800502c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	4864      	ldr	r0, [pc, #400]	; (800121c <main+0x354>)
 800108c:	f003 ffce 	bl	800502c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	21c0      	movs	r1, #192	; 0xc0
 8001094:	4862      	ldr	r0, [pc, #392]	; (8001220 <main+0x358>)
 8001096:	f003 ffc9 	bl	800502c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	4861      	ldr	r0, [pc, #388]	; (8001224 <main+0x35c>)
 80010a0:	f003 ffc4 	bl	800502c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 80010a4:	a90d      	add	r1, sp, #52	; 0x34
 80010a6:	4859      	ldr	r0, [pc, #356]	; (800120c <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f003 fe30 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80010b4:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010b6:	a90d      	add	r1, sp, #52	; 0x34
 80010b8:	4857      	ldr	r0, [pc, #348]	; (8001218 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f003 fe27 	bl	8004d14 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010c6:	a90d      	add	r1, sp, #52	; 0x34
 80010c8:	4854      	ldr	r0, [pc, #336]	; (800121c <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f003 fe1f 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010d6:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	a90d      	add	r1, sp, #52	; 0x34
 80010da:	4851      	ldr	r0, [pc, #324]	; (8001220 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f003 fe16 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010e8:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ea:	a90d      	add	r1, sp, #52	; 0x34
 80010ec:	484d      	ldr	r0, [pc, #308]	; (8001224 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f003 fe0d 	bl	8004d14 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010fa:	484b      	ldr	r0, [pc, #300]	; (8001228 <main+0x360>)
 80010fc:	494b      	ldr	r1, [pc, #300]	; (800122c <main+0x364>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010fe:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001100:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001102:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001104:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001108:	f003 fc62 	bl	80049d0 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 800110c:	4948      	ldr	r1, [pc, #288]	; (8001230 <main+0x368>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800110e:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001110:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001114:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 8001118:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 800111c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001120:	f003 fcf8 	bl	8004b14 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001124:	4639      	mov	r1, r7
 8001126:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001128:	4d42      	ldr	r5, [pc, #264]	; (8001234 <main+0x36c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800112a:	f003 fdab 	bl	8004c84 <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001134:	4940      	ldr	r1, [pc, #256]	; (8001238 <main+0x370>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001136:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001138:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800113a:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800113c:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800113e:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001142:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001146:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800114a:	f04f 0a02 	mov.w	sl, #2
 800114e:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001150:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001154:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 8001156:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800115a:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800115e:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 8001162:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 8001166:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800116a:	f005 fd27 	bl	8006bbc <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800116e:	4629      	mov	r1, r5
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 8001176:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001178:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 800117c:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001180:	f005 fd3c 	bl	8006bfc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8001184:	4638      	mov	r0, r7
 8001186:	f003 fb61 	bl	800484c <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800118a:	4629      	mov	r1, r5
 800118c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001190:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001192:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001196:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800119a:	f005 fd2f 	bl	8006bfc <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 800119e:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a0:	4629      	mov	r1, r5
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a8:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80011ac:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011b0:	f005 fd24 	bl	8006bfc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80011b4:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011bc:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80011be:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011c0:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 80011c2:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 80011c4:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80011c6:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011c8:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011cc:	f005 fd16 	bl	8006bfc <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011d0:	f240 712b 	movw	r1, #1835	; 0x72b
 80011d4:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011d6:	4d19      	ldr	r5, [pc, #100]	; (800123c <main+0x374>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011d8:	f005 fd2f 	bl	8006c3a <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011dc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011e4:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80011e6:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011ea:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <main+0x378>)
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <main+0x37c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80011f2:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f6:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80011fa:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80011fe:	e023      	b.n	8001248 <main+0x380>
 8001200:	0300001b 	.word	0x0300001b
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400
 8001210:	2000017c 	.word	0x2000017c
 8001214:	20000304 	.word	0x20000304
 8001218:	40022800 	.word	0x40022800
 800121c:	40022000 	.word	0x40022000
 8001220:	40020800 	.word	0x40020800
 8001224:	40021800 	.word	0x40021800
 8001228:	20000158 	.word	0x20000158
 800122c:	40023000 	.word	0x40023000
 8001230:	4002b000 	.word	0x4002b000
 8001234:	20000140 	.word	0x20000140
 8001238:	a0000140 	.word	0xa0000140
 800123c:	200001bc 	.word	0x200001bc
 8001240:	20404768 	.word	0x20404768
 8001244:	40005c00 	.word	0x40005c00
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001248:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800124c:	f004 f817 	bl	800527e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001250:	4621      	mov	r1, r4
 8001252:	4628      	mov	r0, r5
 8001254:	f004 fa36 	bl	80056c4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001258:	4621      	mov	r1, r4
 800125a:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 800125c:	4d42      	ldr	r5, [pc, #264]	; (8001368 <main+0x4a0>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800125e:	f004 fa57 	bl	8005710 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001262:	2234      	movs	r2, #52	; 0x34
 8001264:	4621      	mov	r1, r4
 8001266:	eb0d 0002 	add.w	r0, sp, r2
 800126a:	f02a f915 	bl	802b498 <memset>
  hltdc.Instance = LTDC;
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <main+0x4a4>)
  hltdc.Init.VerticalSync = 9;
 8001270:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8001272:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 8001274:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001278:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800127a:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 800127c:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001280:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8001284:	2309      	movs	r3, #9
 8001286:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 800128a:	230b      	movs	r3, #11
 800128c:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8001290:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001294:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8001296:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 800129a:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800129e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 80012a2:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012a6:	f004 fadf 	bl	8005868 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80012aa:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012ac:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 80012b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 80012b4:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b8:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 80012ba:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 80012bc:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80012be:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 80012c2:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 80012c6:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012ca:	2105      	movs	r1, #5
 80012cc:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012d0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012d4:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012d8:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012dc:	4622      	mov	r2, r4
 80012de:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012e0:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012e4:	f004 fb8b 	bl	80059fe <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012e8:	4821      	ldr	r0, [pc, #132]	; (8001370 <main+0x4a8>)
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <main+0x4ac>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012ec:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012ee:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012f2:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012fa:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012fe:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001302:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001306:	f004 fcd5 	bl	8005cb4 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 800130a:	f003 f8f9 	bl	8004500 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 800130e:	f003 f83d 	bl	800438c <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001312:	205c      	movs	r0, #92	; 0x5c
 8001314:	f003 fafe 	bl	8004914 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 8001318:	f000 fb6c 	bl	80019f4 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 800131c:	f000 fb96 	bl	8001a4c <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001320:	f000 fb93 	bl	8001a4a <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001324:	f005 feba 	bl	800709c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <main+0x4b0>)
 800132a:	4621      	mov	r1, r4
 800132c:	4813      	ldr	r0, [pc, #76]	; (800137c <main+0x4b4>)
 800132e:	f005 feef 	bl	8007110 <osThreadNew>
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <main+0x4b8>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <main+0x4bc>)
 8001336:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001338:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800133a:	4813      	ldr	r0, [pc, #76]	; (8001388 <main+0x4c0>)
 800133c:	f005 fee8 	bl	8007110 <osThreadNew>
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <main+0x4c4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <main+0x4c8>)
 8001344:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001346:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001348:	4812      	ldr	r0, [pc, #72]	; (8001394 <main+0x4cc>)
 800134a:	f005 fee1 	bl	8007110 <osThreadNew>
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <main+0x4d0>)
  secondTaskHandle = osThreadNew(secondTaskFunction, NULL, &secondTask_attributes);
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <main+0x4d4>)
 8001352:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001354:	6018      	str	r0, [r3, #0]
  secondTaskHandle = osThreadNew(secondTaskFunction, NULL, &secondTask_attributes);
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <main+0x4d8>)
 8001358:	f005 feda 	bl	8007110 <osThreadNew>
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <main+0x4dc>)
 800135e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001360:	f005 feb6 	bl	80070d0 <osKernelStart>
  while (1)
 8001364:	e7fe      	b.n	8001364 <main+0x49c>
 8001366:	bf00      	nop
 8001368:	20000210 	.word	0x20000210
 800136c:	40016800 	.word	0x40016800
 8001370:	200002b8 	.word	0x200002b8
 8001374:	a0001000 	.word	0xa0001000
 8001378:	0802c944 	.word	0x0802c944
 800137c:	08000dfd 	.word	0x08000dfd
 8001380:	20000154 	.word	0x20000154
 8001384:	0802c920 	.word	0x0802c920
 8001388:	08001a5b 	.word	0x08001a5b
 800138c:	20000150 	.word	0x20000150
 8001390:	0802c98c 	.word	0x0802c98c
 8001394:	080033f9 	.word	0x080033f9
 8001398:	20000340 	.word	0x20000340
 800139c:	0802c968 	.word	0x0802c968
 80013a0:	08000e09 	.word	0x08000e09
 80013a4:	20000338 	.word	0x20000338

080013a8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013a8:	6802      	ldr	r2, [r0, #0]
 80013aa:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d101      	bne.n	80013b4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80013b0:	f003 ba3a 	b.w	8004828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40001000 	.word	0x40001000

080013bc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_MspInit+0x38>)
{
 80013c2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c4:	210f      	movs	r1, #15
 80013c6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
 80013d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e4:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f2:	f003 ba4f 	b.w	8004894 <HAL_NVIC_SetPriority>
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013fc:	6802      	ldr	r2, [r0, #0]
{
 80013fe:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_CRC_MspInit+0x28>)
 8001402:	429a      	cmp	r2, r3
 8001404:	d10b      	bne.n	800141e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001406:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800140a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800141e:	b002      	add	sp, #8
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023000 	.word	0x40023000

08001428 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_DMA2D_MspInit+0x3c>)
{
 800142a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800142c:	6802      	ldr	r2, [r0, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d115      	bne.n	800145e <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001432:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001436:	2105      	movs	r1, #5
 8001438:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800143a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001442:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800144e:	f003 fa21 	bl	8004894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001452:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001454:	b003      	add	sp, #12
 8001456:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800145a:	f003 ba4d 	b.w	80048f8 <HAL_NVIC_EnableIRQ>
}
 800145e:	b003      	add	sp, #12
 8001460:	f85d fb04 	ldr.w	pc, [sp], #4
 8001464:	4002b000 	.word	0x4002b000

08001468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001468:	b510      	push	{r4, lr}
 800146a:	b0a8      	sub	sp, #160	; 0xa0
 800146c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	2214      	movs	r2, #20
 8001470:	2100      	movs	r1, #0
 8001472:	a802      	add	r0, sp, #8
 8001474:	f02a f810 	bl	802b498 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001478:	2284      	movs	r2, #132	; 0x84
 800147a:	2100      	movs	r1, #0
 800147c:	a807      	add	r0, sp, #28
 800147e:	f02a f80b 	bl	802b498 <memset>
  if(hi2c->Instance==I2C3)
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_I2C_MspInit+0x7c>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d12a      	bne.n	80014e0 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800148a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001490:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f005 f90b 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8001496:	b108      	cbz	r0, 800149c <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001498:	f7ff ff90 	bl	80013bc <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800149c:	4c12      	ldr	r4, [pc, #72]	; (80014e8 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149e:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6323      	str	r3, [r4, #48]	; 0x30
 80014ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b8:	2312      	movs	r3, #18
 80014ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014c4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014c8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014ca:	f003 fc23 	bl	8004d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d4:	6423      	str	r3, [r4, #64]	; 0x40
 80014d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014e0:	b028      	add	sp, #160	; 0xa0
 80014e2:	bd10      	pop	{r4, pc}
 80014e4:	40005c00 	.word	0x40005c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021c00 	.word	0x40021c00

080014f0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014f0:	6802      	ldr	r2, [r0, #0]
{
 80014f2:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_I2C_MspDeInit+0x2c>)
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d10f      	bne.n	800151a <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001500:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001508:	f003 fce8 	bl	8004edc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001516:	f003 bce1 	b.w	8004edc <HAL_GPIO_DeInit>
}
 800151a:	bd08      	pop	{r3, pc}
 800151c:	40005c00 	.word	0x40005c00
 8001520:	40023800 	.word	0x40023800
 8001524:	40021c00 	.word	0x40021c00

08001528 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	b0ac      	sub	sp, #176	; 0xb0
 800152c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	2214      	movs	r2, #20
 8001530:	2100      	movs	r1, #0
 8001532:	a806      	add	r0, sp, #24
 8001534:	f029 ffb0 	bl	802b498 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	2284      	movs	r2, #132	; 0x84
 800153a:	2100      	movs	r1, #0
 800153c:	a80b      	add	r0, sp, #44	; 0x2c
 800153e:	f029 ffab 	bl	802b498 <memset>
  if(hltdc->Instance==LTDC)
 8001542:	6822      	ldr	r2, [r4, #0]
 8001544:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_LTDC_MspInit+0x140>)
 8001546:	429a      	cmp	r2, r3
 8001548:	f040 808c 	bne.w	8001664 <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800154c:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800154e:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001550:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001552:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001554:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001558:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001564:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001566:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156a:	f005 f89f 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 800156e:	b108      	cbz	r0, 8001574 <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001570:	f7ff ff24 	bl	80013bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001574:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800157a:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 800157c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	a906      	add	r1, sp, #24
 8001580:	483b      	ldr	r0, [pc, #236]	; (8001670 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001582:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
 8001588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800158a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001594:	f042 0210 	orr.w	r2, r2, #16
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
 800159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159c:	f002 0210 	and.w	r2, r2, #16
 80015a0:	9201      	str	r2, [sp, #4]
 80015a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
 80015ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80015b2:	9202      	str	r2, [sp, #8]
 80015b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80015c4:	9203      	str	r2, [sp, #12]
 80015c6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
 80015d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80015d6:	9204      	str	r2, [sp, #16]
 80015d8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80015da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	9305      	str	r3, [sp, #20]
 80015ea:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2310      	movs	r3, #16
 80015ee:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f6:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f8:	f003 fb8c 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015fc:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001600:	a906      	add	r1, sp, #24
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001604:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800160e:	f003 fb81 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001612:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001614:	a906      	add	r1, sp, #24
 8001616:	4818      	ldr	r0, [pc, #96]	; (8001678 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001618:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001622:	f003 fb77 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162a:	a906      	add	r1, sp, #24
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001632:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001638:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163a:	f003 fb6b 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 800163e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001642:	a906      	add	r1, sp, #24
 8001644:	480e      	ldr	r0, [pc, #56]	; (8001680 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001646:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001650:	f003 fb60 	bl	8004d14 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001654:	2058      	movs	r0, #88	; 0x58
 8001656:	4622      	mov	r2, r4
 8001658:	2105      	movs	r1, #5
 800165a:	f003 f91b 	bl	8004894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800165e:	2058      	movs	r0, #88	; 0x58
 8001660:	f003 f94a 	bl	80048f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001664:	b02c      	add	sp, #176	; 0xb0
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	40016800 	.word	0x40016800
 800166c:	40023800 	.word	0x40023800
 8001670:	40021000 	.word	0x40021000
 8001674:	40022400 	.word	0x40022400
 8001678:	40022800 	.word	0x40022800
 800167c:	40021800 	.word	0x40021800
 8001680:	40022000 	.word	0x40022000

08001684 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	2214      	movs	r2, #20
 8001686:	2100      	movs	r1, #0
{
 8001688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168c:	b08a      	sub	sp, #40	; 0x28
 800168e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	eb0d 0002 	add.w	r0, sp, r2
 8001694:	f029 ff00 	bl	802b498 <memset>
  if(hqspi->Instance==QUADSPI)
 8001698:	6822      	ldr	r2, [r4, #0]
 800169a:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_QSPI_MspInit+0xc8>)
 800169c:	429a      	cmp	r2, r3
 800169e:	d151      	bne.n	8001744 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016a4:	2403      	movs	r4, #3
 80016a6:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ae:	a905      	add	r1, sp, #20
 80016b0:	4828      	ldr	r0, [pc, #160]	; (8001754 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016b2:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016bc:	f002 0202 	and.w	r2, r2, #2
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c6:	f042 0210 	orr.w	r2, r2, #16
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
 80016cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ce:	f002 0210 	and.w	r2, r2, #16
 80016d2:	9202      	str	r2, [sp, #8]
 80016d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d8:	f042 0202 	orr.w	r2, r2, #2
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	f002 0202 	and.w	r2, r2, #2
 80016e4:	9203      	str	r2, [sp, #12]
 80016e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ea:	f042 0208 	orr.w	r2, r2, #8
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	9304      	str	r3, [sp, #16]
 80016f8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016fe:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001702:	f003 fb07 	bl	8004d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001706:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	a905      	add	r1, sp, #20
 800170a:	4813      	ldr	r0, [pc, #76]	; (8001758 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001710:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001716:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f003 fafc 	bl	8004d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	a905      	add	r1, sp, #20
 800171e:	480e      	ldr	r0, [pc, #56]	; (8001758 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001720:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f003 faf3 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 800172e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001732:	a905      	add	r1, sp, #20
 8001734:	4809      	ldr	r0, [pc, #36]	; (800175c <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001736:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	f003 fae8 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001744:	b00a      	add	sp, #40	; 0x28
 8001746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800174a:	bf00      	nop
 800174c:	a0001000 	.word	0xa0001000
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020c00 	.word	0x40020c00

08001760 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001760:	6802      	ldr	r2, [r0, #0]
{
 8001762:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_QSPI_MspDeInit+0x34>)
 8001766:	429a      	cmp	r2, r3
 8001768:	d113      	bne.n	8001792 <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800176c:	2104      	movs	r1, #4
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001770:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001772:	f023 0302 	bic.w	r3, r3, #2
 8001776:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001778:	f003 fbb0 	bl	8004edc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 800177c:	2144      	movs	r1, #68	; 0x44
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <HAL_QSPI_MspDeInit+0x40>)
 8001780:	f003 fbac 	bl	8004edc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001784:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800178a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800178e:	f003 bba5 	b.w	8004edc <HAL_GPIO_DeInit>
}
 8001792:	bd08      	pop	{r3, pc}
 8001794:	a0001000 	.word	0xa0001000
 8001798:	40023800 	.word	0x40023800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020c00 	.word	0x40020c00

080017a8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017aa:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017ac:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017ae:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_SDRAM_MspInit+0xb0>)
 80017b2:	681e      	ldr	r6, [r3, #0]
 80017b4:	2e00      	cmp	r6, #0
 80017b6:	d14d      	bne.n	8001854 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 80017b8:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017bc:	2503      	movs	r5, #3
 80017be:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80017c0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c2:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	4826      	ldr	r0, [pc, #152]	; (8001860 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80017c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	639a      	str	r2, [r3, #56]	; 0x38
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017de:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e6:	f003 fa95 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017ea:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ee:	a901      	add	r1, sp, #4
 80017f0:	481c      	ldr	r0, [pc, #112]	; (8001864 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017f2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fc:	f003 fa8a 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001800:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	a901      	add	r1, sp, #4
 8001806:	4818      	ldr	r0, [pc, #96]	; (8001868 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001808:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	f003 fa7f 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001816:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800181a:	a901      	add	r1, sp, #4
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800181e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001828:	f003 fa74 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800182c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800182e:	a901      	add	r1, sp, #4
 8001830:	480f      	ldr	r0, [pc, #60]	; (8001870 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001832:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800183c:	f003 fa6a 	bl	8004d14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001840:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001842:	a901      	add	r1, sp, #4
 8001844:	480b      	ldr	r0, [pc, #44]	; (8001874 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001846:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f003 fa60 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001854:	b007      	add	sp, #28
 8001856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001858:	20000344 	.word	0x20000344
 800185c:	40023800 	.word	0x40023800
 8001860:	40021000 	.word	0x40021000
 8001864:	40021800 	.word	0x40021800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40021400 	.word	0x40021400
 8001870:	40021c00 	.word	0x40021c00
 8001874:	40020800 	.word	0x40020800

08001878 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_InitTick+0x88>)
 800187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187c:	f042 0210 	orr.w	r2, r2, #16
{
 8001880:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001884:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8001888:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188a:	a901      	add	r1, sp, #4
 800188c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001896:	f004 feeb 	bl	8006670 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800189a:	9b06      	ldr	r3, [sp, #24]
 800189c:	bb4b      	cbnz	r3, 80018f2 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800189e:	f004 fed7 	bl	8006650 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a2:	4e18      	ldr	r6, [pc, #96]	; (8001904 <HAL_InitTick+0x8c>)
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_InitTick+0x90>)
 80018a6:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018a8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80018ac:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_InitTick+0x94>)
 80018b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b4:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80018b6:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b8:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 80018c2:	f005 fb2b 	bl	8006f1c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80018c6:	4604      	mov	r4, r0
 80018c8:	b980      	cbnz	r0, 80018ec <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018ca:	4630      	mov	r0, r6
 80018cc:	f005 f9ce 	bl	8006c6c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80018d0:	4604      	mov	r4, r0
 80018d2:	b958      	cbnz	r0, 80018ec <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018d4:	2036      	movs	r0, #54	; 0x36
 80018d6:	f003 f80f 	bl	80048f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	2d0f      	cmp	r5, #15
 80018dc:	d80d      	bhi.n	80018fa <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018de:	4622      	mov	r2, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	2036      	movs	r0, #54	; 0x36
 80018e4:	f002 ffd6 	bl	8004894 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_InitTick+0x98>)
 80018ea:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80018ec:	4620      	mov	r0, r4
 80018ee:	b008      	add	sp, #32
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018f2:	f004 fead 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 80018f6:	0040      	lsls	r0, r0, #1
 80018f8:	e7d3      	b.n	80018a2 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80018fa:	2401      	movs	r4, #1
 80018fc:	e7f6      	b.n	80018ec <HAL_InitTick+0x74>
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	20000348 	.word	0x20000348
 8001908:	40001000 	.word	0x40001000
 800190c:	000f4240 	.word	0x000f4240
 8001910:	2000003c 	.word	0x2000003c

08001914 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001914:	4770      	bx	lr

08001916 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler>

08001918 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler>

0800191a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler>

0800191c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler>

0800191e <DebugMon_Handler>:
 800191e:	4770      	bx	lr

08001920 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001920:	4801      	ldr	r0, [pc, #4]	; (8001928 <TIM6_DAC_IRQHandler+0x8>)
 8001922:	f005 b9e5 	b.w	8006cf0 <HAL_TIM_IRQHandler>
 8001926:	bf00      	nop
 8001928:	20000348 	.word	0x20000348

0800192c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800192c:	4801      	ldr	r0, [pc, #4]	; (8001934 <LTDC_IRQHandler+0x8>)
 800192e:	f004 b809 	b.w	8005944 <HAL_LTDC_IRQHandler>
 8001932:	bf00      	nop
 8001934:	20000210 	.word	0x20000210

08001938 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001938:	4801      	ldr	r0, [pc, #4]	; (8001940 <DMA2D_IRQHandler+0x8>)
 800193a:	f003 b919 	b.w	8004b70 <HAL_DMA2D_IRQHandler>
 800193e:	bf00      	nop
 8001940:	2000017c 	.word	0x2000017c

08001944 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001944:	2001      	movs	r0, #1
 8001946:	4770      	bx	lr

08001948 <_kill>:

int _kill(int pid, int sig)
{
 8001948:	b508      	push	{r3, lr}
	errno = EINVAL;
 800194a:	f029 fd47 	bl	802b3dc <__errno>
 800194e:	2316      	movs	r3, #22
 8001950:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001952:	f04f 30ff 	mov.w	r0, #4294967295
 8001956:	bd08      	pop	{r3, pc}

08001958 <_exit>:

void _exit (int status)
{
 8001958:	b508      	push	{r3, lr}
	errno = EINVAL;
 800195a:	f029 fd3f 	bl	802b3dc <__errno>
 800195e:	2316      	movs	r3, #22
 8001960:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001962:	e7fe      	b.n	8001962 <_exit+0xa>

08001964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	460d      	mov	r5, r1
 8001968:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	460e      	mov	r6, r1
 800196c:	1b73      	subs	r3, r6, r5
 800196e:	429c      	cmp	r4, r3
 8001970:	dc01      	bgt.n	8001976 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001972:	4620      	mov	r0, r4
 8001974:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	e7f5      	b.n	800196c <_read+0x8>

08001980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	460d      	mov	r5, r1
 8001984:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	460e      	mov	r6, r1
 8001988:	1b73      	subs	r3, r6, r5
 800198a:	429c      	cmp	r4, r3
 800198c:	dc01      	bgt.n	8001992 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800198e:	4620      	mov	r0, r4
 8001990:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001992:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001996:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	e7f5      	b.n	8001988 <_write+0x8>

0800199c <_close>:

int _close(int file)
{
	return -1;
}
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	4770      	bx	lr

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80019a6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80019a8:	604b      	str	r3, [r1, #4]
}
 80019aa:	4770      	bx	lr

080019ac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019ac:	2001      	movs	r0, #1
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019b0:	2000      	movs	r0, #0
 80019b2:	4770      	bx	lr

080019b4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <_sbrk+0x30>)
{
 80019b6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80019b8:	6811      	ldr	r1, [r2, #0]
{
 80019ba:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80019bc:	b909      	cbnz	r1, 80019c2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <_sbrk+0x34>)
 80019c0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	6810      	ldr	r0, [r2, #0]
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <_sbrk+0x38>)
 80019c6:	4c0a      	ldr	r4, [pc, #40]	; (80019f0 <_sbrk+0x3c>)
 80019c8:	4403      	add	r3, r0
 80019ca:	1b09      	subs	r1, r1, r4
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d906      	bls.n	80019de <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80019d0:	f029 fd04 	bl	802b3dc <__errno>
 80019d4:	230c      	movs	r3, #12
 80019d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80019dc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80019de:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80019e0:	e7fc      	b.n	80019dc <_sbrk+0x28>
 80019e2:	bf00      	nop
 80019e4:	20000394 	.word	0x20000394
 80019e8:	20017138 	.word	0x20017138
 80019ec:	20050000 	.word	0x20050000
 80019f0:	00000a00 	.word	0x00000a00

080019f4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80019f4:	4770      	bx	lr
	...

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019fe:	e003      	b.n	8001a08 <LoopCopyDataInit>

08001a00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a06:	3104      	adds	r1, #4

08001a08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a10:	d3f6      	bcc.n	8001a00 <CopyDataInit>
  ldr  r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a14:	e002      	b.n	8001a1c <LoopFillZerobss>

08001a16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a18:	f842 3b04 	str.w	r3, [r2], #4

08001a1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a20:	d3f9      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a22:	f002 fe05 	bl	8004630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f029 fcf1 	bl	802b40c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7ff fa4d 	bl	8000ec8 <main>
  bx  lr    
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001a34:	080317c0 	.word	0x080317c0
  ldr  r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a3c:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8001a40:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001a44:	20017134 	.word	0x20017134

08001a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC_IRQHandler>

08001a4a <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001a4a:	4770      	bx	lr

08001a4c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001a4c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001a4e:	f001 f92d 	bl	8002cac <touchgfx_components_init>
  touchgfx_init();
}
 8001a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8001a56:	f001 b8b5 	b.w	8002bc4 <touchgfx_init>

08001a5a <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001a5a:	f001 b929 	b.w	8002cb0 <touchgfx_taskEntry>

08001a5e <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001a5e:	6840      	ldr	r0, [r0, #4]
    }
 8001a60:	4770      	bx	lr

08001a62 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001a62:	6041      	str	r1, [r0, #4]
    }
 8001a64:	4770      	bx	lr
	...

08001a68 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001a68:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a6c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a74:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a7c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a80:	430a      	orrs	r2, r1
 8001a82:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
}
 8001a8e:	4770      	bx	lr
 8001a90:	e0001000 	.word	0xe0001000
 8001a94:	c5acce55 	.word	0xc5acce55

08001a98 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a98:	1a51      	subs	r1, r2, r1
 8001a9a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a9e:	fbb1 f0f3 	udiv	r0, r1, r3
 8001aa2:	4770      	bx	lr

08001aa4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001aa4:	4b01      	ldr	r3, [pc, #4]	; (8001aac <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001aa6:	6858      	ldr	r0, [r3, #4]
}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e0001000 	.word	0xe0001000

08001ab0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001ab0:	4770      	bx	lr

08001ab2 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001ab2:	b510      	push	{r4, lr}
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	210c      	movs	r1, #12
 8001ab8:	f029 fc2f 	bl	802b31a <_ZdlPvj>
 8001abc:	4620      	mov	r0, r4
 8001abe:	bd10      	pop	{r4, pc}

08001ac0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ac0:	6803      	ldr	r3, [r0, #0]
{
 8001ac2:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ac4:	691b      	ldr	r3, [r3, #16]
{
 8001ac6:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001ac8:	b131      	cbz	r1, 8001ad8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001aca:	4798      	blx	r3
 8001acc:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	4418      	add	r0, r3
 8001ad4:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001ad6:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001ad8:	4798      	blx	r3
 8001ada:	60a0      	str	r0, [r4, #8]
}
 8001adc:	e7fb      	b.n	8001ad6 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001ae0 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001ae2:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001ae4:	4a02      	ldr	r2, [pc, #8]	; (8001af0 <_ZN20STM32TouchController4initEv+0x10>)
 8001ae6:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4718      	bx	r3
 8001aec:	20000010 	.word	0x20000010
 8001af0:	20000398 	.word	0x20000398

08001af4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001af4:	4770      	bx	lr

08001af6 <_ZN20STM32TouchControllerD0Ev>:
 8001af6:	b510      	push	{r4, lr}
 8001af8:	4604      	mov	r4, r0
 8001afa:	2104      	movs	r1, #4
 8001afc:	f029 fc0d 	bl	802b31a <_ZdlPvj>
 8001b00:	4620      	mov	r0, r4
 8001b02:	bd10      	pop	{r4, pc}

08001b04 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001b06:	4e0e      	ldr	r6, [pc, #56]	; (8001b40 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
{
 8001b08:	460d      	mov	r5, r1
 8001b0a:	4614      	mov	r4, r2
    if (tsDriver)
 8001b0c:	6833      	ldr	r3, [r6, #0]
 8001b0e:	b913      	cbnz	r3, 8001b16 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = (int32_t)_x;
            y = (int32_t)_y;
            return true;
        }
    }
    return false;
 8001b10:	2000      	movs	r0, #0
}
 8001b12:	b002      	add	sp, #8
 8001b14:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2070      	movs	r0, #112	; 0x70
 8001b1a:	4798      	blx	r3
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d0f7      	beq.n	8001b10 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, &_y, &_x);
 8001b20:	6833      	ldr	r3, [r6, #0]
 8001b22:	2070      	movs	r0, #112	; 0x70
 8001b24:	aa01      	add	r2, sp, #4
 8001b26:	f10d 0106 	add.w	r1, sp, #6
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4798      	blx	r3
            x = (int32_t)_x;
 8001b2e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b32:	2001      	movs	r0, #1
 8001b34:	602b      	str	r3, [r5, #0]
            y = (int32_t)_y;
 8001b36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b3a:	6023      	str	r3, [r4, #0]
            return true;
 8001b3c:	e7e9      	b.n	8001b12 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001b3e:	bf00      	nop
 8001b40:	20000398 	.word	0x20000398

08001b44 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b46:	2301      	movs	r3, #1
{
 8001b48:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b50:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b54:	f10d 0217 	add.w	r2, sp, #23
 8001b58:	9200      	str	r2, [sp, #0]
 8001b5a:	460a      	mov	r2, r1
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <TS_IO_Write+0x30>)
 8001b60:	f003 fbf8 	bl	8005354 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001b64:	b110      	cbz	r0, 8001b6c <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <TS_IO_Write+0x30>)
 8001b68:	f003 fbda 	bl	8005320 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001b6c:	b007      	add	sp, #28
 8001b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b72:	bf00      	nop
 8001b74:	200001bc 	.word	0x200001bc

08001b78 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001b7a:	2300      	movs	r3, #0
{
 8001b7c:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001b82:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b86:	2301      	movs	r3, #1
 8001b88:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b8c:	f10d 0117 	add.w	r1, sp, #23
 8001b90:	9100      	str	r1, [sp, #0]
 8001b92:	4601      	mov	r1, r0
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <TS_IO_Read+0x34>)
 8001b96:	f003 fcb7 	bl	8005508 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b9a:	b110      	cbz	r0, 8001ba2 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <TS_IO_Read+0x34>)
 8001b9e:	f003 fbbf 	bl	8005320 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001ba2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001ba6:	b007      	add	sp, #28
 8001ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bac:	200001bc 	.word	0x200001bc

08001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001bb0:	2803      	cmp	r0, #3
 8001bb2:	d823      	bhi.n	8001bfc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001bb4:	e8df f000 	tbb	[pc, r0]
 8001bb8:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	4810      	ldr	r0, [pc, #64]	; (8001c04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001bca:	f003 ba2f 	b.w	800502c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	fab2 f282 	clz	r2, r2
 8001bd8:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001bdc:	e7f5      	b.n	8001bca <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	0952      	lsrs	r2, r2, #5
 8001bea:	e7f6      	b.n	8001bda <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001bee:	2140      	movs	r1, #64	; 0x40
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	fab2 f282 	clz	r2, r2
 8001bf8:	0952      	lsrs	r2, r2, #5
 8001bfa:	e7e6      	b.n	8001bca <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000039c 	.word	0x2000039c
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40021800 	.word	0x40021800

08001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001c10:	2803      	cmp	r0, #3
 8001c12:	d823      	bhi.n	8001c5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001c14:	e8df f000 	tbb	[pc, r0]
 8001c18:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c1e:	2110      	movs	r1, #16
 8001c20:	4810      	ldr	r0, [pc, #64]	; (8001c64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	3a00      	subs	r2, #0
 8001c26:	bf18      	it	ne
 8001c28:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c2a:	f003 b9ff 	b.w	800502c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	3a00      	subs	r2, #0
 8001c36:	bf18      	it	ne
 8001c38:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001c3c:	e7f5      	b.n	8001c2a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	3a00      	subs	r2, #0
 8001c46:	bf18      	it	ne
 8001c48:	2201      	movne	r2, #1
 8001c4a:	e7f6      	b.n	8001c3a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c4e:	2140      	movs	r1, #64	; 0x40
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	3a00      	subs	r2, #0
 8001c56:	bf18      	it	ne
 8001c58:	2201      	movne	r2, #1
 8001c5a:	e7e6      	b.n	8001c2a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000039c 	.word	0x2000039c
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40021800 	.word	0x40021800

08001c70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001c70:	2803      	cmp	r0, #3
 8001c72:	d80f      	bhi.n	8001c94 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001c74:	e8df f000 	tbb	[pc, r0]
 8001c78:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c80:	f003 b9d9 	b.w	8005036 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c84:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001c88:	e7fa      	b.n	8001c80 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	e7fb      	b.n	8001c86 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c92:	e7f5      	b.n	8001c80 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40021800 	.word	0x40021800

08001ca4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001ca4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001ca6:	2803      	cmp	r0, #3
 8001ca8:	d813      	bhi.n	8001cd2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8001caa:	e8df f000 	tbb	[pc, r0]
 8001cae:	0a02      	.short	0x0a02
 8001cb0:	0f0d      	.short	0x0f0d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001cb6:	f003 f9b3 	bl	8005020 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001cba:	1e43      	subs	r3, r0, #1
 8001cbc:	4258      	negs	r0, r3
 8001cbe:	4158      	adcs	r0, r3
 8001cc0:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001cc2:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8001cc6:	e7f6      	b.n	8001cb6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	e7fb      	b.n	8001cc4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ccc:	2140      	movs	r1, #64	; 0x40
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001cd0:	e7f1      	b.n	8001cb6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	e7f1      	b.n	8001cba <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001cd6:	bf00      	nop
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40021800 	.word	0x40021800

08001ce4 <_ZN8touchgfx4GPIO4initEv>:
{
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	4d08      	ldr	r5, [pc, #32]	; (8001d08 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001ce8:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001cea:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001cec:	b2e0      	uxtb	r0, r4
 8001cee:	f7ff ffd9 	bl	8001ca4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001cf2:	b118      	cbz	r0, 8001cfc <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001cf8:	bf18      	it	ne
 8001cfa:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001cfc:	3401      	adds	r4, #1
 8001cfe:	3504      	adds	r5, #4
 8001d00:	2c05      	cmp	r4, #5
 8001d02:	d1f3      	bne.n	8001cec <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
 8001d06:	bf00      	nop
 8001d08:	2000039c 	.word	0x2000039c

08001d0c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001d0c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001d0e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001d12:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001d16:	4770      	bx	lr

08001d18 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001d18:	2000      	movs	r0, #0
 8001d1a:	4770      	bx	lr

08001d1c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001d1c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001d1e:	3900      	subs	r1, #0
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001d22:	bf18      	it	ne
 8001d24:	2101      	movne	r1, #1
 8001d26:	7019      	strb	r1, [r3, #0]
    }
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20016e87 	.word	0x20016e87

08001d30 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001d30:	2000      	movs	r0, #0
 8001d32:	4770      	bx	lr

08001d34 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001d34:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d36:	b10b      	cbz	r3, 8001d3c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4718      	bx	r3
        }
    }
 8001d3c:	4770      	bx	lr

08001d3e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001d3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d42:	4770      	bx	lr

08001d44 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001d44:	6840      	ldr	r0, [r0, #4]
 8001d46:	6803      	ldr	r3, [r0, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	4718      	bx	r3

08001d4c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d4c:	4770      	bx	lr
	...

08001d50 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d54:	f001 f8d4 	bl	8002f00 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001d62:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001d66:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001d68:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001d6a:	4d06      	ldr	r5, [pc, #24]	; (8001d84 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001d6c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001d70:	4628      	mov	r0, r5
 8001d72:	f7ff fe79 	bl	8001a68 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001d76:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001d78:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001d7a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001d7e:	bd38      	pop	{r3, r4, r5, pc}
 8001d80:	c0000000 	.word	0xc0000000
 8001d84:	200003ac 	.word	0x200003ac

08001d88 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d88:	f001 b870 	b.w	8002e6c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001d8c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d8c:	f001 b874 	b.w	8002e78 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001d90 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001d90:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d92:	f001 f8e7 	bl	8002f64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001d96:	4910      	ldr	r1, [pc, #64]	; (8001dd8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001da2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001da6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001daa:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001dae:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001db2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001db4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001db8:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001dba:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001dbe:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001dc0:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001dc4:	d2f9      	bcs.n	8001dba <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001dc6:	3b20      	subs	r3, #32
 8001dc8:	f113 0f20 	cmn.w	r3, #32
 8001dcc:	d1f2      	bne.n	8001db4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001dce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dd2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001ddc:	f001 b8c4 	b.w	8002f68 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001de0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001de0:	f001 b820 	b.w	8002e24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001de4 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001de4:	f001 b9de 	b.w	80031a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001de8 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001de8:	f001 b9e6 	b.w	80031b8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001dec <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001dec:	f001 b824 	b.w	8002e38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001df0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001df4:	f016 f8b2 	bl	8017f5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001e04:	4718      	bx	r3

08001e06 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001e06:	f015 bb01 	b.w	801740c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001e0a <_ZN11TouchGFXHALD0Ev>:
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	217c      	movs	r1, #124	; 0x7c
 8001e10:	f029 fa83 	bl	802b31a <_ZdlPvj>
 8001e14:	4620      	mov	r0, r4
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001e18:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001e1c:	b11b      	cbz	r3, 8001e26 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001e1e:	6840      	ldr	r0, [r0, #4]
 8001e20:	6803      	ldr	r3, [r0, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4718      	bx	r3
    }
 8001e26:	4618      	mov	r0, r3
 8001e28:	4770      	bx	lr
	...

08001e2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001e2c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001e32:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001e34:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001e38:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001e3a:	428c      	cmp	r4, r1
 8001e3c:	d009      	beq.n	8001e52 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001e3e:	b93a      	cbnz	r2, 8001e50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e40:	490a      	ldr	r1, [pc, #40]	; (8001e6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001e44:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e46:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001e48:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001e4a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e4c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001e4e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001e50:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d0fc      	beq.n	8001e50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e58:	4904      	ldr	r1, [pc, #16]	; (8001e6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e5a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e5c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e5e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001e60:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001e62:	2200      	movs	r2, #0
 8001e64:	e7f3      	b.n	8001e4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001e66:	bf00      	nop
 8001e68:	20016e80 	.word	0x20016e80
 8001e6c:	20016e7e 	.word	0x20016e7e
 8001e70:	20016e7c 	.word	0x20016e7c

08001e74 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	460d      	mov	r5, r1
 8001e78:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001e7a:	b935      	cbnz	r5, 8001e8a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001e7e:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001e86:	f029 fa77 	bl	802b378 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001e8a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001e8e:	3a00      	subs	r2, #0
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001e92:	bf18      	it	ne
 8001e94:	2201      	movne	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001e98:	6803      	ldr	r3, [r0, #0]
    }
 8001e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea2:	4718      	bx	r3
 8001ea4:	0802c9f0 	.word	0x0802c9f0
 8001ea8:	0802ca28 	.word	0x0802ca28
 8001eac:	0802ca76 	.word	0x0802ca76
 8001eb0:	20016e86 	.word	0x20016e86

08001eb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001eb4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	428b      	cmp	r3, r1
 8001ebc:	d803      	bhi.n	8001ec6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d905      	bls.n	8001ed2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001ec8:	219e      	movs	r1, #158	; 0x9e
 8001eca:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001ece:	f029 fa53 	bl	802b378 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001ed4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001ed8:	801a      	strh	r2, [r3, #0]
    }
 8001eda:	bd08      	pop	{r3, pc}
 8001edc:	20016e7c 	.word	0x20016e7c
 8001ee0:	20016e7e 	.word	0x20016e7e
 8001ee4:	0802cabb 	.word	0x0802cabb
 8001ee8:	0802cb1e 	.word	0x0802cb1e
 8001eec:	0802ca76 	.word	0x0802ca76
 8001ef0:	20016e82 	.word	0x20016e82
 8001ef4:	20016e84 	.word	0x20016e84

08001ef8 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001ef8:	4601      	mov	r1, r0
 8001efa:	b508      	push	{r3, lr}
        return instance;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <IdleTaskHook+0x14>)
 8001efe:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001f00:	b101      	cbz	r1, 8001f04 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001f02:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001f04:	f016 f844 	bl	8017f90 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001f08:	2001      	movs	r0, #1
 8001f0a:	bd08      	pop	{r3, pc}
 8001f0c:	20016e88 	.word	0x20016e88

08001f10 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200003ac 	.word	0x200003ac
 8001f24:	0802c9b8 	.word	0x0802c9b8

08001f28 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2200      	movs	r2, #0
{
 8001f2c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001f2e:	4608      	mov	r0, r1
 8001f30:	f005 f9fa 	bl	8007328 <osSemaphoreNew>
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001f36:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001f38:	b928      	cbnz	r0, 8001f46 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001f3c:	2128      	movs	r1, #40	; 0x28
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f40:	480a      	ldr	r0, [pc, #40]	; (8001f6c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001f42:	f029 fa19 	bl	802b378 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2104      	movs	r1, #4
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f005 fab2 	bl	80074b4 <osMessageQueueNew>
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001f52:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f54:	b918      	cbnz	r0, 8001f5e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001f5c:	e7f0      	b.n	8001f40 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001f5e:	bd08      	pop	{r3, pc}
 8001f60:	200003bc 	.word	0x200003bc
 8001f64:	0802cc3c 	.word	0x0802cc3c
 8001f68:	0802cc85 	.word	0x0802cc85
 8001f6c:	0802ccb4 	.word	0x0802ccb4
 8001f70:	200003b8 	.word	0x200003b8
 8001f74:	0802ccfd 	.word	0x0802ccfd

08001f78 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f005 ba28 	b.w	80073d4 <osSemaphoreAcquire>
 8001f84:	200003bc 	.word	0x200003bc

08001f88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001f88:	4b01      	ldr	r3, [pc, #4]	; (8001f90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f005 ba5c 	b.w	8007448 <osSemaphoreRelease>
 8001f90:	200003bc 	.word	0x200003bc

08001f94 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001f96:	2100      	movs	r1, #0
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f005 ba1b 	b.w	80073d4 <osSemaphoreAcquire>
 8001f9e:	bf00      	nop
 8001fa0:	200003bc 	.word	0x200003bc

08001fa4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001fa4:	f7ff bff0 	b.w	8001f88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001fa8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001fac:	4903      	ldr	r1, [pc, #12]	; (8001fbc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6800      	ldr	r0, [r0, #0]
 8001fb2:	f005 bac5 	b.w	8007540 <osMessageQueuePut>
 8001fb6:	bf00      	nop
 8001fb8:	200003b8 	.word	0x200003b8
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001fc0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4c07      	ldr	r4, [pc, #28]	; (8001fe4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001fc6:	a901      	add	r1, sp, #4
 8001fc8:	461a      	mov	r2, r3
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	f005 fafa 	bl	80075c4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	a901      	add	r1, sp, #4
 8001fd8:	6820      	ldr	r0, [r4, #0]
 8001fda:	f005 faf3 	bl	80075c4 <osMessageQueueGet>
}
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200003b8 	.word	0x200003b8

08001fe8 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001fe8:	6803      	ldr	r3, [r0, #0]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	4718      	bx	r3

08001fee <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001fee:	2001      	movs	r0, #1
 8001ff0:	4770      	bx	lr

08001ff2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001ff2:	6803      	ldr	r3, [r0, #0]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	4718      	bx	r3

08001ff8 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001ffa:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
 8002004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002006:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800200a:	9201      	str	r2, [sp, #4]
 800200c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002014:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800201c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <_ZN8STM32DMA10initializeEv+0x3c>)
 8002020:	4a05      	ldr	r2, [pc, #20]	; (8002038 <_ZN8STM32DMA10initializeEv+0x40>)
 8002022:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002024:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <_ZN8STM32DMA10initializeEv+0x44>)
 800202a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 800202c:	b002      	add	sp, #8
 800202e:	4770      	bx	lr
 8002030:	40023800 	.word	0x40023800
 8002034:	2000017c 	.word	0x2000017c
 8002038:	08002081 	.word	0x08002081
 800203c:	e000e100 	.word	0xe000e100

08002040 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002040:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002044:	4770      	bx	lr
	...

08002048 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800204e:	6003      	str	r3, [r0, #0]
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <_ZN8STM32DMAD1Ev+0x1c>)
 8002052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002056:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800205a:	f3bf 8f6f 	isb	sy
}
 800205e:	4770      	bx	lr
 8002060:	0802ce98 	.word	0x0802ce98
 8002064:	e000e100 	.word	0xe000e100

08002068 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002068:	b510      	push	{r4, lr}
 800206a:	4604      	mov	r4, r0
}
 800206c:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002070:	f7ff ffea 	bl	8002048 <_ZN8STM32DMAD1Ev>
 8002074:	4620      	mov	r0, r4
 8002076:	f029 f950 	bl	802b31a <_ZdlPvj>
 800207a:	4620      	mov	r0, r4
 800207c:	bd10      	pop	{r4, pc}
	...

08002080 <DMA2D_XferCpltCallback>:
 8002080:	4b02      	ldr	r3, [pc, #8]	; (800208c <DMA2D_XferCpltCallback+0xc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002086:	6803      	ldr	r3, [r0, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4718      	bx	r3
 800208c:	20016e88 	.word	0x20016e88

08002090 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <_ZN8STM32DMAC1Ev+0x30>)
 8002096:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002098:	2600      	movs	r6, #0
 800209a:	4625      	mov	r5, r4
 800209c:	2260      	movs	r2, #96	; 0x60
 800209e:	6060      	str	r0, [r4, #4]
 80020a0:	7226      	strb	r6, [r4, #8]
 80020a2:	7266      	strb	r6, [r4, #9]
 80020a4:	f845 3b20 	str.w	r3, [r5], #32
 80020a8:	4629      	mov	r1, r5
 80020aa:	f016 f8c5 	bl	8018238 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80020ae:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 80020b2:	60ee      	str	r6, [r5, #12]
 80020b4:	3524      	adds	r5, #36	; 0x24
 80020b6:	42ab      	cmp	r3, r5
 80020b8:	d1fb      	bne.n	80020b2 <_ZN8STM32DMAC1Ev+0x22>
}
 80020ba:	4620      	mov	r0, r4
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
 80020be:	bf00      	nop
 80020c0:	0802ce98 	.word	0x0802ce98

080020c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80020c4:	b508      	push	{r3, lr}
    switch (format)
 80020c6:	290b      	cmp	r1, #11
 80020c8:	d80b      	bhi.n	80020e2 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 80020ca:	e8df f001 	tbb	[pc, r1]
 80020ce:	0612      	.short	0x0612
 80020d0:	0a0a0a10 	.word	0x0a0a0a10
 80020d4:	0808080a 	.word	0x0808080a
 80020d8:	0808      	.short	0x0808
 80020da:	2001      	movs	r0, #1
}
 80020dc:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80020de:	2005      	movs	r0, #5
        break;
 80020e0:	e7fc      	b.n	80020dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80020e4:	2166      	movs	r1, #102	; 0x66
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 80020ea:	f029 f945 	bl	802b378 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80020ee:	2000      	movs	r0, #0
 80020f0:	e7f4      	b.n	80020dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80020f2:	2002      	movs	r0, #2
    return dma2dColorMode;
 80020f4:	e7f2      	b.n	80020dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80020f6:	bf00      	nop
 80020f8:	0802cd3f 	.word	0x0802cd3f
 80020fc:	0802cd5a 	.word	0x0802cd5a
 8002100:	0802cda4 	.word	0x0802cda4

08002104 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002104:	b508      	push	{r3, lr}
    switch (format)
 8002106:	290a      	cmp	r1, #10
 8002108:	d809      	bhi.n	800211e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800210a:	e8df f001 	tbb	[pc, r1]
 800210e:	0610      	.short	0x0610
 8002110:	0808080e 	.word	0x0808080e
 8002114:	06060608 	.word	0x06060608
 8002118:	06          	.byte	0x06
 8002119:	00          	.byte	0x00
 800211a:	2001      	movs	r0, #1
}
 800211c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002120:	2187      	movs	r1, #135	; 0x87
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002126:	f029 f927 	bl	802b378 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800212a:	2000      	movs	r0, #0
 800212c:	e7f6      	b.n	800211c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800212e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002130:	e7f4      	b.n	800211c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002132:	bf00      	nop
 8002134:	0802cd3f 	.word	0x0802cd3f
 8002138:	0802cdeb 	.word	0x0802cdeb
 800213c:	0802cda4 	.word	0x0802cda4

08002140 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002144:	7f4f      	ldrb	r7, [r1, #29]
{
 8002146:	460c      	mov	r4, r1
 8002148:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800214a:	4639      	mov	r1, r7
 800214c:	f7ff ffba 	bl	80020c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002150:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002154:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002156:	4648      	mov	r0, r9
 8002158:	4641      	mov	r1, r8
 800215a:	f7ff ffb3 	bl	80020c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800215e:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002160:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002162:	4648      	mov	r0, r9
 8002164:	f7ff ffce 	bl	8002104 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002168:	8aa1      	ldrh	r1, [r4, #20]
 800216a:	8b62      	ldrh	r2, [r4, #26]
 800216c:	4b42      	ldr	r3, [pc, #264]	; (8002278 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800216e:	1a52      	subs	r2, r2, r1
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002172:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002174:	8b22      	ldrh	r2, [r4, #24]
 8002176:	1a52      	subs	r2, r2, r1
 8002178:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800217a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800217c:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800217e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002182:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002184:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002186:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002188:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800218a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800218c:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800218e:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8002192:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002194:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002198:	d026      	beq.n	80021e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 800219a:	d810      	bhi.n	80021be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 800219c:	2920      	cmp	r1, #32
 800219e:	ea45 0402 	orr.w	r4, r5, r2
 80021a2:	d062      	beq.n	800226a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80021a4:	2940      	cmp	r1, #64	; 0x40
 80021a6:	d060      	beq.n	800226a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80021a8:	2904      	cmp	r1, #4
 80021aa:	d05e      	beq.n	800226a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021ac:	432a      	orrs	r2, r5
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80021b0:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021b6:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80021b8:	d05b      	beq.n	8002272 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80021ba:	4a30      	ldr	r2, [pc, #192]	; (800227c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80021bc:	e040      	b.n	8002240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80021be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80021c2:	d007      	beq.n	80021d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80021c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80021c8:	d1f0      	bne.n	80021ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021ce:	f042 0209 	orr.w	r2, r2, #9
 80021d2:	e003      	b.n	80021dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021d8:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021dc:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80021de:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80021e0:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021e2:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e4:	6158      	str	r0, [r3, #20]
 80021e6:	e02a      	b.n	800223e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80021e8:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021ea:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80021ec:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80021f2:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021f4:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 80021f6:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021f8:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021fa:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 80021fc:	b142      	cbz	r2, 8002210 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80021fe:	2a01      	cmp	r2, #1
 8002200:	d021      	beq.n	8002246 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002204:	f240 1111 	movw	r1, #273	; 0x111
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800220a:	481f      	ldr	r0, [pc, #124]	; (8002288 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800220c:	f029 f8b4 	bl	802b378 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002210:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8002212:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002214:	8861      	ldrh	r1, [r4, #2]
 8002216:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800221a:	3901      	subs	r1, #1
 800221c:	f022 0210 	bic.w	r2, r2, #16
 8002220:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002224:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	f042 0220 	orr.w	r2, r2, #32
 800222e:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	0692      	lsls	r2, r2, #26
 8002234:	d4fc      	bmi.n	8002230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002236:	2210      	movs	r2, #16
 8002238:	609a      	str	r2, [r3, #8]
            if(blend)
 800223a:	2800      	cmp	r0, #0
 800223c:	d0bd      	beq.n	80021ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002240:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8002242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002246:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002248:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800224c:	69d9      	ldr	r1, [r3, #28]
 800224e:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 8002252:	bf18      	it	ne
 8002254:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002256:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800225a:	f022 0210 	bic.w	r2, r2, #16
 800225e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002262:	f042 0210 	orr.w	r2, r2, #16
 8002266:	61da      	str	r2, [r3, #28]
                break;
 8002268:	e7dd      	b.n	8002226 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800226a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800226e:	61dc      	str	r4, [r3, #28]
 8002270:	e7b7      	b.n	80021e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002272:	f240 2201 	movw	r2, #513	; 0x201
 8002276:	e7e3      	b.n	8002240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002278:	4002b000 	.word	0x4002b000
 800227c:	00010201 	.word	0x00010201
 8002280:	0802ce36 	.word	0x0802ce36
 8002284:	0802ce50 	.word	0x0802ce50
 8002288:	0802cda4 	.word	0x0802cda4
 800228c:	00020201 	.word	0x00020201

08002290 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002294:	7f89      	ldrb	r1, [r1, #30]
 8002296:	f7ff ff35 	bl	8002104 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800229c:	8aa6      	ldrh	r6, [r4, #20]
 800229e:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022a0:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022a2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022a6:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022a8:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80022aa:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022ac:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022ae:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80022b2:	6826      	ldr	r6, [r4, #0]
 80022b4:	68e1      	ldr	r1, [r4, #12]
 80022b6:	2e08      	cmp	r6, #8
 80022b8:	d10d      	bne.n	80022d6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022ba:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022bc:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80022be:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80022c2:	7f20      	ldrb	r0, [r4, #28]
 80022c4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80022c8:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80022ca:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80022cc:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022ce:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022d0:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80022d2:	601a      	str	r2, [r3, #0]
    }
}
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80022d6:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80022d8:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80022da:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 80022dc:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80022de:	0a0a      	lsrs	r2, r1, #8
 80022e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80022e4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80022e8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80022ec:	4302      	orrs	r2, r0
 80022ee:	430a      	orrs	r2, r1
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 80022f4:	e7ed      	b.n	80022d2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80022f6:	bf00      	nop
 80022f8:	4002b000 	.word	0x4002b000
 80022fc:	00010009 	.word	0x00010009
 8002300:	00020201 	.word	0x00020201
 8002304:	00030201 	.word	0x00030201

08002308 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	07d2      	lsls	r2, r2, #31
 800230e:	d4fc      	bmi.n	800230a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002310:	2223      	movs	r2, #35	; 0x23
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	4002b000 	.word	0x4002b000

0800231c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 800231c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800231e:	4c10      	ldr	r4, [pc, #64]	; (8002360 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8002320:	6825      	ldr	r5, [r4, #0]
 8002322:	07ed      	lsls	r5, r5, #31
 8002324:	d4fc      	bmi.n	8002320 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002326:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002328:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800232a:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800232c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800232e:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8002332:	f04f 0502 	mov.w	r5, #2
 8002336:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002338:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800233a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 800233c:	d00a      	beq.n	8002354 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800233e:	4909      	ldr	r1, [pc, #36]	; (8002364 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002340:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002342:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002346:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 800234a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800234c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800234e:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002350:	6023      	str	r3, [r4, #0]
    }
}
 8002352:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002354:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 800235c:	e7f8      	b.n	8002350 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 800235e:	bf00      	nop
 8002360:	4002b000 	.word	0x4002b000
 8002364:	00010009 	.word	0x00010009
 8002368:	00020001 	.word	0x00020001
 800236c:	00030001 	.word	0x00030001

08002370 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:

    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);

    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8002370:	6940      	ldr	r0, [r0, #20]
 8002372:	4770      	bx	lr

08002374 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:

    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8002374:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8002378:	4770      	bx	lr

0800237a <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800237a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800237c:	b923      	cbnz	r3, 8002388 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 800237e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002380:	3800      	subs	r0, #0
 8002382:	bf18      	it	ne
 8002384:	2001      	movne	r0, #1
 8002386:	4770      	bx	lr
 8002388:	2001      	movs	r0, #1
}
 800238a:	4770      	bx	lr

0800238c <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800238c:	6880      	ldr	r0, [r0, #8]
 800238e:	4770      	bx	lr

08002390 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002390:	3004      	adds	r0, #4
{
 8002392:	b510      	push	{r4, lr}
 8002394:	460c      	mov	r4, r1
    *data = videoInfo;
 8002396:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 800239c:	bd10      	pop	{r4, pc}

0800239e <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 800239e:	4770      	bx	lr

080023a0 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80023a0:	b508      	push	{r3, lr}
    assert(0);
 80023a2:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80023a4:	f240 210f 	movw	r1, #527	; 0x20f
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80023aa:	4803      	ldr	r0, [pc, #12]	; (80023b8 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80023ac:	f028 ffe4 	bl	802b378 <__assert_func>
 80023b0:	0802cee0 	.word	0x0802cee0
 80023b4:	0802e953 	.word	0x0802e953
 80023b8:	0802cf3b 	.word	0x0802cf3b

080023bc <_ZN20SoftwareMJPEGDecoderD0Ev>:
 80023bc:	b510      	push	{r4, lr}
 80023be:	4604      	mov	r4, r0
 80023c0:	2148      	movs	r1, #72	; 0x48
 80023c2:	f028 ffaa 	bl	802b31a <_ZdlPvj>
 80023c6:	4620      	mov	r0, r4
 80023c8:	bd10      	pop	{r4, pc}
	...

080023cc <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80023cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023d0:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80023d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80023d4:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80023d8:	4605      	mov	r5, r0
 80023da:	460e      	mov	r6, r1
 80023dc:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d052      	beq.n	8002488 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80023e2:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 80023e4:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80023e6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002490 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80023ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 80023ee:	f00d fa71 	bl	800f8d4 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 80023f2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80023f6:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 80023f8:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 80023fa:	a824      	add	r0, sp, #144	; 0x90
 80023fc:	f007 f98b 	bl	8009716 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002400:	463a      	mov	r2, r7
 8002402:	4631      	mov	r1, r6
 8002404:	a824      	add	r0, sp, #144	; 0x90
 8002406:	f008 f91f 	bl	800a648 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 800240a:	2101      	movs	r1, #1
 800240c:	a824      	add	r0, sp, #144	; 0x90
 800240e:	f007 fa8b 	bl	8009928 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 8002412:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8002414:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 8002416:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 800241a:	f007 fb29 	bl	8009a70 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 800241e:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 8002422:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002424:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002428:	429e      	cmp	r6, r3
 800242a:	bf28      	it	cs
 800242c:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 800242e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002430:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002432:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002436:	bf28      	it	cs
 8002438:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 800243a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 800243c:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 8002440:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002442:	429f      	cmp	r7, r3
 8002444:	d91a      	bls.n	800247c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002446:	2201      	movs	r2, #1
 8002448:	a901      	add	r1, sp, #4
 800244a:	a824      	add	r0, sp, #144	; 0x90
 800244c:	f007 fb59 	bl	8009b02 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 8002450:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002452:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 8002456:	4298      	cmp	r0, r3
 8002458:	d90e      	bls.n	8002478 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800245a:	7859      	ldrb	r1, [r3, #1]
 800245c:	789a      	ldrb	r2, [r3, #2]
 800245e:	00c9      	lsls	r1, r1, #3
 8002460:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 8002464:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002468:	430a      	orrs	r2, r1
 800246a:	f813 1b03 	ldrb.w	r1, [r3], #3
 800246e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 8002472:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 8002476:	e7ee      	b.n	8002456 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002478:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 800247a:	e7e1      	b.n	8002440 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 800247c:	a824      	add	r0, sp, #144	; 0x90
 800247e:	f007 fa75 	bl	800996c <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8002482:	a824      	add	r0, sp, #144	; 0x90
 8002484:	f007 f994 	bl	80097b0 <jpeg_destroy_decompress>
}
 8002488:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800248c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002490:	fffff800 	.word	0xfffff800

08002494 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 8002496:	6002      	str	r2, [r0, #0]
 8002498:	2200      	movs	r2, #0
 800249a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800249e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80024a2:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 80024a6:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80024aa:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 80024ae:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80024b2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 80024b6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80024ba:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 80024be:	4770      	bx	lr
 80024c0:	0802d218 	.word	0x0802d218

080024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 80024c4:	b420      	push	{r5}
 80024c6:	460d      	mov	r5, r1
 80024c8:	4611      	mov	r1, r2
 80024ca:	461a      	mov	r2, r3
    if (reader != 0)
 80024cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80024ce:	b13b      	cbz	r3, 80024e0 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80024d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80024d4:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80024d6:	4428      	add	r0, r5
}
 80024d8:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80024dc:	f029 bc26 	b.w	802bd2c <strncmp>
        src = (const char*)movieData + offset;
 80024e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80024e2:	e7f8      	b.n	80024d6 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

080024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80024e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80024e6:	b510      	push	{r4, lr}
    if (reader != 0)
 80024e8:	b173      	cbz	r3, 8002508 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80024ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80024ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 80024ee:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80024f0:	1853      	adds	r3, r2, r1
 80024f2:	5c52      	ldrb	r2, [r2, r1]
 80024f4:	7898      	ldrb	r0, [r3, #2]
 80024f6:	785c      	ldrb	r4, [r3, #1]
 80024f8:	0400      	lsls	r0, r0, #16
 80024fa:	78db      	ldrb	r3, [r3, #3]
 80024fc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002500:	4310      	orrs	r0, r2
 8002502:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002506:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002508:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800250a:	5858      	ldr	r0, [r3, r1]
 800250c:	e7fb      	b.n	8002506 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

0800250e <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800250e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002510:	b143      	cbz	r3, 8002524 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002512:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002514:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002516:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002518:	185a      	adds	r2, r3, r1
 800251a:	5c58      	ldrb	r0, [r3, r1]
 800251c:	7852      	ldrb	r2, [r2, #1]
 800251e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002522:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8002524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002526:	5a58      	ldrh	r0, [r3, r1]
}
 8002528:	4770      	bx	lr
	...

0800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	4604      	mov	r4, r0
    if (reader != 0)
 8002530:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8002532:	460d      	mov	r5, r1
 8002534:	4616      	mov	r6, r2
    if (reader != 0)
 8002536:	b1d8      	cbz	r0, 8002570 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800253a:	4293      	cmp	r3, r2
 800253c:	d208      	bcs.n	8002550 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800253e:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 8002542:	2168      	movs	r1, #104	; 0x68
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002546:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 800254c:	f028 ff14 	bl	802b378 <__assert_func>
        reader->seek(offset);
 8002550:	6803      	ldr	r3, [r0, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002556:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002558:	4632      	mov	r2, r6
 800255a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4798      	blx	r3
 8002562:	b910      	cbnz	r0, 800256a <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002564:	230d      	movs	r3, #13
 8002566:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 800256a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 800256c:	6425      	str	r5, [r4, #64]	; 0x40
}
 800256e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002570:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002572:	4408      	add	r0, r1
 8002574:	e7fb      	b.n	800256e <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 8002576:	bf00      	nop
 8002578:	0802cfa1 	.word	0x0802cfa1
 800257c:	0802cf3b 	.word	0x0802cf3b
 8002580:	0802cf8e 	.word	0x0802cf8e

08002584 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002588:	6943      	ldr	r3, [r0, #20]
{
 800258a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800258c:	b92b      	cbnz	r3, 800259a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002590:	21ad      	movs	r1, #173	; 0xad
 8002592:	4a23      	ldr	r2, [pc, #140]	; (8002620 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002594:	4823      	ldr	r0, [pc, #140]	; (8002624 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 8002596:	f028 feef 	bl	802b378 <__assert_func>
    readData(currentMovieOffset, 8);
 800259a:	2208      	movs	r2, #8
 800259c:	6981      	ldr	r1, [r0, #24]
 800259e:	f7ff ffc5 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80025a2:	69a1      	ldr	r1, [r4, #24]
 80025a4:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80025a6:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80025aa:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80025ac:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80025b0:	f7ff ff98 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80025b4:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80025b6:	69a1      	ldr	r1, [r4, #24]
 80025b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025ba:	440d      	add	r5, r1
 80025bc:	f105 0208 	add.w	r2, r5, #8
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d224      	bcs.n	800260e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 80025c4:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80025c6:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 80025c8:	2208      	movs	r2, #8
 80025ca:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80025cc:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 80025d0:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80025d2:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80025d4:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80025d6:	f7ff ffa9 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 80025da:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80025de:	4620      	mov	r0, r4
 80025e0:	4641      	mov	r1, r8
 80025e2:	f7ff ff94 	bl	800250e <_ZN20SoftwareMJPEGDecoder6getU16Em>
 80025e6:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80025e8:	f108 0104 	add.w	r1, r8, #4
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff ff79 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80025f2:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 80025f4:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80025f6:	d1de      	bne.n	80025b6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80025f8:	f108 0102 	add.w	r1, r8, #2
 80025fc:	4620      	mov	r0, r4
 80025fe:	f7ff ff86 	bl	800250e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002602:	42b8      	cmp	r0, r7
 8002604:	d1d7      	bne.n	80025b6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 8002606:	2d00      	cmp	r5, #0
 8002608:	d0d5      	beq.n	80025b6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 800260a:	2001      	movs	r0, #1
 800260c:	e004      	b.n	8002618 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 800260e:	2301      	movs	r3, #1
    return false;
 8002610:	2000      	movs	r0, #0
    frameNumber = 1;
 8002612:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002614:	6a23      	ldr	r3, [r4, #32]
 8002616:	61a3      	str	r3, [r4, #24]
}
 8002618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800261c:	0802cfe3 	.word	0x0802cfe3
 8002620:	0802d02c 	.word	0x0802d02c
 8002624:	0802cf3b 	.word	0x0802cf3b

08002628 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800262c:	4604      	mov	r4, r0
 800262e:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002632:	468a      	mov	sl, r1
 8002634:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8002636:	6981      	ldr	r1, [r0, #24]
 8002638:	2208      	movs	r2, #8
{
 800263a:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 800263c:	f7ff ff76 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002640:	69a7      	ldr	r7, [r4, #24]
 8002642:	4620      	mov	r0, r4
 8002644:	1d39      	adds	r1, r7, #4
 8002646:	f7ff ff4d 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800264a:	f107 0108 	add.w	r1, r7, #8
 800264e:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002650:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff ff6a 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002658:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800265a:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 800265c:	b933      	cbnz	r3, 800266c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 8002660:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8002664:	4a3b      	ldr	r2, [pc, #236]	; (8002754 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 8002666:	483c      	ldr	r0, [pc, #240]	; (8002758 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 8002668:	f028 fe86 	bl	802b378 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800266c:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 800266e:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002670:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002674:	f00d f92e 	bl	800f8d4 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002678:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800267c:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 800267e:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002680:	a824      	add	r0, sp, #144	; 0x90
 8002682:	f007 f848 	bl	8009716 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002686:	4632      	mov	r2, r6
 8002688:	4639      	mov	r1, r7
 800268a:	a824      	add	r0, sp, #144	; 0x90
 800268c:	f007 ffdc 	bl	800a648 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 8002690:	2101      	movs	r1, #1
 8002692:	a824      	add	r0, sp, #144	; 0x90
 8002694:	f007 f948 	bl	8009928 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 8002698:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 800269a:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 800269c:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 80026a0:	f007 f9e6 	bl	8009a70 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 80026a4:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 80026a8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80026aa:	42b3      	cmp	r3, r6
 80026ac:	d205      	bcs.n	80026ba <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80026ae:	2201      	movs	r2, #1
 80026b0:	a901      	add	r1, sp, #4
 80026b2:	a824      	add	r0, sp, #144	; 0x90
 80026b4:	f007 fa25 	bl	8009b02 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 80026b8:	e7f6      	b.n	80026a8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 80026ba:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 80026be:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80026c2:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 80026c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 80026c8:	fb08 5506 	mla	r5, r8, r6, r5
 80026cc:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 80026ce:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80026d2:	f8df b088 	ldr.w	fp, [pc, #136]	; 800275c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 80026d6:	b23f      	sxth	r7, r7
 80026d8:	429f      	cmp	r7, r3
 80026da:	bf28      	it	cs
 80026dc:	461f      	movcs	r7, r3
 80026de:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80026e2:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 80026e6:	441e      	add	r6, r3
 80026e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 80026ea:	b236      	sxth	r6, r6
 80026ec:	429e      	cmp	r6, r3
 80026ee:	bf28      	it	cs
 80026f0:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 80026f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80026f4:	42b3      	cmp	r3, r6
 80026f6:	d21f      	bcs.n	8002738 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80026f8:	2201      	movs	r2, #1
 80026fa:	a901      	add	r1, sp, #4
 80026fc:	a824      	add	r0, sp, #144	; 0x90
 80026fe:	f007 fa00 	bl	8009b02 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 8002702:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002704:	4649      	mov	r1, r9
 8002706:	4452      	add	r2, sl
 8002708:	42b9      	cmp	r1, r7
 800270a:	f102 0203 	add.w	r2, r2, #3
 800270e:	d211      	bcs.n	8002734 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002710:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8002714:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8002718:	00c0      	lsls	r0, r0, #3
 800271a:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 800271e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002722:	4303      	orrs	r3, r0
 8002724:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8002728:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 800272c:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 8002730:	3101      	adds	r1, #1
 8002732:	e7e9      	b.n	8002708 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002734:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 8002736:	e7dc      	b.n	80026f2 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 8002738:	a824      	add	r0, sp, #144	; 0x90
 800273a:	f007 f917 	bl	800996c <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800273e:	a824      	add	r0, sp, #144	; 0x90
 8002740:	f007 f836 	bl	80097b0 <jpeg_destroy_decompress>
}
 8002744:	2001      	movs	r0, #1
 8002746:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274e:	bf00      	nop
 8002750:	0802d05f 	.word	0x0802d05f
 8002754:	0802d0b5 	.word	0x0802d0b5
 8002758:	0802cf3b 	.word	0x0802cf3b
 800275c:	fffff800 	.word	0xfffff800

08002760 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002760:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002762:	6803      	ldr	r3, [r0, #0]
 8002764:	bf38      	it	cc
 8002766:	2101      	movcc	r1, #1
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800276a:	b570      	push	{r4, r5, r6, lr}
 800276c:	460d      	mov	r5, r1
 800276e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002770:	4798      	blx	r3
 8002772:	42a8      	cmp	r0, r5
 8002774:	d204      	bcs.n	8002780 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	4620      	mov	r0, r4
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	4798      	blx	r3
 800277e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002780:	1e6b      	subs	r3, r5, #1
 8002782:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002784:	2210      	movs	r2, #16
 8002786:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002788:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 800278c:	f106 0108 	add.w	r1, r6, #8
 8002790:	f7ff fecc 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002794:	f106 0110 	add.w	r1, r6, #16
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff fea3 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800279e:	6a23      	ldr	r3, [r4, #32]
 80027a0:	3b04      	subs	r3, #4
 80027a2:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80027a4:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080027ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 80027ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 80027b0:	2100      	movs	r1, #0
{
 80027b2:	4604      	mov	r4, r0
    readData(0, 72);
 80027b4:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 80027b6:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80027b8:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 80027bc:	f7ff feb6 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80027c0:	69a7      	ldr	r7, [r4, #24]
 80027c2:	2304      	movs	r3, #4
 80027c4:	4a63      	ldr	r2, [pc, #396]	; (8002954 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80027c6:	4639      	mov	r1, r7
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fe7b 	bl	80024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027ce:	b140      	cbz	r0, 80027e2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 80027d0:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80027d2:	4a61      	ldr	r2, [pc, #388]	; (8002958 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80027d4:	21f5      	movs	r1, #245	; 0xf5
        lastError = AVI_ERROR_NOT_RIFF;
 80027d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 80027da:	4b60      	ldr	r3, [pc, #384]	; (800295c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80027dc:	4860      	ldr	r0, [pc, #384]	; (8002960 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80027de:	f028 fdcb 	bl	802b378 <__assert_func>
    currentMovieOffset += 8;
 80027e2:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80027e6:	2304      	movs	r3, #4
 80027e8:	4a5e      	ldr	r2, [pc, #376]	; (8002964 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80027ea:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80027ec:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80027ee:	f7ff fe69 	bl	80024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027f2:	b130      	cbz	r0, 8002802 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80027f4:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80027f6:	4a58      	ldr	r2, [pc, #352]	; (8002958 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80027f8:	21fd      	movs	r1, #253	; 0xfd
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80027fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 80027fe:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002800:	e7ec      	b.n	80027dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002802:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002806:	2304      	movs	r3, #4
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800280a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800280c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800280e:	f7ff fe59 	bl	80024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002812:	4606      	mov	r6, r0
 8002814:	b138      	cbz	r0, 8002826 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002816:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002818:	4a4f      	ldr	r2, [pc, #316]	; (8002958 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800281a:	f44f 7182 	mov.w	r1, #260	; 0x104
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800281e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 8002822:	4b53      	ldr	r3, [pc, #332]	; (8002970 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002824:	e7da      	b.n	80027dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002826:	f107 0110 	add.w	r1, r7, #16
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fe5a 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002830:	4605      	mov	r5, r0
 8002832:	b920      	cbnz	r0, 800283e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002836:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800283a:	4a47      	ldr	r2, [pc, #284]	; (8002958 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800283c:	e7ce      	b.n	80027dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800283e:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 8002842:	2304      	movs	r3, #4
 8002844:	4a4c      	ldr	r2, [pc, #304]	; (8002978 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002846:	4620      	mov	r0, r4
 8002848:	4641      	mov	r1, r8
 800284a:	f7ff fe3b 	bl	80024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800284e:	2800      	cmp	r0, #0
 8002850:	d04b      	beq.n	80028ea <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002852:	2306      	movs	r3, #6
 8002854:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 8002858:	2304      	movs	r3, #4
 800285a:	4a48      	ldr	r2, [pc, #288]	; (800297c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800285c:	f107 0118 	add.w	r1, r7, #24
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff fe2f 	bl	80024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002866:	2800      	cmp	r0, #0
 8002868:	d041      	beq.n	80028ee <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800286a:	2307      	movs	r3, #7
 800286c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002870:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002872:	4f43      	ldr	r7, [pc, #268]	; (8002980 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002874:	220c      	movs	r2, #12
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7ff fe57 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800287e:	f105 0608 	add.w	r6, r5, #8
 8002882:	2304      	movs	r3, #4
 8002884:	463a      	mov	r2, r7
 8002886:	4620      	mov	r0, r4
 8002888:	4631      	mov	r1, r6
 800288a:	f7ff fe1b 	bl	80024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800288e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002892:	2800      	cmp	r0, #0
 8002894:	d04a      	beq.n	800292c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14a      	bne.n	8002930 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800289a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800289c:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800289e:	42ab      	cmp	r3, r5
 80028a0:	d84a      	bhi.n	8002938 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80028a2:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028a6:	1d29      	adds	r1, r5, #4
 80028a8:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80028aa:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028ac:	9101      	str	r1, [sp, #4]
 80028ae:	f7ff fe19 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80028b2:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80028b4:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028b6:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff fe13 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80028be:	4406      	add	r6, r0
    readData(listOffset, 4);
 80028c0:	2204      	movs	r2, #4
 80028c2:	4620      	mov	r0, r4
 80028c4:	4631      	mov	r1, r6
 80028c6:	f7ff fe31 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80028ca:	2304      	movs	r3, #4
 80028cc:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80028ce:	4631      	mov	r1, r6
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fdf7 	bl	80024c4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d139      	bne.n	800294e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 80028da:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80028dc:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80028de:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80028e0:	69a3      	ldr	r3, [r4, #24]
 80028e2:	6223      	str	r3, [r4, #32]
}
 80028e4:	b002      	add	sp, #8
 80028e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80028ea:	2601      	movs	r6, #1
 80028ec:	e7b4      	b.n	8002858 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 80028ee:	2e00      	cmp	r6, #0
 80028f0:	d0be      	beq.n	8002870 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80028f2:	f107 0120 	add.w	r1, r7, #32
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff fdf4 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80028fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002900:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002904:	fbb0 f0f3 	udiv	r0, r0, r3
 8002908:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800290a:	4620      	mov	r0, r4
 800290c:	f7ff fdea 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002910:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002914:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff fde4 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800291c:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002920:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff fdde 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002928:	6120      	str	r0, [r4, #16]
 800292a:	e7a1      	b.n	8002870 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0b8      	beq.n	80028a2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002930:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002932:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002936:	e7d5      	b.n	80028e4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff fdd3 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800293e:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002940:	220c      	movs	r2, #12
        listOffset += listSize;
 8002942:	4405      	add	r5, r0
        readData(listOffset, 12);
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7ff fdf0 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800294c:	e797      	b.n	800287e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800294e:	230b      	movs	r3, #11
 8002950:	e7ef      	b.n	8002932 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002952:	bf00      	nop
 8002954:	0802d10f 	.word	0x0802d10f
 8002958:	0802d12d 	.word	0x0802d12d
 800295c:	0802d114 	.word	0x0802d114
 8002960:	0802cf3b 	.word	0x0802cf3b
 8002964:	0802d15a 	.word	0x0802d15a
 8002968:	0802d15f 	.word	0x0802d15f
 800296c:	0802d177 	.word	0x0802d177
 8002970:	0802d17c 	.word	0x0802d17c
 8002974:	0802d192 	.word	0x0802d192
 8002978:	0802d19e 	.word	0x0802d19e
 800297c:	0802d1a3 	.word	0x0802d1a3
 8002980:	0802d1a8 	.word	0x0802d1a8
 8002984:	0802d1ad 	.word	0x0802d1ad

08002988 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002988:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 800298c:	2200      	movs	r2, #0
 800298e:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002990:	f7ff bf0c 	b.w	80027ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002994 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002994:	b510      	push	{r4, lr}
    movieData = 0;
 8002996:	2300      	movs	r3, #0
{
 8002998:	4604      	mov	r4, r0
 800299a:	4608      	mov	r0, r1
    movieData = 0;
 800299c:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800299e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80029a0:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4798      	blx	r3
 80029a6:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 80029a8:	4620      	mov	r0, r4
}
 80029aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80029ae:	f7ff befd 	b.w	80027ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080029b2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80029b2:	b4f0      	push	{r4, r5, r6, r7}
 80029b4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80029b8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 80029bc:	b12a      	cbz	r2, 80029ca <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80029be:	b123      	cbz	r3, 80029ca <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 80029c0:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 80029c4:	bcf0      	pop	{r4, r5, r6, r7}
 80029c6:	f7ff bd01 	b.w	80023cc <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 80029ca:	bcf0      	pop	{r4, r5, r6, r7}
 80029cc:	4770      	bx	lr
	...

080029d0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80029d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029d4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80029d6:	6943      	ldr	r3, [r0, #20]
{
 80029d8:	4604      	mov	r4, r0
 80029da:	460f      	mov	r7, r1
 80029dc:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80029de:	b92b      	cbnz	r3, 80029ec <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80029e2:	217a      	movs	r1, #122	; 0x7a
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80029e6:	482b      	ldr	r0, [pc, #172]	; (8002a94 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 80029e8:	f028 fcc6 	bl	802b378 <__assert_func>
    readData(currentMovieOffset, 8);
 80029ec:	2208      	movs	r2, #8
 80029ee:	6981      	ldr	r1, [r0, #24]
 80029f0:	f7ff fd9c 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 80029f4:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80029f6:	4620      	mov	r0, r4
 80029f8:	f106 0a08 	add.w	sl, r6, #8
 80029fc:	1d31      	adds	r1, r6, #4
 80029fe:	f7ff fd71 	bl	80024e4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a04:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002a08:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d231      	bcs.n	8002a72 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002a0e:	4631      	mov	r1, r6
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff fd7c 	bl	800250e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002a16:	f243 0330 	movw	r3, #12336	; 0x3030
 8002a1a:	4298      	cmp	r0, r3
 8002a1c:	d11d      	bne.n	8002a5a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002a1e:	1cb1      	adds	r1, r6, #2
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff fd74 	bl	800250e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002a26:	f246 3364 	movw	r3, #25444	; 0x6364
 8002a2a:	4298      	cmp	r0, r3
 8002a2c:	d115      	bne.n	8002a5a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002a2e:	b1a5      	cbz	r5, 8002a5a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002a30:	462a      	mov	r2, r5
 8002a32:	4651      	mov	r1, sl
 8002a34:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002a36:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002a3a:	f7ff fd77 	bl	800252c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002a40:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002a42:	462a      	mov	r2, r5
 8002a44:	4620      	mov	r0, r4
 8002a46:	f8cd 8000 	str.w	r8, [sp]
 8002a4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002a4e:	463b      	mov	r3, r7
 8002a50:	f7ff ffaf 	bl	80029b2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002a54:	6963      	ldr	r3, [r4, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002a5a:	69a3      	ldr	r3, [r4, #24]
 8002a5c:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8002a5e:	b18d      	cbz	r5, 8002a84 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8002a60:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002a62:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002a64:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002a66:	3301      	adds	r3, #1
 8002a68:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002a6c:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002a6e:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002a70:	d10a      	bne.n	8002a88 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8002a72:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8002a74:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8002a76:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002a78:	61a3      	str	r3, [r4, #24]
}
 8002a7a:	f080 0001 	eor.w	r0, r0, #1
 8002a7e:	b004      	add	sp, #16
 8002a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          currentMovieOffset += 8;
 8002a84:	3308      	adds	r3, #8
 8002a86:	e7eb      	b.n	8002a60 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e7f6      	b.n	8002a7a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002a8c:	0802cfe3 	.word	0x0802cfe3
 8002a90:	0802d1b2 	.word	0x0802d1b2
 8002a94:	0802cf3b 	.word	0x0802cf3b

08002a98 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002a98:	2001      	movs	r0, #1
 8002a9a:	4770      	bx	lr

08002a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002a9c:	200c      	movs	r0, #12
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002aa6:	3008      	adds	r0, #8
 8002aa8:	4770      	bx	lr

08002aaa <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002aaa:	230c      	movs	r3, #12
 8002aac:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ab0:	3008      	adds	r0, #8
 8002ab2:	4770      	bx	lr

08002ab4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	4770      	bx	lr

08002ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002ab8:	f641 60fc 	movw	r0, #7932	; 0x1efc
 8002abc:	4770      	bx	lr

08002abe <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002abe:	f641 63fc 	movw	r3, #7932	; 0x1efc
 8002ac2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ac6:	3008      	adds	r0, #8
 8002ac8:	4770      	bx	lr

08002aca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002aca:	f641 63fc 	movw	r3, #7932	; 0x1efc
 8002ace:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ad2:	3008      	adds	r0, #8
 8002ad4:	4770      	bx	lr

08002ad6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	4770      	bx	lr

08002ada <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002ada:	2010      	movs	r0, #16
 8002adc:	4770      	bx	lr

08002ade <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002ade:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002ae2:	3008      	adds	r0, #8
 8002ae4:	4770      	bx	lr

08002ae6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002ae6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002aea:	3008      	adds	r0, #8
 8002aec:	4770      	bx	lr

08002aee <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002aee:	4608      	mov	r0, r1
 8002af0:	f000 be8e 	b.w	8003810 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002af4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002af6:	b510      	push	{r4, lr}
 8002af8:	4604      	mov	r4, r0
 8002afa:	6003      	str	r3, [r0, #0]
 8002afc:	f013 ff36 	bl	801696c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002b00:	4620      	mov	r0, r4
 8002b02:	bd10      	pop	{r4, pc}
 8002b04:	0802d2c0 	.word	0x0802d2c0

08002b08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	f7ff fff2 	bl	8002af4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b10:	2114      	movs	r1, #20
 8002b12:	4620      	mov	r0, r4
 8002b14:	f028 fc01 	bl	802b31a <_ZdlPvj>
 8002b18:	4620      	mov	r0, r4
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	4604      	mov	r4, r0
 8002b22:	6003      	str	r3, [r0, #0]
 8002b24:	f013 ff22 	bl	801696c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002b28:	4620      	mov	r0, r4
 8002b2a:	bd10      	pop	{r4, pc}
 8002b2c:	0802d28c 	.word	0x0802d28c

08002b30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002b30:	b510      	push	{r4, lr}
 8002b32:	4604      	mov	r4, r0
 8002b34:	f7ff fff2 	bl	8002b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b38:	f641 7104 	movw	r1, #7940	; 0x1f04
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f028 fbec 	bl	802b31a <_ZdlPvj>
 8002b42:	4620      	mov	r0, r4
 8002b44:	bd10      	pop	{r4, pc}
	...

08002b48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	6003      	str	r3, [r0, #0]
 8002b50:	f013 ff0c 	bl	801696c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002b54:	4620      	mov	r0, r4
 8002b56:	bd10      	pop	{r4, pc}
 8002b58:	0802d258 	.word	0x0802d258

08002b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	4604      	mov	r4, r0
 8002b60:	f7ff fff2 	bl	8002b48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b64:	2118      	movs	r1, #24
 8002b66:	4620      	mov	r0, r4
 8002b68:	f028 fbd7 	bl	802b31a <_ZdlPvj>
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	bd10      	pop	{r4, pc}

08002b70 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <_ZN12FrontendHeapD1Ev+0x28>)
 8002b72:	b510      	push	{r4, lr}
 8002b74:	4604      	mov	r4, r0
 8002b76:	6003      	str	r3, [r0, #0]
 8002b78:	f500 50f9 	add.w	r0, r0, #7968	; 0x1f20
 8002b7c:	3010      	adds	r0, #16
 8002b7e:	f7ff ffb9 	bl	8002af4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b82:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002b86:	f7ff ffc9 	bl	8002b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b8a:	f104 0014 	add.w	r0, r4, #20
 8002b8e:	f7ff ffdb 	bl	8002b48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b92:	4620      	mov	r0, r4
 8002b94:	bd10      	pop	{r4, pc}
 8002b96:	bf00      	nop
 8002b98:	0802d2f4 	.word	0x0802d2f4

08002b9c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002b9c:	b508      	push	{r3, lr}
 8002b9e:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <__tcf_0+0xc>)
 8002ba0:	f7ff ffe6 	bl	8002b70 <_ZN12FrontendHeapD1Ev>
 8002ba4:	bd08      	pop	{r3, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200003c4 	.word	0x200003c4

08002bac <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002bac:	b510      	push	{r4, lr}
 8002bae:	4604      	mov	r4, r0
 8002bb0:	f7ff ffde 	bl	8002b70 <_ZN12FrontendHeapD1Ev>
 8002bb4:	f242 01a4 	movw	r1, #8356	; 0x20a4
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f028 fbae 	bl	802b31a <_ZdlPvj>
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	bd10      	pop	{r4, pc}
	...

08002bc4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002bc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002bc8:	f000 fcae 	bl	8003528 <_ZN14BitmapDatabase11getInstanceEv>
 8002bcc:	2400      	movs	r4, #0
 8002bce:	4605      	mov	r5, r0
 8002bd0:	f000 fcae 	bl	8003530 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	4622      	mov	r2, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	9400      	str	r4, [sp, #0]
 8002bde:	f01c fa83 	bl	801f0e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <touchgfx_init+0xb8>)
 8002be4:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002be6:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002be8:	4d26      	ldr	r5, [pc, #152]	; (8002c84 <touchgfx_init+0xc0>)
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f001 fa6a 	bl	80040c4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002bf0:	4825      	ldr	r0, [pc, #148]	; (8002c88 <touchgfx_init+0xc4>)
 8002bf2:	f01c f9e1 	bl	801efb8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002bf6:	782b      	ldrb	r3, [r5, #0]
 8002bf8:	f3bf 8f5b 	dmb	ish
 8002bfc:	07db      	lsls	r3, r3, #31
 8002bfe:	d436      	bmi.n	8002c6e <touchgfx_init+0xaa>
 8002c00:	4628      	mov	r0, r5
 8002c02:	f028 fb8c 	bl	802b31e <__cxa_guard_acquire>
 8002c06:	b390      	cbz	r0, 8002c6e <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002c08:	4c20      	ldr	r4, [pc, #128]	; (8002c8c <touchgfx_init+0xc8>)
 8002c0a:	4f21      	ldr	r7, [pc, #132]	; (8002c90 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002c0c:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <touchgfx_init+0xd0>)
 8002c0e:	f104 0014 	add.w	r0, r4, #20
 8002c12:	f107 0618 	add.w	r6, r7, #24
 8002c16:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	6060      	str	r0, [r4, #4]
 8002c1e:	f8c4 8008 	str.w	r8, [r4, #8]
 8002c22:	60e7      	str	r7, [r4, #12]
 8002c24:	6126      	str	r6, [r4, #16]
 8002c26:	f013 fea3 	bl	8016970 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <touchgfx_init+0xd4>)
 8002c2c:	4640      	mov	r0, r8
 8002c2e:	6163      	str	r3, [r4, #20]
 8002c30:	f013 fe9e 	bl	8016970 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <touchgfx_init+0xd8>)
 8002c36:	4638      	mov	r0, r7
 8002c38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c3a:	f013 fe99 	bl	8016970 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002c3e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <touchgfx_init+0xdc>)
 8002c44:	f603 7044 	addw	r0, r3, #3908	; 0xf44
 8002c48:	f8c3 2f30 	str.w	r2, [r3, #3888]	; 0xf30
 8002c4c:	f001 fab6 	bl	80041bc <_ZN5ModelC1Ev>
 8002c50:	4622      	mov	r2, r4
 8002c52:	f107 0114 	add.w	r1, r7, #20
 8002c56:	4630      	mov	r0, r6
 8002c58:	f001 faa6 	bl	80041a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f000 fdd7 	bl	8003810 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002c62:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <touchgfx_init+0xe0>)
 8002c64:	f028 fba6 	bl	802b3b4 <atexit>
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f028 fb64 	bl	802b336 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002c6e:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <touchgfx_init+0xe4>)
}
 8002c70:	b002      	add	sp, #8
 8002c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002c76:	f7ff b86b 	b.w	8001d50 <_ZN11TouchGFXHAL10initializeEv>
 8002c7a:	bf00      	nop
 8002c7c:	20016eec 	.word	0x20016eec
 8002c80:	20003288 	.word	0x20003288
 8002c84:	200003c0 	.word	0x200003c0
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	200003c4 	.word	0x200003c4
 8002c90:	200022f4 	.word	0x200022f4
 8002c94:	0802d2f4 	.word	0x0802d2f4
 8002c98:	0802d258 	.word	0x0802d258
 8002c9c:	0802d28c 	.word	0x0802d28c
 8002ca0:	0802d2c0 	.word	0x0802d2c0
 8002ca4:	08002b9d 	.word	0x08002b9d
 8002ca8:	2000320c 	.word	0x2000320c

08002cac <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002cac:	4770      	bx	lr
	...

08002cb0 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <touchgfx_taskEntry+0x8>)
 8002cb2:	f014 bc14 	b.w	80174de <_ZN8touchgfx3HAL9taskEntryEv>
 8002cb6:	bf00      	nop
 8002cb8:	2000320c 	.word	0x2000320c

08002cbc <_GLOBAL__sub_I_touchgfx_init>:
}
 8002cbc:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002cbe:	4e23      	ldr	r6, [pc, #140]	; (8002d4c <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002cc2:	4c24      	ldr	r4, [pc, #144]	; (8002d54 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002cc4:	4630      	mov	r0, r6
static LCD16bpp display;
 8002cc6:	4d24      	ldr	r5, [pc, #144]	; (8002d58 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002cc8:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002cca:	f7ff f9e1 	bl	8002090 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f01f fb16 	bl	8022300 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002cdc:	4820      	ldr	r0, [pc, #128]	; (8002d60 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002cde:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60
 8002ce2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002ce6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ce8:	60dc      	str	r4, [r3, #12]
 8002cea:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002cee:	491d      	ldr	r1, [pc, #116]	; (8002d64 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002cf0:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002cf4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002cf8:	6759      	str	r1, [r3, #116]	; 0x74
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002d00:	4919      	ldr	r1, [pc, #100]	; (8002d68 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002d02:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002d04:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002d08:	8001      	strh	r1, [r0, #0]
 8002d0a:	4818      	ldr	r0, [pc, #96]	; (8002d6c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002d0c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d0e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d12:	4817      	ldr	r0, [pc, #92]	; (8002d70 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002d14:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002d18:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002d1c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002d20:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002d24:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002d28:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002d2c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002d30:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002d34:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d38:	8001      	strh	r1, [r0, #0]
 8002d3a:	480e      	ldr	r0, [pc, #56]	; (8002d74 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d40:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002d42:	490d      	ldr	r1, [pc, #52]	; (8002d78 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002d44:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002d46:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	2000246c 	.word	0x2000246c
 8002d50:	0802c9e0 	.word	0x0802c9e0
 8002d54:	20002468 	.word	0x20002468
 8002d58:	2000328c 	.word	0x2000328c
 8002d5c:	2000320c 	.word	0x2000320c
 8002d60:	20016e7c 	.word	0x20016e7c
 8002d64:	01000001 	.word	0x01000001
 8002d68:	20016e88 	.word	0x20016e88
 8002d6c:	20016e82 	.word	0x20016e82
 8002d70:	20016e7e 	.word	0x20016e7e
 8002d74:	20016e84 	.word	0x20016e84
 8002d78:	20016e80 	.word	0x20016e80
 8002d7c:	0802cb6c 	.word	0x0802cb6c

08002d80 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002d80:	4801      	ldr	r0, [pc, #4]	; (8002d88 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002d82:	f7ff b961 	b.w	8002048 <_ZN8STM32DMAD1Ev>
 8002d86:	bf00      	nop
 8002d88:	2000246c 	.word	0x2000246c

08002d8c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	4770      	bx	lr

08002d90 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002d90:	8081      	strh	r1, [r0, #4]
    }
 8002d92:	4770      	bx	lr

08002d94 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002d94:	80c1      	strh	r1, [r0, #6]
    }
 8002d96:	4770      	bx	lr

08002d98 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002d98:	8101      	strh	r1, [r0, #8]
    }
 8002d9a:	4770      	bx	lr

08002d9c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002d9c:	8141      	strh	r1, [r0, #10]
    }
 8002d9e:	4770      	bx	lr

08002da0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002da0:	4770      	bx	lr

08002da2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002da2:	4770      	bx	lr

08002da4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002da4:	4770      	bx	lr

08002da6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002da6:	4770      	bx	lr

08002da8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002da8:	4770      	bx	lr

08002daa <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002daa:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002dac:	88c4      	ldrh	r4, [r0, #6]
 8002dae:	6803      	ldr	r3, [r0, #0]
 8002db0:	1b12      	subs	r2, r2, r4
 8002db2:	8884      	ldrh	r4, [r0, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	1b09      	subs	r1, r1, r4
 8002db8:	b212      	sxth	r2, r2
    }
 8002dba:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002dbe:	b209      	sxth	r1, r1
 8002dc0:	4718      	bx	r3

08002dc2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002dce:	6813      	ldr	r3, [r2, #0]
 8002dd0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002dd2:	6010      	str	r0, [r2, #0]
    }
 8002dd4:	4770      	bx	lr

08002dd6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002dd6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002dda:	b11a      	cbz	r2, 8002de4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002ddc:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002de0:	b102      	cbz	r2, 8002de4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002de2:	6018      	str	r0, [r3, #0]
        }
    }
 8002de4:	4770      	bx	lr

08002de6 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002de6:	2000      	movs	r0, #0
 8002de8:	4770      	bx	lr

08002dea <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002dea:	888b      	ldrh	r3, [r1, #4]
 8002dec:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002dee:	2001      	movs	r0, #1
 8002df0:	4770      	bx	lr

08002df2 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002df2:	4770      	bx	lr

08002df4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002df4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002df8:	4770      	bx	lr

08002dfa <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002dfa:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002dfe:	4770      	bx	lr

08002e00 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002e00:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002e02:	b510      	push	{r4, lr}
        return rect.width;
 8002e04:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002e08:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002e0c:	8002      	strh	r2, [r0, #0]
 8002e0e:	8042      	strh	r2, [r0, #2]
 8002e10:	8084      	strh	r4, [r0, #4]
 8002e12:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002e14:	bd10      	pop	{r4, pc}

08002e16 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002e16:	2200      	movs	r2, #0
 8002e18:	8002      	strh	r2, [r0, #0]
 8002e1a:	8042      	strh	r2, [r0, #2]
 8002e1c:	8082      	strh	r2, [r0, #4]
 8002e1e:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002e20:	4770      	bx	lr
	...

08002e24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002e26:	2290      	movs	r2, #144	; 0x90
 8002e28:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002e2c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e38:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002e3a:	490a      	ldr	r1, [pc, #40]	; (8002e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002e3c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002e3e:	480a      	ldr	r0, [pc, #40]	; (8002e68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002e4a:	6911      	ldr	r1, [r2, #16]
 8002e4c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002e50:	3901      	subs	r1, #1
 8002e52:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002e56:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002e5e:	4770      	bx	lr
 8002e60:	40016800 	.word	0x40016800
 8002e64:	20003308 	.word	0x20003308
 8002e68:	20003306 	.word	0x20003306

08002e6c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002e6c:	4b01      	ldr	r3, [pc, #4]	; (8002e74 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002e6e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002e72:	4770      	bx	lr
 8002e74:	40016800 	.word	0x40016800

08002e78 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002e7a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002e7c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e82:	4770      	bx	lr
 8002e84:	40016800 	.word	0x40016800

08002e88 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002e8a:	6953      	ldr	r3, [r2, #20]
 8002e8c:	03db      	lsls	r3, r3, #15
{
 8002e8e:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e90:	d51e      	bpl.n	8002ed0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002e98:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002e9c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ea0:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ea4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002ea8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002eac:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002eae:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002eb2:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002eb4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002eb8:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002eba:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002ebe:	d2f9      	bcs.n	8002eb4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002ec0:	3b20      	subs	r3, #32
 8002ec2:	f113 0f20 	cmn.w	r3, #32
 8002ec6:	d1f2      	bne.n	8002eae <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002ec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ecc:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
 8002ed2:	bf00      	nop
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002ed8:	4770      	bx	lr

08002eda <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002eda:	2338      	movs	r3, #56	; 0x38
 8002edc:	fb01 3103 	mla	r1, r1, r3, r3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002ee4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ee8:	b90b      	cbnz	r3, 8002eee <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002eea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002eec:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002eee:	4770      	bx	lr

08002ef0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002ef0:	4770      	bx	lr

08002ef2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002ef2:	b510      	push	{r4, lr}
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	2158      	movs	r1, #88	; 0x58
 8002ef8:	f028 fa0f 	bl	802b31a <_ZdlPvj>
 8002efc:	4620      	mov	r0, r4
 8002efe:	bd10      	pop	{r4, pc}

08002f00 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4604      	mov	r4, r0
    HAL::initialize();
 8002f04:	f014 fad7 	bl	80174b6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002f0c:	f018 ffd0 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 8002f10:	4601      	mov	r1, r0
 8002f12:	4620      	mov	r0, r4
 8002f14:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002f20:	2300      	movs	r3, #0
 8002f22:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002f26:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002f2a:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002f2c:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002f2e:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002f32:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002f34:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	c007f800 	.word	0xc007f800
 8002f40:	20003ad4 	.word	0x20003ad4
 8002f44:	20003a8c 	.word	0x20003a8c
 8002f48:	c00bf400 	.word	0xc00bf400

08002f4c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002f4c:	f014 ba9a 	b.w	8017484 <_ZN8touchgfx3HAL10beginFrameEv>

08002f50 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002f50:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002f54:	b113      	cbz	r3, 8002f5c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002f56:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002f5c:	f014 ba9e 	b.w	801749c <_ZN8touchgfx3HAL8endFrameEv>
 8002f60:	20003304 	.word	0x20003304

08002f64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002f64:	f014 ba58 	b.w	8017418 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002f68 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002f68:	f014 bbc1 	b.w	80176ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002f6c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002f6c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002f70:	b112      	cbz	r2, 8002f78 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002f72:	6803      	ldr	r3, [r0, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	4718      	bx	r3
    }
 8002f78:	4770      	bx	lr
	...

08002f7c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 8002f7c:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002f7e:	b131      	cbz	r1, 8002f8e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002f82:	f240 1197 	movw	r1, #407	; 0x197
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002f8a:	f028 f9f5 	bl	802b378 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002f8e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002f92:	bd08      	pop	{r3, pc}
 8002f94:	0802d300 	.word	0x0802d300
 8002f98:	0802d314 	.word	0x0802d314
 8002f9c:	0802d4a1 	.word	0x0802d4a1

08002fa0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002fa0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002fa2:	b131      	cbz	r1, 8002fb2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002fa6:	f240 1191 	movw	r1, #401	; 0x191
 8002faa:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002fac:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002fae:	f028 f9e3 	bl	802b378 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002fb2:	6840      	ldr	r0, [r0, #4]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	6803      	ldr	r3, [r0, #0]
    }
 8002fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4718      	bx	r3
 8002fc0:	0802d300 	.word	0x0802d300
 8002fc4:	0802d4e3 	.word	0x0802d4e3
 8002fc8:	0802d4a1 	.word	0x0802d4a1

08002fcc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002fcc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002fce:	b129      	cbz	r1, 8002fdc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002fd2:	217a      	movs	r1, #122	; 0x7a
 8002fd4:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002fd6:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002fd8:	f028 f9ce 	bl	802b378 <__assert_func>
    }
 8002fdc:	6900      	ldr	r0, [r0, #16]
 8002fde:	bd08      	pop	{r3, pc}
 8002fe0:	0802d300 	.word	0x0802d300
 8002fe4:	0802d694 	.word	0x0802d694
 8002fe8:	0802d4a1 	.word	0x0802d4a1

08002fec <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002fec:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002fee:	b129      	cbz	r1, 8002ffc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002ff2:	2183      	movs	r1, #131	; 0x83
 8002ff4:	4a05      	ldr	r2, [pc, #20]	; (800300c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002ff8:	f028 f9be 	bl	802b378 <__assert_func>
        stream.tickCount = 0;
 8002ffc:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002ffe:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8003000:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003004:	bd08      	pop	{r3, pc}
 8003006:	bf00      	nop
 8003008:	0802d300 	.word	0x0802d300
 800300c:	0802d84c 	.word	0x0802d84c
 8003010:	0802d4a1 	.word	0x0802d4a1

08003014 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003014:	b510      	push	{r4, lr}
 8003016:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003018:	b129      	cbz	r1, 8003026 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 800301c:	21a4      	movs	r1, #164	; 0xa4
 800301e:	4a27      	ldr	r2, [pc, #156]	; (80030bc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8003020:	4827      	ldr	r0, [pc, #156]	; (80030c0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8003022:	f028 f9a9 	bl	802b378 <__assert_func>
        switch (cmd)
 8003026:	2a05      	cmp	r2, #5
 8003028:	d834      	bhi.n	8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 800302a:	e8df f002 	tbb	[pc, r2]
 800302e:	2903      	.short	0x2903
 8003030:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8003034:	6840      	ldr	r0, [r0, #4]
 8003036:	6803      	ldr	r3, [r0, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4798      	blx	r3
 800303c:	b350      	cbz	r0, 8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 800303e:	f04f 31ff 	mov.w	r1, #4294967295
 8003042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003044:	f004 f916 	bl	8007274 <osMutexAcquire>
                stream.cancelDecoding = false;
 8003048:	2300      	movs	r3, #0
                stream.isPlaying = true;
 800304a:	2201      	movs	r2, #1
                if(stream.isStopped)
 800304c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8003050:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8003054:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8003058:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 800305a:	6163      	str	r3, [r4, #20]
                if(stream.isStopped)
 800305c:	b101      	cbz	r1, 8003060 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 800305e:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8003060:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8003064:	6263      	str	r3, [r4, #36]	; 0x24
                if(stream.nextBuffer == 0)
 8003066:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003068:	b92b      	cbnz	r3, 8003076 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 800306a:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 800306c:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 800306e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8003072:	f004 f9e9 	bl	8007448 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8003076:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8003078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 800307c:	f004 b92a 	b.w	80072d4 <osMutexRelease>
            stream.isPlaying = false;
 8003080:	2300      	movs	r3, #0
 8003082:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8003086:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 800308a:	e003      	b.n	8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 800308c:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8003092:	6143      	str	r3, [r0, #20]
    }
 8003094:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003096:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 800309c:	6143      	str	r3, [r0, #20]
 800309e:	e7f2      	b.n	8003086 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e7ed      	b.n	8003086 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 80030aa:	3b00      	subs	r3, #0
 80030ac:	bf18      	it	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 80030b4:	e7ee      	b.n	8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 80030b6:	bf00      	nop
 80030b8:	0802d300 	.word	0x0802d300
 80030bc:	0802da0b 	.word	0x0802da0b
 80030c0:	0802d4a1 	.word	0x0802d4a1

080030c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4604      	mov	r4, r0
 80030c8:	4616      	mov	r6, r2
        assert(handle < no_streams);
 80030ca:	b129      	cbz	r1, 80030d8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 80030ce:	21e7      	movs	r1, #231	; 0xe7
 80030d0:	4a31      	ldr	r2, [pc, #196]	; (8003198 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 80030d2:	4832      	ldr	r0, [pc, #200]	; (800319c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 80030d4:	f028 f950 	bl	802b378 <__assert_func>
        if (stream.isPlaying)
 80030d8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80030dc:	b133      	cbz	r3, 80030ec <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 80030e6:	6943      	ldr	r3, [r0, #20]
 80030e8:	4413      	add	r3, r2
 80030ea:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 80030ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d04d      	beq.n	800318e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80030f2:	69e1      	ldr	r1, [r4, #28]
 80030f4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80030f8:	4353      	muls	r3, r2
 80030fa:	68a2      	ldr	r2, [r4, #8]
 80030fc:	434a      	muls	r2, r1
 80030fe:	4293      	cmp	r3, r2
 8003100:	d220      	bcs.n	8003144 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8003102:	6a23      	ldr	r3, [r4, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d042      	beq.n	800318e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8003108:	f04f 31ff 	mov.w	r1, #4294967295
 800310c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800310e:	f004 f8b1 	bl	8007274 <osMutexAcquire>
            if(stream.seek_to_frame > 0)
 8003112:	6a23      	ldr	r3, [r4, #32]
 8003114:	b10b      	cbz	r3, 800311a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(stream.nextBuffer != 0)
 800311a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800311c:	b9fb      	cbnz	r3, 800315e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 800311e:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8003120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003122:	f004 f8d7 	bl	80072d4 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8003126:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800312a:	b90b      	cbnz	r3, 8003130 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 800312c:	6a23      	ldr	r3, [r4, #32]
 800312e:	b13b      	cbz	r3, 8003140 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8003130:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003132:	b92b      	cbnz	r3, 8003140 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8003134:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8003136:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8003138:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 800313c:	f004 f984 	bl	8007448 <osSemaphoreRelease>
    }
 8003140:	4628      	mov	r0, r5
 8003142:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8003144:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8003148:	2800      	cmp	r0, #0
 800314a:	d0dd      	beq.n	8003108 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003152:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003154:	bf98      	it	ls
 8003156:	f102 32ff 	addls.w	r2, r2, #4294967295
 800315a:	6262      	str	r2, [r4, #36]	; 0x24
 800315c:	e7d4      	b.n	8003108 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 800315e:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8003160:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8003164:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 8003166:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8003168:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 800316a:	68e2      	ldr	r2, [r4, #12]
 800316c:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 800316e:	68a2      	ldr	r2, [r4, #8]
 8003170:	3201      	adds	r2, #1
 8003172:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003174:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 8003176:	6833      	ldr	r3, [r6, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 800317c:	2d00      	cmp	r5, #0
 800317e:	d1ce      	bne.n	800311e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8003180:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1cb      	bne.n	8003120 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 8003188:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 800318c:	e7c8      	b.n	8003120 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 800318e:	2501      	movs	r5, #1
 8003190:	e7c9      	b.n	8003126 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 8003192:	bf00      	nop
 8003194:	0802d300 	.word	0x0802d300
 8003198:	0802dbe2 	.word	0x0802dbe2
 800319c:	0802d4a1 	.word	0x0802d4a1
 80031a0:	20016e88 	.word	0x20016e88

080031a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80031a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031b0:	609a      	str	r2, [r3, #8]
}
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80031ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80031c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80031d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80031d6:	f3bf 8f6f 	isb	sy
}
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100

080031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80031e0:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80031e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031e6:	bb3b      	cbnz	r3, 8003238 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 80031e8:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 80031ea:	6083      	str	r3, [r0, #8]
 80031ec:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 80031ee:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 80031f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f4:	6143      	str	r3, [r0, #20]
 80031f6:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80031f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031fc:	6183      	str	r3, [r0, #24]
 80031fe:	61c3      	str	r3, [r0, #28]
 8003200:	6203      	str	r3, [r0, #32]
 8003202:	6243      	str	r3, [r0, #36]	; 0x24
 8003204:	6283      	str	r3, [r0, #40]	; 0x28
 8003206:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003208:	6303      	str	r3, [r0, #48]	; 0x30
 800320a:	6343      	str	r3, [r0, #52]	; 0x34
 800320c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003210:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003212:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8003216:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800321a:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 800321c:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800321e:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 8003220:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003222:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8003226:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 800322a:	4429      	add	r1, r5
 800322c:	428c      	cmp	r4, r1
 800322e:	d90a      	bls.n	8003246 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8003232:	2158      	movs	r1, #88	; 0x58
 8003234:	4a08      	ldr	r2, [pc, #32]	; (8003258 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003236:	e003      	b.n	8003240 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 800323a:	f240 11f5 	movw	r1, #501	; 0x1f5
 800323e:	4a08      	ldr	r2, [pc, #32]	; (8003260 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003240:	4808      	ldr	r0, [pc, #32]	; (8003264 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003242:	f028 f899 	bl	802b378 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8003246:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003248:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 800324c:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 800324e:	6342      	str	r2, [r0, #52]	; 0x34
    }
 8003250:	4618      	mov	r0, r3
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	0802df40 	.word	0x0802df40
 8003258:	0802df80 	.word	0x0802df80
 800325c:	0802dd86 	.word	0x0802dd86
 8003260:	0802ddb6 	.word	0x0802ddb6
 8003264:	0802d4a1 	.word	0x0802d4a1

08003268 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 8003268:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800326a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800326c:	4e12      	ldr	r6, [pc, #72]	; (80032b8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 800326e:	4605      	mov	r5, r0
 8003270:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 8003274:	6003      	str	r3, [r0, #0]
 8003276:	6833      	ldr	r3, [r6, #0]
 8003278:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800327c:	b10a      	cbz	r2, 8003282 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 800327e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003280:	b900      	cbnz	r0, 8003284 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 8003282:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003284:	6803      	ldr	r3, [r0, #0]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	4798      	blx	r3
        return auxiliaryLCD;
 800328a:	6833      	ldr	r3, [r6, #0]
 800328c:	fab0 f480 	clz	r4, r0
 8003290:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003292:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003294:	b130      	cbz	r0, 80032a4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003296:	6803      	ldr	r3, [r0, #0]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	4798      	blx	r3
 800329c:	2800      	cmp	r0, #0
 800329e:	bf08      	it	eq
 80032a0:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80032a4:	b92c      	cbnz	r4, 80032b2 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	4a06      	ldr	r2, [pc, #24]	; (80032c4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 80032ac:	4806      	ldr	r0, [pc, #24]	; (80032c8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 80032ae:	f028 f863 	bl	802b378 <__assert_func>
    }
 80032b2:	4628      	mov	r0, r5
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	bf00      	nop
 80032b8:	20016e88 	.word	0x20016e88
 80032bc:	0802e228 	.word	0x0802e228
 80032c0:	0802e126 	.word	0x0802e126
 80032c4:	0802e184 	.word	0x0802e184
 80032c8:	0802e1bd 	.word	0x0802e1bd

080032cc <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80032cc:	b510      	push	{r4, lr}
        return instance;
 80032ce:	4c14      	ldr	r4, [pc, #80]	; (8003320 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	b323      	cbz	r3, 800331e <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_LTDC_LineEventCallback+0x58>)
 80032d6:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_LTDC_LineEventCallback+0x5c>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	8811      	ldrh	r1, [r2, #0]
 80032dc:	428b      	cmp	r3, r1
 80032de:	d113      	bne.n	8003308 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_LTDC_LineEventCallback+0x60>)
 80032e2:	8819      	ldrh	r1, [r3, #0]
 80032e4:	f002 fbb8 	bl	8005a58 <HAL_LTDC_ProgramLineEvent>
 80032e8:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80032ea:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80032ee:	3301      	adds	r3, #1
 80032f0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80032f4:	f7fe fe58 	bl	8001fa8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80032f8:	6820      	ldr	r0, [r4, #0]
 80032fa:	f014 fe2f 	bl	8017f5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80032fe:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8003300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003304:	f7fe bc54 	b.w	8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003308:	f002 fba6 	bl	8005a58 <HAL_LTDC_ProgramLineEvent>
        return instance;
 800330c:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800330e:	6803      	ldr	r3, [r0, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003314:	2000      	movs	r0, #0
    }
 8003316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800331a:	f7fe bc79 	b.w	8001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800331e:	bd10      	pop	{r4, pc}
 8003320:	20016e88 	.word	0x20016e88
 8003324:	40016800 	.word	0x40016800
 8003328:	20003308 	.word	0x20003308
 800332c:	20003306 	.word	0x20003306

08003330 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003334:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003336:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 800333a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 800333e:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8003342:	b91b      	cbnz	r3, 800334c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 8003344:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003346:	f004 f845 	bl	80073d4 <osSemaphoreAcquire>
                continue;
 800334a:	e7f6      	b.n	800333a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 800334c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800334e:	f003 ff91 	bl	8007274 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003352:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 8003356:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003358:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 800335a:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 800335c:	bf08      	it	eq
 800335e:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 8003360:	b336      	cbz	r6, 80033b0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	4631      	mov	r1, r6
 8003366:	4628      	mov	r0, r5
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	4798      	blx	r3
                stream.seek_to_frame = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 8003370:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003374:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003376:	f003 ffad 	bl	80072d4 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 800337a:	682b      	ldr	r3, [r5, #0]
 800337c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003380:	4639      	mov	r1, r7
 8003382:	f8cd 8000 	str.w	r8, [sp]
 8003386:	4628      	mov	r0, r5
 8003388:	695e      	ldr	r6, [r3, #20]
 800338a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800338e:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003394:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 8003396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003398:	f003 ff6c 	bl	8007274 <osMutexAcquire>
            if (stream.cancelDecoding)
 800339c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80033a0:	b1c3      	cbz	r3, 80033d4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 80033a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033aa:	f003 ff93 	bl	80072d4 <osMutexRelease>
 80033ae:	e7c4      	b.n	800333a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 80033b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0de      	beq.n	8003374 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80033b6:	682b      	ldr	r3, [r5, #0]
 80033b8:	4628      	mov	r0, r5
 80033ba:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 80033be:	4798      	blx	r3
 80033c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033c2:	4401      	add	r1, r0
 80033c4:	4628      	mov	r0, r5
 80033c6:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 80033cc:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 80033ce:	4413      	add	r3, r2
 80033d0:	60a3      	str	r3, [r4, #8]
 80033d2:	e7cf      	b.n	8003374 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 80033d4:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 80033d6:	b15e      	cbz	r6, 80033f0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	4628      	mov	r0, r5
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	4798      	blx	r3
 80033e0:	3801      	subs	r0, #1
 80033e2:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 80033e4:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 80033e6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 80033ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80033ee:	e7db      	b.n	80033a8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 80033f0:	2301      	movs	r3, #1
 80033f2:	60e3      	str	r3, [r4, #12]
 80033f4:	e7f6      	b.n	80033e4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

080033f8 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 80033f8:	4801      	ldr	r0, [pc, #4]	; (8003400 <videoTaskFunc+0x8>)
{
 80033fa:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80033fc:	f7ff ff98 	bl	8003330 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8003400:	20003ad4 	.word	0x20003ad4

08003404 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 8003404:	6803      	ldr	r3, [r0, #0]
 8003406:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 800340c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800340e:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 8003410:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 8003412:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800341a:	f003 ff2b 	bl	8007274 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 800341e:	2138      	movs	r1, #56	; 0x38
 8003420:	fb01 4305 	mla	r3, r1, r5, r4
 8003424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003426:	b10a      	cbz	r2, 800342c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 8003428:	2200      	movs	r2, #0
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
 800342c:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 8003430:	2301      	movs	r3, #1
 8003432:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 8003436:	2300      	movs	r3, #0
 8003438:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 800343c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 800343e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 8003442:	f003 bf47 	b.w	80072d4 <osMutexRelease>

08003446 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003446:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 8003448:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 8003450:	4611      	mov	r1, r2
 8003452:	6858      	ldr	r0, [r3, #4]
 8003454:	6803      	ldr	r3, [r0, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4798      	blx	r3
        clearState(handle);
 800345a:	4629      	mov	r1, r5
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff ffd1 	bl	8003404 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003462:	bd38      	pop	{r3, r4, r5, pc}

08003464 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	460d      	mov	r5, r1
 8003468:	4611      	mov	r1, r2
 800346a:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 800346c:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003470:	6850      	ldr	r0, [r2, #4]
 8003472:	6802      	ldr	r2, [r0, #0]
 8003474:	6896      	ldr	r6, [r2, #8]
 8003476:	461a      	mov	r2, r3
 8003478:	47b0      	blx	r6
        clearState(handle);
 800347a:	4629      	mov	r1, r5
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff ffc1 	bl	8003404 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003482:	bd70      	pop	{r4, r5, r6, pc}

08003484 <_GLOBAL__sub_I_lineBuffer>:
}
 8003484:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8003486:	4916      	ldr	r1, [pc, #88]	; (80034e0 <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 8003488:	2500      	movs	r5, #0
 800348a:	4816      	ldr	r0, [pc, #88]	; (80034e4 <_GLOBAL__sub_I_lineBuffer+0x60>)
 800348c:	f7ff f802 	bl	8002494 <_ZN20SoftwareMJPEGDecoderC1EPh>
 8003490:	4c15      	ldr	r4, [pc, #84]	; (80034e8 <_GLOBAL__sub_I_lineBuffer+0x64>)
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <_GLOBAL__sub_I_lineBuffer+0x68>)
 8003494:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 8003496:	462a      	mov	r2, r5
 8003498:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 800349a:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 800349c:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 80034a0:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034a2:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 80034a4:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 80034a8:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 80034ac:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 80034b0:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 80034b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034b8:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80034bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80034c0:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80034c4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 80034c8:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80034cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 80034d0:	f003 ff2a 	bl	8007328 <osSemaphoreNew>
 80034d4:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 80034d6:	4628      	mov	r0, r5
 80034d8:	f003 fe8a 	bl	80071f0 <osMutexNew>
 80034dc:	6560      	str	r0, [r4, #84]	; 0x54
}
 80034de:	bd38      	pop	{r3, r4, r5, pc}
 80034e0:	2000330c 	.word	0x2000330c
 80034e4:	20003a8c 	.word	0x20003a8c
 80034e8:	20003ad4 	.word	0x20003ad4
 80034ec:	0802e248 	.word	0x0802e248

080034f0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80034f0:	4770      	bx	lr

080034f2 <_ZN23ApplicationFontProviderD0Ev>:
 80034f2:	b510      	push	{r4, lr}
 80034f4:	4604      	mov	r4, r0
 80034f6:	2104      	movs	r1, #4
 80034f8:	f027 ff0f 	bl	802b31a <_ZdlPvj>
 80034fc:	4620      	mov	r0, r4
 80034fe:	bd10      	pop	{r4, pc}

08003500 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003500:	2901      	cmp	r1, #1
{
 8003502:	b508      	push	{r3, lr}
    switch (typography)
 8003504:	d006      	beq.n	8003514 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003506:	2902      	cmp	r1, #2
 8003508:	d008      	beq.n	800351c <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 800350a:	b959      	cbnz	r1, 8003524 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_80_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800350c:	f000 fe26 	bl	800415c <_ZN17TypedTextDatabase8getFontsEv>
 8003510:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003512:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003514:	f000 fe22 	bl	800415c <_ZN17TypedTextDatabase8getFontsEv>
 8003518:	6840      	ldr	r0, [r0, #4]
 800351a:	e7fa      	b.n	8003512 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800351c:	f000 fe1e 	bl	800415c <_ZN17TypedTextDatabase8getFontsEv>
 8003520:	6880      	ldr	r0, [r0, #8]
 8003522:	e7f6      	b.n	8003512 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003524:	2000      	movs	r0, #0
 8003526:	e7f4      	b.n	8003512 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003528 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003528:	4800      	ldr	r0, [pc, #0]	; (800352c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800352a:	4770      	bx	lr
 800352c:	0802e290 	.word	0x0802e290

08003530 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003530:	2003      	movs	r0, #3
 8003532:	4770      	bx	lr

08003534 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003534:	b513      	push	{r0, r1, r4, lr}
 8003536:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003538:	b151      	cbz	r1, 8003550 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800353a:	6803      	ldr	r3, [r0, #0]
 800353c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800353e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003540:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003544:	689c      	ldr	r4, [r3, #8]
 8003546:	f10d 0303 	add.w	r3, sp, #3
 800354a:	47a0      	blx	r4
        return glyph;
    }
 800354c:	b002      	add	sp, #8
 800354e:	bd10      	pop	{r4, pc}
            return 0;
 8003550:	4608      	mov	r0, r1
 8003552:	e7fb      	b.n	800354c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003554 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003554:	89c0      	ldrh	r0, [r0, #14]
 8003556:	4770      	bx	lr

08003558 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003558:	8a00      	ldrh	r0, [r0, #16]
 800355a:	4770      	bx	lr

0800355c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800355c:	88c0      	ldrh	r0, [r0, #6]
 800355e:	4770      	bx	lr

08003560 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003560:	8880      	ldrh	r0, [r0, #4]
 8003562:	4770      	bx	lr

08003564 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003564:	7a80      	ldrb	r0, [r0, #10]
    }
 8003566:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800356a:	4770      	bx	lr

0800356c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800356c:	7a80      	ldrb	r0, [r0, #10]
    }
 800356e:	09c0      	lsrs	r0, r0, #7
 8003570:	4770      	bx	lr

08003572 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003572:	4770      	bx	lr

08003574 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003574:	b510      	push	{r4, lr}
 8003576:	4604      	mov	r4, r0
    }
 8003578:	2108      	movs	r1, #8
 800357a:	f027 fece 	bl	802b31a <_ZdlPvj>
 800357e:	4620      	mov	r0, r4
 8003580:	bd10      	pop	{r4, pc}

08003582 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003582:	4770      	bx	lr

08003584 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003584:	4770      	bx	lr

08003586 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003586:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800358a:	6808      	ldr	r0, [r1, #0]
 800358c:	6849      	ldr	r1, [r1, #4]
 800358e:	c303      	stmia	r3!, {r0, r1}
    }
 8003590:	4770      	bx	lr

08003592 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003592:	4770      	bx	lr

08003594 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003594:	4770      	bx	lr

08003596 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003596:	6041      	str	r1, [r0, #4]
    }
 8003598:	4770      	bx	lr

0800359a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800359a:	4770      	bx	lr

0800359c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800359e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80035a2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80035ac:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80035b0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	0800365d 	.word	0x0800365d

080035bc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80035bc:	2301      	movs	r3, #1
 80035be:	7203      	strb	r3, [r0, #8]
    }
 80035c0:	4770      	bx	lr

080035c2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80035c2:	4770      	bx	lr

080035c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80035c4:	4770      	bx	lr

080035c6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80035c6:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80035c8:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80035ca:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80035cc:	68c2      	ldr	r2, [r0, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	1054      	asrs	r4, r2, #1
 80035d2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80035d6:	07d2      	lsls	r2, r2, #31
 80035d8:	bf48      	it	mi
 80035da:	590a      	ldrmi	r2, [r1, r4]
    }
 80035dc:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80035e0:	bf48      	it	mi
 80035e2:	58d3      	ldrmi	r3, [r2, r3]
 80035e4:	4718      	bx	r3

080035e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80035e6:	6843      	ldr	r3, [r0, #4]
 80035e8:	b12b      	cbz	r3, 80035f6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80035ea:	6883      	ldr	r3, [r0, #8]
 80035ec:	b92b      	cbnz	r3, 80035fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80035ee:	68c0      	ldr	r0, [r0, #12]
 80035f0:	f000 0001 	and.w	r0, r0, #1
 80035f4:	4770      	bx	lr
 80035f6:	4618      	mov	r0, r3
 80035f8:	4770      	bx	lr
 80035fa:	2001      	movs	r0, #1
    }
 80035fc:	4770      	bx	lr

080035fe <_ZN8touchgfx12NoTransitionD0Ev>:
 80035fe:	b510      	push	{r4, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	210c      	movs	r1, #12
 8003604:	f027 fe89 	bl	802b31a <_ZdlPvj>
 8003608:	4620      	mov	r0, r4
 800360a:	bd10      	pop	{r4, pc}

0800360c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800360c:	b510      	push	{r4, lr}
 800360e:	4604      	mov	r4, r0
 8003610:	2110      	movs	r1, #16
 8003612:	f027 fe82 	bl	802b31a <_ZdlPvj>
 8003616:	4620      	mov	r0, r4
 8003618:	bd10      	pop	{r4, pc}

0800361a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800361a:	b510      	push	{r4, lr}
 800361c:	4604      	mov	r4, r0
 800361e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003622:	f027 fe7a 	bl	802b31a <_ZdlPvj>
 8003626:	4620      	mov	r0, r4
 8003628:	bd10      	pop	{r4, pc}

0800362a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800362a:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 800362c:	f018 fc40 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8003630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8003634:	f019 b8d0 	b.w	801c7d8 <_ZN8touchgfx11Application10invalidateEv>

08003638 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003638:	b510      	push	{r4, lr}
 800363a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800363c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8003640:	b158      	cbz	r0, 800365a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003642:	6803      	ldr	r3, [r0, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4798      	blx	r3
 8003648:	b138      	cbz	r0, 800365a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800364a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 800364e:	6803      	ldr	r3, [r0, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800365a:	bd10      	pop	{r4, pc}

0800365c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800365c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003660:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8003664:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003666:	68a8      	ldr	r0, [r5, #8]
 8003668:	6803      	ldr	r3, [r0, #0]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4798      	blx	r3
 800366e:	f641 63fb 	movw	r3, #7931	; 0x1efb
 8003672:	4298      	cmp	r0, r3
 8003674:	d805      	bhi.n	8003682 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8003676:	4b46      	ldr	r3, [pc, #280]	; (8003790 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003678:	21a3      	movs	r1, #163	; 0xa3
 800367a:	4a46      	ldr	r2, [pc, #280]	; (8003794 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800367c:	4846      	ldr	r0, [pc, #280]	; (8003798 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800367e:	f027 fe7b 	bl	802b378 <__assert_func>
 8003682:	6868      	ldr	r0, [r5, #4]
 8003684:	6803      	ldr	r3, [r0, #0]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4798      	blx	r3
 800368a:	280f      	cmp	r0, #15
 800368c:	d803      	bhi.n	8003696 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003690:	21a4      	movs	r1, #164	; 0xa4
 8003692:	4a40      	ldr	r2, [pc, #256]	; (8003794 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003694:	e7f2      	b.n	800367c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003696:	68e8      	ldr	r0, [r5, #12]
 8003698:	6803      	ldr	r3, [r0, #0]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4798      	blx	r3
 800369e:	280b      	cmp	r0, #11
 80036a0:	d803      	bhi.n	80036aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80036a4:	21a5      	movs	r1, #165	; 0xa5
 80036a6:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80036a8:	e7e8      	b.n	800367c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80036aa:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80037a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 80036ae:	f018 fbff 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80036b2:	3004      	adds	r0, #4
 80036b4:	f018 fc3a 	bl	801bf2c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80036b8:	f8d9 0000 	ldr.w	r0, [r9]
 80036bc:	b110      	cbz	r0, 80036c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80036be:	6803      	ldr	r3, [r0, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	4798      	blx	r3
    if (*currentTrans)
 80036c4:	f8d9 0000 	ldr.w	r0, [r9]
 80036c8:	b110      	cbz	r0, 80036d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80036ca:	6803      	ldr	r3, [r0, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4798      	blx	r3
    if (*currentScreen)
 80036d0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80037ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80036d4:	f8d8 0000 	ldr.w	r0, [r8]
 80036d8:	b110      	cbz	r0, 80036e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80036da:	6803      	ldr	r3, [r0, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	4798      	blx	r3
    if (*currentPresenter)
 80036e0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80036e4:	b110      	cbz	r0, 80036ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80036e6:	6803      	ldr	r3, [r0, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4798      	blx	r3
    if (*currentScreen)
 80036ec:	f8d8 0000 	ldr.w	r0, [r8]
 80036f0:	b110      	cbz	r0, 80036f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80036f2:	6803      	ldr	r3, [r0, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4798      	blx	r3
    if (*currentPresenter)
 80036f8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80036fc:	b110      	cbz	r0, 8003704 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80036fe:	6803      	ldr	r3, [r0, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003704:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003706:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003708:	f04f 0b00 	mov.w	fp, #0
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	4798      	blx	r3
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8003714:	4604      	mov	r4, r0
 8003716:	f8c0 b004 	str.w	fp, [r0, #4]
 800371a:	6003      	str	r3, [r0, #0]
 800371c:	4659      	mov	r1, fp
 800371e:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003722:	68a8      	ldr	r0, [r5, #8]
 8003724:	6803      	ldr	r3, [r0, #0]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	4798      	blx	r3
 800372a:	4606      	mov	r6, r0
 800372c:	f000 fda8 	bl	8004280 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003730:	6868      	ldr	r0, [r5, #4]
 8003732:	4659      	mov	r1, fp
 8003734:	6803      	ldr	r3, [r0, #0]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	4798      	blx	r3
 800373a:	4605      	mov	r5, r0
 800373c:	4631      	mov	r1, r6
 800373e:	f000 fd79 	bl	8004234 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8003742:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003746:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800374a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800374e:	b1e5      	cbz	r5, 800378a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8003750:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003752:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003756:	4630      	mov	r0, r6
 8003758:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800375a:	f8c5 a008 	str.w	sl, [r5, #8]
 800375e:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003760:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003762:	4798      	blx	r3
    newPresenter->activate();
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	4628      	mov	r0, r5
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800376c:	4621      	mov	r1, r4
 800376e:	4630      	mov	r0, r6
 8003770:	f01a f908 	bl	801d984 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	4620      	mov	r0, r4
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	4798      	blx	r3
    newTransition->invalidate();
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	4620      	mov	r0, r4
 8003780:	695b      	ldr	r3, [r3, #20]
}
 8003782:	b001      	add	sp, #4
 8003784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003788:	4718      	bx	r3
    model->bind(newPresenter);
 800378a:	462b      	mov	r3, r5
 800378c:	e7e1      	b.n	8003752 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 800378e:	bf00      	nop
 8003790:	0802e2dc 	.word	0x0802e2dc
 8003794:	0802e36a 	.word	0x0802e36a
 8003798:	0802e46e 	.word	0x0802e46e
 800379c:	0802e4b5 	.word	0x0802e4b5
 80037a0:	0802e558 	.word	0x0802e558
 80037a4:	0802e668 	.word	0x0802e668
 80037a8:	20016ed0 	.word	0x20016ed0
 80037ac:	20016ecc 	.word	0x20016ecc

080037b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	4617      	mov	r7, r2
 80037b6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80037b8:	f018 fc8a 	bl	801c0d0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80037be:	2500      	movs	r5, #0
        instance = this;
 80037c0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037c2:	4629      	mov	r1, r5
      model(m)
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80037c6:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80037ca:	4e0f      	ldr	r6, [pc, #60]	; (8003808 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80037d2:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80037d6:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80037da:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80037dc:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80037e4:	4628      	mov	r0, r5
 80037e6:	f000 fc6d 	bl	80040c4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80037ea:	6833      	ldr	r3, [r6, #0]
 80037ec:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80037f0:	b10a      	cbz	r2, 80037f6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80037f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80037f4:	b900      	cbnz	r0, 80037f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80037f6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80037f8:	f020 fb69 	bl	8023ece <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80037fc:	4620      	mov	r0, r4
 80037fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003800:	20016edc 	.word	0x20016edc
 8003804:	0802e61c 	.word	0x0802e61c
 8003808:	20016e88 	.word	0x20016e88
 800380c:	0802e604 	.word	0x0802e604

08003810 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003812:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003816:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800381a:	2300      	movs	r3, #0
 800381c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003820:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003824:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	0800365d 	.word	0x0800365d

08003830 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003830:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003832:	4770      	bx	lr

08003834 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003834:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003836:	4770      	bx	lr

08003838 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003838:	4770      	bx	lr

0800383a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800383a:	888b      	ldrh	r3, [r1, #4]
 800383c:	69c0      	ldr	r0, [r0, #28]
 800383e:	0adb      	lsrs	r3, r3, #11
 8003840:	680a      	ldr	r2, [r1, #0]
 8003842:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003846:	4410      	add	r0, r2
 8003848:	4770      	bx	lr

0800384a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800384a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800384c:	b1c2      	cbz	r2, 8003880 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800384e:	7b13      	ldrb	r3, [r2, #12]
 8003850:	b1b3      	cbz	r3, 8003880 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003852:	7b54      	ldrb	r4, [r2, #13]
 8003854:	7ad2      	ldrb	r2, [r2, #11]
 8003856:	0224      	lsls	r4, r4, #8
 8003858:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800385c:	4314      	orrs	r4, r2
 800385e:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003860:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003862:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003866:	8813      	ldrh	r3, [r2, #0]
 8003868:	428b      	cmp	r3, r1
 800386a:	d102      	bne.n	8003872 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800386c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003870:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003872:	d805      	bhi.n	8003880 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003874:	3801      	subs	r0, #1
 8003876:	3204      	adds	r2, #4
 8003878:	b280      	uxth	r0, r0
 800387a:	2800      	cmp	r0, #0
 800387c:	d1f3      	bne.n	8003866 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800387e:	e7f7      	b.n	8003870 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003880:	2000      	movs	r0, #0
 8003882:	e7f5      	b.n	8003870 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003884 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003884:	b510      	push	{r4, lr}
 8003886:	4604      	mov	r4, r0
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	f027 fd46 	bl	802b31a <_ZdlPvj>
 800388e:	4620      	mov	r0, r4
 8003890:	bd10      	pop	{r4, pc}
	...

08003894 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003894:	b530      	push	{r4, r5, lr}
 8003896:	b08b      	sub	sp, #44	; 0x2c
 8003898:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800389a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 800389e:	9508      	str	r5, [sp, #32]
 80038a0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80038a4:	9507      	str	r5, [sp, #28]
 80038a6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80038aa:	9506      	str	r5, [sp, #24]
 80038ac:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80038b0:	9505      	str	r5, [sp, #20]
 80038b2:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80038b6:	9504      	str	r5, [sp, #16]
 80038b8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80038bc:	9503      	str	r5, [sp, #12]
 80038be:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80038c2:	9502      	str	r5, [sp, #8]
 80038c4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80038c8:	9501      	str	r5, [sp, #4]
 80038ca:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80038ce:	9500      	str	r5, [sp, #0]
 80038d0:	f019 fc2a 	bl	801d128 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80038d6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038dc:	61e3      	str	r3, [r4, #28]
 80038de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80038e0:	6223      	str	r3, [r4, #32]
 80038e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038e4:	6263      	str	r3, [r4, #36]	; 0x24
 80038e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80038e8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80038ea:	b00b      	add	sp, #44	; 0x2c
 80038ec:	bd30      	pop	{r4, r5, pc}
 80038ee:	bf00      	nop
 80038f0:	0802e68c 	.word	0x0802e68c

080038f4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80038f4:	4770      	bx	lr

080038f6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80038f6:	4770      	bx	lr

080038f8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80038f8:	4770      	bx	lr

080038fa <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80038fa:	4770      	bx	lr

080038fc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80038fc:	4770      	bx	lr

080038fe <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80038fe:	b530      	push	{r4, r5, lr}
 8003900:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8003902:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003904:	4604      	mov	r4, r0
        rect.width = width;
 8003906:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003908:	466d      	mov	r5, sp
 800390a:	4601      	mov	r1, r0
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003910:	343c      	adds	r4, #60	; 0x3c
 8003912:	4628      	mov	r0, r5
 8003914:	4798      	blx	r3
 8003916:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800391a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800391e:	b005      	add	sp, #20
 8003920:	bd30      	pop	{r4, r5, pc}

08003922 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003922:	b530      	push	{r4, r5, lr}
 8003924:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003926:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003928:	4604      	mov	r4, r0
        rect.height = height;
 800392a:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 800392c:	466d      	mov	r5, sp
 800392e:	4601      	mov	r1, r0
 8003930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003934:	343c      	adds	r4, #60	; 0x3c
 8003936:	4628      	mov	r0, r5
 8003938:	4798      	blx	r3
 800393a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800393e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003942:	b005      	add	sp, #20
 8003944:	bd30      	pop	{r4, r5, pc}

08003946 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8003946:	2200      	movs	r2, #0
 8003948:	8002      	strh	r2, [r0, #0]
 800394a:	8042      	strh	r2, [r0, #2]
 800394c:	8082      	strh	r2, [r0, #4]
 800394e:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003950:	4770      	bx	lr

08003952 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003952:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8003956:	4770      	bx	lr

08003958 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003958:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800395a:	b570      	push	{r4, r5, r6, lr}
 800395c:	4604      	mov	r4, r0
        setX(x);
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003960:	4615      	mov	r5, r2
        setX(x);
 8003962:	4798      	blx	r3
        setBaselineY(baselineY);
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 800396c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003970:	4718      	bx	r3

08003972 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003972:	2000      	movs	r0, #0
 8003974:	4770      	bx	lr

08003976 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003976:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003978:	4770      	bx	lr

0800397a <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 800397a:	4770      	bx	lr

0800397c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800397c:	4770      	bx	lr

0800397e <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800397e:	b510      	push	{r4, lr}
 8003980:	4604      	mov	r4, r0
 8003982:	214c      	movs	r1, #76	; 0x4c
 8003984:	f027 fcc9 	bl	802b31a <_ZdlPvj>
 8003988:	4620      	mov	r0, r4
 800398a:	bd10      	pop	{r4, pc}

0800398c <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <_ZN15Screen1ViewBaseD1Ev+0x10>)
 800398e:	b510      	push	{r4, lr}
 8003990:	4604      	mov	r4, r0
 8003992:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8003994:	f016 fdc8 	bl	801a528 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8003998:	4620      	mov	r0, r4
 800399a:	bd10      	pop	{r4, pc}
 800399c:	0802e920 	.word	0x0802e920

080039a0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 80039a2:	b507      	push	{r0, r1, r2, lr}
 80039a4:	6003      	str	r3, [r0, #0]
 80039a6:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80039a8:	f016 fdbe 	bl	801a528 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80039ac:	9801      	ldr	r0, [sp, #4]
 80039ae:	f641 61fc 	movw	r1, #7932	; 0x1efc
 80039b2:	f027 fcb2 	bl	802b31a <_ZdlPvj>
 80039b6:	9801      	ldr	r0, [sp, #4]
 80039b8:	b003      	add	sp, #12
 80039ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80039be:	bf00      	nop
 80039c0:	0802e920 	.word	0x0802e920

080039c4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80039c4:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80039c6:	f7ff fad1 	bl	8002f6c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80039ca:	bd08      	pop	{r3, pc}

080039cc <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80039cc:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80039ce:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80039d0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 80039d2:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80039d6:	b28d      	uxth	r5, r1
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b92b      	cbnz	r3, 80039e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80039de:	216c      	movs	r1, #108	; 0x6c
 80039e0:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80039e2:	4811      	ldr	r0, [pc, #68]	; (8003a28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80039e4:	f027 fcc8 	bl	802b378 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80039e8:	4910      	ldr	r1, [pc, #64]	; (8003a2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80039ea:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80039ec:	8809      	ldrh	r1, [r1, #0]
 80039ee:	4291      	cmp	r1, r2
 80039f0:	d803      	bhi.n	80039fa <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80039f4:	216d      	movs	r1, #109	; 0x6d
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80039f8:	e7f3      	b.n	80039e2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80039fa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003a06:	6803      	ldr	r3, [r0, #0]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4798      	blx	r3
 8003a0c:	1a28      	subs	r0, r5, r0
 8003a0e:	4633      	mov	r3, r6
 8003a10:	b201      	sxth	r1, r0
 8003a12:	4620      	mov	r0, r4
    }
 8003a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003a18:	4718      	bx	r3
 8003a1a:	bf00      	nop
 8003a1c:	20016ee0 	.word	0x20016ee0
 8003a20:	0802e6e4 	.word	0x0802e6e4
 8003a24:	0802e726 	.word	0x0802e726
 8003a28:	0802e761 	.word	0x0802e761
 8003a2c:	20016ee4 	.word	0x20016ee4
 8003a30:	0802e7a8 	.word	0x0802e7a8
 8003a34:	20016ee8 	.word	0x20016ee8

08003a38 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003a3e:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003a40:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8003a44:	4770      	bx	lr

08003a46 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003a46:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4604      	mov	r4, r0
        setX(x);
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003a4e:	4615      	mov	r5, r2
        setX(x);
 8003a50:	4798      	blx	r3
        setY(y);
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	4620      	mov	r0, r4
 8003a56:	4629      	mov	r1, r5
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8003a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003a5e:	4718      	bx	r3

08003a60 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	461d      	mov	r5, r3
 8003a66:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003a6a:	f7ff ffec 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	4629      	mov	r1, r5
 8003a72:	4620      	mov	r0, r4
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	4798      	blx	r3
        setHeight(height);
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	4631      	mov	r1, r6
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003a84:	4718      	bx	r3
	...

08003a88 <_ZN8touchgfx6WidgetC1Ev>:
 8003a88:	2200      	movs	r2, #0
 8003a8a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003a8e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 8003a92:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003a96:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a9e:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8003aa0:	4a01      	ldr	r2, [pc, #4]	; (8003aa8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003aa2:	6002      	str	r2, [r0, #0]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	0802e828 	.word	0x0802e828

08003aac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4604      	mov	r4, r0
 8003ab0:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003ab2:	2226      	movs	r2, #38	; 0x26
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f027 fcef 	bl	802b498 <memset>
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7ff ffe4 	bl	8003a88 <_ZN8touchgfx6WidgetC1Ev>
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	882b      	ldrh	r3, [r5, #0]
 8003aca:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003acc:	23ff      	movs	r3, #255	; 0xff
 8003ace:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 8003ad2:	f015 fe24 	bl	801971e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	bd38      	pop	{r3, r4, r5, pc}
 8003ada:	bf00      	nop
 8003adc:	08031210 	.word	0x08031210

08003ae0 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003ae4:	2226      	movs	r2, #38	; 0x26
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f027 fcd6 	bl	802b498 <memset>
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff ffcb 	bl	8003a88 <_ZN8touchgfx6WidgetC1Ev>
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003af4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8003af8:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003afa:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003afe:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b04:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003b06:	2300      	movs	r3, #0
 8003b08:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b10:	8723      	strh	r3, [r4, #56]	; 0x38
 8003b12:	63e3      	str	r3, [r4, #60]	; 0x3c
              text(0)
 8003b14:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	08031118 	.word	0x08031118
 8003b20:	0802e2d4 	.word	0x0802e2d4

08003b24 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	4604      	mov	r4, r0
        : presenter(0)
 8003b2a:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003b2c:	f64f 76ff 	movw	r6, #65535	; 0xffff
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8003b30:	4fbe      	ldr	r7, [pc, #760]	; (8003e2c <_ZN15Screen1ViewBaseC1Ev+0x308>)
 8003b32:	46a0      	mov	r8, r4
 8003b34:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
 8003b38:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8003b3c:	f107 0924 	add.w	r9, r7, #36	; 0x24
 8003b40:	ed2d 8b04 	vpush	{d8-d9}
 8003b44:	b08b      	sub	sp, #44	; 0x2c
 8003b46:	f019 fd71 	bl	801d62c <_ZN8touchgfx6ScreenC1Ev>
 8003b4a:	4bb9      	ldr	r3, [pc, #740]	; (8003e30 <_ZN15Screen1ViewBaseC1Ev+0x30c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003b4c:	2226      	movs	r2, #38	; 0x26
 8003b4e:	4629      	mov	r1, r5
 8003b50:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003b52:	f848 3b40 	str.w	r3, [r8], #64
 8003b56:	4640      	mov	r0, r8
 8003b58:	f027 fc9e 	bl	802b498 <memset>
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	f7ff ff93 	bl	8003a88 <_ZN8touchgfx6WidgetC1Ev>
 8003b62:	4bb4      	ldr	r3, [pc, #720]	; (8003e34 <_ZN15Screen1ViewBaseC1Ev+0x310>)
 8003b64:	a908      	add	r1, sp, #32
 8003b66:	4658      	mov	r0, fp
 8003b68:	6423      	str	r3, [r4, #64]	; 0x40
 8003b6a:	23ff      	movs	r3, #255	; 0xff
        : color(col)
 8003b6c:	66a5      	str	r5, [r4, #104]	; 0x68
 8003b6e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8003b72:	f8ad 6020 	strh.w	r6, [sp, #32]
 8003b76:	f7ff ff99 	bl	8003aac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b7a:	a908      	add	r1, sp, #32
 8003b7c:	4650      	mov	r0, sl
 8003b7e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8003b82:	f7ff ff93 	bl	8003aac <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b86:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 8003b8a:	f504 7690 	add.w	r6, r4, #288	; 0x120
 8003b8e:	4618      	mov	r0, r3
 8003b90:	ee08 3a90 	vmov	s17, r3
 8003b94:	f014 fbfa 	bl	801838c <_ZN8touchgfx6CircleC1Ev>
 8003b98:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	9303      	str	r3, [sp, #12]
 8003ba0:	f7ff fb62 	bl	8003268 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
 8003baa:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003bae:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8003bb2:	f012 ffaf 	bl	8016b14 <_ZN8touchgfx14CircleProgressC1Ev>
 8003bb6:	f504 7308 	add.w	r3, r4, #544	; 0x220
 8003bba:	4618      	mov	r0, r3
 8003bbc:	ee09 3a10 	vmov	s18, r3
 8003bc0:	f7ff fb52 	bl	8003268 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8003bc4:	f8c4 9228 	str.w	r9, [r4, #552]	; 0x228
 8003bc8:	f504 790d 	add.w	r9, r4, #564	; 0x234
 8003bcc:	f8c4 7220 	str.w	r7, [r4, #544]	; 0x220
 8003bd0:	f8c4 522c 	str.w	r5, [r4, #556]	; 0x22c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003bd4:	1d27      	adds	r7, r4, #4
        : TextArea()
 8003bd6:	4648      	mov	r0, r9
 8003bd8:	f7ff ff82 	bl	8003ae0 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8003bdc:	4b96      	ldr	r3, [pc, #600]	; (8003e38 <_ZN15Screen1ViewBaseC1Ev+0x314>)
 8003bde:	f8c4 527c 	str.w	r5, [r4, #636]	; 0x27c
 8003be2:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
 8003be6:	f504 7320 	add.w	r3, r4, #640	; 0x280
 8003bea:	4618      	mov	r0, r3
 8003bec:	ee08 3a10 	vmov	s16, r3
 8003bf0:	f7ff ff76 	bl	8003ae0 <_ZN8touchgfx8TextAreaC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003bf4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8003bf8:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
 8003bfc:	f016 fc8a 	bl	801a514 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 480, 272);
 8003c00:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003c04:	462a      	mov	r2, r5
 8003c06:	4640      	mov	r0, r8
 8003c08:	4629      	mov	r1, r5
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003c10:	f7ff ff26 	bl	8003a60 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003c14:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003c18:	4641      	mov	r1, r8
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	66a3      	str	r3, [r4, #104]	; 0x68
 8003c1e:	f04f 0801 	mov.w	r8, #1
 8003c22:	f013 f95f 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Image1.setXY(0, -11);
 8003c26:	f06f 020a 	mvn.w	r2, #10
 8003c2a:	4658      	mov	r0, fp
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	f7ff ff0a 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
    Image1.setBitmap(touchgfx::Bitmap(BITMAP_BACK_ID));
 8003c32:	4658      	mov	r0, fp
 8003c34:	a908      	add	r1, sp, #32
 8003c36:	f8ad 8020 	strh.w	r8, [sp, #32]
 8003c3a:	f015 fd70 	bl	801971e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003c3e:	4659      	mov	r1, fp
 8003c40:	4638      	mov	r0, r7
 8003c42:	f04f 0b02 	mov.w	fp, #2
 8003c46:	f013 f94d 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Image2.setXY(168, 10);
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	4650      	mov	r0, sl
 8003c4e:	21a8      	movs	r1, #168	; 0xa8
 8003c50:	f7ff fef9 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
    Image2.setBitmap(touchgfx::Bitmap(BITMAP_PUT_ID));
 8003c54:	4650      	mov	r0, sl
 8003c56:	a908      	add	r1, sp, #32
 8003c58:	f8ad b020 	strh.w	fp, [sp, #32]
 8003c5c:	f015 fd5f 	bl	801971e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003c60:	4651      	mov	r1, sl
 8003c62:	4638      	mov	r0, r7
    textArea1.setPosition(156, 49, 168, 97);
 8003c64:	f04f 0a61 	mov.w	sl, #97	; 0x61
 8003c68:	f013 f93c 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle1.setPosition(120, -13, 240, 240);
 8003c6c:	23f0      	movs	r3, #240	; 0xf0
 8003c6e:	f06f 020c 	mvn.w	r2, #12
 8003c72:	2178      	movs	r1, #120	; 0x78
 8003c74:	ee18 0a90 	vmov	r0, s17
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	f7ff fef1 	bl	8003a60 <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 8003c7e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c82:	ee18 1a90 	vmov	r1, s17
 8003c86:	4638      	mov	r0, r7
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 8003c88:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8003c8c:	f8a4 511c 	strh.w	r5, [r4, #284]	; 0x11c
        this->circleCenterY = CWRUtil::toQ5(y);
 8003c90:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
        this->circleRadius = CWRUtil::toQ5(r);
 8003c94:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003c98:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8003c9c:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8003ca0:	e9c4 353f 	strd	r3, r5, [r4, #252]	; 0xfc
 8003ca4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003ca8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
        canvasPainter = &painter;
 8003cac:	9b03      	ldr	r3, [sp, #12]
 8003cae:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8003cb2:	f013 f917 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circleProgress1.setXY(145, 12);
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	220c      	movs	r2, #12
 8003cba:	2191      	movs	r1, #145	; 0x91
 8003cbc:	f7ff fec3 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
    circleProgress1.setProgressIndicatorPosition(0, 0, 190, 190);
 8003cc0:	23be      	movs	r3, #190	; 0xbe
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	462a      	mov	r2, r5
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	f012 fec9 	bl	8016a60 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>
    circleProgress1.setRange(0, 254);
 8003cce:	462b      	mov	r3, r5
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	22fe      	movs	r2, #254	; 0xfe
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	9500      	str	r5, [sp, #0]
 8003cd8:	f012 ff50 	bl	8016b7c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    circleProgress1.setCenter(95, 95);
 8003cdc:	225f      	movs	r2, #95	; 0x5f
 8003cde:	4630      	mov	r0, r6
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	f012 fe52 	bl	801698a <_ZN8touchgfx14CircleProgress9setCenterEii>
    circleProgress1.setRadius(85);
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	2155      	movs	r1, #85	; 0x55
 8003cea:	f012 fe78 	bl	80169de <_ZN8touchgfx14CircleProgress9setRadiusEi>
    circleProgress1.setLineWidth(20);
 8003cee:	4630      	mov	r0, r6
 8003cf0:	2114      	movs	r1, #20
 8003cf2:	f012 fe7a 	bl	80169ea <_ZN8touchgfx14CircleProgress12setLineWidthEi>
    circleProgress1.setStartEndAngle(-180, 180);
 8003cf6:	22b4      	movs	r2, #180	; 0xb4
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	f06f 01b3 	mvn.w	r1, #179	; 0xb3
 8003cfe:	f012 fef7 	bl	8016af0 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
    circleProgress1.setCapPrecision(90);
 8003d02:	4630      	mov	r0, r6
 8003d04:	215a      	movs	r1, #90	; 0x5a
 8003d06:	f012 fe77 	bl	80169f8 <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>
    circleProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_CIRCLEPROGRESS_BACKGROUNDS_LARGE_ID));
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	a908      	add	r1, sp, #32
 8003d0e:	f8ad 5020 	strh.w	r5, [sp, #32]
 8003d12:	f013 f87a 	bl	8016e0a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <_ZN15Screen1ViewBaseC1Ev+0x318>)
    circleProgress1.setPainter(circleProgress1Painter);
 8003d18:	4630      	mov	r0, r6
 8003d1a:	ee19 1a10 	vmov	r1, s18
 8003d1e:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
 8003d22:	f640 531f 	movw	r3, #3359	; 0xd1f
 8003d26:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
 8003d2a:	f012 fe2b 	bl	8016984 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>
    circleProgress1.setValue(50);
 8003d2e:	4630      	mov	r0, r6
 8003d30:	2132      	movs	r1, #50	; 0x32
 8003d32:	f012 fec2 	bl	8016aba <_ZN8touchgfx14CircleProgress8setValueEi>
 8003d36:	4631      	mov	r1, r6
 8003d38:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8003d3a:	ae04      	add	r6, sp, #16
 8003d3c:	f013 f8d2 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setPosition(156, 49, 168, 97);
 8003d40:	2231      	movs	r2, #49	; 0x31
 8003d42:	23a8      	movs	r3, #168	; 0xa8
 8003d44:	219c      	movs	r1, #156	; 0x9c
 8003d46:	4648      	mov	r0, r9
 8003d48:	f8cd a000 	str.w	sl, [sp]
 8003d4c:	f7ff fe88 	bl	8003a60 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003d54:	4649      	mov	r1, r9
 8003d56:	4630      	mov	r0, r6
        color = newColor;
 8003d58:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
        boundingArea = calculateBoundingArea();
 8003d5c:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
        linespace = space;
 8003d60:	f8a4 5268 	strh.w	r5, [r4, #616]	; 0x268
        boundingArea = calculateBoundingArea();
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d68:	4798      	blx	r3
 8003d6a:	f504 731c 	add.w	r3, r4, #624	; 0x270
 8003d6e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003d72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IRWT).getText());
 8003d76:	f504 7332 	add.w	r3, r4, #712	; 0x2c8
 8003d7a:	9303      	str	r3, [sp, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003d7c:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <_ZN15Screen1ViewBaseC1Ev+0x31c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b92b      	cbnz	r3, 8003d8e <_ZN15Screen1ViewBaseC1Ev+0x26a>
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <_ZN15Screen1ViewBaseC1Ev+0x320>)
 8003d84:	2160      	movs	r1, #96	; 0x60
 8003d86:	4a30      	ldr	r2, [pc, #192]	; (8003e48 <_ZN15Screen1ViewBaseC1Ev+0x324>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003d88:	4830      	ldr	r0, [pc, #192]	; (8003e4c <_ZN15Screen1ViewBaseC1Ev+0x328>)
 8003d8a:	f027 faf5 	bl	802b378 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003d8e:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <_ZN15Screen1ViewBaseC1Ev+0x32c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d803      	bhi.n	8003d9e <_ZN15Screen1ViewBaseC1Ev+0x27a>
 8003d96:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <_ZN15Screen1ViewBaseC1Ev+0x330>)
 8003d98:	4651      	mov	r1, sl
 8003d9a:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <_ZN15Screen1ViewBaseC1Ev+0x324>)
 8003d9c:	e7f4      	b.n	8003d88 <_ZN15Screen1ViewBaseC1Ev+0x264>
        return texts->getText(typedTextId);
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <_ZN15Screen1ViewBaseC1Ev+0x334>)
 8003da0:	4641      	mov	r1, r8
        : typedTextId(id)
 8003da2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003e64 <_ZN15Screen1ViewBaseC1Ev+0x340>
        return texts->getText(typedTextId);
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	f000 f9c8 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 8003dac:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <_ZN15Screen1ViewBaseC1Ev+0x338>)
 8003dae:	4603      	mov	r3, r0
 8003db0:	210a      	movs	r1, #10
 8003db2:	9803      	ldr	r0, [sp, #12]
 8003db4:	f01b f8f2 	bl	801ef9c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8003db8:	9b03      	ldr	r3, [sp, #12]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9ZVV));
 8003dba:	a908      	add	r1, sp, #32
 8003dbc:	4648      	mov	r0, r9
 8003dbe:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
        : typedTextId(id)
 8003dc2:	f8cd 8020 	str.w	r8, [sp, #32]
 8003dc6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8003dca:	f015 fbe1 	bl	8019590 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003dce:	4649      	mov	r1, r9
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f013 f887 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(214, 136);
 8003dd6:	2288      	movs	r2, #136	; 0x88
 8003dd8:	ee18 0a10 	vmov	r0, s16
 8003ddc:	21d6      	movs	r1, #214	; 0xd6
 8003dde:	f7ff fe32 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003de2:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <_ZN15Screen1ViewBaseC1Ev+0x33c>)
        boundingArea = calculateBoundingArea();
 8003de4:	ee18 1a10 	vmov	r1, s16
 8003de8:	4630      	mov	r0, r6
        color = newColor;
 8003dea:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
        linespace = space;
 8003dee:	f8a4 52b4 	strh.w	r5, [r4, #692]	; 0x2b4
        boundingArea = calculateBoundingArea();
 8003df2:	f015 f933 	bl	801905c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003df6:	f504 732f 	add.w	r3, r4, #700	; 0x2bc
 8003dfa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZCWR));
 8003e02:	a908      	add	r1, sp, #32
 8003e04:	ee18 0a10 	vmov	r0, s16
 8003e08:	f8cd 8020 	str.w	r8, [sp, #32]
 8003e0c:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8003e10:	f015 fbbe 	bl	8019590 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003e14:	4638      	mov	r0, r7
 8003e16:	ee18 1a10 	vmov	r1, s16
 8003e1a:	f013 f863 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003e1e:	4620      	mov	r0, r4
 8003e20:	b00b      	add	sp, #44	; 0x2c
 8003e22:	ecbd 8b04 	vpop	{d8-d9}
 8003e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08030f38 	.word	0x08030f38
 8003e30:	0802e920 	.word	0x0802e920
 8003e34:	080311a8 	.word	0x080311a8
 8003e38:	0802e890 	.word	0x0802e890
 8003e3c:	ff08a0ff 	.word	0xff08a0ff
 8003e40:	20016ee0 	.word	0x20016ee0
 8003e44:	0802e6e4 	.word	0x0802e6e4
 8003e48:	0802e7e6 	.word	0x0802e7e6
 8003e4c:	0802e761 	.word	0x0802e761
 8003e50:	20016ee4 	.word	0x20016ee4
 8003e54:	0802e7a8 	.word	0x0802e7a8
 8003e58:	20016eec 	.word	0x20016eec
 8003e5c:	08030150 	.word	0x08030150
 8003e60:	fff57631 	.word	0xfff57631
 8003e64:	0802e2d4 	.word	0x0802e2d4

08003e68 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 5, 23, 20, 0, 0, 4, 1, 1, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003e68:	4770      	bx	lr
	...

08003e6c <_Z23getFont_verdana_20_4bppv>:
{
 8003e6c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 5, 23, 20, 0, 0, 4, 1, 1, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003e6e:	4d17      	ldr	r5, [pc, #92]	; (8003ecc <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8003e70:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 5, 23, 20, 0, 0, 4, 1, 1, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003e72:	782c      	ldrb	r4, [r5, #0]
 8003e74:	f3bf 8f5b 	dmb	ish
 8003e78:	f014 0401 	ands.w	r4, r4, #1
 8003e7c:	d122      	bne.n	8003ec4 <_Z23getFont_verdana_20_4bppv+0x58>
 8003e7e:	4628      	mov	r0, r5
 8003e80:	f027 fa4d 	bl	802b31e <__cxa_guard_acquire>
 8003e84:	b1f0      	cbz	r0, 8003ec4 <_Z23getFont_verdana_20_4bppv+0x58>
 8003e86:	233f      	movs	r3, #63	; 0x3f
 8003e88:	2205      	movs	r2, #5
 8003e8a:	4911      	ldr	r1, [pc, #68]	; (8003ed0 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003e90:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003e92:	9308      	str	r3, [sp, #32]
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <_Z23getFont_verdana_20_4bppv+0x70>)
 8003e96:	940a      	str	r4, [sp, #40]	; 0x28
 8003e98:	9401      	str	r4, [sp, #4]
 8003e9a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8003eaa:	2314      	movs	r3, #20
 8003eac:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2317      	movs	r3, #23
 8003eb4:	f7ff fcee 	bl	8003894 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003eb8:	4809      	ldr	r0, [pc, #36]	; (8003ee0 <_Z23getFont_verdana_20_4bppv+0x74>)
 8003eba:	f027 fa7b 	bl	802b3b4 <atexit>
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f027 fa39 	bl	802b336 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003ec4:	4804      	ldr	r0, [pc, #16]	; (8003ed8 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003ec6:	b00f      	add	sp, #60	; 0x3c
 8003ec8:	bd30      	pop	{r4, r5, pc}
 8003eca:	bf00      	nop
 8003ecc:	20003b2c 	.word	0x20003b2c
 8003ed0:	9012b4cc 	.word	0x9012b4cc
 8003ed4:	0803177c 	.word	0x0803177c
 8003ed8:	20003b30 	.word	0x20003b30
 8003edc:	08031788 	.word	0x08031788
 8003ee0:	08003e69 	.word	0x08003e69

08003ee4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003ee4:	4770      	bx	lr
	...

08003ee8 <_Z23getFont_verdana_40_4bppv>:
{
 8003ee8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003eea:	4d16      	ldr	r5, [pc, #88]	; (8003f44 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003eec:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003eee:	782c      	ldrb	r4, [r5, #0]
 8003ef0:	f3bf 8f5b 	dmb	ish
 8003ef4:	f014 0401 	ands.w	r4, r4, #1
 8003ef8:	d120      	bne.n	8003f3c <_Z23getFont_verdana_40_4bppv+0x54>
 8003efa:	4628      	mov	r0, r5
 8003efc:	f027 fa0f 	bl	802b31e <__cxa_guard_acquire>
 8003f00:	b1e0      	cbz	r0, 8003f3c <_Z23getFont_verdana_40_4bppv+0x54>
 8003f02:	233f      	movs	r3, #63	; 0x3f
 8003f04:	2201      	movs	r2, #1
 8003f06:	4910      	ldr	r1, [pc, #64]	; (8003f48 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003f08:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <_Z23getFont_verdana_40_4bppv+0x64>)
 8003f0c:	4810      	ldr	r0, [pc, #64]	; (8003f50 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003f0e:	9308      	str	r3, [sp, #32]
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003f12:	940a      	str	r4, [sp, #40]	; 0x28
 8003f14:	9405      	str	r4, [sp, #20]
 8003f16:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f20:	2328      	movs	r3, #40	; 0x28
 8003f22:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f2c:	f7ff fcb2 	bl	8003894 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f30:	4809      	ldr	r0, [pc, #36]	; (8003f58 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003f32:	f027 fa3f 	bl	802b3b4 <atexit>
 8003f36:	4628      	mov	r0, r5
 8003f38:	f027 f9fd 	bl	802b336 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003f3c:	4804      	ldr	r0, [pc, #16]	; (8003f50 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003f3e:	b00f      	add	sp, #60	; 0x3c
 8003f40:	bd30      	pop	{r4, r5, pc}
 8003f42:	bf00      	nop
 8003f44:	20003b5c 	.word	0x20003b5c
 8003f48:	9012b514 	.word	0x9012b514
 8003f4c:	08031780 	.word	0x08031780
 8003f50:	20003b60 	.word	0x20003b60
 8003f54:	0803178c 	.word	0x0803178c
 8003f58:	08003ee5 	.word	0x08003ee5

08003f5c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_80_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_80_4bpp();

touchgfx::GeneratedFont& getFont_verdana_80_4bpp()
{
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 81, 80, 0, 0, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0, 0);
 8003f5c:	4770      	bx	lr
	...

08003f60 <_Z23getFont_verdana_80_4bppv>:
{
 8003f60:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 81, 80, 0, 0, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0, 0);
 8003f62:	4d17      	ldr	r5, [pc, #92]	; (8003fc0 <_Z23getFont_verdana_80_4bppv+0x60>)
{
 8003f64:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 81, 80, 0, 0, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0, 0);
 8003f66:	782c      	ldrb	r4, [r5, #0]
 8003f68:	f3bf 8f5b 	dmb	ish
 8003f6c:	f014 0401 	ands.w	r4, r4, #1
 8003f70:	d122      	bne.n	8003fb8 <_Z23getFont_verdana_80_4bppv+0x58>
 8003f72:	4628      	mov	r0, r5
 8003f74:	f027 f9d3 	bl	802b31e <__cxa_guard_acquire>
 8003f78:	b1f0      	cbz	r0, 8003fb8 <_Z23getFont_verdana_80_4bppv+0x58>
 8003f7a:	233f      	movs	r3, #63	; 0x3f
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4911      	ldr	r1, [pc, #68]	; (8003fc4 <_Z23getFont_verdana_80_4bppv+0x64>)
 8003f80:	9309      	str	r3, [sp, #36]	; 0x24
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <_Z23getFont_verdana_80_4bppv+0x68>)
 8003f84:	4811      	ldr	r0, [pc, #68]	; (8003fcc <_Z23getFont_verdana_80_4bppv+0x6c>)
 8003f86:	9308      	str	r3, [sp, #32]
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <_Z23getFont_verdana_80_4bppv+0x70>)
 8003f8a:	940a      	str	r4, [sp, #40]	; 0x28
 8003f8c:	9405      	str	r4, [sp, #20]
 8003f8e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003f92:	2304      	movs	r3, #4
 8003f94:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f98:	2350      	movs	r3, #80	; 0x50
 8003f9a:	220b      	movs	r2, #11
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2351      	movs	r3, #81	; 0x51
 8003fa0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003fa4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003fa8:	f7ff fc74 	bl	8003894 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003fac:	4809      	ldr	r0, [pc, #36]	; (8003fd4 <_Z23getFont_verdana_80_4bppv+0x74>)
 8003fae:	f027 fa01 	bl	802b3b4 <atexit>
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f027 f9bf 	bl	802b336 <__cxa_guard_release>
    return verdana_80_4bpp;
}
 8003fb8:	4804      	ldr	r0, [pc, #16]	; (8003fcc <_Z23getFont_verdana_80_4bppv+0x6c>)
 8003fba:	b00f      	add	sp, #60	; 0x3c
 8003fbc:	bd30      	pop	{r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20003b8c 	.word	0x20003b8c
 8003fc4:	9012b524 	.word	0x9012b524
 8003fc8:	08031784 	.word	0x08031784
 8003fcc:	20003b90 	.word	0x20003b90
 8003fd0:	08031790 	.word	0x08031790
 8003fd4:	08003f5d 	.word	0x08003f5d

08003fd8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003fd8:	2000      	movs	r0, #0
 8003fda:	4770      	bx	lr

08003fdc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003fdc:	2000      	movs	r0, #0
 8003fde:	4770      	bx	lr

08003fe0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003fe0:	b40e      	push	{r1, r2, r3}
 8003fe2:	b503      	push	{r0, r1, lr}
 8003fe4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fe6:	2100      	movs	r1, #0
{
 8003fe8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003fec:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fee:	f018 fec3 	bl	801cd78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ff2:	b002      	add	sp, #8
 8003ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff8:	b003      	add	sp, #12
 8003ffa:	4770      	bx	lr

08003ffc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ffc:	b40c      	push	{r2, r3}
 8003ffe:	b507      	push	{r0, r1, r2, lr}
 8004000:	ab04      	add	r3, sp, #16
 8004002:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004006:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004008:	f018 feb6 	bl	801cd78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800400c:	b003      	add	sp, #12
 800400e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004012:	b002      	add	sp, #8
 8004014:	4770      	bx	lr
	...

08004018 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004018:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800401a:	b510      	push	{r4, lr}
 800401c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800401e:	b373      	cbz	r3, 800407e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004020:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8004022:	b92b      	cbnz	r3, 8004030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004026:	21c5      	movs	r1, #197	; 0xc5
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800402a:	4819      	ldr	r0, [pc, #100]	; (8004090 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800402c:	f027 f9a4 	bl	802b378 <__assert_func>
            return buffer[pos];
 8004030:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004032:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004036:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004038:	b30b      	cbz	r3, 800407e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800403a:	f01a fa01 	bl	801e440 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800403e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8004040:	2b01      	cmp	r3, #1
 8004042:	d803      	bhi.n	800404c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004044:	4b13      	ldr	r3, [pc, #76]	; (8004094 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004046:	21cb      	movs	r1, #203	; 0xcb
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800404a:	e7ee      	b.n	800402a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800404c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800404e:	f640 103f 	movw	r0, #2367	; 0x93f
 8004052:	1c53      	adds	r3, r2, #1
 8004054:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004056:	2b09      	cmp	r3, #9
 8004058:	4619      	mov	r1, r3
 800405a:	bf88      	it	hi
 800405c:	f1a3 010a 	subhi.w	r1, r3, #10
 8004060:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004064:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8004066:	4281      	cmp	r1, r0
 8004068:	d109      	bne.n	800407e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800406a:	2b0a      	cmp	r3, #10
 800406c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004070:	bf28      	it	cs
 8004072:	2300      	movcs	r3, #0
            return buffer[pos];
 8004074:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004076:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800407a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 800407c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800407e:	4620      	mov	r0, r4
}
 8004080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004084:	f01a b8de 	b.w	801e244 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004088:	0802e94c 	.word	0x0802e94c
 800408c:	0802e955 	.word	0x0802e955
 8004090:	0802ea00 	.word	0x0802ea00
 8004094:	0802ea4a 	.word	0x0802ea4a
 8004098:	0802ea58 	.word	0x0802ea58

0800409c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800409c:	f01a b89b 	b.w	801e1d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080040a0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80040a0:	b510      	push	{r4, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	ac02      	add	r4, sp, #8
 80040a6:	e884 0006 	stmia.w	r4, {r1, r2}
 80040aa:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80040ac:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80040ae:	4621      	mov	r1, r4
    va_start(pArg, format);
 80040b0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	9b08      	ldr	r3, [sp, #32]
 80040ba:	f017 fab7 	bl	801b62c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80040be:	b006      	add	sp, #24
 80040c0:	bd10      	pop	{r4, pc}
	...

080040c4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80040c4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80040c6:	bb18      	cbnz	r0, 8004110 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80040ca:	4813      	ldr	r0, [pc, #76]	; (8004118 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4913      	ldr	r1, [pc, #76]	; (800411c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80040d0:	b1b3      	cbz	r3, 8004100 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80040d2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80040d4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80040d6:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80040d8:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80040da:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	441a      	add	r2, r3
 80040e0:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80040e8:	f000 f838 	bl	800415c <_ZN17TypedTextDatabase8getFontsEv>
 80040ec:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80040ee:	f000 f833 	bl	8004158 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80040f4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80040f8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80040fc:	8018      	strh	r0, [r3, #0]
    }
}
 80040fe:	e007      	b.n	8004110 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004102:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004106:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800410a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800410c:	2c00      	cmp	r4, #0
 800410e:	d1e8      	bne.n	80040e2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004110:	bd38      	pop	{r3, r4, r5, pc}
 8004112:	bf00      	nop
 8004114:	20003bbc 	.word	0x20003bbc
 8004118:	20003bc0 	.word	0x20003bc0
 800411c:	20003bc4 	.word	0x20003bc4
 8004120:	20003bc8 	.word	0x20003bc8
 8004124:	20016ee0 	.word	0x20016ee0
 8004128:	20016ee8 	.word	0x20016ee8
 800412c:	20016ee4 	.word	0x20016ee4
 8004130:	9012b5cc 	.word	0x9012b5cc
 8004134:	9012b5c0 	.word	0x9012b5c0
 8004138:	9012b5e8 	.word	0x9012b5e8

0800413c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20003bc4 	.word	0x20003bc4
 8004154:	20003bc0 	.word	0x20003bc0

08004158 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004158:	2003      	movs	r0, #3
 800415a:	4770      	bx	lr

0800415c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800415c:	4800      	ldr	r0, [pc, #0]	; (8004160 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800415e:	4770      	bx	lr
 8004160:	20003bcc 	.word	0x20003bcc

08004164 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004164:	b510      	push	{r4, lr}
};
 8004166:	4c05      	ldr	r4, [pc, #20]	; (800417c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_80_4bpp()),
 8004168:	f7ff fefa 	bl	8003f60 <_Z23getFont_verdana_80_4bppv>
};
 800416c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800416e:	f7ff febb 	bl	8003ee8 <_Z23getFont_verdana_40_4bppv>
};
 8004172:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_20_4bpp())
 8004174:	f7ff fe7a 	bl	8003e6c <_Z23getFont_verdana_20_4bppv>
};
 8004178:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800417a:	bd10      	pop	{r4, pc}
 800417c:	20003bcc 	.word	0x20003bcc

08004180 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004180:	4770      	bx	lr

08004182 <_ZN19FrontendApplicationD0Ev>:
 8004182:	b510      	push	{r4, lr}
 8004184:	4604      	mov	r4, r0
 8004186:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800418a:	f027 f8c6 	bl	802b31a <_ZdlPvj>
 800418e:	4620      	mov	r0, r4
 8004190:	bd10      	pop	{r4, pc}

08004192 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004192:	b510      	push	{r4, lr}
 8004194:	4604      	mov	r4, r0
    {
        model.tick();
 8004196:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800419a:	f000 f81d 	bl	80041d8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800419e:	4620      	mov	r0, r4
    }
 80041a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80041a4:	f017 bf20 	b.w	801bfe8 <_ZN8touchgfx11Application15handleTickEventEv>

080041a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80041a8:	b510      	push	{r4, lr}
 80041aa:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80041ac:	f7ff fb00 	bl	80037b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80041b0:	4b01      	ldr	r3, [pc, #4]	; (80041b8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80041b2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80041b4:	6023      	str	r3, [r4, #0]
}
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	0802eb34 	.word	0x0802eb34

080041bc <_ZN5ModelC1Ev>:

extern "C"
{
	xQueueHandle messageQ;
}
Model::Model() : modelListener(0)
 80041bc:	2200      	movs	r2, #0
{
	messageQ = xQueueGenericCreate(1, 1, 0);
 80041be:	2101      	movs	r1, #1
Model::Model() : modelListener(0)
 80041c0:	b510      	push	{r4, lr}
 80041c2:	4604      	mov	r4, r0
 80041c4:	6002      	str	r2, [r0, #0]
	messageQ = xQueueGenericCreate(1, 1, 0);
 80041c6:	4608      	mov	r0, r1
 80041c8:	f003 fe54 	bl	8007e74 <xQueueGenericCreate>
 80041cc:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <_ZN5ModelC1Ev+0x18>)
 80041ce:	6018      	str	r0, [r3, #0]
}
 80041d0:	4620      	mov	r0, r4
 80041d2:	bd10      	pop	{r4, pc}
 80041d4:	20003bdc 	.word	0x20003bdc

080041d8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80041d8:	b570      	push	{r4, r5, r6, lr}
	if(xQueueReceive(messageQ, &counter, 0) == pdTRUE)
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <_ZN5Model4tickEv+0x28>)
{
 80041dc:	4604      	mov	r4, r0
	if(xQueueReceive(messageQ, &counter, 0) == pdTRUE)
 80041de:	4d09      	ldr	r5, [pc, #36]	; (8004204 <_ZN5Model4tickEv+0x2c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	4629      	mov	r1, r5
 80041e6:	f004 f888 	bl	80082fa <xQueueReceive>
 80041ea:	2801      	cmp	r0, #1
 80041ec:	d106      	bne.n	80041fc <_ZN5Model4tickEv+0x24>
	{
		modelListener->setNewValue(counter);
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	6829      	ldr	r1, [r5, #0]
 80041f2:	6803      	ldr	r3, [r0, #0]
	}
}
 80041f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->setNewValue(counter);
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	4718      	bx	r3
}
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
 80041fe:	bf00      	nop
 8004200:	20003bdc 	.word	0x20003bdc
 8004204:	20003bd8 	.word	0x20003bd8

08004208 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8004208:	4770      	bx	lr

0800420a <_ZThn4_N16Screen1PresenterD1Ev>:
 800420a:	3804      	subs	r0, #4
 800420c:	4770      	bx	lr

0800420e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800420e:	4770      	bx	lr

08004210 <_ZN16Screen1PresenterD0Ev>:
 8004210:	b510      	push	{r4, lr}
 8004212:	4604      	mov	r4, r0
 8004214:	2110      	movs	r1, #16
 8004216:	f027 f880 	bl	802b31a <_ZdlPvj>
 800421a:	4620      	mov	r0, r4
 800421c:	bd10      	pop	{r4, pc}

0800421e <_ZThn4_N16Screen1PresenterD0Ev>:
 800421e:	f1a0 0004 	sub.w	r0, r0, #4
 8004222:	e7f5      	b.n	8004210 <_ZN16Screen1PresenterD0Ev>

08004224 <_ZN16Screen1Presenter11setNewValueEj>:

}

void Screen1Presenter::setNewValue(unsigned int value)
{
	view.updateVal(value);
 8004224:	68c0      	ldr	r0, [r0, #12]
 8004226:	f000 b837 	b.w	8004298 <_ZN11Screen1View9updateValEj>

0800422a <_ZThn4_N16Screen1Presenter11setNewValueEj>:
    void setNewValue(unsigned int value);
 800422a:	f1a0 0004 	sub.w	r0, r0, #4
 800422e:	f7ff bff9 	b.w	8004224 <_ZN16Screen1Presenter11setNewValueEj>
	...

08004234 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004234:	2200      	movs	r2, #0
    : view(v)
 8004236:	60c1      	str	r1, [r0, #12]
 8004238:	6082      	str	r2, [r0, #8]
 800423a:	4a04      	ldr	r2, [pc, #16]	; (800424c <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 800423c:	b510      	push	{r4, lr}
    : view(v)
 800423e:	f102 0408 	add.w	r4, r2, #8
 8004242:	3224      	adds	r2, #36	; 0x24
 8004244:	6004      	str	r4, [r0, #0]
 8004246:	6042      	str	r2, [r0, #4]
}
 8004248:	bd10      	pop	{r4, pc}
 800424a:	bf00      	nop
 800424c:	0802eb78 	.word	0x0802eb78

08004250 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004250:	4770      	bx	lr
	...

08004254 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <_ZN11Screen1ViewD1Ev+0x10>)
 8004256:	b510      	push	{r4, lr}
 8004258:	4604      	mov	r4, r0
 800425a:	6003      	str	r3, [r0, #0]
 800425c:	f7ff fb96 	bl	800398c <_ZN15Screen1ViewBaseD1Ev>
 8004260:	4620      	mov	r0, r4
 8004262:	bd10      	pop	{r4, pc}
 8004264:	0802ebb0 	.word	0x0802ebb0

08004268 <_ZN11Screen1ViewD0Ev>:
 8004268:	b510      	push	{r4, lr}
 800426a:	4604      	mov	r4, r0
 800426c:	f7ff fff2 	bl	8004254 <_ZN11Screen1ViewD1Ev>
 8004270:	f641 61fc 	movw	r1, #7932	; 0x1efc
 8004274:	4620      	mov	r0, r4
 8004276:	f027 f850 	bl	802b31a <_ZdlPvj>
 800427a:	4620      	mov	r0, r4
 800427c:	bd10      	pop	{r4, pc}
	...

08004280 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004280:	b510      	push	{r4, lr}
 8004282:	4604      	mov	r4, r0
 8004284:	f7ff fc4e 	bl	8003b24 <_ZN15Screen1ViewBaseC1Ev>
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <_ZN11Screen1ViewC1Ev+0x10>)
}
 800428a:	4620      	mov	r0, r4
Screen1View::Screen1View()
 800428c:	6023      	str	r3, [r4, #0]
}
 800428e:	bd10      	pop	{r4, pc}
 8004290:	0802ebb0 	.word	0x0802ebb0

08004294 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004294:	f7ff bb71 	b.w	800397a <_ZN15Screen1ViewBase11setupScreenEv>

08004298 <_ZN11Screen1View9updateValEj>:

void Screen1View::updateVal(unsigned int newValue)
{
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4604      	mov	r4, r0
 800429c:	460d      	mov	r5, r1
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", newValue);
 800429e:	460b      	mov	r3, r1
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <_ZN11Screen1View9updateValEj+0x2c>)
 80042a2:	210a      	movs	r1, #10
 80042a4:	f500 7032 	add.w	r0, r0, #712	; 0x2c8
 80042a8:	f01a fe78 	bl	801ef9c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	circleProgress1.setValue(newValue);
 80042ac:	f504 7090 	add.w	r0, r4, #288	; 0x120
 80042b0:	4629      	mov	r1, r5
 80042b2:	f012 fc02 	bl	8016aba <_ZN8touchgfx14CircleProgress8setValueEi>
	textArea1.invalidate();
 80042b6:	f504 700d 	add.w	r0, r4, #564	; 0x234
}
 80042ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	textArea1.invalidate();
 80042be:	f018 be86 	b.w	801cfce <_ZNK8touchgfx8Drawable10invalidateEv>
 80042c2:	bf00      	nop
 80042c4:	0802feae 	.word	0x0802feae

080042c8 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80042c8:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80042ca:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80042ce:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80042d0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80042d4:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80042d6:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80042d8:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80042da:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80042dc:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80042de:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80042e0:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80042e2:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80042e4:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80042e6:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80042e8:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80042ea:	480b      	ldr	r0, [pc, #44]	; (8004318 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 80042ec:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80042f0:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80042f4:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80042f8:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80042fa:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 80042fc:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80042fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004302:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004304:	466a      	mov	r2, sp
 8004306:	f001 fd7f 	bl	8005e08 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 800430a:	3800      	subs	r0, #0
 800430c:	bf18      	it	ne
 800430e:	2001      	movne	r0, #1
 8004310:	b015      	add	sp, #84	; 0x54
 8004312:	f85d fb04 	ldr.w	pc, [sp], #4
 8004316:	bf00      	nop
 8004318:	20003be0 	.word	0x20003be0

0800431c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800431c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800431e:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004322:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4817      	ldr	r0, [pc, #92]	; (8004388 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800432a:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800432c:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800432e:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004330:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004332:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004334:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004338:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800433a:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800433c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800433e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004342:	f001 fd1e 	bl	8005d82 <HAL_QSPI_Command>
 8004346:	b9e0      	cbnz	r0, 8004382 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8004348:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 800434a:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800434c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004350:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004352:	480d      	ldr	r0, [pc, #52]	; (8004388 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8004354:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004358:	2310      	movs	r3, #16
 800435a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800435e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004360:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004362:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800436a:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800436c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800436e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004372:	f001 fd49 	bl	8005e08 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8004376:	3800      	subs	r0, #0
 8004378:	bf18      	it	ne
 800437a:	2001      	movne	r0, #1
}
 800437c:	b015      	add	sp, #84	; 0x54
 800437e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8004382:	2001      	movs	r0, #1
 8004384:	e7fa      	b.n	800437c <QSPI_WriteEnable.constprop.0+0x60>
 8004386:	bf00      	nop
 8004388:	20003be0 	.word	0x20003be0

0800438c <BSP_QSPI_EnableMemoryMappedMode>:
{
 800438c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800438e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004392:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004394:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004398:	480e      	ldr	r0, [pc, #56]	; (80043d4 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800439a:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800439c:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800439e:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80043a0:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80043a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043a6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80043a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ac:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80043b4:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80043b6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80043b8:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80043ba:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80043bc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80043c0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80043c4:	f001 fd70 	bl	8005ea8 <HAL_QSPI_MemoryMapped>
}
 80043c8:	3800      	subs	r0, #0
 80043ca:	bf18      	it	ne
 80043cc:	2001      	movne	r0, #1
 80043ce:	b011      	add	sp, #68	; 0x44
 80043d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80043d4:	20003be0 	.word	0x20003be0

080043d8 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80043d8:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80043da:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80043dc:	4845      	ldr	r0, [pc, #276]	; (80044f4 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 80043de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e0:	f042 0202 	orr.w	r2, r2, #2
{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
{
 80043e8:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80043ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80043ec:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80043ee:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80043f0:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80043f2:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80043f6:	4d40      	ldr	r5, [pc, #256]	; (80044f8 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 80043f8:	9200      	str	r2, [sp, #0]
 80043fa:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	f042 0202 	orr.w	r2, r2, #2
 8004402:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	f022 0202 	bic.w	r2, r2, #2
 800440a:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 800440c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440e:	f042 0202 	orr.w	r2, r2, #2
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
 8004414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004416:	f002 0202 	and.w	r2, r2, #2
 800441a:	9201      	str	r2, [sp, #4]
 800441c:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800441e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004420:	f042 0202 	orr.w	r2, r2, #2
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
 8004426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004428:	f002 0202 	and.w	r2, r2, #2
 800442c:	9202      	str	r2, [sp, #8]
 800442e:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8004430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004432:	f042 0208 	orr.w	r2, r2, #8
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	f002 0208 	and.w	r2, r2, #8
 800443e:	9203      	str	r2, [sp, #12]
 8004440:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8004442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004444:	f042 0208 	orr.w	r2, r2, #8
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
 800444a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444c:	f002 0208 	and.w	r2, r2, #8
 8004450:	9204      	str	r2, [sp, #16]
 8004452:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8004454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004456:	f042 0210 	orr.w	r2, r2, #16
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
 800445c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445e:	f002 0210 	and.w	r2, r2, #16
 8004462:	9205      	str	r2, [sp, #20]
 8004464:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8004466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004468:	f042 0208 	orr.w	r2, r2, #8
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800446e:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	9306      	str	r3, [sp, #24]
 8004478:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004480:	2303      	movs	r3, #3
 8004482:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004486:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004488:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800448a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800448c:	f000 fc42 	bl	8004d14 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004490:	a907      	add	r1, sp, #28
 8004492:	4818      	ldr	r0, [pc, #96]	; (80044f4 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004494:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004496:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004498:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800449a:	f000 fc3b 	bl	8004d14 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800449e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80044a2:	a907      	add	r1, sp, #28
 80044a4:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80044a6:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80044a8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80044aa:	f000 fc33 	bl	8004d14 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80044ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80044b2:	a907      	add	r1, sp, #28
 80044b4:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80044b6:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80044b8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80044ba:	f000 fc2b 	bl	8004d14 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80044be:	a907      	add	r1, sp, #28
 80044c0:	480e      	ldr	r0, [pc, #56]	; (80044fc <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 80044c2:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80044c4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80044c6:	f000 fc25 	bl	8004d14 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80044ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80044ce:	a907      	add	r1, sp, #28
 80044d0:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80044d2:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80044d4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80044d6:	f000 fc1d 	bl	8004d14 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80044da:	4632      	mov	r2, r6
 80044dc:	210f      	movs	r1, #15
 80044de:	205c      	movs	r0, #92	; 0x5c
 80044e0:	f000 f9d8 	bl	8004894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80044e4:	205c      	movs	r0, #92	; 0x5c
 80044e6:	f000 fa07 	bl	80048f8 <HAL_NVIC_EnableIRQ>
}
 80044ea:	b00d      	add	sp, #52	; 0x34
 80044ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40020400 	.word	0x40020400
 80044f8:	40020c00 	.word	0x40020c00
 80044fc:	40021000 	.word	0x40021000

08004500 <BSP_QSPI_Init>:
{ 
 8004500:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8004502:	4c49      	ldr	r4, [pc, #292]	; (8004628 <BSP_QSPI_Init+0x128>)
{ 
 8004504:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8004506:	4b49      	ldr	r3, [pc, #292]	; (800462c <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004508:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 800450a:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800450c:	f001 fc26 	bl	8005d5c <HAL_QSPI_DeInit>
 8004510:	4605      	mov	r5, r0
 8004512:	b110      	cbz	r0, 800451a <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8004514:	2001      	movs	r0, #1
}
 8004516:	b011      	add	sp, #68	; 0x44
 8004518:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 800451a:	4601      	mov	r1, r0
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ff5b 	bl	80043d8 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8004522:	2601      	movs	r6, #1
 8004524:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 800452a:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800452e:	2310      	movs	r3, #16
 8004530:	60e3      	str	r3, [r4, #12]
 8004532:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004536:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800453a:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800453c:	3b01      	subs	r3, #1
 800453e:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8004540:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8004544:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004548:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800454c:	f001 fbb2 	bl	8005cb4 <HAL_QSPI_Init>
 8004550:	2800      	cmp	r0, #0
 8004552:	d1df      	bne.n	8004514 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004554:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004558:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 800455a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8004560:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004562:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004564:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004566:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004568:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800456a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800456e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004572:	4620      	mov	r0, r4
 8004574:	f001 fc05 	bl	8005d82 <HAL_QSPI_Command>
 8004578:	b108      	cbz	r0, 800457e <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 800457a:	2004      	movs	r0, #4
 800457c:	e7cb      	b.n	8004516 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 800457e:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004580:	f241 3288 	movw	r2, #5000	; 0x1388
 8004584:	a902      	add	r1, sp, #8
 8004586:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8004588:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800458a:	f001 fbfa 	bl	8005d82 <HAL_QSPI_Command>
 800458e:	2800      	cmp	r0, #0
 8004590:	d1f3      	bne.n	800457a <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8004592:	f241 3088 	movw	r0, #5000	; 0x1388
 8004596:	f7ff fe97 	bl	80042c8 <QSPI_AutoPollingMemReady.constprop.0>
 800459a:	2800      	cmp	r0, #0
 800459c:	d1ed      	bne.n	800457a <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800459e:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 80045a0:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80045a8:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80045aa:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80045ac:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80045b2:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045b6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045ba:	4620      	mov	r0, r4
 80045bc:	f001 fbe1 	bl	8005d82 <HAL_QSPI_Command>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d1da      	bne.n	800457a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	f10d 0107 	add.w	r1, sp, #7
 80045cc:	4620      	mov	r0, r4
 80045ce:	f001 fd51 	bl	8006074 <HAL_QSPI_Receive>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d1d1      	bne.n	800457a <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80045d6:	f7ff fea1 	bl	800431c <QSPI_WriteEnable.constprop.0>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d1cd      	bne.n	800457a <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80045de:	2381      	movs	r3, #129	; 0x81
 80045e0:	22f0      	movs	r2, #240	; 0xf0
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80045e8:	210a      	movs	r1, #10
 80045ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045ee:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045f2:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045fc:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80045fe:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004600:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004604:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004608:	f001 fbbb 	bl	8005d82 <HAL_QSPI_Command>
 800460c:	2800      	cmp	r0, #0
 800460e:	d1b4      	bne.n	800457a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004610:	f241 3288 	movw	r2, #5000	; 0x1388
 8004614:	f10d 0107 	add.w	r1, sp, #7
 8004618:	4620      	mov	r0, r4
 800461a:	f001 fccf 	bl	8005fbc <HAL_QSPI_Transmit>
 800461e:	2800      	cmp	r0, #0
 8004620:	f43f af79 	beq.w	8004516 <BSP_QSPI_Init+0x16>
 8004624:	e7a9      	b.n	800457a <BSP_QSPI_Init+0x7a>
 8004626:	bf00      	nop
 8004628:	20003be0 	.word	0x20003be0
 800462c:	a0001000 	.word	0xa0001000

08004630 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004630:	490f      	ldr	r1, [pc, #60]	; (8004670 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004632:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004634:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <SystemInit+0x44>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800464a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004652:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004656:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <SystemInit+0x48>)
 800465a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004662:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004664:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800466a:	608b      	str	r3, [r1, #8]
#endif
}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000ed00 	.word	0xe000ed00
 8004674:	40023800 	.word	0x40023800
 8004678:	24003010 	.word	0x24003010

0800467c <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800467c:	4770      	bx	lr

0800467e <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800467e:	2000      	movs	r0, #0
 8004680:	4770      	bx	lr
	...

08004684 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8004684:	2300      	movs	r3, #0
{
 8004686:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004688:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800468e:	781a      	ldrb	r2, [r3, #0]
 8004690:	b90a      	cbnz	r2, 8004696 <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
{
 8004696:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004698:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800469a:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800469c:	21a8      	movs	r1, #168	; 0xa8
 800469e:	4628      	mov	r0, r5
 80046a0:	f7fd fa6a 	bl	8001b78 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80046a4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80046a8:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80046ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046b0:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80046b2:	d103      	bne.n	80046bc <ft5336_ReadID+0x38>
  return (ucReadId);
 80046b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80046b8:	b003      	add	sp, #12
 80046ba:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80046bc:	2b51      	cmp	r3, #81	; 0x51
 80046be:	d1ec      	bne.n	800469a <ft5336_ReadID+0x16>
 80046c0:	e7f8      	b.n	80046b4 <ft5336_ReadID+0x30>
 80046c2:	bf00      	nop
 80046c4:	20003c2e 	.word	0x20003c2e

080046c8 <ft5336_TS_DetectTouch>:
{
 80046c8:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80046ca:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80046cc:	2102      	movs	r1, #2
 80046ce:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80046d0:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80046d4:	f7fd fa50 	bl	8001b78 <TS_IO_Read>
 80046d8:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80046dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80046e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d901      	bls.n	80046f4 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80046f0:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80046f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 80046fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80046fe:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004700:	2200      	movs	r2, #0
 8004702:	709a      	strb	r2, [r3, #2]
}
 8004704:	b002      	add	sp, #8
 8004706:	bd10      	pop	{r4, pc}
 8004708:	20003c2e 	.word	0x20003c2e

0800470c <ft5336_TS_GetXY>:
{
 800470c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004710:	4d2f      	ldr	r5, [pc, #188]	; (80047d0 <ft5336_TS_GetXY+0xc4>)
{
 8004712:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8004714:	2300      	movs	r3, #0
{
 8004716:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004718:	78ac      	ldrb	r4, [r5, #2]
 800471a:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 800471c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004720:	42a2      	cmp	r2, r4
 8004722:	d94d      	bls.n	80047c0 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 8004724:	2c09      	cmp	r4, #9
 8004726:	d84e      	bhi.n	80047c6 <ft5336_TS_GetXY+0xba>
 8004728:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	1d19      	adds	r1, r3, #4
 8004732:	f103 0b03 	add.w	fp, r3, #3
 8004736:	f103 0a06 	add.w	sl, r3, #6
 800473a:	3305      	adds	r3, #5
 800473c:	b2c9      	uxtb	r1, r1
 800473e:	fa5f fb8b 	uxtb.w	fp, fp
 8004742:	fa5f fa8a 	uxtb.w	sl, sl
 8004746:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800474a:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800474c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80047d4 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004750:	4620      	mov	r0, r4
 8004752:	f7fd fa11 	bl	8001b78 <TS_IO_Read>
 8004756:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800475a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800475e:	4659      	mov	r1, fp
 8004760:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004762:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004766:	f7fd fa07 	bl	8001b78 <TS_IO_Read>
 800476a:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800476e:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004770:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004774:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004776:	f8b9 2000 	ldrh.w	r2, [r9]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004780:	4313      	orrs	r3, r2
    *X = coord;
 8004782:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004784:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004788:	f7fd f9f6 	bl	8001b78 <TS_IO_Read>
 800478c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004790:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004796:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004798:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800479c:	f7fd f9ec 	bl	8001b78 <TS_IO_Read>
 80047a0:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80047a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047a8:	f8b9 2000 	ldrh.w	r2, [r9]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 80047b8:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80047ba:	78ab      	ldrb	r3, [r5, #2]
 80047bc:	3301      	adds	r3, #1
 80047be:	70ab      	strb	r3, [r5, #2]
}
 80047c0:	b003      	add	sp, #12
 80047c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80047c6:	4698      	mov	r8, r3
 80047c8:	469a      	mov	sl, r3
 80047ca:	469b      	mov	fp, r3
 80047cc:	4619      	mov	r1, r3
 80047ce:	e7bc      	b.n	800474a <ft5336_TS_GetXY+0x3e>
 80047d0:	20003c2e 	.word	0x20003c2e
 80047d4:	20003c2c 	.word	0x20003c2c

080047d8 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80047d8:	2201      	movs	r2, #1
 80047da:	21a4      	movs	r1, #164	; 0xa4
 80047dc:	b2c0      	uxtb	r0, r0
 80047de:	f7fd b9b1 	b.w	8001b44 <TS_IO_Write>

080047e2 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80047e2:	2200      	movs	r2, #0
 80047e4:	21a4      	movs	r1, #164	; 0xa4
 80047e6:	b2c0      	uxtb	r0, r0
 80047e8:	f7fd b9ac 	b.w	8001b44 <TS_IO_Write>

080047ec <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 80047ec:	f7ff bff9 	b.w	80047e2 <ft5336_TS_DisableIT>

080047f0 <ft5336_TS_ClearIT>:
 80047f0:	4770      	bx	lr
	...

080047f4 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 80047f4:	4b02      	ldr	r3, [pc, #8]	; (8004800 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	b90a      	cbnz	r2, 80047fe <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
}
 80047fe:	4770      	bx	lr
 8004800:	20003c2e 	.word	0x20003c2e

08004804 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004804:	4a07      	ldr	r2, [pc, #28]	; (8004824 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004806:	2003      	movs	r0, #3
{
 8004808:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004812:	f000 f82d 	bl	8004870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004816:	2000      	movs	r0, #0
 8004818:	f7fd f82e 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800481c:	f7fc fdd0 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004820:	2000      	movs	r0, #0
 8004822:	bd08      	pop	{r3, pc}
 8004824:	40023c00 	.word	0x40023c00

08004828 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004828:	4a03      	ldr	r2, [pc, #12]	; (8004838 <HAL_IncTick+0x10>)
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_IncTick+0x14>)
 800482c:	6811      	ldr	r1, [r2, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	440b      	add	r3, r1
 8004832:	6013      	str	r3, [r2, #0]
}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20003c34 	.word	0x20003c34
 800483c:	20000038 	.word	0x20000038

08004840 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004840:	4b01      	ldr	r3, [pc, #4]	; (8004848 <HAL_GetTick+0x8>)
 8004842:	6818      	ldr	r0, [r3, #0]
}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20003c34 	.word	0x20003c34

0800484c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004850:	f7ff fff6 	bl	8004840 <HAL_GetTick>
 8004854:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004856:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004858:	bf1e      	ittt	ne
 800485a:	4b04      	ldrne	r3, [pc, #16]	; (800486c <HAL_Delay+0x20>)
 800485c:	781b      	ldrbne	r3, [r3, #0]
 800485e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004860:	f7ff ffee 	bl	8004840 <HAL_GetTick>
 8004864:	1b43      	subs	r3, r0, r5
 8004866:	42a3      	cmp	r3, r4
 8004868:	d3fa      	bcc.n	8004860 <HAL_Delay+0x14>
  {
  }
}
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	20000038 	.word	0x20000038

08004870 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004870:	4907      	ldr	r1, [pc, #28]	; (8004890 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004872:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004874:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800487a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800487e:	0412      	lsls	r2, r2, #16
 8004880:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800488c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004894:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004896:	b530      	push	{r4, r5, lr}
 8004898:	68dc      	ldr	r4, [r3, #12]
 800489a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800489e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048a2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048a4:	2d04      	cmp	r5, #4
 80048a6:	bf28      	it	cs
 80048a8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048aa:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048b0:	bf8c      	ite	hi
 80048b2:	3c03      	subhi	r4, #3
 80048b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80048ba:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c8:	fa01 f104 	lsl.w	r1, r1, r4
 80048cc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80048d4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80048d6:	db06      	blt.n	80048e6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80048dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80048e0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80048e4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e6:	f000 000f 	and.w	r0, r0, #15
 80048ea:	4a02      	ldr	r2, [pc, #8]	; (80048f4 <HAL_NVIC_SetPriority+0x60>)
 80048ec:	5413      	strb	r3, [r2, r0]
 80048ee:	e7f9      	b.n	80048e4 <HAL_NVIC_SetPriority+0x50>
 80048f0:	e000ed00 	.word	0xe000ed00
 80048f4:	e000ed14 	.word	0xe000ed14

080048f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80048f8:	2800      	cmp	r0, #0
 80048fa:	db08      	blt.n	800490e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fc:	0942      	lsrs	r2, r0, #5
 80048fe:	2301      	movs	r3, #1
 8004900:	f000 001f 	and.w	r0, r0, #31
 8004904:	fa03 f000 	lsl.w	r0, r3, r0
 8004908:	4b01      	ldr	r3, [pc, #4]	; (8004910 <HAL_NVIC_EnableIRQ+0x18>)
 800490a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800490e:	4770      	bx	lr
 8004910:	e000e100 	.word	0xe000e100

08004914 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004914:	2800      	cmp	r0, #0
 8004916:	db0d      	blt.n	8004934 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004918:	0943      	lsrs	r3, r0, #5
 800491a:	2201      	movs	r2, #1
 800491c:	f000 001f 	and.w	r0, r0, #31
 8004920:	3320      	adds	r3, #32
 8004922:	fa02 f000 	lsl.w	r0, r2, r0
 8004926:	4a04      	ldr	r2, [pc, #16]	; (8004938 <HAL_NVIC_DisableIRQ+0x24>)
 8004928:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800492c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004930:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000e100 	.word	0xe000e100

0800493c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800493c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <HAL_MPU_Disable+0x18>)
 8004942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004948:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_MPU_Enable+0x1c>)
 800495a:	f040 0001 	orr.w	r0, r0, #1
 800495e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004964:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004968:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800496a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800496e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004972:	4770      	bx	lr
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004978:	7843      	ldrb	r3, [r0, #1]
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <HAL_MPU_ConfigRegion+0x54>)
{
 800497c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800497e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8004982:	7801      	ldrb	r1, [r0, #0]
 8004984:	b1e9      	cbz	r1, 80049c2 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004986:	6843      	ldr	r3, [r0, #4]
 8004988:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800498c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800498e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004990:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004992:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004996:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004998:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800499a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800499e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049a0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80049a4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049a6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80049aa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80049b0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80049b6:	7a01      	ldrb	r1, [r0, #8]
 80049b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80049c0:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80049c2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80049c6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80049ca:	e7f9      	b.n	80049c0 <HAL_MPU_ConfigRegion+0x48>
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80049d0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80049d2:	4604      	mov	r4, r0
 80049d4:	b908      	cbnz	r0, 80049da <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80049d6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80049d8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80049da:	7f43      	ldrb	r3, [r0, #29]
 80049dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049e0:	b913      	cbnz	r3, 80049e8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80049e2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80049e4:	f7fc fd0a 	bl	80013fc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80049e8:	2302      	movs	r3, #2
 80049ea:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80049ec:	7923      	ldrb	r3, [r4, #4]
 80049ee:	b9e3      	cbnz	r3, 8004a2a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <HAL_CRC_Init+0x70>)
 80049f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	f022 0218 	bic.w	r2, r2, #24
 80049fc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80049fe:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a00:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a02:	b9d2      	cbnz	r2, 8004a3a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a08:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004a0a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	6961      	ldr	r1, [r4, #20]
 8004a10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a14:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004a16:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a18:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a20:	430a      	orrs	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004a24:	2301      	movs	r3, #1
 8004a26:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004a28:	e7d6      	b.n	80049d8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a2a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f000 f808 	bl	8004a44 <HAL_CRCEx_Polynomial_Set>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d0e2      	beq.n	80049fe <HAL_CRC_Init+0x2e>
 8004a38:	e7cd      	b.n	80049d6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a3a:	6922      	ldr	r2, [r4, #16]
 8004a3c:	e7e4      	b.n	8004a08 <HAL_CRC_Init+0x38>
 8004a3e:	bf00      	nop
 8004a40:	04c11db7 	.word	0x04c11db7

08004a44 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004a44:	231f      	movs	r3, #31
{
 8004a46:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	d31c      	bcc.n	8004a86 <HAL_CRCEx_Polynomial_Set+0x42>
 8004a4c:	fa21 f403 	lsr.w	r4, r1, r3
 8004a50:	07e4      	lsls	r4, r4, #31
 8004a52:	d5f9      	bpl.n	8004a48 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004a54:	2a10      	cmp	r2, #16
 8004a56:	d012      	beq.n	8004a7e <HAL_CRCEx_Polynomial_Set+0x3a>
 8004a58:	d804      	bhi.n	8004a64 <HAL_CRCEx_Polynomial_Set+0x20>
 8004a5a:	b13a      	cbz	r2, 8004a6c <HAL_CRCEx_Polynomial_Set+0x28>
 8004a5c:	2a08      	cmp	r2, #8
 8004a5e:	d010      	beq.n	8004a82 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004a60:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004a62:	e00b      	b.n	8004a7c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8004a64:	2a18      	cmp	r2, #24
 8004a66:	d1fb      	bne.n	8004a60 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004a68:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004a6a:	d8f9      	bhi.n	8004a60 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004a70:	6883      	ldr	r3, [r0, #8]
 8004a72:	f023 0318 	bic.w	r3, r3, #24
 8004a76:	431a      	orrs	r2, r3
 8004a78:	6082      	str	r2, [r0, #8]
 8004a7a:	2000      	movs	r0, #0
}
 8004a7c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004a7e:	2b07      	cmp	r3, #7
 8004a80:	e7f3      	b.n	8004a6a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	e7f1      	b.n	8004a6a <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	d1ea      	bne.n	8004a60 <HAL_CRCEx_Polynomial_Set+0x1c>
 8004a8a:	e7ef      	b.n	8004a6c <HAL_CRCEx_Polynomial_Set+0x28>

08004a8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a90:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004a92:	f7ff fed5 	bl	8004840 <HAL_GetTick>
 8004a96:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a98:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d006      	beq.n	8004aae <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa0:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8004aa2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	f022 0216 	bic.w	r2, r2, #22
 8004ab6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004abe:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ac2:	b90a      	cbnz	r2, 8004ac8 <HAL_DMA_Abort+0x3c>
 8004ac4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004ac6:	b11a      	cbz	r2, 8004ad0 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	f022 0208 	bic.w	r2, r2, #8
 8004ace:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f013 0301 	ands.w	r3, r3, #1
 8004ae0:	d10a      	bne.n	8004af8 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ae4:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004ae6:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae8:	408a      	lsls	r2, r1
 8004aea:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004aec:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8004aee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004af2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004af6:	e7d9      	b.n	8004aac <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af8:	f7ff fea2 	bl	8004840 <HAL_GetTick>
 8004afc:	1b40      	subs	r0, r0, r5
 8004afe:	2805      	cmp	r0, #5
 8004b00:	d9ea      	bls.n	8004ad8 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b02:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b04:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b06:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004b08:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004b0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004b12:	e7cb      	b.n	8004aac <HAL_DMA_Abort+0x20>

08004b14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004b14:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004b16:	4604      	mov	r4, r0
 8004b18:	b330      	cbz	r0, 8004b68 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004b1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004b1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b22:	b91b      	cbnz	r3, 8004b2c <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004b24:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004b28:	f7fc fc7e 	bl	8001428 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b2c:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b2e:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b30:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b32:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b3e:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b40:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b42:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b44:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b4c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b4e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b5e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b60:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004b66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b68:	2001      	movs	r0, #1
 8004b6a:	e7fc      	b.n	8004b66 <HAL_DMA2D_Init+0x52>

08004b6c <HAL_DMA2D_LineEventCallback>:
 8004b6c:	4770      	bx	lr

08004b6e <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004b6e:	4770      	bx	lr

08004b70 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b70:	6803      	ldr	r3, [r0, #0]
{
 8004b72:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b74:	685e      	ldr	r6, [r3, #4]
{
 8004b76:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004b78:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b7a:	07f2      	lsls	r2, r6, #31
 8004b7c:	d514      	bpl.n	8004ba8 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004b7e:	05e9      	lsls	r1, r5, #23
 8004b80:	d512      	bpl.n	8004ba8 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b88:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004b92:	2201      	movs	r2, #1
 8004b94:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b96:	2304      	movs	r3, #4
 8004b98:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004ba2:	6943      	ldr	r3, [r0, #20]
 8004ba4:	b103      	cbz	r3, 8004ba8 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ba6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004ba8:	06b2      	lsls	r2, r6, #26
 8004baa:	d516      	bpl.n	8004bda <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004bac:	04ab      	lsls	r3, r5, #18
 8004bae:	d514      	bpl.n	8004bda <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004bba:	2220      	movs	r2, #32
 8004bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004bbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004bd2:	6963      	ldr	r3, [r4, #20]
 8004bd4:	b10b      	cbz	r3, 8004bda <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004bda:	0730      	lsls	r0, r6, #28
 8004bdc:	d516      	bpl.n	8004c0c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004bde:	0529      	lsls	r1, r5, #20
 8004be0:	d514      	bpl.n	8004c0c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004bec:	2208      	movs	r2, #8
 8004bee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004bf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bf2:	f043 0304 	orr.w	r3, r3, #4
 8004bf6:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004c04:	6963      	ldr	r3, [r4, #20]
 8004c06:	b10b      	cbz	r3, 8004c0c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c08:	4620      	mov	r0, r4
 8004c0a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004c0c:	0772      	lsls	r2, r6, #29
 8004c0e:	d50b      	bpl.n	8004c28 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004c10:	056b      	lsls	r3, r5, #21
 8004c12:	d509      	bpl.n	8004c28 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c14:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c16:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004c20:	2204      	movs	r2, #4
 8004c22:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c24:	f7ff ffa2 	bl	8004b6c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004c28:	07b0      	lsls	r0, r6, #30
 8004c2a:	d514      	bpl.n	8004c56 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c2c:	05a9      	lsls	r1, r5, #22
 8004c2e:	d512      	bpl.n	8004c56 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c38:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c40:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	b10b      	cbz	r3, 8004c56 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004c52:	4620      	mov	r0, r4
 8004c54:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004c56:	06f2      	lsls	r2, r6, #27
 8004c58:	d513      	bpl.n	8004c82 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004c5a:	04eb      	lsls	r3, r5, #19
 8004c5c:	d511      	bpl.n	8004c82 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c5e:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004c60:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c68:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c70:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004c7e:	f7ff ff76 	bl	8004b6e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004c82:	bd70      	pop	{r4, r5, r6, pc}

08004c84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004c84:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c86:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	f04f 0302 	mov.w	r3, #2
 8004c90:	d02b      	beq.n	8004cea <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c92:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004c96:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c98:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004c9c:	4f1c      	ldr	r7, [pc, #112]	; (8004d10 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004c9e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ca2:	010e      	lsls	r6, r1, #4
 8004ca4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004ca6:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004caa:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cae:	3c09      	subs	r4, #9
 8004cb0:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004cb2:	bf96      	itet	ls
 8004cb4:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004cb8:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004cbc:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004cbe:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004cc0:	b9a9      	cbnz	r1, 8004cee <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004cc2:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cc4:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004cc6:	ea01 0107 	and.w	r1, r1, r7
 8004cca:	ea42 0201 	orr.w	r2, r2, r1
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004cd0:	6982      	ldr	r2, [r0, #24]
 8004cd2:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cd4:	d803      	bhi.n	8004cde <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004cd6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004cd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cdc:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004cea:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004cee:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cf0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004cf2:	ea01 0107 	and.w	r1, r1, r7
 8004cf6:	ea42 0201 	orr.w	r2, r2, r1
 8004cfa:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004cfc:	eb00 0206 	add.w	r2, r0, r6
 8004d00:	6992      	ldr	r2, [r2, #24]
 8004d02:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d04:	d8eb      	bhi.n	8004cde <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004d06:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004d0a:	621d      	str	r5, [r3, #32]
 8004d0c:	e7e7      	b.n	8004cde <HAL_DMA2D_ConfigLayer+0x5a>
 8004d0e:	bf00      	nop
 8004d10:	00fcfff0 	.word	0x00fcfff0

08004d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d18:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004ed8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d1e:	4a6c      	ldr	r2, [pc, #432]	; (8004ed0 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8004d20:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d22:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004d24:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004d2a:	43ac      	bics	r4, r5
 8004d2c:	f040 80b6 	bne.w	8004e9c <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d30:	684d      	ldr	r5, [r1, #4]
 8004d32:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d36:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d38:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d3c:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d40:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d42:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d44:	2f01      	cmp	r7, #1
 8004d46:	d834      	bhi.n	8004db2 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8004d48:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d4a:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d4e:	68cf      	ldr	r7, [r1, #12]
 8004d50:	fa07 f708 	lsl.w	r7, r7, r8
 8004d54:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004d58:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d5a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d5c:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d60:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004d64:	409f      	lsls	r7, r3
 8004d66:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004d6a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004d6c:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6e:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d70:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d74:	688f      	ldr	r7, [r1, #8]
 8004d76:	fa07 f708 	lsl.w	r7, r7, r8
 8004d7a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004d7e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d80:	d119      	bne.n	8004db6 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004d82:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d86:	f003 0b07 	and.w	fp, r3, #7
 8004d8a:	f04f 0e0f 	mov.w	lr, #15
 8004d8e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004d92:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004d96:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d9a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004d9e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004da2:	690f      	ldr	r7, [r1, #16]
 8004da4:	fa07 f70b 	lsl.w	r7, r7, fp
 8004da8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004dac:	f8ca 7020 	str.w	r7, [sl, #32]
 8004db0:	e001      	b.n	8004db6 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db2:	2c03      	cmp	r4, #3
 8004db4:	d1da      	bne.n	8004d6c <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004db6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004db8:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dbc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dc0:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004dc4:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004dc8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dca:	d067      	beq.n	8004e9c <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dcc:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004dd0:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004dd4:	f003 0703 	and.w	r7, r3, #3
 8004dd8:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ddc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004de0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004de4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de6:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004dea:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004dee:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004df2:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8004df6:	9401      	str	r4, [sp, #4]
 8004df8:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004dfa:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8004dfe:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e02:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e06:	4c33      	ldr	r4, [pc, #204]	; (8004ed4 <HAL_GPIO_Init+0x1c0>)
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d04e      	beq.n	8004eaa <HAL_GPIO_Init+0x196>
 8004e0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d04c      	beq.n	8004eae <HAL_GPIO_Init+0x19a>
 8004e14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d04a      	beq.n	8004eb2 <HAL_GPIO_Init+0x19e>
 8004e1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	d048      	beq.n	8004eb6 <HAL_GPIO_Init+0x1a2>
 8004e24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e28:	42a0      	cmp	r0, r4
 8004e2a:	d046      	beq.n	8004eba <HAL_GPIO_Init+0x1a6>
 8004e2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d044      	beq.n	8004ebe <HAL_GPIO_Init+0x1aa>
 8004e34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d042      	beq.n	8004ec2 <HAL_GPIO_Init+0x1ae>
 8004e3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	d040      	beq.n	8004ec6 <HAL_GPIO_Init+0x1b2>
 8004e44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d03e      	beq.n	8004eca <HAL_GPIO_Init+0x1b6>
 8004e4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	bf0c      	ite	eq
 8004e54:	2409      	moveq	r4, #9
 8004e56:	240a      	movne	r4, #10
 8004e58:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e5a:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e5c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e60:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8004e66:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e68:	bf54      	ite	pl
 8004e6a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e6c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e70:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8004e72:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004e74:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004e76:	bf54      	ite	pl
 8004e78:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e7a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e7e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8004e80:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004e82:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004e84:	bf54      	ite	pl
 8004e86:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e88:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e8c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8004e8e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004e90:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004e92:	bf54      	ite	pl
 8004e94:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e96:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8004e9a:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	f47f af3e 	bne.w	8004d20 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004ea4:	b003      	add	sp, #12
 8004ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004eaa:	2400      	movs	r4, #0
 8004eac:	e7d4      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004eae:	2401      	movs	r4, #1
 8004eb0:	e7d2      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004eb2:	2402      	movs	r4, #2
 8004eb4:	e7d0      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004eb6:	2403      	movs	r4, #3
 8004eb8:	e7ce      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004eba:	2404      	movs	r4, #4
 8004ebc:	e7cc      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004ebe:	2405      	movs	r4, #5
 8004ec0:	e7ca      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004ec2:	2406      	movs	r4, #6
 8004ec4:	e7c8      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004ec6:	2407      	movs	r4, #7
 8004ec8:	e7c6      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004eca:	2408      	movs	r4, #8
 8004ecc:	e7c4      	b.n	8004e58 <HAL_GPIO_Init+0x144>
 8004ece:	bf00      	nop
 8004ed0:	40013c00 	.word	0x40013c00
 8004ed4:	40020000 	.word	0x40020000
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ee0:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ee2:	4c4a      	ldr	r4, [pc, #296]	; (800500c <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004ee4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8005014 <HAL_GPIO_DeInit+0x138>
 8004ee8:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8005018 <HAL_GPIO_DeInit+0x13c>
 8004eec:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800501c <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8004ef6:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004efa:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8004efe:	d16e      	bne.n	8004fde <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8004f00:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f04:	f002 0c03 	and.w	ip, r2, #3
 8004f08:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f0a:	4b41      	ldr	r3, [pc, #260]	; (8005010 <HAL_GPIO_DeInit+0x134>)
 8004f0c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f14:	4298      	cmp	r0, r3
 8004f16:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f1a:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8004f1e:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f22:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f26:	d05f      	beq.n	8004fe8 <HAL_GPIO_DeInit+0x10c>
 8004f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f2c:	4298      	cmp	r0, r3
 8004f2e:	d05d      	beq.n	8004fec <HAL_GPIO_DeInit+0x110>
 8004f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f34:	4298      	cmp	r0, r3
 8004f36:	d05b      	beq.n	8004ff0 <HAL_GPIO_DeInit+0x114>
 8004f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3c:	4298      	cmp	r0, r3
 8004f3e:	d059      	beq.n	8004ff4 <HAL_GPIO_DeInit+0x118>
 8004f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f44:	4298      	cmp	r0, r3
 8004f46:	d057      	beq.n	8004ff8 <HAL_GPIO_DeInit+0x11c>
 8004f48:	4548      	cmp	r0, r9
 8004f4a:	d057      	beq.n	8004ffc <HAL_GPIO_DeInit+0x120>
 8004f4c:	4550      	cmp	r0, sl
 8004f4e:	d057      	beq.n	8005000 <HAL_GPIO_DeInit+0x124>
 8004f50:	4558      	cmp	r0, fp
 8004f52:	d057      	beq.n	8005004 <HAL_GPIO_DeInit+0x128>
 8004f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f58:	4298      	cmp	r0, r3
 8004f5a:	d055      	beq.n	8005008 <HAL_GPIO_DeInit+0x12c>
 8004f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f60:	4298      	cmp	r0, r3
 8004f62:	bf0c      	ite	eq
 8004f64:	2309      	moveq	r3, #9
 8004f66:	230a      	movne	r3, #10
 8004f68:	fa03 f30c 	lsl.w	r3, r3, ip
 8004f6c:	4543      	cmp	r3, r8
 8004f6e:	d113      	bne.n	8004f98 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	ea23 0307 	bic.w	r3, r3, r7
 8004f76:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	ea23 0307 	bic.w	r3, r3, r7
 8004f7e:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f80:	68e3      	ldr	r3, [r4, #12]
 8004f82:	ea23 0307 	bic.w	r3, r3, r7
 8004f86:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f88:	68a3      	ldr	r3, [r4, #8]
 8004f8a:	ea23 0307 	bic.w	r3, r3, r7
 8004f8e:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004f90:	68ab      	ldr	r3, [r5, #8]
 8004f92:	ea23 0306 	bic.w	r3, r3, r6
 8004f96:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f98:	2603      	movs	r6, #3
 8004f9a:	0053      	lsls	r3, r2, #1
 8004f9c:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f9e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fa2:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fa6:	270f      	movs	r7, #15
 8004fa8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fac:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fb0:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fb4:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fb6:	fa22 f506 	lsr.w	r5, r2, r6
 8004fba:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004fbe:	6a2e      	ldr	r6, [r5, #32]
 8004fc0:	ea26 0707 	bic.w	r7, r6, r7
 8004fc4:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fc6:	68c5      	ldr	r5, [r0, #12]
 8004fc8:	ea25 0503 	bic.w	r5, r5, r3
 8004fcc:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fce:	6845      	ldr	r5, [r0, #4]
 8004fd0:	ea25 050e 	bic.w	r5, r5, lr
 8004fd4:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fd6:	6885      	ldr	r5, [r0, #8]
 8004fd8:	ea25 0303 	bic.w	r3, r5, r3
 8004fdc:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fde:	3201      	adds	r2, #1
 8004fe0:	2a10      	cmp	r2, #16
 8004fe2:	d185      	bne.n	8004ef0 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8004fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e7bd      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e7bb      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e7b9      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e7b7      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	e7b5      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8004ffc:	2305      	movs	r3, #5
 8004ffe:	e7b3      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8005000:	2306      	movs	r3, #6
 8005002:	e7b1      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8005004:	2307      	movs	r3, #7
 8005006:	e7af      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 8005008:	2308      	movs	r3, #8
 800500a:	e7ad      	b.n	8004f68 <HAL_GPIO_DeInit+0x8c>
 800500c:	40013c00 	.word	0x40013c00
 8005010:	40020000 	.word	0x40020000
 8005014:	40021400 	.word	0x40021400
 8005018:	40021800 	.word	0x40021800
 800501c:	40021c00 	.word	0x40021c00

08005020 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005020:	6903      	ldr	r3, [r0, #16]
 8005022:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005024:	bf14      	ite	ne
 8005026:	2001      	movne	r0, #1
 8005028:	2000      	moveq	r0, #0
 800502a:	4770      	bx	lr

0800502c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800502c:	b10a      	cbz	r2, 8005032 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800502e:	6181      	str	r1, [r0, #24]
  }
}
 8005030:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005032:	0409      	lsls	r1, r1, #16
 8005034:	e7fb      	b.n	800502e <HAL_GPIO_WritePin+0x2>

08005036 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005036:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005038:	ea01 0203 	and.w	r2, r1, r3
 800503c:	ea21 0103 	bic.w	r1, r1, r3
 8005040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005044:	6181      	str	r1, [r0, #24]
}
 8005046:	4770      	bx	lr

08005048 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005048:	6803      	ldr	r3, [r0, #0]
 800504a:	699a      	ldr	r2, [r3, #24]
 800504c:	0791      	lsls	r1, r2, #30
 800504e:	d501      	bpl.n	8005054 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005050:	2200      	movs	r2, #0
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	07d2      	lsls	r2, r2, #31
 8005058:	d403      	bmi.n	8005062 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800505a:	699a      	ldr	r2, [r3, #24]
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	619a      	str	r2, [r3, #24]
  }
}
 8005062:	4770      	bx	lr

08005064 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005064:	b530      	push	{r4, r5, lr}
 8005066:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005068:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800506c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800506e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005070:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005076:	4a05      	ldr	r2, [pc, #20]	; (800508c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005078:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800507a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800507e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005082:	ea20 0002 	bic.w	r0, r0, r2
 8005086:	4303      	orrs	r3, r0
 8005088:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800508a:	bd30      	pop	{r4, r5, pc}
 800508c:	03ff63ff 	.word	0x03ff63ff

08005090 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8005090:	6803      	ldr	r3, [r0, #0]
{
 8005092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005096:	699c      	ldr	r4, [r3, #24]
{
 8005098:	4605      	mov	r5, r0
 800509a:	460f      	mov	r7, r1
 800509c:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800509e:	f014 0410 	ands.w	r4, r4, #16
 80050a2:	d070      	beq.n	8005186 <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 80050a4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80050a8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050aa:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	0692      	lsls	r2, r2, #26
 80050b2:	d462      	bmi.n	800517a <I2C_IsErrorOccurred+0xea>
 80050b4:	f1b8 0f00 	cmp.w	r8, #0
 80050b8:	d036      	beq.n	8005128 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 80050ba:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80050be:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050c4:	05d6      	lsls	r6, r2, #23
 80050c6:	d505      	bpl.n	80050d4 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80050cc:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80050d0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050d2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050d4:	0551      	lsls	r1, r2, #21
 80050d6:	d505      	bpl.n	80050e4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80050dc:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80050e0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050e2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050e4:	0592      	lsls	r2, r2, #22
 80050e6:	d550      	bpl.n	800518a <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80050ec:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050f0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80050f2:	4628      	mov	r0, r5
 80050f4:	f7ff ffa8 	bl	8005048 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80050f8:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80050fa:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80050fc:	6853      	ldr	r3, [r2, #4]
 80050fe:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005102:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005106:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005110:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005112:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8005114:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8005116:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005118:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800511c:	2300      	movs	r3, #0
 800511e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005122:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005126:	e032      	b.n	800518e <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8005128:	1c7a      	adds	r2, r7, #1
 800512a:	d0c0      	beq.n	80050ae <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800512c:	f7ff fb88 	bl	8004840 <HAL_GetTick>
 8005130:	1b80      	subs	r0, r0, r6
 8005132:	42b8      	cmp	r0, r7
 8005134:	d801      	bhi.n	800513a <I2C_IsErrorOccurred+0xaa>
 8005136:	2f00      	cmp	r7, #0
 8005138:	d1b8      	bne.n	80050ac <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800513e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005142:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005144:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005146:	0400      	lsls	r0, r0, #16
 8005148:	d50a      	bpl.n	8005160 <I2C_IsErrorOccurred+0xd0>
 800514a:	0448      	lsls	r0, r1, #17
 800514c:	d408      	bmi.n	8005160 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800514e:	2a20      	cmp	r2, #32
 8005150:	d006      	beq.n	8005160 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005158:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800515a:	f7ff fb71 	bl	8004840 <HAL_GetTick>
 800515e:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	0699      	lsls	r1, r3, #26
 8005166:	d4a1      	bmi.n	80050ac <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005168:	f7ff fb6a 	bl	8004840 <HAL_GetTick>
 800516c:	1b80      	subs	r0, r0, r6
 800516e:	2819      	cmp	r0, #25
 8005170:	d9f6      	bls.n	8005160 <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005172:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8005174:	f04f 0801 	mov.w	r8, #1
 8005178:	e798      	b.n	80050ac <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800517a:	f1b8 0f00 	cmp.w	r8, #0
 800517e:	d19c      	bne.n	80050ba <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005180:	2220      	movs	r2, #32
 8005182:	61da      	str	r2, [r3, #28]
 8005184:	e799      	b.n	80050ba <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	4620      	mov	r0, r4
 8005188:	e79a      	b.n	80050c0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800518a:	2800      	cmp	r0, #0
 800518c:	d1b1      	bne.n	80050f2 <I2C_IsErrorOccurred+0x62>
}
 800518e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005192 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005192:	b570      	push	{r4, r5, r6, lr}
 8005194:	4604      	mov	r4, r0
 8005196:	460d      	mov	r5, r1
 8005198:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	079b      	lsls	r3, r3, #30
 80051a0:	d501      	bpl.n	80051a6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80051a2:	2000      	movs	r0, #0
}
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a6:	4632      	mov	r2, r6
 80051a8:	4629      	mov	r1, r5
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff ff70 	bl	8005090 <I2C_IsErrorOccurred>
 80051b0:	b9a0      	cbnz	r0, 80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80051b2:	1c6a      	adds	r2, r5, #1
 80051b4:	d0f1      	beq.n	800519a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b6:	f7ff fb43 	bl	8004840 <HAL_GetTick>
 80051ba:	1b80      	subs	r0, r0, r6
 80051bc:	42a8      	cmp	r0, r5
 80051be:	d801      	bhi.n	80051c4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80051c0:	2d00      	cmp	r5, #0
 80051c2:	d1ea      	bne.n	800519a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051c6:	f043 0320 	orr.w	r3, r3, #32
 80051ca:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051cc:	2320      	movs	r3, #32
 80051ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80051d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80051dc:	2001      	movs	r0, #1
 80051de:	e7e1      	b.n	80051a4 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080051e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80051e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e4:	9f06      	ldr	r7, [sp, #24]
 80051e6:	4604      	mov	r4, r0
 80051e8:	4688      	mov	r8, r1
 80051ea:	4616      	mov	r6, r2
 80051ec:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	6993      	ldr	r3, [r2, #24]
 80051f2:	ea38 0303 	bics.w	r3, r8, r3
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	42b3      	cmp	r3, r6
 80051fe:	d001      	beq.n	8005204 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005200:	2000      	movs	r0, #0
 8005202:	e015      	b.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005204:	1c6b      	adds	r3, r5, #1
 8005206:	d0f3      	beq.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005208:	f7ff fb1a 	bl	8004840 <HAL_GetTick>
 800520c:	1bc0      	subs	r0, r0, r7
 800520e:	42a8      	cmp	r0, r5
 8005210:	d801      	bhi.n	8005216 <I2C_WaitOnFlagUntilTimeout+0x36>
 8005212:	2d00      	cmp	r5, #0
 8005214:	d1eb      	bne.n	80051ee <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005216:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005218:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	f043 0320 	orr.w	r3, r3, #32
 800521e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005220:	2320      	movs	r3, #32
 8005222:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005226:	2300      	movs	r3, #0
 8005228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800522c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005234 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4604      	mov	r4, r0
 8005238:	460d      	mov	r5, r1
 800523a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	069b      	lsls	r3, r3, #26
 8005242:	d501      	bpl.n	8005248 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005244:	2000      	movs	r0, #0
}
 8005246:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005248:	4632      	mov	r2, r6
 800524a:	4629      	mov	r1, r5
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff ff1f 	bl	8005090 <I2C_IsErrorOccurred>
 8005252:	b990      	cbnz	r0, 800527a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7ff faf4 	bl	8004840 <HAL_GetTick>
 8005258:	1b80      	subs	r0, r0, r6
 800525a:	42a8      	cmp	r0, r5
 800525c:	d801      	bhi.n	8005262 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800525e:	2d00      	cmp	r5, #0
 8005260:	d1ec      	bne.n	800523c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005264:	f043 0320 	orr.w	r3, r3, #32
 8005268:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800526a:	2320      	movs	r3, #32
 800526c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	2300      	movs	r3, #0
 8005272:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005276:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800527a:	2001      	movs	r0, #1
 800527c:	e7e3      	b.n	8005246 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800527e <HAL_I2C_Init>:
{
 800527e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005280:	4604      	mov	r4, r0
 8005282:	2800      	cmp	r0, #0
 8005284:	d04a      	beq.n	800531c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005286:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800528a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800528e:	b91b      	cbnz	r3, 8005298 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005290:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005294:	f7fc f8e8 	bl	8001468 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005298:	2324      	movs	r3, #36	; 0x24
 800529a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	f022 0201 	bic.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052a8:	6862      	ldr	r2, [r4, #4]
 80052aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052b6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052bc:	2901      	cmp	r1, #1
 80052be:	d124      	bne.n	800530a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052c6:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c8:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80052ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052da:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052dc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80052e0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052e2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052ea:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80052fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005302:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005308:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800530a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800530e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005310:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005312:	d1d8      	bne.n	80052c6 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	e7d4      	b.n	80052c6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800531c:	2001      	movs	r0, #1
 800531e:	e7f3      	b.n	8005308 <HAL_I2C_Init+0x8a>

08005320 <HAL_I2C_DeInit>:
{
 8005320:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005322:	4604      	mov	r4, r0
 8005324:	b198      	cbz	r0, 800534e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005326:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005328:	2324      	movs	r3, #36	; 0x24
 800532a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005336:	f7fc f8db 	bl	80014f0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800533a:	2000      	movs	r0, #0
 800533c:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800533e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005342:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005346:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005348:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800534c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800534e:	2001      	movs	r0, #1
 8005350:	e7fc      	b.n	800534c <HAL_I2C_DeInit+0x2c>
	...

08005354 <HAL_I2C_Mem_Write>:
{
 8005354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800535a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800535e:	4604      	mov	r4, r0
 8005360:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005362:	2b20      	cmp	r3, #32
{
 8005364:	4616      	mov	r6, r2
 8005366:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800536a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800536e:	f040 80c6 	bne.w	80054fe <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8005372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005374:	b113      	cbz	r3, 800537c <HAL_I2C_Mem_Write+0x28>
 8005376:	f1ba 0f00 	cmp.w	sl, #0
 800537a:	d106      	bne.n	800538a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800537c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005380:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005382:	2001      	movs	r0, #1
}
 8005384:	b003      	add	sp, #12
 8005386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800538a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800538e:	2b01      	cmp	r3, #1
 8005390:	f000 80b5 	beq.w	80054fe <HAL_I2C_Mem_Write+0x1aa>
 8005394:	f04f 0b01 	mov.w	fp, #1
 8005398:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800539c:	f7ff fa50 	bl	8004840 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053a0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80053a2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053a4:	9000      	str	r0, [sp, #0]
 80053a6:	465a      	mov	r2, fp
 80053a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053ac:	4620      	mov	r0, r4
 80053ae:	f7ff ff17 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d1e5      	bne.n	8005382 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053b6:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053b8:	fa5f f289 	uxtb.w	r2, r9
 80053bc:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 80053be:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80053ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053ce:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80053d0:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053d2:	4b4c      	ldr	r3, [pc, #304]	; (8005504 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80053d4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053de:	f7ff fe41 	bl	8005064 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	462a      	mov	r2, r5
 80053e4:	4641      	mov	r1, r8
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7ff fed3 	bl	8005192 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ec:	bb18      	cbnz	r0, 8005436 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ee:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053f2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053f4:	d115      	bne.n	8005422 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053f6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053f8:	2200      	movs	r2, #0
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053fe:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005400:	4643      	mov	r3, r8
 8005402:	9500      	str	r5, [sp, #0]
 8005404:	f7ff feec 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8005408:	b9a8      	cbnz	r0, 8005436 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800540a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2bff      	cmp	r3, #255	; 0xff
 8005410:	d815      	bhi.n	800543e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8005412:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005418:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800541a:	b292      	uxth	r2, r2
 800541c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	e012      	b.n	8005448 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005422:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005424:	4641      	mov	r1, r8
 8005426:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005428:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800542a:	462a      	mov	r2, r5
 800542c:	f7ff feb1 	bl	8005192 <I2C_WaitOnTXISFlagUntilTimeout>
 8005430:	b908      	cbnz	r0, 8005436 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	e7df      	b.n	80053f6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8005436:	2300      	movs	r3, #0
 8005438:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800543c:	e7a1      	b.n	8005382 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800543e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005444:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005446:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005448:	4639      	mov	r1, r7
 800544a:	4620      	mov	r0, r4
 800544c:	f7ff fe0a 	bl	8005064 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005450:	462a      	mov	r2, r5
 8005452:	4641      	mov	r1, r8
 8005454:	4620      	mov	r0, r4
 8005456:	f7ff fe9c 	bl	8005192 <I2C_WaitOnTXISFlagUntilTimeout>
 800545a:	2800      	cmp	r0, #0
 800545c:	d191      	bne.n	8005382 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800545e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005466:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005468:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800546a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800546c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800546e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005470:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005472:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005474:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005476:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005478:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800547a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800547c:	b29b      	uxth	r3, r3
 800547e:	b1b3      	cbz	r3, 80054ae <HAL_I2C_Mem_Write+0x15a>
 8005480:	b9aa      	cbnz	r2, 80054ae <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005482:	4643      	mov	r3, r8
 8005484:	2180      	movs	r1, #128	; 0x80
 8005486:	4620      	mov	r0, r4
 8005488:	9500      	str	r5, [sp, #0]
 800548a:	f7ff fea9 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 800548e:	2800      	cmp	r0, #0
 8005490:	f47f af77 	bne.w	8005382 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	2bff      	cmp	r3, #255	; 0xff
 800549a:	d928      	bls.n	80054ee <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800549c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800549e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054a2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054a4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054a6:	4639      	mov	r1, r7
 80054a8:	4620      	mov	r0, r4
 80054aa:	f7ff fddb 	bl	8005064 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80054ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1cc      	bne.n	8005450 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b6:	462a      	mov	r2, r5
 80054b8:	4641      	mov	r1, r8
 80054ba:	4620      	mov	r0, r4
 80054bc:	f7ff feba 	bl	8005234 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f47f af5e 	bne.w	8005382 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	2120      	movs	r1, #32
 80054ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80054d2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80054d6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80054e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054e8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80054ec:	e74a      	b.n	8005384 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80054ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054f4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80054f6:	b292      	uxth	r2, r2
 80054f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	e7d3      	b.n	80054a6 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80054fe:	2002      	movs	r0, #2
 8005500:	e740      	b.n	8005384 <HAL_I2C_Mem_Write+0x30>
 8005502:	bf00      	nop
 8005504:	80002000 	.word	0x80002000

08005508 <HAL_I2C_Mem_Read>:
{
 8005508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800550e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005512:	4604      	mov	r4, r0
 8005514:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005516:	2b20      	cmp	r3, #32
{
 8005518:	4616      	mov	r6, r2
 800551a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800551e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005522:	f040 80c9 	bne.w	80056b8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8005526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005528:	b113      	cbz	r3, 8005530 <HAL_I2C_Mem_Read+0x28>
 800552a:	f1ba 0f00 	cmp.w	sl, #0
 800552e:	d106      	bne.n	800553e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005534:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005536:	2001      	movs	r0, #1
}
 8005538:	b003      	add	sp, #12
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800553e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005542:	2b01      	cmp	r3, #1
 8005544:	f000 80b8 	beq.w	80056b8 <HAL_I2C_Mem_Read+0x1b0>
 8005548:	f04f 0b01 	mov.w	fp, #1
 800554c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005550:	f7ff f976 	bl	8004840 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005554:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8005556:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005558:	9000      	str	r0, [sp, #0]
 800555a:	465a      	mov	r2, fp
 800555c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff fe3d 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8005566:	2800      	cmp	r0, #0
 8005568:	d1e5      	bne.n	8005536 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800556a:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800556c:	fa5f f289 	uxtb.w	r2, r9
 8005570:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8005572:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005574:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005578:	2340      	movs	r3, #64	; 0x40
 800557a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800557e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005580:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005582:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005584:	4b4d      	ldr	r3, [pc, #308]	; (80056bc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8005586:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4603      	mov	r3, r0
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff fd68 	bl	8005064 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005594:	462a      	mov	r2, r5
 8005596:	4641      	mov	r1, r8
 8005598:	4620      	mov	r0, r4
 800559a:	f7ff fdfa 	bl	8005192 <I2C_WaitOnTXISFlagUntilTimeout>
 800559e:	bb20      	cbnz	r0, 80055ea <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055a4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a6:	d116      	bne.n	80055d6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055a8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055aa:	2200      	movs	r2, #0
 80055ac:	2140      	movs	r1, #64	; 0x40
 80055ae:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055b0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055b2:	4643      	mov	r3, r8
 80055b4:	9500      	str	r5, [sp, #0]
 80055b6:	f7ff fe13 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 80055ba:	b9b0      	cbnz	r0, 80055ea <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2bff      	cmp	r3, #255	; 0xff
 80055c2:	4b3f      	ldr	r3, [pc, #252]	; (80056c0 <HAL_I2C_Mem_Read+0x1b8>)
 80055c4:	d815      	bhi.n	80055f2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80055c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80055ce:	b292      	uxth	r2, r2
 80055d0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	e012      	b.n	80055fc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055d6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d8:	4641      	mov	r1, r8
 80055da:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055de:	462a      	mov	r2, r5
 80055e0:	f7ff fdd7 	bl	8005192 <I2C_WaitOnTXISFlagUntilTimeout>
 80055e4:	b908      	cbnz	r0, 80055ea <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	e7de      	b.n	80055a8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80055f0:	e7a1      	b.n	8005536 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055fa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055fc:	4639      	mov	r1, r7
 80055fe:	4620      	mov	r0, r4
 8005600:	f7ff fd30 	bl	8005064 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005604:	4643      	mov	r3, r8
 8005606:	2200      	movs	r2, #0
 8005608:	2104      	movs	r1, #4
 800560a:	4620      	mov	r0, r4
 800560c:	9500      	str	r5, [sp, #0]
 800560e:	f7ff fde7 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8005612:	2800      	cmp	r0, #0
 8005614:	d18f      	bne.n	8005536 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800561a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800561c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800561e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005620:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005622:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005624:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005626:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005628:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800562a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800562c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800562e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005630:	b29b      	uxth	r3, r3
 8005632:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	b1b3      	cbz	r3, 8005668 <HAL_I2C_Mem_Read+0x160>
 800563a:	b9aa      	cbnz	r2, 8005668 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800563c:	4643      	mov	r3, r8
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	4620      	mov	r0, r4
 8005642:	9500      	str	r5, [sp, #0]
 8005644:	f7ff fdcc 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8005648:	2800      	cmp	r0, #0
 800564a:	f47f af74 	bne.w	8005536 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800564e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2bff      	cmp	r3, #255	; 0xff
 8005654:	d928      	bls.n	80056a8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005656:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800565c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800565e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005660:	4639      	mov	r1, r7
 8005662:	4620      	mov	r0, r4
 8005664:	f7ff fcfe 	bl	8005064 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005668:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1c9      	bne.n	8005604 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005670:	462a      	mov	r2, r5
 8005672:	4641      	mov	r1, r8
 8005674:	4620      	mov	r0, r4
 8005676:	f7ff fddd 	bl	8005234 <I2C_WaitOnSTOPFlagUntilTimeout>
 800567a:	2800      	cmp	r0, #0
 800567c:	f47f af5b 	bne.w	8005536 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	2120      	movs	r1, #32
 8005684:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800568c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005690:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800569e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80056a6:	e747      	b.n	8005538 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80056a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80056b0:	b292      	uxth	r2, r2
 80056b2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	e7d3      	b.n	8005660 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 80056b8:	2002      	movs	r0, #2
 80056ba:	e73d      	b.n	8005538 <HAL_I2C_Mem_Read+0x30>
 80056bc:	80002000 	.word	0x80002000
 80056c0:	80002400 	.word	0x80002400

080056c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056c4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	b2dc      	uxtb	r4, r3
 80056ce:	d11d      	bne.n	800570c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d019      	beq.n	800570c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d8:	2324      	movs	r3, #36	; 0x24
 80056da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056de:	6803      	ldr	r3, [r0, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4311      	orrs	r1, r2
 80056f4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fe:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005700:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005704:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005708:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800570a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800570c:	2002      	movs	r0, #2
 800570e:	e7fc      	b.n	800570a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005710 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005710:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005712:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005716:	2b20      	cmp	r3, #32
 8005718:	b2dc      	uxtb	r4, r3
 800571a:	d11c      	bne.n	8005756 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800571c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005720:	2b01      	cmp	r3, #1
 8005722:	d018      	beq.n	8005756 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005724:	2324      	movs	r3, #36	; 0x24
 8005726:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800572a:	6803      	ldr	r3, [r0, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	f022 0201 	bic.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005734:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005736:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800573a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800573e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005748:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800574a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800574e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005752:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005754:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005756:	2002      	movs	r0, #2
 8005758:	e7fc      	b.n	8005754 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800575a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800575a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800575c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800575e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005762:	3284      	adds	r2, #132	; 0x84
 8005764:	1883      	adds	r3, r0, r2
{
 8005766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800576a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800576c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005770:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005772:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005776:	684c      	ldr	r4, [r1, #4]
 8005778:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800577c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005780:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005784:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005786:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005788:	68c5      	ldr	r5, [r0, #12]
 800578a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800578e:	443d      	add	r5, r7
 8005790:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005794:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005796:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005798:	68c5      	ldr	r5, [r0, #12]
 800579a:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800579e:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80057a0:	689d      	ldr	r5, [r3, #8]
 80057a2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80057a6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80057a8:	688d      	ldr	r5, [r1, #8]
 80057aa:	68c7      	ldr	r7, [r0, #12]
 80057ac:	3501      	adds	r5, #1
 80057ae:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80057b2:	443d      	add	r5, r7
 80057b4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80057b8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80057ba:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80057bc:	691d      	ldr	r5, [r3, #16]
 80057be:	f025 0507 	bic.w	r5, r5, #7
 80057c2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80057c4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80057c6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80057c8:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80057cc:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80057d0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057d4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80057d8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80057dc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80057e0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80057e4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057e6:	695d      	ldr	r5, [r3, #20]
 80057e8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80057ec:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057ee:	694d      	ldr	r5, [r1, #20]
 80057f0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80057f2:	69dd      	ldr	r5, [r3, #28]
 80057f4:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80057f8:	f025 0507 	bic.w	r5, r5, #7
 80057fc:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057fe:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005802:	433d      	orrs	r5, r7
 8005804:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005806:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005808:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800580a:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800580e:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005810:	b31e      	cbz	r6, 800585a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005812:	2e01      	cmp	r6, #1
 8005814:	d023      	beq.n	800585e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005816:	1eb5      	subs	r5, r6, #2
 8005818:	2d02      	cmp	r5, #2
 800581a:	d922      	bls.n	8005862 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800581c:	2e07      	cmp	r6, #7
 800581e:	bf0c      	ite	eq
 8005820:	2502      	moveq	r5, #2
 8005822:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005824:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005826:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800582a:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800582e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005830:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005832:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005834:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005836:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005838:	436e      	muls	r6, r5
 800583a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800583e:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005840:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005842:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8005846:	f024 0407 	bic.w	r4, r4, #7
 800584a:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800584c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800584e:	5883      	ldr	r3, [r0, r2]
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	5083      	str	r3, [r0, r2]
}
 8005856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800585a:	2504      	movs	r5, #4
 800585c:	e7e2      	b.n	8005824 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800585e:	2503      	movs	r5, #3
 8005860:	e7e0      	b.n	8005824 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005862:	2502      	movs	r5, #2
 8005864:	e7de      	b.n	8005824 <LTDC_SetConfig+0xca>
	...

08005868 <HAL_LTDC_Init>:
{
 8005868:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800586a:	4604      	mov	r4, r0
 800586c:	2800      	cmp	r0, #0
 800586e:	d063      	beq.n	8005938 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005870:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005874:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005878:	b91b      	cbnz	r3, 8005882 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800587a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800587e:	f7fb fe53 	bl	8001528 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005882:	2302      	movs	r3, #2
 8005884:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005890:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005892:	6999      	ldr	r1, [r3, #24]
 8005894:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005898:	4302      	orrs	r2, r0
 800589a:	68e0      	ldr	r0, [r4, #12]
 800589c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800589e:	6920      	ldr	r0, [r4, #16]
 80058a0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80058a2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058a4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80058a6:	4925      	ldr	r1, [pc, #148]	; (800593c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058a8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	400a      	ands	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80058b6:	69a0      	ldr	r0, [r4, #24]
 80058b8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80058ba:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80058bc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	400a      	ands	r2, r1
 80058c2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80058ca:	6a20      	ldr	r0, [r4, #32]
 80058cc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80058ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80058d0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	400a      	ands	r2, r1
 80058d6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80058de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80058e0:	4302      	orrs	r2, r0
 80058e2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	4011      	ands	r1, r2
 80058e8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80058ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80058f4:	430a      	orrs	r2, r1
 80058f6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80058fa:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058fe:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005902:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005906:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800590a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800590e:	430a      	orrs	r2, r1
 8005910:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005914:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005918:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800591a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800591c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800591e:	f042 0206 	orr.w	r2, r2, #6
 8005922:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800592c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800592e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005932:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005936:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005938:	2001      	movs	r0, #1
 800593a:	e7fc      	b.n	8005936 <HAL_LTDC_Init+0xce>
 800593c:	f000f800 	.word	0xf000f800

08005940 <HAL_LTDC_ErrorCallback>:
 8005940:	4770      	bx	lr

08005942 <HAL_LTDC_ReloadEventCallback>:
 8005942:	4770      	bx	lr

08005944 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005944:	6803      	ldr	r3, [r0, #0]
{
 8005946:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005948:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800594a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800594c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800594e:	0772      	lsls	r2, r6, #29
 8005950:	d514      	bpl.n	800597c <HAL_LTDC_IRQHandler+0x38>
 8005952:	0769      	lsls	r1, r5, #29
 8005954:	d512      	bpl.n	800597c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	f022 0204 	bic.w	r2, r2, #4
 800595c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800595e:	2204      	movs	r2, #4
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005962:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800596e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005970:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005974:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005978:	f7ff ffe2 	bl	8005940 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800597c:	07b2      	lsls	r2, r6, #30
 800597e:	d516      	bpl.n	80059ae <HAL_LTDC_IRQHandler+0x6a>
 8005980:	07ab      	lsls	r3, r5, #30
 8005982:	d514      	bpl.n	80059ae <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005984:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8005986:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	f022 0202 	bic.w	r2, r2, #2
 800598e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005990:	2202      	movs	r2, #2
 8005992:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005994:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800599e:	2304      	movs	r3, #4
 80059a0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80059a4:	2300      	movs	r3, #0
 80059a6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80059aa:	f7ff ffc9 	bl	8005940 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80059ae:	07f0      	lsls	r0, r6, #31
 80059b0:	d510      	bpl.n	80059d4 <HAL_LTDC_IRQHandler+0x90>
 80059b2:	07e9      	lsls	r1, r5, #31
 80059b4:	d50e      	bpl.n	80059d4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059b6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80059b8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80059c2:	2201      	movs	r2, #1
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80059c6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80059c8:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80059cc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80059d0:	f7fd fc7c 	bl	80032cc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80059d4:	0732      	lsls	r2, r6, #28
 80059d6:	d511      	bpl.n	80059fc <HAL_LTDC_IRQHandler+0xb8>
 80059d8:	072b      	lsls	r3, r5, #28
 80059da:	d50f      	bpl.n	80059fc <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80059dc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80059de:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80059e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e2:	f022 0208 	bic.w	r2, r2, #8
 80059e6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80059e8:	2208      	movs	r2, #8
 80059ea:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80059f2:	2300      	movs	r3, #0
 80059f4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80059f8:	f7ff ffa3 	bl	8005942 <HAL_LTDC_ReloadEventCallback>
}
 80059fc:	bd70      	pop	{r4, r5, r6, pc}

080059fe <HAL_LTDC_ConfigLayer>:
{
 80059fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005a02:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005a06:	4606      	mov	r6, r0
 8005a08:	460f      	mov	r7, r1
 8005a0a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	f04f 0002 	mov.w	r0, #2
 8005a12:	d01f      	beq.n	8005a54 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a14:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005a16:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a1a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a1c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a20:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005a24:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a28:	3438      	adds	r4, #56	; 0x38
 8005a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a36:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4662      	mov	r2, ip
 8005a3c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a3e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a40:	f7ff fe8b 	bl	800575a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a44:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005a46:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a48:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a4c:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005a50:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a58 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005a58:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	f04f 0302 	mov.w	r3, #2
 8005a62:	d012      	beq.n	8005a8a <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a64:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005a68:	6803      	ldr	r3, [r0, #0]
 8005a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005a72:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005a74:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005a84:	2300      	movs	r3, #0
 8005a86:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8005a8a:	4618      	mov	r0, r3
}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40016800 	.word	0x40016800

08005a94 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a94:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005a96:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a9a:	4c19      	ldr	r4, [pc, #100]	; (8005b00 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ab4:	f7fe fec4 	bl	8004840 <HAL_GetTick>
 8005ab8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005aba:	6863      	ldr	r3, [r4, #4]
 8005abc:	03da      	lsls	r2, r3, #15
 8005abe:	d50c      	bpl.n	8005ada <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ac0:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ac2:	4d0f      	ldr	r5, [pc, #60]	; (8005b00 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005aca:	f7fe feb9 	bl	8004840 <HAL_GetTick>
 8005ace:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ad0:	686b      	ldr	r3, [r5, #4]
 8005ad2:	039b      	lsls	r3, r3, #14
 8005ad4:	d50a      	bpl.n	8005aec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e006      	b.n	8005ae8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ada:	f7fe feb1 	bl	8004840 <HAL_GetTick>
 8005ade:	1b40      	subs	r0, r0, r5
 8005ae0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005ae4:	d9e9      	bls.n	8005aba <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005ae6:	2003      	movs	r0, #3
}
 8005ae8:	b003      	add	sp, #12
 8005aea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005aec:	f7fe fea8 	bl	8004840 <HAL_GetTick>
 8005af0:	1b00      	subs	r0, r0, r4
 8005af2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005af6:	d9eb      	bls.n	8005ad0 <HAL_PWREx_EnableOverDrive+0x3c>
 8005af8:	e7f5      	b.n	8005ae6 <HAL_PWREx_EnableOverDrive+0x52>
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40007000 	.word	0x40007000

08005b04 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005b08:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005b0a:	b136      	cbz	r6, 8005b1a <QSPI_Config+0x16>
 8005b0c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005b10:	d003      	beq.n	8005b1a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005b12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005b14:	6804      	ldr	r4, [r0, #0]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005b1a:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b1e:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005b22:	f1b9 0f00 	cmp.w	r9, #0
 8005b26:	d04f      	beq.n	8005bc8 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b28:	694b      	ldr	r3, [r1, #20]
 8005b2a:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005b2e:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b30:	f8d1 a000 	ldr.w	sl, [r1]
 8005b34:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8005b38:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8005b3c:	ea49 0902 	orr.w	r9, r9, r2
 8005b40:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005b44:	b335      	cbz	r5, 8005b94 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005b46:	688b      	ldr	r3, [r1, #8]
 8005b48:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b4c:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005b4e:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b50:	b19f      	cbz	r7, 8005b7a <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b52:	ea4a 0307 	orr.w	r3, sl, r7
 8005b56:	4323      	orrs	r3, r4
 8005b58:	68cc      	ldr	r4, [r1, #12]
 8005b5a:	ea43 0308 	orr.w	r3, r3, r8
 8005b5e:	ea43 030e 	orr.w	r3, r3, lr
 8005b62:	4333      	orrs	r3, r6
 8005b64:	4323      	orrs	r3, r4
 8005b66:	ea43 030c 	orr.w	r3, r3, ip
 8005b6a:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b6c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b70:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b72:	d00d      	beq.n	8005b90 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b74:	684b      	ldr	r3, [r1, #4]
 8005b76:	6183      	str	r3, [r0, #24]
 8005b78:	e00a      	b.n	8005b90 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b7a:	ea4a 0304 	orr.w	r3, sl, r4
 8005b7e:	ea43 0308 	orr.w	r3, r3, r8
 8005b82:	ea43 030e 	orr.w	r3, r3, lr
 8005b86:	4333      	orrs	r3, r6
 8005b88:	ea43 030c 	orr.w	r3, r3, ip
 8005b8c:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b8e:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b94:	b16f      	cbz	r7, 8005bb2 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b96:	ea4a 0307 	orr.w	r3, sl, r7
 8005b9a:	4323      	orrs	r3, r4
 8005b9c:	68cc      	ldr	r4, [r1, #12]
 8005b9e:	ea43 0308 	orr.w	r3, r3, r8
 8005ba2:	ea43 030e 	orr.w	r3, r3, lr
 8005ba6:	4323      	orrs	r3, r4
 8005ba8:	ea43 030c 	orr.w	r3, r3, ip
 8005bac:	ea43 0309 	orr.w	r3, r3, r9
 8005bb0:	e7dc      	b.n	8005b6c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bb2:	ea4a 0304 	orr.w	r3, sl, r4
 8005bb6:	ea43 0308 	orr.w	r3, r3, r8
 8005bba:	ea43 030e 	orr.w	r3, r3, lr
 8005bbe:	ea43 030c 	orr.w	r3, r3, ip
 8005bc2:	ea43 0309 	orr.w	r3, r3, r9
 8005bc6:	e7e2      	b.n	8005b8e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005bc8:	b365      	cbz	r5, 8005c24 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005bca:	6804      	ldr	r4, [r0, #0]
 8005bcc:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bce:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005bd0:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005bd2:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bd6:	694e      	ldr	r6, [r1, #20]
 8005bd8:	ea43 0502 	orr.w	r5, r3, r2
 8005bdc:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005be0:	04b6      	lsls	r6, r6, #18
 8005be2:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005be6:	b1a7      	cbz	r7, 8005c12 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005be8:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005bea:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bee:	ea40 0008 	orr.w	r0, r0, r8
 8005bf2:	ea43 0300 	orr.w	r3, r3, r0
 8005bf6:	68c8      	ldr	r0, [r1, #12]
 8005bf8:	ea43 030c 	orr.w	r3, r3, ip
 8005bfc:	ea43 0300 	orr.w	r3, r3, r0
 8005c00:	ea43 0306 	orr.w	r3, r3, r6
 8005c04:	ea43 0305 	orr.w	r3, r3, r5
 8005c08:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005c0a:	d0c1      	beq.n	8005b90 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005c0c:	684b      	ldr	r3, [r1, #4]
 8005c0e:	61a3      	str	r3, [r4, #24]
 8005c10:	e7be      	b.n	8005b90 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c12:	ea40 0008 	orr.w	r0, r0, r8
 8005c16:	4303      	orrs	r3, r0
 8005c18:	ea43 030c 	orr.w	r3, r3, ip
 8005c1c:	4333      	orrs	r3, r6
 8005c1e:	432b      	orrs	r3, r5
 8005c20:	6163      	str	r3, [r4, #20]
 8005c22:	e7b5      	b.n	8005b90 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c24:	b17f      	cbz	r7, 8005c46 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c26:	ea46 0307 	orr.w	r3, r6, r7
 8005c2a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	4323      	orrs	r3, r4
 8005c32:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005c34:	4323      	orrs	r3, r4
 8005c36:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005c38:	4323      	orrs	r3, r4
 8005c3a:	68cc      	ldr	r4, [r1, #12]
 8005c3c:	4323      	orrs	r3, r4
 8005c3e:	694c      	ldr	r4, [r1, #20]
 8005c40:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005c44:	e792      	b.n	8005b6c <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	d0a2      	beq.n	8005b90 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c4a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005c4c:	6800      	ldr	r0, [r0, #0]
 8005c4e:	4333      	orrs	r3, r6
 8005c50:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005c52:	431a      	orrs	r2, r3
 8005c54:	694b      	ldr	r3, [r1, #20]
 8005c56:	4332      	orrs	r2, r6
 8005c58:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005c5a:	4332      	orrs	r2, r6
 8005c5c:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8005c60:	6142      	str	r2, [r0, #20]
}
 8005c62:	e795      	b.n	8005b90 <QSPI_Config+0x8c>

08005c64 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	460e      	mov	r6, r1
 8005c70:	4615      	mov	r5, r2
 8005c72:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	6893      	ldr	r3, [r2, #8]
 8005c78:	4233      	tst	r3, r6
 8005c7a:	bf14      	ite	ne
 8005c7c:	2301      	movne	r3, #1
 8005c7e:	2300      	moveq	r3, #0
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	d101      	bne.n	8005c88 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005c84:	2000      	movs	r0, #0
 8005c86:	e012      	b.n	8005cae <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005c88:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005c8c:	d0f3      	beq.n	8005c76 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7fe fdd7 	bl	8004840 <HAL_GetTick>
 8005c92:	1bc0      	subs	r0, r0, r7
 8005c94:	4540      	cmp	r0, r8
 8005c96:	d802      	bhi.n	8005c9e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005c98:	f1b8 0f00 	cmp.w	r8, #0
 8005c9c:	d1ea      	bne.n	8005c74 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c9e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ca0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005ca2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ca6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005cb4 <HAL_QSPI_Init>:
{
 8005cb4:	b530      	push	{r4, r5, lr}
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005cba:	f7fe fdc1 	bl	8004840 <HAL_GetTick>
 8005cbe:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005cc0:	2c00      	cmp	r4, #0
 8005cc2:	d047      	beq.n	8005d54 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005cc4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005cc8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005ccc:	b94a      	cbnz	r2, 8005ce2 <HAL_QSPI_Init+0x2e>
 8005cce:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005cd0:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005cd2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8005cd6:	f7fb fcd5 	bl	8001684 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	68a1      	ldr	r1, [r4, #8]
 8005ce6:	6802      	ldr	r2, [r0, #0]
 8005ce8:	3901      	subs	r1, #1
 8005cea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005cee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005cf2:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005cf4:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005cfa:	9200      	str	r2, [sp, #0]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f7ff ffb1 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005d02:	bb10      	cbnz	r0, 8005d4a <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	69e5      	ldr	r5, [r4, #28]
 8005d08:	68e3      	ldr	r3, [r4, #12]
 8005d0a:	6811      	ldr	r1, [r2, #0]
 8005d0c:	432b      	orrs	r3, r5
 8005d0e:	6a25      	ldr	r5, [r4, #32]
 8005d10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005d14:	432b      	orrs	r3, r5
 8005d16:	6865      	ldr	r5, [r4, #4]
 8005d18:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005d1c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d24:	6855      	ldr	r5, [r2, #4]
 8005d26:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	6921      	ldr	r1, [r4, #16]
 8005d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005d32:	4909      	ldr	r1, [pc, #36]	; (8005d58 <HAL_QSPI_Init+0xa4>)
 8005d34:	4029      	ands	r1, r5
 8005d36:	430b      	orrs	r3, r1
 8005d38:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d42:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d44:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005d50:	b005      	add	sp, #20
 8005d52:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005d54:	2001      	movs	r0, #1
 8005d56:	e7fb      	b.n	8005d50 <HAL_QSPI_Init+0x9c>
 8005d58:	ffe0f8fe 	.word	0xffe0f8fe

08005d5c <HAL_QSPI_DeInit>:
{
 8005d5c:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005d5e:	4604      	mov	r4, r0
 8005d60:	b168      	cbz	r0, 8005d7e <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8005d62:	6802      	ldr	r2, [r0, #0]
 8005d64:	6813      	ldr	r3, [r2, #0]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005d6c:	f7fb fcf8 	bl	8001760 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d70:	2000      	movs	r0, #0
 8005d72:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005d74:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005d78:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005d7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d7e:	2001      	movs	r0, #1
 8005d80:	e7fc      	b.n	8005d7c <HAL_QSPI_DeInit+0x20>

08005d82 <HAL_QSPI_Command>:
{
 8005d82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d86:	4604      	mov	r4, r0
 8005d88:	b085      	sub	sp, #20
 8005d8a:	4617      	mov	r7, r2
 8005d8c:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8005d8e:	f7fe fd57 	bl	8004840 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005d92:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005d96:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005d98:	2a01      	cmp	r2, #1
 8005d9a:	d033      	beq.n	8005e04 <HAL_QSPI_Command+0x82>
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	2602      	movs	r6, #2
 8005da0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005da4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005da8:	2a01      	cmp	r2, #1
 8005daa:	fa5f f882 	uxtb.w	r8, r2
 8005dae:	d127      	bne.n	8005e00 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005db0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005db2:	9003      	str	r0, [sp, #12]
 8005db4:	2120      	movs	r1, #32
 8005db6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005db8:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005dba:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005dbc:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005dc0:	f7ff ff50 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	b9a0      	cbnz	r0, 8005df2 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4649      	mov	r1, r9
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f7ff fe99 	bl	8005b04 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005dd2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	b94a      	cbnz	r2, 8005dee <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005dda:	4642      	mov	r2, r8
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4620      	mov	r0, r4
 8005de0:	9700      	str	r7, [sp, #0]
 8005de2:	f7ff ff3f 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005de6:	4605      	mov	r5, r0
 8005de8:	b918      	cbnz	r0, 8005df2 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005dee:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005df2:	2300      	movs	r3, #0
 8005df4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005df8:	4628      	mov	r0, r5
 8005dfa:	b005      	add	sp, #20
 8005dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005e00:	4635      	mov	r5, r6
 8005e02:	e7f6      	b.n	8005df2 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8005e04:	2502      	movs	r5, #2
 8005e06:	e7f7      	b.n	8005df8 <HAL_QSPI_Command+0x76>

08005e08 <HAL_QSPI_AutoPolling>:
{
 8005e08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	4615      	mov	r5, r2
 8005e10:	461e      	mov	r6, r3
 8005e12:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005e14:	f7fe fd14 	bl	8004840 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005e18:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005e1c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005e1e:	2a01      	cmp	r2, #1
 8005e20:	d040      	beq.n	8005ea4 <HAL_QSPI_AutoPolling+0x9c>
 8005e22:	2201      	movs	r2, #1
 8005e24:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e28:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005e2c:	2a01      	cmp	r2, #1
 8005e2e:	b2d7      	uxtb	r7, r2
 8005e30:	d136      	bne.n	8005ea0 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005e32:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e34:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e36:	9003      	str	r0, [sp, #12]
 8005e38:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e3a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e3c:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005e3e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e42:	2120      	movs	r1, #32
 8005e44:	f7ff ff0e 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005e48:	bb20      	cbnz	r0, 8005e94 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005e4a:	6821      	ldr	r1, [r4, #0]
 8005e4c:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005e4e:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005e50:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005e52:	686a      	ldr	r2, [r5, #4]
 8005e54:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005e56:	68aa      	ldr	r2, [r5, #8]
 8005e58:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005e5a:	680a      	ldr	r2, [r1, #0]
 8005e5c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005e60:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e62:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005e64:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e68:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e6a:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005e6c:	68ea      	ldr	r2, [r5, #12]
 8005e6e:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e76:	f7ff fe45 	bl	8005b04 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	463a      	mov	r2, r7
 8005e7e:	2108      	movs	r1, #8
 8005e80:	4620      	mov	r0, r4
 8005e82:	9600      	str	r6, [sp, #0]
 8005e84:	f7ff feee 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005e88:	b920      	cbnz	r0, 8005e94 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005e90:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005e94:	2300      	movs	r3, #0
 8005e96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005e9a:	b004      	add	sp, #16
 8005e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8005ea0:	2002      	movs	r0, #2
 8005ea2:	e7f7      	b.n	8005e94 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	e7f8      	b.n	8005e9a <HAL_QSPI_AutoPolling+0x92>

08005ea8 <HAL_QSPI_MemoryMapped>:
{
 8005ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4616      	mov	r6, r2
 8005eae:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005eb0:	f7fe fcc6 	bl	8004840 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005eb4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005eb8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005eba:	2a01      	cmp	r2, #1
 8005ebc:	d033      	beq.n	8005f26 <HAL_QSPI_MemoryMapped+0x7e>
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ec4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005ec8:	2a01      	cmp	r2, #1
 8005eca:	d12a      	bne.n	8005f22 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ecc:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005ece:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ed0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ed2:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005ed4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ed8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005eda:	9100      	str	r1, [sp, #0]
 8005edc:	2120      	movs	r1, #32
 8005ede:	f7ff fec1 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	b9b8      	cbnz	r0, 8005f16 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	6872      	ldr	r2, [r6, #4]
 8005eea:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005eec:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005eee:	f020 0008 	bic.w	r0, r0, #8
 8005ef2:	ea40 0002 	orr.w	r0, r0, r2
 8005ef6:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005ef8:	d107      	bne.n	8005f0a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005efa:	6832      	ldr	r2, [r6, #0]
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005efe:	2210      	movs	r2, #16
 8005f00:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f08:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005f0a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff fdf7 	bl	8005b04 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8005f16:	2300      	movs	r3, #0
 8005f18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	b003      	add	sp, #12
 8005f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8005f22:	2502      	movs	r5, #2
 8005f24:	e7f7      	b.n	8005f16 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8005f26:	2502      	movs	r5, #2
 8005f28:	e7f8      	b.n	8005f1c <HAL_QSPI_MemoryMapped+0x74>

08005f2a <HAL_QSPI_Abort>:
{
 8005f2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f2c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005f2e:	f7fe fc87 	bl	8004840 <HAL_GetTick>
 8005f32:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005f34:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8005f38:	f010 0002 	ands.w	r0, r0, #2
 8005f3c:	d03a      	beq.n	8005fb4 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 8005f3e:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f40:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 8005f42:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f46:	680a      	ldr	r2, [r1, #0]
 8005f48:	f012 0204 	ands.w	r2, r2, #4
 8005f4c:	d034      	beq.n	8005fb8 <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f4e:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005f50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	9303      	str	r3, [sp, #12]
 8005f58:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005f5a:	f7fe fd97 	bl	8004a8c <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	b118      	cbz	r0, 8005f6a <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005f62:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f64:	f042 0204 	orr.w	r2, r2, #4
 8005f68:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	6891      	ldr	r1, [r2, #8]
 8005f6e:	0689      	lsls	r1, r1, #26
 8005f70:	d51d      	bpl.n	8005fae <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f72:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005f74:	4620      	mov	r0, r4
 8005f76:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f78:	f041 0102 	orr.w	r1, r1, #2
 8005f7c:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005f7e:	2102      	movs	r1, #2
 8005f80:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f82:	9200      	str	r2, [sp, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f7ff fe6d 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	b990      	cbnz	r0, 8005fb4 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	2102      	movs	r1, #2
 8005f92:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f94:	2120      	movs	r1, #32
 8005f96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f98:	9200      	str	r2, [sp, #0]
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff fe61 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005fa2:	b938      	cbnz	r0, 8005fb4 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	6953      	ldr	r3, [r2, #20]
 8005fa8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005fac:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	4610      	mov	r0, r2
 8005fba:	e7d6      	b.n	8005f6a <HAL_QSPI_Abort+0x40>

08005fbc <HAL_QSPI_Transmit>:
{
 8005fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005fc6:	f7fe fc3b 	bl	8004840 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005fca:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005fce:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005fd0:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8005fd2:	2a01      	cmp	r2, #1
 8005fd4:	d04c      	beq.n	8006070 <HAL_QSPI_Transmit+0xb4>
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005fdc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005fe0:	2a01      	cmp	r2, #1
 8005fe2:	b2d0      	uxtb	r0, r2
 8005fe4:	d142      	bne.n	800606c <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005fea:	2f00      	cmp	r7, #0
 8005fec:	d039      	beq.n	8006062 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005fee:	2212      	movs	r2, #18
 8005ff0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ff4:	692a      	ldr	r2, [r5, #16]
 8005ff6:	3201      	adds	r2, #1
 8005ff8:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ffa:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8005ffc:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ffe:	3201      	adds	r2, #1
 8006000:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006002:	696a      	ldr	r2, [r5, #20]
 8006004:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006008:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800600a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800600c:	b9a2      	cbnz	r2, 8006038 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800600e:	2201      	movs	r2, #1
 8006010:	2102      	movs	r1, #2
 8006012:	4620      	mov	r0, r4
 8006014:	9600      	str	r6, [sp, #0]
 8006016:	f7ff fe25 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800601a:	b928      	cbnz	r0, 8006028 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8006020:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006022:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8006024:	f7ff ff81 	bl	8005f2a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8006028:	2301      	movs	r3, #1
 800602a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800602e:	2300      	movs	r3, #0
 8006030:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006034:	b005      	add	sp, #20
 8006036:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006038:	2201      	movs	r2, #1
 800603a:	2104      	movs	r1, #4
 800603c:	4620      	mov	r0, r4
 800603e:	9600      	str	r6, [sp, #0]
 8006040:	9303      	str	r3, [sp, #12]
 8006042:	f7ff fe0f 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006046:	2800      	cmp	r0, #0
 8006048:	d1ee      	bne.n	8006028 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800604a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800604c:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8006054:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006056:	3201      	adds	r2, #1
 8006058:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800605a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800605c:	3a01      	subs	r2, #1
 800605e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006060:	e7d3      	b.n	800600a <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006062:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006064:	f043 0308 	orr.w	r3, r3, #8
 8006068:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800606a:	e7e0      	b.n	800602e <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800606c:	2002      	movs	r0, #2
 800606e:	e7de      	b.n	800602e <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8006070:	2002      	movs	r0, #2
 8006072:	e7df      	b.n	8006034 <HAL_QSPI_Transmit+0x78>

08006074 <HAL_QSPI_Receive>:
{
 8006074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006076:	4604      	mov	r4, r0
 8006078:	b085      	sub	sp, #20
 800607a:	4616      	mov	r6, r2
 800607c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800607e:	f7fe fbdf 	bl	8004840 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006082:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006084:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006086:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800608a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800608e:	2a01      	cmp	r2, #1
 8006090:	d050      	beq.n	8006134 <HAL_QSPI_Receive+0xc0>
 8006092:	2201      	movs	r2, #1
 8006094:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006098:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800609c:	2a01      	cmp	r2, #1
 800609e:	b2d0      	uxtb	r0, r2
 80060a0:	d146      	bne.n	8006130 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80060a2:	2200      	movs	r2, #0
 80060a4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80060a6:	2f00      	cmp	r7, #0
 80060a8:	d03d      	beq.n	8006126 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80060aa:	2222      	movs	r2, #34	; 0x22
 80060ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80060b0:	692a      	ldr	r2, [r5, #16]
 80060b2:	3201      	adds	r2, #1
 80060b4:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80060b6:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80060b8:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80060ba:	3201      	adds	r2, #1
 80060bc:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80060be:	6969      	ldr	r1, [r5, #20]
 80060c0:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80060c4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80060c8:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80060ca:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80060ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060d0:	b9a2      	cbnz	r2, 80060fc <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80060d2:	2201      	movs	r2, #1
 80060d4:	2102      	movs	r1, #2
 80060d6:	4620      	mov	r0, r4
 80060d8:	9600      	str	r6, [sp, #0]
 80060da:	f7ff fdc3 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80060de:	b928      	cbnz	r0, 80060ec <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80060e4:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060e6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80060e8:	f7ff ff1f 	bl	8005f2a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80060f2:	2300      	movs	r3, #0
 80060f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80060f8:	b005      	add	sp, #20
 80060fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80060fc:	2201      	movs	r2, #1
 80060fe:	2106      	movs	r1, #6
 8006100:	4620      	mov	r0, r4
 8006102:	9600      	str	r6, [sp, #0]
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	f7ff fdad 	bl	8005c64 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800610a:	2800      	cmp	r0, #0
 800610c:	d1ee      	bne.n	80060ec <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800610e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8006112:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8006114:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006116:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8006118:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800611a:	3201      	adds	r2, #1
 800611c:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800611e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006120:	3a01      	subs	r2, #1
 8006122:	63a2      	str	r2, [r4, #56]	; 0x38
 8006124:	e7d3      	b.n	80060ce <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006126:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006128:	f043 0308 	orr.w	r3, r3, #8
 800612c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800612e:	e7e0      	b.n	80060f2 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 8006130:	2002      	movs	r0, #2
 8006132:	e7de      	b.n	80060f2 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8006134:	2002      	movs	r0, #2
 8006136:	e7df      	b.n	80060f8 <HAL_QSPI_Receive+0x84>

08006138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800613c:	4604      	mov	r4, r0
 800613e:	b340      	cbz	r0, 8006192 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006140:	6803      	ldr	r3, [r0, #0]
 8006142:	07db      	lsls	r3, r3, #31
 8006144:	d410      	bmi.n	8006168 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	079f      	lsls	r7, r3, #30
 800614a:	d464      	bmi.n	8006216 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	0719      	lsls	r1, r3, #28
 8006150:	f100 80aa 	bmi.w	80062a8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	075a      	lsls	r2, r3, #29
 8006158:	f100 80cb 	bmi.w	80062f2 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800615c:	69a2      	ldr	r2, [r4, #24]
 800615e:	2a00      	cmp	r2, #0
 8006160:	f040 8134 	bne.w	80063cc <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006164:	2000      	movs	r0, #0
 8006166:	e02b      	b.n	80061c0 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006168:	4b96      	ldr	r3, [pc, #600]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	f002 020c 	and.w	r2, r2, #12
 8006170:	2a04      	cmp	r2, #4
 8006172:	d007      	beq.n	8006184 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	f002 020c 	and.w	r2, r2, #12
 800617a:	2a08      	cmp	r2, #8
 800617c:	d10b      	bne.n	8006196 <HAL_RCC_OscConfig+0x5e>
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	0256      	lsls	r6, r2, #9
 8006182:	d508      	bpl.n	8006196 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006184:	4b8f      	ldr	r3, [pc, #572]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	039d      	lsls	r5, r3, #14
 800618a:	d5dc      	bpl.n	8006146 <HAL_RCC_OscConfig+0xe>
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1d9      	bne.n	8006146 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8006192:	2001      	movs	r0, #1
 8006194:	e014      	b.n	80061c0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006196:	6862      	ldr	r2, [r4, #4]
 8006198:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800619c:	d113      	bne.n	80061c6 <HAL_RCC_OscConfig+0x8e>
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80061a6:	f7fe fb4b 	bl	8004840 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061aa:	4e86      	ldr	r6, [pc, #536]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80061ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	6833      	ldr	r3, [r6, #0]
 80061b0:	0398      	lsls	r0, r3, #14
 80061b2:	d4c8      	bmi.n	8006146 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b4:	f7fe fb44 	bl	8004840 <HAL_GetTick>
 80061b8:	1b40      	subs	r0, r0, r5
 80061ba:	2864      	cmp	r0, #100	; 0x64
 80061bc:	d9f7      	bls.n	80061ae <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80061be:	2003      	movs	r0, #3
}
 80061c0:	b002      	add	sp, #8
 80061c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c6:	4d7f      	ldr	r5, [pc, #508]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b992      	cbnz	r2, 80061f2 <HAL_RCC_OscConfig+0xba>
 80061cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80061da:	f7fe fb31 	bl	8004840 <HAL_GetTick>
 80061de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	0399      	lsls	r1, r3, #14
 80061e4:	d5af      	bpl.n	8006146 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061e6:	f7fe fb2b 	bl	8004840 <HAL_GetTick>
 80061ea:	1b80      	subs	r0, r0, r6
 80061ec:	2864      	cmp	r0, #100	; 0x64
 80061ee:	d9f7      	bls.n	80061e0 <HAL_RCC_OscConfig+0xa8>
 80061f0:	e7e5      	b.n	80061be <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80061f6:	d107      	bne.n	8006208 <HAL_RCC_OscConfig+0xd0>
 80061f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	682b      	ldr	r3, [r5, #0]
 8006200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	e7ce      	b.n	80061a6 <HAL_RCC_OscConfig+0x6e>
 8006208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620c:	602b      	str	r3, [r5, #0]
 800620e:	682b      	ldr	r3, [r5, #0]
 8006210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006214:	e7f6      	b.n	8006204 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006216:	4b6b      	ldr	r3, [pc, #428]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	f012 0f0c 	tst.w	r2, #12
 800621e:	d007      	beq.n	8006230 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	f002 020c 	and.w	r2, r2, #12
 8006226:	2a08      	cmp	r2, #8
 8006228:	d111      	bne.n	800624e <HAL_RCC_OscConfig+0x116>
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	0252      	lsls	r2, r2, #9
 800622e:	d40e      	bmi.n	800624e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006230:	4a64      	ldr	r2, [pc, #400]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 8006232:	6813      	ldr	r3, [r2, #0]
 8006234:	079b      	lsls	r3, r3, #30
 8006236:	d502      	bpl.n	800623e <HAL_RCC_OscConfig+0x106>
 8006238:	68e3      	ldr	r3, [r4, #12]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d1a9      	bne.n	8006192 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623e:	6813      	ldr	r3, [r2, #0]
 8006240:	6921      	ldr	r1, [r4, #16]
 8006242:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006246:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800624a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624c:	e77e      	b.n	800614c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800624e:	68e2      	ldr	r2, [r4, #12]
 8006250:	b1c2      	cbz	r2, 8006284 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8006252:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006254:	4d5b      	ldr	r5, [pc, #364]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800625c:	f7fe faf0 	bl	8004840 <HAL_GetTick>
 8006260:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	079f      	lsls	r7, r3, #30
 8006266:	d507      	bpl.n	8006278 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	6922      	ldr	r2, [r4, #16]
 800626c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006270:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	e769      	b.n	800614c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006278:	f7fe fae2 	bl	8004840 <HAL_GetTick>
 800627c:	1b80      	subs	r0, r0, r6
 800627e:	2802      	cmp	r0, #2
 8006280:	d9ef      	bls.n	8006262 <HAL_RCC_OscConfig+0x12a>
 8006282:	e79c      	b.n	80061be <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8006284:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006286:	4e4f      	ldr	r6, [pc, #316]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800628e:	f7fe fad7 	bl	8004840 <HAL_GetTick>
 8006292:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006294:	6833      	ldr	r3, [r6, #0]
 8006296:	0798      	lsls	r0, r3, #30
 8006298:	f57f af58 	bpl.w	800614c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800629c:	f7fe fad0 	bl	8004840 <HAL_GetTick>
 80062a0:	1b40      	subs	r0, r0, r5
 80062a2:	2802      	cmp	r0, #2
 80062a4:	d9f6      	bls.n	8006294 <HAL_RCC_OscConfig+0x15c>
 80062a6:	e78a      	b.n	80061be <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062a8:	6963      	ldr	r3, [r4, #20]
 80062aa:	4d46      	ldr	r5, [pc, #280]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 80062ac:	b183      	cbz	r3, 80062d0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80062ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80062b6:	f7fe fac3 	bl	8004840 <HAL_GetTick>
 80062ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062bc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80062be:	079b      	lsls	r3, r3, #30
 80062c0:	f53f af48 	bmi.w	8006154 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c4:	f7fe fabc 	bl	8004840 <HAL_GetTick>
 80062c8:	1b80      	subs	r0, r0, r6
 80062ca:	2802      	cmp	r0, #2
 80062cc:	d9f6      	bls.n	80062bc <HAL_RCC_OscConfig+0x184>
 80062ce:	e776      	b.n	80061be <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80062d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80062d2:	f023 0301 	bic.w	r3, r3, #1
 80062d6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80062d8:	f7fe fab2 	bl	8004840 <HAL_GetTick>
 80062dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80062e0:	079f      	lsls	r7, r3, #30
 80062e2:	f57f af37 	bpl.w	8006154 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062e6:	f7fe faab 	bl	8004840 <HAL_GetTick>
 80062ea:	1b80      	subs	r0, r0, r6
 80062ec:	2802      	cmp	r0, #2
 80062ee:	d9f6      	bls.n	80062de <HAL_RCC_OscConfig+0x1a6>
 80062f0:	e765      	b.n	80061be <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062f2:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 80062f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f6:	00d0      	lsls	r0, r2, #3
 80062f8:	d427      	bmi.n	800634a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80062fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80062fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80062fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800630e:	4d2e      	ldr	r5, [pc, #184]	; (80063c8 <HAL_RCC_OscConfig+0x290>)
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	05d9      	lsls	r1, r3, #23
 8006314:	d51b      	bpl.n	800634e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	4d2a      	ldr	r5, [pc, #168]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 800631a:	2b01      	cmp	r3, #1
 800631c:	d127      	bne.n	800636e <HAL_RCC_OscConfig+0x236>
 800631e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006326:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800632a:	f7fe fa89 	bl	8004840 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632e:	4e25      	ldr	r6, [pc, #148]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8006330:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006332:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006334:	079b      	lsls	r3, r3, #30
 8006336:	d53f      	bpl.n	80063b8 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8006338:	2f00      	cmp	r7, #0
 800633a:	f43f af0f 	beq.w	800615c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_RCC_OscConfig+0x28c>)
 8006340:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006346:	6413      	str	r3, [r2, #64]	; 0x40
 8006348:	e708      	b.n	800615c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800634a:	2700      	movs	r7, #0
 800634c:	e7df      	b.n	800630e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006354:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006356:	f7fe fa73 	bl	8004840 <HAL_GetTick>
 800635a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	05da      	lsls	r2, r3, #23
 8006360:	d4d9      	bmi.n	8006316 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006362:	f7fe fa6d 	bl	8004840 <HAL_GetTick>
 8006366:	1b80      	subs	r0, r0, r6
 8006368:	2864      	cmp	r0, #100	; 0x64
 800636a:	d9f7      	bls.n	800635c <HAL_RCC_OscConfig+0x224>
 800636c:	e727      	b.n	80061be <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800636e:	b9ab      	cbnz	r3, 800639c <HAL_RCC_OscConfig+0x264>
 8006370:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006372:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	672b      	str	r3, [r5, #112]	; 0x70
 800637c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800637e:	f023 0304 	bic.w	r3, r3, #4
 8006382:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006384:	f7fe fa5c 	bl	8004840 <HAL_GetTick>
 8006388:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800638a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800638c:	0798      	lsls	r0, r3, #30
 800638e:	d5d3      	bpl.n	8006338 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006390:	f7fe fa56 	bl	8004840 <HAL_GetTick>
 8006394:	1b80      	subs	r0, r0, r6
 8006396:	4540      	cmp	r0, r8
 8006398:	d9f7      	bls.n	800638a <HAL_RCC_OscConfig+0x252>
 800639a:	e710      	b.n	80061be <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639c:	2b05      	cmp	r3, #5
 800639e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80063a0:	d103      	bne.n	80063aa <HAL_RCC_OscConfig+0x272>
 80063a2:	f043 0304 	orr.w	r3, r3, #4
 80063a6:	672b      	str	r3, [r5, #112]	; 0x70
 80063a8:	e7b9      	b.n	800631e <HAL_RCC_OscConfig+0x1e6>
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	672b      	str	r3, [r5, #112]	; 0x70
 80063b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80063b2:	f023 0304 	bic.w	r3, r3, #4
 80063b6:	e7b5      	b.n	8006324 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b8:	f7fe fa42 	bl	8004840 <HAL_GetTick>
 80063bc:	1b40      	subs	r0, r0, r5
 80063be:	4540      	cmp	r0, r8
 80063c0:	d9b7      	bls.n	8006332 <HAL_RCC_OscConfig+0x1fa>
 80063c2:	e6fc      	b.n	80061be <HAL_RCC_OscConfig+0x86>
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063cc:	4d38      	ldr	r5, [pc, #224]	; (80064b0 <HAL_RCC_OscConfig+0x378>)
 80063ce:	68ab      	ldr	r3, [r5, #8]
 80063d0:	f003 030c 	and.w	r3, r3, #12
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d041      	beq.n	800645c <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80063d8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063da:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80063dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063e0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063e2:	d12e      	bne.n	8006442 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80063e4:	f7fe fa2c 	bl	8004840 <HAL_GetTick>
 80063e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	0199      	lsls	r1, r3, #6
 80063ee:	d422      	bmi.n	8006436 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	1e5a      	subs	r2, r3, #1
 80063f6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80063fa:	430b      	orrs	r3, r1
 80063fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006400:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006402:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006406:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006408:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800640c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006410:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006412:	682b      	ldr	r3, [r5, #0]
 8006414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006418:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800641a:	f7fe fa11 	bl	8004840 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641e:	4d24      	ldr	r5, [pc, #144]	; (80064b0 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8006420:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	019a      	lsls	r2, r3, #6
 8006426:	f53f ae9d 	bmi.w	8006164 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800642a:	f7fe fa09 	bl	8004840 <HAL_GetTick>
 800642e:	1b00      	subs	r0, r0, r4
 8006430:	2802      	cmp	r0, #2
 8006432:	d9f6      	bls.n	8006422 <HAL_RCC_OscConfig+0x2ea>
 8006434:	e6c3      	b.n	80061be <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006436:	f7fe fa03 	bl	8004840 <HAL_GetTick>
 800643a:	1b80      	subs	r0, r0, r6
 800643c:	2802      	cmp	r0, #2
 800643e:	d9d4      	bls.n	80063ea <HAL_RCC_OscConfig+0x2b2>
 8006440:	e6bd      	b.n	80061be <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8006442:	f7fe f9fd 	bl	8004840 <HAL_GetTick>
 8006446:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	019b      	lsls	r3, r3, #6
 800644c:	f57f ae8a 	bpl.w	8006164 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006450:	f7fe f9f6 	bl	8004840 <HAL_GetTick>
 8006454:	1b00      	subs	r0, r0, r4
 8006456:	2802      	cmp	r0, #2
 8006458:	d9f6      	bls.n	8006448 <HAL_RCC_OscConfig+0x310>
 800645a:	e6b0      	b.n	80061be <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800645c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800645e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006460:	f43f ae97 	beq.w	8006192 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006464:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006468:	69e1      	ldr	r1, [r4, #28]
 800646a:	428a      	cmp	r2, r1
 800646c:	f47f ae91 	bne.w	8006192 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006470:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006474:	6a21      	ldr	r1, [r4, #32]
 8006476:	428a      	cmp	r2, r1
 8006478:	f47f ae8b 	bne.w	8006192 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800647c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006480:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006482:	401a      	ands	r2, r3
 8006484:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006488:	f47f ae83 	bne.w	8006192 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800648c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800648e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8006492:	0852      	lsrs	r2, r2, #1
 8006494:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006496:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800649a:	f47f ae7a 	bne.w	8006192 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800649e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80064a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80064a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80064a8:	f43f ae5c 	beq.w	8006164 <HAL_RCC_OscConfig+0x2c>
 80064ac:	e671      	b.n	8006192 <HAL_RCC_OscConfig+0x5a>
 80064ae:	bf00      	nop
 80064b0:	40023800 	.word	0x40023800

080064b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b4:	4913      	ldr	r1, [pc, #76]	; (8006504 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80064b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b8:	688b      	ldr	r3, [r1, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d01b      	beq.n	80064fa <HAL_RCC_GetSysClockFreq+0x46>
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d11b      	bne.n	80064fe <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064c6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064c8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ca:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80064d8:	bf1a      	itte	ne
 80064da:	480b      	ldrne	r0, [pc, #44]	; (8006508 <HAL_RCC_GetSysClockFreq+0x54>)
 80064dc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064de:	480b      	ldreq	r0, [pc, #44]	; (800650c <HAL_RCC_GetSysClockFreq+0x58>)
 80064e0:	fba1 0100 	umull	r0, r1, r1, r0
 80064e4:	f7fa fb02 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <HAL_RCC_GetSysClockFreq+0x50>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80064f0:	3301      	adds	r3, #1
 80064f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80064f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80064f8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064fa:	4803      	ldr	r0, [pc, #12]	; (8006508 <HAL_RCC_GetSysClockFreq+0x54>)
 80064fc:	e7fc      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80064fe:	4803      	ldr	r0, [pc, #12]	; (800650c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8006500:	e7fa      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0x44>
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	017d7840 	.word	0x017d7840
 800650c:	00f42400 	.word	0x00f42400

08006510 <HAL_RCC_ClockConfig>:
{
 8006510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006514:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006516:	4604      	mov	r4, r0
 8006518:	b910      	cbnz	r0, 8006520 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800651a:	2001      	movs	r0, #1
}
 800651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006520:	4a46      	ldr	r2, [pc, #280]	; (800663c <HAL_RCC_ClockConfig+0x12c>)
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	428b      	cmp	r3, r1
 800652a:	d328      	bcc.n	800657e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	0797      	lsls	r7, r2, #30
 8006530:	d430      	bmi.n	8006594 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006532:	07d0      	lsls	r0, r2, #31
 8006534:	d444      	bmi.n	80065c0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006536:	4a41      	ldr	r2, [pc, #260]	; (800663c <HAL_RCC_ClockConfig+0x12c>)
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	42ab      	cmp	r3, r5
 8006540:	d867      	bhi.n	8006612 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	0751      	lsls	r1, r2, #29
 8006546:	d470      	bmi.n	800662a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006548:	0713      	lsls	r3, r2, #28
 800654a:	d507      	bpl.n	800655c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800654c:	4a3c      	ldr	r2, [pc, #240]	; (8006640 <HAL_RCC_ClockConfig+0x130>)
 800654e:	6921      	ldr	r1, [r4, #16]
 8006550:	6893      	ldr	r3, [r2, #8]
 8006552:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006556:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800655a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800655c:	f7ff ffaa 	bl	80064b4 <HAL_RCC_GetSysClockFreq>
 8006560:	4b37      	ldr	r3, [pc, #220]	; (8006640 <HAL_RCC_ClockConfig+0x130>)
 8006562:	4a38      	ldr	r2, [pc, #224]	; (8006644 <HAL_RCC_ClockConfig+0x134>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800656a:	5cd3      	ldrb	r3, [r2, r3]
 800656c:	40d8      	lsrs	r0, r3
 800656e:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_RCC_ClockConfig+0x138>)
 8006570:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006572:	4b36      	ldr	r3, [pc, #216]	; (800664c <HAL_RCC_ClockConfig+0x13c>)
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f7fb f97f 	bl	8001878 <HAL_InitTick>
  return HAL_OK;
 800657a:	2000      	movs	r0, #0
 800657c:	e7ce      	b.n	800651c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	f023 030f 	bic.w	r3, r3, #15
 8006584:	430b      	orrs	r3, r1
 8006586:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006588:	6813      	ldr	r3, [r2, #0]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	428b      	cmp	r3, r1
 8006590:	d1c3      	bne.n	800651a <HAL_RCC_ClockConfig+0xa>
 8006592:	e7cb      	b.n	800652c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	f012 0f04 	tst.w	r2, #4
 8006598:	4b29      	ldr	r3, [pc, #164]	; (8006640 <HAL_RCC_ClockConfig+0x130>)
 800659a:	d003      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800659c:	6899      	ldr	r1, [r3, #8]
 800659e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80065a2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a4:	0716      	lsls	r6, r2, #28
 80065a6:	d503      	bpl.n	80065b0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065a8:	6899      	ldr	r1, [r3, #8]
 80065aa:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80065ae:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b0:	4923      	ldr	r1, [pc, #140]	; (8006640 <HAL_RCC_ClockConfig+0x130>)
 80065b2:	68a0      	ldr	r0, [r4, #8]
 80065b4:	688b      	ldr	r3, [r1, #8]
 80065b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ba:	4303      	orrs	r3, r0
 80065bc:	608b      	str	r3, [r1, #8]
 80065be:	e7b8      	b.n	8006532 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c0:	6861      	ldr	r1, [r4, #4]
 80065c2:	4b1f      	ldr	r3, [pc, #124]	; (8006640 <HAL_RCC_ClockConfig+0x130>)
 80065c4:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c6:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c8:	d11b      	bne.n	8006602 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ce:	d0a4      	beq.n	800651a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065d0:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	4f1a      	ldr	r7, [pc, #104]	; (8006640 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065d8:	f022 0203 	bic.w	r2, r2, #3
 80065dc:	430a      	orrs	r2, r1
 80065de:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80065e0:	f7fe f92e 	bl	8004840 <HAL_GetTick>
 80065e4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6862      	ldr	r2, [r4, #4]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80065f2:	d0a0      	beq.n	8006536 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f4:	f7fe f924 	bl	8004840 <HAL_GetTick>
 80065f8:	1b80      	subs	r0, r0, r6
 80065fa:	4540      	cmp	r0, r8
 80065fc:	d9f3      	bls.n	80065e6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80065fe:	2003      	movs	r0, #3
 8006600:	e78c      	b.n	800651c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006602:	2902      	cmp	r1, #2
 8006604:	d102      	bne.n	800660c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006606:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800660a:	e7e0      	b.n	80065ce <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660c:	f012 0f02 	tst.w	r2, #2
 8006610:	e7dd      	b.n	80065ce <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	f023 030f 	bic.w	r3, r3, #15
 8006618:	432b      	orrs	r3, r5
 800661a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800661c:	6813      	ldr	r3, [r2, #0]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	42ab      	cmp	r3, r5
 8006624:	f47f af79 	bne.w	800651a <HAL_RCC_ClockConfig+0xa>
 8006628:	e78b      	b.n	8006542 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662a:	4905      	ldr	r1, [pc, #20]	; (8006640 <HAL_RCC_ClockConfig+0x130>)
 800662c:	68e0      	ldr	r0, [r4, #12]
 800662e:	688b      	ldr	r3, [r1, #8]
 8006630:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006634:	4303      	orrs	r3, r0
 8006636:	608b      	str	r3, [r1, #8]
 8006638:	e786      	b.n	8006548 <HAL_RCC_ClockConfig+0x38>
 800663a:	bf00      	nop
 800663c:	40023c00 	.word	0x40023c00
 8006640:	40023800 	.word	0x40023800
 8006644:	0802ebdc 	.word	0x0802ebdc
 8006648:	2000000c 	.word	0x2000000c
 800664c:	2000003c 	.word	0x2000003c

08006650 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006652:	4a05      	ldr	r2, [pc, #20]	; (8006668 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800665a:	5cd3      	ldrb	r3, [r2, r3]
 800665c:	4a03      	ldr	r2, [pc, #12]	; (800666c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800665e:	6810      	ldr	r0, [r2, #0]
}
 8006660:	40d8      	lsrs	r0, r3
 8006662:	4770      	bx	lr
 8006664:	40023800 	.word	0x40023800
 8006668:	0802ebec 	.word	0x0802ebec
 800666c:	2000000c 	.word	0x2000000c

08006670 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006670:	230f      	movs	r3, #15
 8006672:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_RCC_GetClockConfig+0x34>)
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	f002 0203 	and.w	r2, r2, #3
 800667c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006684:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800668c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	08db      	lsrs	r3, r3, #3
 8006692:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006696:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006698:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <HAL_RCC_GetClockConfig+0x38>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	600b      	str	r3, [r1, #0]
}
 80066a2:	4770      	bx	lr
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40023c00 	.word	0x40023c00

080066ac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066ac:	6803      	ldr	r3, [r0, #0]
{
 80066ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066b2:	f013 0601 	ands.w	r6, r3, #1
{
 80066b6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066b8:	d00b      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066ba:	4aaa      	ldr	r2, [pc, #680]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066bc:	6891      	ldr	r1, [r2, #8]
 80066be:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80066c2:	6091      	str	r1, [r2, #8]
 80066c4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80066c6:	6891      	ldr	r1, [r2, #8]
 80066c8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80066ca:	fab6 f686 	clz	r6, r6
 80066ce:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066d0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80066d2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80066d6:	d012      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066d8:	49a2      	ldr	r1, [pc, #648]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066da:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80066dc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80066e0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80066e8:	bf08      	it	eq
 80066ea:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066ec:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066f0:	bf16      	itet	ne
 80066f2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80066f6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066f8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066fa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066fe:	02d8      	lsls	r0, r3, #11
 8006700:	d510      	bpl.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006702:	4898      	ldr	r0, [pc, #608]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006704:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006706:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800670a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800670e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006712:	ea42 0201 	orr.w	r2, r2, r1
 8006716:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800671a:	f000 8184 	beq.w	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800671e:	2900      	cmp	r1, #0
 8006720:	bf08      	it	eq
 8006722:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8006724:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006728:	bf18      	it	ne
 800672a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800672c:	0699      	lsls	r1, r3, #26
 800672e:	d531      	bpl.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006730:	4b8c      	ldr	r3, [pc, #560]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006732:	4f8d      	ldr	r7, [pc, #564]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006736:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800673a:	641a      	str	r2, [r3, #64]	; 0x40
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674e:	f7fe f877 	bl	8004840 <HAL_GetTick>
 8006752:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	05da      	lsls	r2, r3, #23
 8006758:	f140 8167 	bpl.w	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800675c:	4f81      	ldr	r7, [pc, #516]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800675e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006760:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006764:	f040 816c 	bne.w	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006768:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800676a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800676e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006772:	4a7c      	ldr	r2, [pc, #496]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006774:	f040 818a 	bne.w	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006778:	6891      	ldr	r1, [r2, #8]
 800677a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800677e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006782:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006786:	4301      	orrs	r1, r0
 8006788:	6091      	str	r1, [r2, #8]
 800678a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006790:	430b      	orrs	r3, r1
 8006792:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	06d9      	lsls	r1, r3, #27
 8006798:	d50c      	bpl.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800679a:	4a72      	ldr	r2, [pc, #456]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800679c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80067a0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80067a4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80067a8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80067ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80067ae:	4301      	orrs	r1, r0
 80067b0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067b4:	045a      	lsls	r2, r3, #17
 80067b6:	d508      	bpl.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067b8:	496a      	ldr	r1, [pc, #424]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80067bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80067c4:	4302      	orrs	r2, r0
 80067c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067ca:	041f      	lsls	r7, r3, #16
 80067cc:	d508      	bpl.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067ce:	4965      	ldr	r1, [pc, #404]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067d0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80067d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067d6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80067da:	4302      	orrs	r2, r0
 80067dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067e0:	03d8      	lsls	r0, r3, #15
 80067e2:	d508      	bpl.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067e4:	495f      	ldr	r1, [pc, #380]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80067e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067ec:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80067f0:	4302      	orrs	r2, r0
 80067f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067f6:	0399      	lsls	r1, r3, #14
 80067f8:	d508      	bpl.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067fa:	495a      	ldr	r1, [pc, #360]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80067fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006802:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006806:	4302      	orrs	r2, r0
 8006808:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800680c:	065a      	lsls	r2, r3, #25
 800680e:	d508      	bpl.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006810:	4954      	ldr	r1, [pc, #336]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006812:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006814:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006818:	f022 0203 	bic.w	r2, r2, #3
 800681c:	4302      	orrs	r2, r0
 800681e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006822:	061f      	lsls	r7, r3, #24
 8006824:	d508      	bpl.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006826:	494f      	ldr	r1, [pc, #316]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006828:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800682a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800682e:	f022 020c 	bic.w	r2, r2, #12
 8006832:	4302      	orrs	r2, r0
 8006834:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006838:	05d8      	lsls	r0, r3, #23
 800683a:	d508      	bpl.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800683c:	4949      	ldr	r1, [pc, #292]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800683e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006840:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006844:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006848:	4302      	orrs	r2, r0
 800684a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800684e:	0599      	lsls	r1, r3, #22
 8006850:	d508      	bpl.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006852:	4944      	ldr	r1, [pc, #272]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006854:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006856:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800685a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800685e:	4302      	orrs	r2, r0
 8006860:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006864:	055a      	lsls	r2, r3, #21
 8006866:	d508      	bpl.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006868:	493e      	ldr	r1, [pc, #248]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800686a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800686c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006870:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006874:	4302      	orrs	r2, r0
 8006876:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800687a:	051f      	lsls	r7, r3, #20
 800687c:	d508      	bpl.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800687e:	4939      	ldr	r1, [pc, #228]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006882:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006886:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800688a:	4302      	orrs	r2, r0
 800688c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006890:	04d8      	lsls	r0, r3, #19
 8006892:	d508      	bpl.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006894:	4933      	ldr	r1, [pc, #204]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006896:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006898:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800689c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80068a0:	4302      	orrs	r2, r0
 80068a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80068a6:	0499      	lsls	r1, r3, #18
 80068a8:	d508      	bpl.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80068aa:	492e      	ldr	r1, [pc, #184]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80068ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80068b6:	4302      	orrs	r2, r0
 80068b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068bc:	025a      	lsls	r2, r3, #9
 80068be:	d508      	bpl.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068c0:	4928      	ldr	r1, [pc, #160]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068c2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80068c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068c8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80068cc:	4302      	orrs	r2, r0
 80068ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068d2:	029f      	lsls	r7, r3, #10
 80068d4:	d50c      	bpl.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068d6:	4823      	ldr	r0, [pc, #140]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068d8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80068da:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80068de:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068e2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80068e6:	bf08      	it	eq
 80068e8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068ea:	430a      	orrs	r2, r1
 80068ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80068f0:	f013 0f08 	tst.w	r3, #8
 80068f4:	bf18      	it	ne
 80068f6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068f8:	0358      	lsls	r0, r3, #13
 80068fa:	d508      	bpl.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068fc:	4919      	ldr	r1, [pc, #100]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006900:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006904:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006908:	4302      	orrs	r2, r0
 800690a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800690e:	0219      	lsls	r1, r3, #8
 8006910:	d509      	bpl.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006912:	4914      	ldr	r1, [pc, #80]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006914:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006918:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800691c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006920:	4302      	orrs	r2, r0
 8006922:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006926:	2e01      	cmp	r6, #1
 8006928:	f000 80b4 	beq.w	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800692c:	019a      	lsls	r2, r3, #6
 800692e:	f100 80b1 	bmi.w	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006932:	2d01      	cmp	r5, #1
 8006934:	d175      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006936:	4d0b      	ldr	r5, [pc, #44]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800693e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006940:	f7fd ff7e 	bl	8004840 <HAL_GetTick>
 8006944:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006946:	682b      	ldr	r3, [r5, #0]
 8006948:	009f      	lsls	r7, r3, #2
 800694a:	f100 8127 	bmi.w	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	0316      	lsls	r6, r2, #12
 8006952:	d501      	bpl.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006954:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006956:	b14b      	cbz	r3, 800696c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006958:	02d0      	lsls	r0, r2, #11
 800695a:	d522      	bpl.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800695c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800695e:	bb03      	cbnz	r3, 80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8006960:	e004      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006962:	bf00      	nop
 8006964:	40023800 	.word	0x40023800
 8006968:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800696c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006970:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006978:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800697c:	430b      	orrs	r3, r1
 800697e:	6961      	ldr	r1, [r4, #20]
 8006980:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006984:	69a1      	ldr	r1, [r4, #24]
 8006986:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800698a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800698e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8006992:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006994:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006998:	3901      	subs	r1, #1
 800699a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800699e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80069a2:	0291      	lsls	r1, r2, #10
 80069a4:	d515      	bpl.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80069a6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ac:	d111      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069ae:	4982      	ldr	r1, [pc, #520]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80069b4:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80069b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80069bc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80069c0:	4303      	orrs	r3, r0
 80069c2:	6960      	ldr	r0, [r4, #20]
 80069c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80069c8:	6a20      	ldr	r0, [r4, #32]
 80069ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80069d2:	0712      	lsls	r2, r2, #28
 80069d4:	d519      	bpl.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069d6:	4a78      	ldr	r2, [pc, #480]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069d8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069e0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80069e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6961      	ldr	r1, [r4, #20]
 80069ec:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80069f0:	69e1      	ldr	r1, [r4, #28]
 80069f2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80069f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069fa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80069fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006a04:	430b      	orrs	r3, r1
 8006a06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a0a:	4c6b      	ldr	r4, [pc, #428]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a12:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a14:	f7fd ff14 	bl	8004840 <HAL_GetTick>
 8006a18:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	f140 80c4 	bpl.w	8006baa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006a22:	2000      	movs	r0, #0
 8006a24:	e009      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8006a26:	2601      	movs	r6, #1
 8006a28:	e67c      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2a:	f7fd ff09 	bl	8004840 <HAL_GetTick>
 8006a2e:	eba0 0008 	sub.w	r0, r0, r8
 8006a32:	2864      	cmp	r0, #100	; 0x64
 8006a34:	f67f ae8e 	bls.w	8006754 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006a38:	2003      	movs	r0, #3
}
 8006a3a:	b003      	add	sp, #12
 8006a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a42:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006a46:	4293      	cmp	r3, r2
 8006a48:	f43f ae8e 	beq.w	8006768 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a58:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a60:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006a62:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a66:	07db      	lsls	r3, r3, #31
 8006a68:	f57f ae7e 	bpl.w	8006768 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8006a6c:	f7fd fee8 	bl	8004840 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a70:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006a74:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a78:	0798      	lsls	r0, r3, #30
 8006a7a:	f53f ae75 	bmi.w	8006768 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a7e:	f7fd fedf 	bl	8004840 <HAL_GetTick>
 8006a82:	eba0 0008 	sub.w	r0, r0, r8
 8006a86:	4548      	cmp	r0, r9
 8006a88:	d9f5      	bls.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006a8a:	e7d5      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a8c:	6891      	ldr	r1, [r2, #8]
 8006a8e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006a92:	e679      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8006a94:	4e48      	ldr	r6, [pc, #288]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a96:	6833      	ldr	r3, [r6, #0]
 8006a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a9c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006a9e:	f7fd fecf 	bl	8004840 <HAL_GetTick>
 8006aa2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	d472      	bmi.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	07d7      	lsls	r7, r2, #31
 8006aae:	d512      	bpl.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ab2:	b983      	cbnz	r3, 8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ab4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ab8:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ac0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6861      	ldr	r1, [r4, #4]
 8006ac8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006acc:	68a1      	ldr	r1, [r4, #8]
 8006ace:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006ad2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ad6:	0316      	lsls	r6, r2, #12
 8006ad8:	d503      	bpl.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae0:	d005      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006ae2:	02d0      	lsls	r0, r2, #11
 8006ae4:	d51e      	bpl.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aec:	d11a      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006aee:	4932      	ldr	r1, [pc, #200]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006af0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006af4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006afc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006b00:	4303      	orrs	r3, r0
 8006b02:	6860      	ldr	r0, [r4, #4]
 8006b04:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006b08:	68e0      	ldr	r0, [r4, #12]
 8006b0a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006b0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b12:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b18:	f020 001f 	bic.w	r0, r0, #31
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	4303      	orrs	r3, r0
 8006b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b24:	01d1      	lsls	r1, r2, #7
 8006b26:	d511      	bpl.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b28:	4923      	ldr	r1, [pc, #140]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b2a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b2e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b32:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006b36:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006b3a:	4303      	orrs	r3, r0
 8006b3c:	6860      	ldr	r0, [r4, #4]
 8006b3e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006b42:	6920      	ldr	r0, [r4, #16]
 8006b44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b4c:	0192      	lsls	r2, r2, #6
 8006b4e:	d50d      	bpl.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	6862      	ldr	r2, [r4, #4]
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006b5a:	68e2      	ldr	r2, [r4, #12]
 8006b5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006b60:	68a2      	ldr	r2, [r4, #8]
 8006b62:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006b66:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006b6c:	4e12      	ldr	r6, [pc, #72]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b6e:	6833      	ldr	r3, [r6, #0]
 8006b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b74:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006b76:	f7fd fe63 	bl	8004840 <HAL_GetTick>
 8006b7a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	f53f aed7 	bmi.w	8006932 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b84:	f7fd fe5c 	bl	8004840 <HAL_GetTick>
 8006b88:	1bc0      	subs	r0, r0, r7
 8006b8a:	2864      	cmp	r0, #100	; 0x64
 8006b8c:	d9f6      	bls.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006b8e:	e753      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b90:	f7fd fe56 	bl	8004840 <HAL_GetTick>
 8006b94:	1bc0      	subs	r0, r0, r7
 8006b96:	2864      	cmp	r0, #100	; 0x64
 8006b98:	d984      	bls.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b9a:	e74d      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b9c:	f7fd fe50 	bl	8004840 <HAL_GetTick>
 8006ba0:	1b80      	subs	r0, r0, r6
 8006ba2:	2864      	cmp	r0, #100	; 0x64
 8006ba4:	f67f aecf 	bls.w	8006946 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006ba8:	e746      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006baa:	f7fd fe49 	bl	8004840 <HAL_GetTick>
 8006bae:	1b40      	subs	r0, r0, r5
 8006bb0:	2864      	cmp	r0, #100	; 0x64
 8006bb2:	f67f af32 	bls.w	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006bb6:	e73f      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006bb8:	40023800 	.word	0x40023800

08006bbc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	b1c8      	cbz	r0, 8006bf8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006bc4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006bc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bcc:	b91b      	cbnz	r3, 8006bd6 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006bce:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006bd2:	f7fa fde9 	bl	80017a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bd6:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006bd8:	1d21      	adds	r1, r4, #4
 8006bda:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bdc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006be0:	f000 f9cf 	bl	8006f82 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006be4:	6862      	ldr	r2, [r4, #4]
 8006be6:	4629      	mov	r1, r5
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	f000 fa05 	bl	8006ff8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006bee:	2301      	movs	r3, #1

  return HAL_OK;
 8006bf0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006bf2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	e7fc      	b.n	8006bf6 <HAL_SDRAM_Init+0x3a>

08006bfc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006bfc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006bfe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006c02:	4605      	mov	r5, r0
 8006c04:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006c06:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006c08:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006c0a:	d010      	beq.n	8006c2e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006c0c:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006c10:	2c01      	cmp	r4, #1
 8006c12:	d110      	bne.n	8006c36 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c14:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006c16:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c18:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006c1c:	f000 fa22 	bl	8007064 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c20:	6833      	ldr	r3, [r6, #0]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d104      	bne.n	8006c30 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006c26:	2305      	movs	r3, #5
 8006c28:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006c2c:	2000      	movs	r0, #0
}
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006c30:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006c34:	e7fa      	b.n	8006c2c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006c36:	2001      	movs	r0, #1
 8006c38:	e7f9      	b.n	8006c2e <HAL_SDRAM_SendCommand+0x32>

08006c3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006c3a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006c40:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	b2d8      	uxtb	r0, r3
 8006c46:	d00d      	beq.n	8006c64 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006c48:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	b2dd      	uxtb	r5, r3
 8006c50:	d109      	bne.n	8006c66 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c52:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c54:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c56:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c5a:	f000 fa15 	bl	8007088 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006c5e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006c60:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006c64:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006c66:	2001      	movs	r0, #1
 8006c68:	e7fc      	b.n	8006c64 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006c6a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d133      	bne.n	8006cdc <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	2302      	movs	r3, #2
 8006c76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c7a:	6803      	ldr	r3, [r0, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c84:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <HAL_TIM_Base_Start_IT+0x74>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01a      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x54>
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8e:	d017      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x54>
 8006c90:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x54>
 8006c98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x54>
 8006ca0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x54>
 8006ca8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x54>
 8006cb0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x54>
 8006cb8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d107      	bne.n	8006cd0 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cc0:	6899      	ldr	r1, [r3, #8]
 8006cc2:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <HAL_TIM_Base_Start_IT+0x78>)
 8006cc4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc6:	2a06      	cmp	r2, #6
 8006cc8:	d006      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8006cca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006cce:	d003      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cd8:	2000      	movs	r0, #0
}
 8006cda:	4770      	bx	lr
    return HAL_ERROR;
 8006cdc:	2001      	movs	r0, #1
 8006cde:	4770      	bx	lr
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	00010007 	.word	0x00010007

08006ce8 <HAL_TIM_OC_DelayElapsedCallback>:
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIM_IC_CaptureCallback>:
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_PWM_PulseFinishedCallback>:
 8006cec:	4770      	bx	lr

08006cee <HAL_TIM_TriggerCallback>:
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cf0:	6803      	ldr	r3, [r0, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	0791      	lsls	r1, r2, #30
{
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cfa:	d50f      	bpl.n	8006d1c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	0792      	lsls	r2, r2, #30
 8006d00:	d50c      	bpl.n	8006d1c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d02:	f06f 0202 	mvn.w	r2, #2
 8006d06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d08:	2201      	movs	r2, #1
 8006d0a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	0799      	lsls	r1, r3, #30
 8006d10:	f000 8085 	beq.w	8006e1e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d14:	f7ff ffe9 	bl	8006cea <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	0752      	lsls	r2, r2, #29
 8006d22:	d510      	bpl.n	8006d46 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	0750      	lsls	r0, r2, #29
 8006d28:	d50d      	bpl.n	8006d46 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d2a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d32:	2202      	movs	r2, #2
 8006d34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d3c:	d075      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	f7ff ffd4 	bl	8006cea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	2300      	movs	r3, #0
 8006d44:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	0711      	lsls	r1, r2, #28
 8006d4c:	d50f      	bpl.n	8006d6e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	0712      	lsls	r2, r2, #28
 8006d52:	d50c      	bpl.n	8006d6e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d54:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	079b      	lsls	r3, r3, #30
 8006d64:	d067      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	f7ff ffc0 	bl	8006cea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	06d0      	lsls	r0, r2, #27
 8006d74:	d510      	bpl.n	8006d98 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	06d1      	lsls	r1, r2, #27
 8006d7a:	d50d      	bpl.n	8006d98 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d7c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d80:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d84:	2208      	movs	r2, #8
 8006d86:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d8e:	d058      	beq.n	8006e42 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d90:	f7ff ffab 	bl	8006cea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d94:	2300      	movs	r3, #0
 8006d96:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	07d2      	lsls	r2, r2, #31
 8006d9e:	d508      	bpl.n	8006db2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	07d0      	lsls	r0, r2, #31
 8006da4:	d505      	bpl.n	8006db2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006da6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006daa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dae:	f7fa fafb 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	0611      	lsls	r1, r2, #24
 8006db8:	d508      	bpl.n	8006dcc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	0612      	lsls	r2, r2, #24
 8006dbe:	d505      	bpl.n	8006dcc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006dc8:	f000 f8d9 	bl	8006f7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	05d0      	lsls	r0, r2, #23
 8006dd2:	d508      	bpl.n	8006de6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	0611      	lsls	r1, r2, #24
 8006dd8:	d505      	bpl.n	8006de6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dda:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006de0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006de2:	f000 f8cd 	bl	8006f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	0652      	lsls	r2, r2, #25
 8006dec:	d508      	bpl.n	8006e00 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	0650      	lsls	r0, r2, #25
 8006df2:	d505      	bpl.n	8006e00 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006df8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dfa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006dfc:	f7ff ff77 	bl	8006cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	0691      	lsls	r1, r2, #26
 8006e06:	d522      	bpl.n	8006e4e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	0692      	lsls	r2, r2, #26
 8006e0c:	d51f      	bpl.n	8006e4e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e0e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e14:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006e1a:	f000 b8af 	b.w	8006f7c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1e:	f7ff ff63 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff ff62 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
 8006e28:	e776      	b.n	8006d18 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	f7ff ff5d 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7ff ff5c 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
 8006e34:	e785      	b.n	8006d42 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e36:	f7ff ff57 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f7ff ff56 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
 8006e40:	e793      	b.n	8006d6a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e42:	f7ff ff51 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e46:	4620      	mov	r0, r4
 8006e48:	f7ff ff50 	bl	8006cec <HAL_TIM_PWM_PulseFinishedCallback>
 8006e4c:	e7a2      	b.n	8006d94 <HAL_TIM_IRQHandler+0xa4>
}
 8006e4e:	bd10      	pop	{r4, pc}

08006e50 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e50:	4a30      	ldr	r2, [pc, #192]	; (8006f14 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006e52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e54:	4290      	cmp	r0, r2
 8006e56:	d012      	beq.n	8006e7e <TIM_Base_SetConfig+0x2e>
 8006e58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e5c:	d00f      	beq.n	8006e7e <TIM_Base_SetConfig+0x2e>
 8006e5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006e62:	4290      	cmp	r0, r2
 8006e64:	d00b      	beq.n	8006e7e <TIM_Base_SetConfig+0x2e>
 8006e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e6a:	4290      	cmp	r0, r2
 8006e6c:	d007      	beq.n	8006e7e <TIM_Base_SetConfig+0x2e>
 8006e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e72:	4290      	cmp	r0, r2
 8006e74:	d003      	beq.n	8006e7e <TIM_Base_SetConfig+0x2e>
 8006e76:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006e7a:	4290      	cmp	r0, r2
 8006e7c:	d119      	bne.n	8006eb2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006e7e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e84:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e86:	4a23      	ldr	r2, [pc, #140]	; (8006f14 <TIM_Base_SetConfig+0xc4>)
 8006e88:	4290      	cmp	r0, r2
 8006e8a:	d029      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006e8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e90:	d026      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006e92:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006e96:	4290      	cmp	r0, r2
 8006e98:	d022      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e9e:	4290      	cmp	r0, r2
 8006ea0:	d01e      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ea6:	4290      	cmp	r0, r2
 8006ea8:	d01a      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006eaa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006eae:	4290      	cmp	r0, r2
 8006eb0:	d016      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006eb2:	4a19      	ldr	r2, [pc, #100]	; (8006f18 <TIM_Base_SetConfig+0xc8>)
 8006eb4:	4290      	cmp	r0, r2
 8006eb6:	d013      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ebc:	4290      	cmp	r0, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006ec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ec4:	4290      	cmp	r0, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006ec8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006ecc:	4290      	cmp	r0, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ed4:	4290      	cmp	r0, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_Base_SetConfig+0x90>
 8006ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006edc:	4290      	cmp	r0, r2
 8006ede:	d103      	bne.n	8006ee8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee4:	68ca      	ldr	r2, [r1, #12]
 8006ee6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ee8:	694a      	ldr	r2, [r1, #20]
 8006eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eee:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006ef0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ef2:	688b      	ldr	r3, [r1, #8]
 8006ef4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef6:	680b      	ldr	r3, [r1, #0]
 8006ef8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <TIM_Base_SetConfig+0xc4>)
 8006efc:	4298      	cmp	r0, r3
 8006efe:	d003      	beq.n	8006f08 <TIM_Base_SetConfig+0xb8>
 8006f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f04:	4298      	cmp	r0, r3
 8006f06:	d101      	bne.n	8006f0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f08:	690b      	ldr	r3, [r1, #16]
 8006f0a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	6143      	str	r3, [r0, #20]
}
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40014000 	.word	0x40014000

08006f1c <HAL_TIM_Base_Init>:
{
 8006f1c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006f1e:	4604      	mov	r4, r0
 8006f20:	b350      	cbz	r0, 8006f78 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006f22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f2a:	b91b      	cbnz	r3, 8006f34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006f2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006f30:	f7ff fe9b 	bl	8006c6a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f36:	6820      	ldr	r0, [r4, #0]
 8006f38:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3e:	f7ff ff87 	bl	8006e50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f42:	2301      	movs	r3, #1
  return HAL_OK;
 8006f44:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f46:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006f4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006f52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006f56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006f5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f6a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006f6e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006f72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006f76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f78:	2001      	movs	r0, #1
 8006f7a:	e7fc      	b.n	8006f76 <HAL_TIM_Base_Init+0x5a>

08006f7c <HAL_TIMEx_CommutCallback>:
 8006f7c:	4770      	bx	lr

08006f7e <HAL_TIMEx_BreakCallback>:
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_Break2Callback>:
 8006f80:	4770      	bx	lr

08006f82 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006f86:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f88:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8006f8c:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8006f90:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8006f94:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8006f98:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8006f9c:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006f9e:	b9a2      	cbnz	r2, 8006fca <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006fa0:	ea43 0209 	orr.w	r2, r3, r9
 8006fa4:	6801      	ldr	r1, [r0, #0]
 8006fa6:	432a      	orrs	r2, r5
 8006fa8:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006fac:	ea42 0308 	orr.w	r3, r2, r8
 8006fb0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006fb4:	ea43 030e 	orr.w	r3, r3, lr
 8006fb8:	ea43 030c 	orr.w	r3, r3, ip
 8006fbc:	433b      	orrs	r3, r7
 8006fbe:	4333      	orrs	r3, r6
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006fca:	6802      	ldr	r2, [r0, #0]
 8006fcc:	ea43 0309 	orr.w	r3, r3, r9
 8006fd0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006fd8:	ea45 0308 	orr.w	r3, r5, r8
 8006fdc:	6842      	ldr	r2, [r0, #4]
 8006fde:	ea43 030e 	orr.w	r3, r3, lr
 8006fe2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006fe6:	ea43 030c 	orr.w	r3, r3, ip
 8006fea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006fee:	433b      	orrs	r3, r7
 8006ff0:	4333      	orrs	r3, r6
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	6043      	str	r3, [r0, #4]
 8006ff6:	e7e5      	b.n	8006fc4 <FMC_SDRAM_Init+0x42>

08006ff8 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ff8:	68cb      	ldr	r3, [r1, #12]
 8006ffa:	f103 3cff 	add.w	ip, r3, #4294967295
 8006ffe:	694b      	ldr	r3, [r1, #20]
{
 8007000:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007002:	3b01      	subs	r3, #1
 8007004:	680f      	ldr	r7, [r1, #0]
 8007006:	684c      	ldr	r4, [r1, #4]
 8007008:	688e      	ldr	r6, [r1, #8]
 800700a:	051b      	lsls	r3, r3, #20
 800700c:	690d      	ldr	r5, [r1, #16]
 800700e:	3c01      	subs	r4, #1
 8007010:	6989      	ldr	r1, [r1, #24]
 8007012:	3e01      	subs	r6, #1
 8007014:	3d01      	subs	r5, #1
 8007016:	3f01      	subs	r7, #1
 8007018:	3901      	subs	r1, #1
 800701a:	0124      	lsls	r4, r4, #4
 800701c:	0236      	lsls	r6, r6, #8
 800701e:	042d      	lsls	r5, r5, #16
 8007020:	0609      	lsls	r1, r1, #24
 8007022:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8007026:	b95a      	cbnz	r2, 8007040 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007028:	433b      	orrs	r3, r7
 800702a:	6882      	ldr	r2, [r0, #8]
 800702c:	4323      	orrs	r3, r4
 800702e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007032:	4333      	orrs	r3, r6
 8007034:	432b      	orrs	r3, r5
 8007036:	430b      	orrs	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800703c:	2000      	movs	r0, #0
 800703e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007040:	6882      	ldr	r2, [r0, #8]
 8007042:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007046:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800704a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800704c:	ea44 0306 	orr.w	r3, r4, r6
 8007050:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007052:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007054:	68c2      	ldr	r2, [r0, #12]
 8007056:	432b      	orrs	r3, r5
 8007058:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800705c:	430b      	orrs	r3, r1
 800705e:	4313      	orrs	r3, r2
 8007060:	60c3      	str	r3, [r0, #12]
 8007062:	e7eb      	b.n	800703c <FMC_SDRAM_Timing_Init+0x44>

08007064 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007064:	6902      	ldr	r2, [r0, #16]
{
 8007066:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007068:	e9d1 3400 	ldrd	r3, r4, [r1]
 800706c:	0d92      	lsrs	r2, r2, #22
 800706e:	4323      	orrs	r3, r4
 8007070:	68cc      	ldr	r4, [r1, #12]
 8007072:	0592      	lsls	r2, r2, #22
 8007074:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8007078:	4313      	orrs	r3, r2
 800707a:	688a      	ldr	r2, [r1, #8]
 800707c:	3a01      	subs	r2, #1
 800707e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8007082:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007084:	2000      	movs	r0, #0
 8007086:	bd10      	pop	{r4, pc}

08007088 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007088:	6943      	ldr	r3, [r0, #20]
 800708a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800708e:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007092:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007096:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8007098:	2000      	movs	r0, #0
 800709a:	4770      	bx	lr

0800709c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800709c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80070a0:	b113      	cbz	r3, 80070a8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80070a2:	f06f 0005 	mvn.w	r0, #5
 80070a6:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a8:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 80070ae:	b912      	cbnz	r2, 80070b6 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070b0:	f3ef 8211 	mrs	r2, BASEPRI
 80070b4:	b112      	cbz	r2, 80070bc <osKernelInitialize+0x20>
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	2a02      	cmp	r2, #2
 80070ba:	d0f2      	beq.n	80070a2 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	b910      	cbnz	r0, 80070c6 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070c4:	4770      	bx	lr
    } else {
      stat = osError;
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80070ca:	4770      	bx	lr
 80070cc:	20003e98 	.word	0x20003e98

080070d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070d0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80070d6:	b113      	cbz	r3, 80070de <osKernelStart+0xe>
    stat = osErrorISR;
 80070d8:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80070dc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070de:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80070e2:	4b0a      	ldr	r3, [pc, #40]	; (800710c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 80070e4:	b912      	cbnz	r2, 80070ec <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e6:	f3ef 8211 	mrs	r2, BASEPRI
 80070ea:	b112      	cbz	r2, 80070f2 <osKernelStart+0x22>
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	2a02      	cmp	r2, #2
 80070f0:	d0f2      	beq.n	80070d8 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	2a01      	cmp	r2, #1
 80070f6:	d105      	bne.n	8007104 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 80070f8:	2202      	movs	r2, #2
 80070fa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80070fc:	f001 fe78 	bl	8008df0 <vTaskStartScheduler>
      stat = osOK;
 8007100:	2000      	movs	r0, #0
 8007102:	e7eb      	b.n	80070dc <osKernelStart+0xc>
      stat = osError;
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007108:	e7e8      	b.n	80070dc <osKernelStart+0xc>
 800710a:	bf00      	nop
 800710c:	20003e98 	.word	0x20003e98

08007110 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007112:	4614      	mov	r4, r2
 8007114:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007116:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007118:	460b      	mov	r3, r1
  hTask = NULL;
 800711a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800711c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007120:	bb22      	cbnz	r2, 800716c <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007122:	f3ef 8210 	mrs	r2, PRIMASK
 8007126:	b912      	cbnz	r2, 800712e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007128:	f3ef 8211 	mrs	r2, BASEPRI
 800712c:	b11a      	cbz	r2, 8007136 <osThreadNew+0x26>
 800712e:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <osThreadNew+0xa8>)
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	2a02      	cmp	r2, #2
 8007134:	d01a      	beq.n	800716c <osThreadNew+0x5c>
 8007136:	b1c8      	cbz	r0, 800716c <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007138:	2c00      	cmp	r4, #0
 800713a:	d02f      	beq.n	800719c <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800713c:	69a5      	ldr	r5, [r4, #24]
 800713e:	2d00      	cmp	r5, #0
 8007140:	bf08      	it	eq
 8007142:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007144:	1e6a      	subs	r2, r5, #1
 8007146:	46ac      	mov	ip, r5
 8007148:	2a37      	cmp	r2, #55	; 0x37
 800714a:	d82b      	bhi.n	80071a4 <osThreadNew+0x94>
 800714c:	6862      	ldr	r2, [r4, #4]
 800714e:	07d2      	lsls	r2, r2, #31
 8007150:	d428      	bmi.n	80071a4 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007152:	6966      	ldr	r6, [r4, #20]
 8007154:	b16e      	cbz	r6, 8007172 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007156:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8007158:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800715a:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800715e:	b157      	cbz	r7, 8007176 <osThreadNew+0x66>
 8007160:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8007164:	d902      	bls.n	800716c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007166:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007168:	b104      	cbz	r4, 800716c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800716a:	b9ee      	cbnz	r6, 80071a8 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800716c:	9805      	ldr	r0, [sp, #20]
}
 800716e:	b007      	add	sp, #28
 8007170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007172:	2280      	movs	r2, #128	; 0x80
 8007174:	e7f0      	b.n	8007158 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007176:	f1be 0f00 	cmp.w	lr, #0
 800717a:	d1f7      	bne.n	800716c <osThreadNew+0x5c>
      if (mem == 0) {
 800717c:	6924      	ldr	r4, [r4, #16]
 800717e:	2c00      	cmp	r4, #0
 8007180:	d1f4      	bne.n	800716c <osThreadNew+0x5c>
 8007182:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007184:	a905      	add	r1, sp, #20
 8007186:	b292      	uxth	r2, r2
 8007188:	e9cd c100 	strd	ip, r1, [sp]
 800718c:	4621      	mov	r1, r4
 800718e:	f001 fca4 	bl	8008ada <xTaskCreate>
 8007192:	2801      	cmp	r0, #1
          hTask = NULL;
 8007194:	bf1c      	itt	ne
 8007196:	2300      	movne	r3, #0
 8007198:	9305      	strne	r3, [sp, #20]
 800719a:	e7e7      	b.n	800716c <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800719c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80071a0:	2280      	movs	r2, #128	; 0x80
 80071a2:	e7ef      	b.n	8007184 <osThreadNew+0x74>
        return (NULL);
 80071a4:	2000      	movs	r0, #0
 80071a6:	e7e2      	b.n	800716e <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071a8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80071ac:	9500      	str	r5, [sp, #0]
 80071ae:	f001 fc56 	bl	8008a5e <xTaskCreateStatic>
 80071b2:	9005      	str	r0, [sp, #20]
 80071b4:	e7da      	b.n	800716c <osThreadNew+0x5c>
 80071b6:	bf00      	nop
 80071b8:	20003e98 	.word	0x20003e98

080071bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80071bc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071be:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80071c2:	b113      	cbz	r3, 80071ca <osDelay+0xe>
    stat = osErrorISR;
 80071c4:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80071c8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ca:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80071ce:	b913      	cbnz	r3, 80071d6 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071d0:	f3ef 8311 	mrs	r3, BASEPRI
 80071d4:	b11b      	cbz	r3, 80071de <osDelay+0x22>
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <osDelay+0x30>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d0f2      	beq.n	80071c4 <osDelay+0x8>
    if (ticks != 0U) {
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0f2      	beq.n	80071c8 <osDelay+0xc>
      vTaskDelay(ticks);
 80071e2:	f001 fdc3 	bl	8008d6c <vTaskDelay>
    stat = osOK;
 80071e6:	2000      	movs	r0, #0
 80071e8:	e7ee      	b.n	80071c8 <osDelay+0xc>
 80071ea:	bf00      	nop
 80071ec:	20003e98 	.word	0x20003e98

080071f0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f4:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80071f8:	b116      	cbz	r6, 8007200 <osMutexNew+0x10>
  hMutex = NULL;
 80071fa:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80071fc:	4620      	mov	r0, r4
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007200:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8007204:	b912      	cbnz	r2, 800720c <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007206:	f3ef 8211 	mrs	r2, BASEPRI
 800720a:	b11a      	cbz	r2, 8007214 <osMutexNew+0x24>
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <osMutexNew+0x80>)
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	2a02      	cmp	r2, #2
 8007212:	d0f2      	beq.n	80071fa <osMutexNew+0xa>
    if (attr != NULL) {
 8007214:	b115      	cbz	r5, 800721c <osMutexNew+0x2c>
      type = attr->attr_bits;
 8007216:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8007218:	0733      	lsls	r3, r6, #28
 800721a:	d4ee      	bmi.n	80071fa <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800721c:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8007220:	b17d      	cbz	r5, 8007242 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007222:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8007226:	b151      	cbz	r1, 800723e <osMutexNew+0x4e>
 8007228:	2b4f      	cmp	r3, #79	; 0x4f
 800722a:	d9e6      	bls.n	80071fa <osMutexNew+0xa>
        if (rmtx != 0U) {
 800722c:	b1de      	cbz	r6, 8007266 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800722e:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007230:	f000 ff4c 	bl	80080cc <xQueueCreateMutexStatic>
 8007234:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007236:	2800      	cmp	r0, #0
 8007238:	d0df      	beq.n	80071fa <osMutexNew+0xa>
          name = attr->name;
 800723a:	682d      	ldr	r5, [r5, #0]
 800723c:	e00a      	b.n	8007254 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1db      	bne.n	80071fa <osMutexNew+0xa>
          if (rmtx != 0U) {
 8007242:	b196      	cbz	r6, 800726a <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007244:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8007246:	f000 ff76 	bl	8008136 <xQueueCreateMutex>
 800724a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800724c:	2800      	cmp	r0, #0
 800724e:	d0d4      	beq.n	80071fa <osMutexNew+0xa>
        if (attr != NULL) {
 8007250:	2d00      	cmp	r5, #0
 8007252:	d1f2      	bne.n	800723a <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8007254:	4629      	mov	r1, r5
 8007256:	4620      	mov	r0, r4
 8007258:	f001 fa38 	bl	80086cc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800725c:	2e00      	cmp	r6, #0
 800725e:	d0cd      	beq.n	80071fc <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007260:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8007264:	e7ca      	b.n	80071fc <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007266:	2001      	movs	r0, #1
 8007268:	e7e2      	b.n	8007230 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800726a:	2001      	movs	r0, #1
 800726c:	e7eb      	b.n	8007246 <osMutexNew+0x56>
 800726e:	bf00      	nop
 8007270:	20003e98 	.word	0x20003e98

08007274 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007274:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007276:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800727a:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800727c:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007280:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007282:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007286:	b112      	cbz	r2, 800728e <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8007288:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800728c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8007292:	b912      	cbnz	r2, 800729a <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007294:	f3ef 8211 	mrs	r2, BASEPRI
 8007298:	b11a      	cbz	r2, 80072a2 <osMutexAcquire+0x2e>
 800729a:	4a0d      	ldr	r2, [pc, #52]	; (80072d0 <osMutexAcquire+0x5c>)
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	2a02      	cmp	r2, #2
 80072a0:	d0f2      	beq.n	8007288 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 80072a2:	b188      	cbz	r0, 80072c8 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80072a4:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 80072a6:	b163      	cbz	r3, 80072c2 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80072a8:	f001 f997 	bl	80085da <xQueueTakeMutexRecursive>
 80072ac:	2801      	cmp	r0, #1
 80072ae:	d101      	bne.n	80072b4 <osMutexAcquire+0x40>
  stat = osOK;
 80072b0:	2000      	movs	r0, #0
 80072b2:	e7eb      	b.n	800728c <osMutexAcquire+0x18>
          stat = osErrorResource;
 80072b4:	2c00      	cmp	r4, #0
 80072b6:	bf14      	ite	ne
 80072b8:	f06f 0001 	mvnne.w	r0, #1
 80072bc:	f06f 0002 	mvneq.w	r0, #2
 80072c0:	e7e4      	b.n	800728c <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80072c2:	f001 f8bf 	bl	8008444 <xQueueSemaphoreTake>
 80072c6:	e7f1      	b.n	80072ac <osMutexAcquire+0x38>
    stat = osErrorParameter;
 80072c8:	f06f 0003 	mvn.w	r0, #3
 80072cc:	e7de      	b.n	800728c <osMutexAcquire+0x18>
 80072ce:	bf00      	nop
 80072d0:	20003e98 	.word	0x20003e98

080072d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80072d4:	b508      	push	{r3, lr}
 80072d6:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80072d8:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80072dc:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e0:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80072e4:	b112      	cbz	r2, 80072ec <osMutexRelease+0x18>
    stat = osErrorISR;
 80072e6:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80072ea:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ec:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80072f0:	b912      	cbnz	r2, 80072f8 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072f2:	f3ef 8211 	mrs	r2, BASEPRI
 80072f6:	b11a      	cbz	r2, 8007300 <osMutexRelease+0x2c>
 80072f8:	4a0a      	ldr	r2, [pc, #40]	; (8007324 <osMutexRelease+0x50>)
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	2a02      	cmp	r2, #2
 80072fe:	d0f2      	beq.n	80072e6 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8007300:	b168      	cbz	r0, 800731e <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8007302:	b13b      	cbz	r3, 8007314 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007304:	f000 fef7 	bl	80080f6 <xQueueGiveMutexRecursive>
 8007308:	2801      	cmp	r0, #1
  stat = osOK;
 800730a:	bf0c      	ite	eq
 800730c:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800730e:	f06f 0002 	mvnne.w	r0, #2
 8007312:	e7ea      	b.n	80072ea <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007314:	461a      	mov	r2, r3
 8007316:	4619      	mov	r1, r3
 8007318:	f000 fe1d 	bl	8007f56 <xQueueGenericSend>
 800731c:	e7f4      	b.n	8007308 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800731e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007322:	e7e2      	b.n	80072ea <osMutexRelease+0x16>
 8007324:	20003e98 	.word	0x20003e98

08007328 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007328:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800732a:	460e      	mov	r6, r1
 800732c:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800732e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007332:	b11b      	cbz	r3, 800733c <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007334:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007336:	4620      	mov	r0, r4
 8007338:	b002      	add	sp, #8
 800733a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007340:	b913      	cbnz	r3, 8007348 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007342:	f3ef 8311 	mrs	r3, BASEPRI
 8007346:	b11b      	cbz	r3, 8007350 <osSemaphoreNew+0x28>
 8007348:	4b21      	ldr	r3, [pc, #132]	; (80073d0 <osSemaphoreNew+0xa8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d0f1      	beq.n	8007334 <osSemaphoreNew+0xc>
 8007350:	2800      	cmp	r0, #0
 8007352:	d0ef      	beq.n	8007334 <osSemaphoreNew+0xc>
 8007354:	42b0      	cmp	r0, r6
 8007356:	d3ed      	bcc.n	8007334 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8007358:	b1ed      	cbz	r5, 8007396 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800735a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800735e:	b1c3      	cbz	r3, 8007392 <osSemaphoreNew+0x6a>
 8007360:	2a4f      	cmp	r2, #79	; 0x4f
 8007362:	d9e7      	bls.n	8007334 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007364:	2801      	cmp	r0, #1
 8007366:	d129      	bne.n	80073bc <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007368:	2203      	movs	r2, #3
 800736a:	9200      	str	r2, [sp, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	4611      	mov	r1, r2
 8007370:	f000 fd6c 	bl	8007e4c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8007374:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007376:	2800      	cmp	r0, #0
 8007378:	d0dc      	beq.n	8007334 <osSemaphoreNew+0xc>
 800737a:	b1ce      	cbz	r6, 80073b0 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800737c:	2300      	movs	r3, #0
 800737e:	461a      	mov	r2, r3
 8007380:	4619      	mov	r1, r3
 8007382:	f000 fde8 	bl	8007f56 <xQueueGenericSend>
 8007386:	2801      	cmp	r0, #1
 8007388:	d012      	beq.n	80073b0 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800738a:	4620      	mov	r0, r4
 800738c:	f001 f9c4 	bl	8008718 <vQueueDelete>
 8007390:	e7d0      	b.n	8007334 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007392:	2a00      	cmp	r2, #0
 8007394:	d1ce      	bne.n	8007334 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007396:	2801      	cmp	r0, #1
 8007398:	d104      	bne.n	80073a4 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800739a:	2203      	movs	r2, #3
 800739c:	2100      	movs	r1, #0
 800739e:	f000 fd69 	bl	8007e74 <xQueueGenericCreate>
 80073a2:	e7e7      	b.n	8007374 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80073a4:	4631      	mov	r1, r6
 80073a6:	f000 fdb4 	bl	8007f12 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80073aa:	4604      	mov	r4, r0
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d0c1      	beq.n	8007334 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 80073b0:	b95d      	cbnz	r5, 80073ca <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 80073b2:	4629      	mov	r1, r5
 80073b4:	4620      	mov	r0, r4
 80073b6:	f001 f989 	bl	80086cc <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80073ba:	e7bc      	b.n	8007336 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80073bc:	461a      	mov	r2, r3
 80073be:	4631      	mov	r1, r6
 80073c0:	f000 fd81 	bl	8007ec6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80073c4:	4604      	mov	r4, r0
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d0b4      	beq.n	8007334 <osSemaphoreNew+0xc>
          name = attr->name;
 80073ca:	682d      	ldr	r5, [r5, #0]
 80073cc:	e7f1      	b.n	80073b2 <osSemaphoreNew+0x8a>
 80073ce:	bf00      	nop
 80073d0:	20003e98 	.word	0x20003e98

080073d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80073d4:	b513      	push	{r0, r1, r4, lr}
 80073d6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80073d8:	b918      	cbnz	r0, 80073e2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 80073da:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80073de:	b002      	add	sp, #8
 80073e0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073e2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80073e6:	b163      	cbz	r3, 8007402 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 80073e8:	2c00      	cmp	r4, #0
 80073ea:	d1f6      	bne.n	80073da <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80073ec:	aa01      	add	r2, sp, #4
 80073ee:	4621      	mov	r1, r4
      yield = pdFALSE;
 80073f0:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80073f2:	f001 f916 	bl	8008622 <xQueueReceiveFromISR>
 80073f6:	2801      	cmp	r0, #1
 80073f8:	d113      	bne.n	8007422 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 80073fa:	9b01      	ldr	r3, [sp, #4]
 80073fc:	b9a3      	cbnz	r3, 8007428 <osSemaphoreAcquire+0x54>
  stat = osOK;
 80073fe:	2000      	movs	r0, #0
 8007400:	e7ed      	b.n	80073de <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007402:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007406:	b913      	cbnz	r3, 800740e <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007408:	f3ef 8311 	mrs	r3, BASEPRI
 800740c:	b11b      	cbz	r3, 8007416 <osSemaphoreAcquire+0x42>
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <osSemaphoreAcquire+0x70>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d0e8      	beq.n	80073e8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007416:	4621      	mov	r1, r4
 8007418:	f001 f814 	bl	8008444 <xQueueSemaphoreTake>
 800741c:	2801      	cmp	r0, #1
 800741e:	d0ee      	beq.n	80073fe <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8007420:	b96c      	cbnz	r4, 800743e <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8007422:	f06f 0002 	mvn.w	r0, #2
 8007426:	e7da      	b.n	80073de <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8007428:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800742c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007430:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	e7df      	b.n	80073fe <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800743e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007442:	e7cc      	b.n	80073de <osSemaphoreAcquire+0xa>
 8007444:	20003e98 	.word	0x20003e98

08007448 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007448:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800744a:	b370      	cbz	r0, 80074aa <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800744c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007450:	b14b      	cbz	r3, 8007466 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 8007452:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007454:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8007456:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007458:	f000 fef3 	bl	8008242 <xQueueGiveFromISR>
 800745c:	2801      	cmp	r0, #1
 800745e:	d014      	beq.n	800748a <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8007460:	f06f 0002 	mvn.w	r0, #2
 8007464:	e014      	b.n	8007490 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007466:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800746a:	b913      	cbnz	r3, 8007472 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800746c:	f3ef 8311 	mrs	r3, BASEPRI
 8007470:	b11b      	cbz	r3, 800747a <osSemaphoreRelease+0x32>
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <osSemaphoreRelease+0x68>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d0eb      	beq.n	8007452 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800747a:	2300      	movs	r3, #0
 800747c:	461a      	mov	r2, r3
 800747e:	4619      	mov	r1, r3
 8007480:	f000 fd69 	bl	8007f56 <xQueueGenericSend>
 8007484:	2801      	cmp	r0, #1
 8007486:	d002      	beq.n	800748e <osSemaphoreRelease+0x46>
 8007488:	e7ea      	b.n	8007460 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800748a:	9b01      	ldr	r3, [sp, #4]
 800748c:	b913      	cbnz	r3, 8007494 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800748e:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8007490:	b002      	add	sp, #8
 8007492:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007494:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	e7f1      	b.n	800748e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80074aa:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80074ae:	e7ef      	b.n	8007490 <osSemaphoreRelease+0x48>
 80074b0:	20003e98 	.word	0x20003e98

080074b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80074b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074b6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80074bc:	b11b      	cbz	r3, 80074c6 <osMessageQueueNew+0x12>
  hQueue = NULL;
 80074be:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80074c0:	4628      	mov	r0, r5
 80074c2:	b002      	add	sp, #8
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c6:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80074ca:	b913      	cbnz	r3, 80074d2 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074cc:	f3ef 8311 	mrs	r3, BASEPRI
 80074d0:	b11b      	cbz	r3, 80074da <osMessageQueueNew+0x26>
 80074d2:	4b1a      	ldr	r3, [pc, #104]	; (800753c <osMessageQueueNew+0x88>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d0f1      	beq.n	80074be <osMessageQueueNew+0xa>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0ef      	beq.n	80074be <osMessageQueueNew+0xa>
 80074de:	2900      	cmp	r1, #0
 80074e0:	d0ed      	beq.n	80074be <osMessageQueueNew+0xa>
    if (attr != NULL) {
 80074e2:	b1ec      	cbz	r4, 8007520 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074e4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80074e8:	b193      	cbz	r3, 8007510 <osMessageQueueNew+0x5c>
 80074ea:	2a4f      	cmp	r2, #79	; 0x4f
 80074ec:	d9e7      	bls.n	80074be <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074ee:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d0e4      	beq.n	80074be <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074f4:	fb01 f500 	mul.w	r5, r1, r0
 80074f8:	6966      	ldr	r6, [r4, #20]
 80074fa:	42ae      	cmp	r6, r5
 80074fc:	d3df      	bcc.n	80074be <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80074fe:	2500      	movs	r5, #0
 8007500:	9500      	str	r5, [sp, #0]
 8007502:	f000 fca3 	bl	8007e4c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007506:	4605      	mov	r5, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	d0d8      	beq.n	80074be <osMessageQueueNew+0xa>
        name = attr->name;
 800750c:	6824      	ldr	r4, [r4, #0]
 800750e:	e00f      	b.n	8007530 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007510:	2a00      	cmp	r2, #0
 8007512:	d1d4      	bne.n	80074be <osMessageQueueNew+0xa>
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1d1      	bne.n	80074be <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800751a:	6963      	ldr	r3, [r4, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1ce      	bne.n	80074be <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007520:	2200      	movs	r2, #0
 8007522:	f000 fca7 	bl	8007e74 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007526:	4605      	mov	r5, r0
 8007528:	2800      	cmp	r0, #0
 800752a:	d0c8      	beq.n	80074be <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800752c:	2c00      	cmp	r4, #0
 800752e:	d1ed      	bne.n	800750c <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8007530:	4621      	mov	r1, r4
 8007532:	4628      	mov	r0, r5
 8007534:	f001 f8ca 	bl	80086cc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007538:	e7c2      	b.n	80074c0 <osMessageQueueNew+0xc>
 800753a:	bf00      	nop
 800753c:	20003e98 	.word	0x20003e98

08007540 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007540:	b513      	push	{r0, r1, r4, lr}
 8007542:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007544:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007548:	b123      	cbz	r3, 8007554 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800754a:	b9d8      	cbnz	r0, 8007584 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800754c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007550:	b002      	add	sp, #8
 8007552:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007554:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007558:	b913      	cbnz	r3, 8007560 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800755a:	f3ef 8311 	mrs	r3, BASEPRI
 800755e:	b11b      	cbz	r3, 8007568 <osMessageQueuePut+0x28>
 8007560:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <osMessageQueuePut+0x80>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d0f0      	beq.n	800754a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007568:	2800      	cmp	r0, #0
 800756a:	d0ef      	beq.n	800754c <osMessageQueuePut+0xc>
 800756c:	2900      	cmp	r1, #0
 800756e:	d0ed      	beq.n	800754c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007570:	2300      	movs	r3, #0
 8007572:	4622      	mov	r2, r4
 8007574:	f000 fcef 	bl	8007f56 <xQueueGenericSend>
 8007578:	2801      	cmp	r0, #1
 800757a:	d010      	beq.n	800759e <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800757c:	b9e4      	cbnz	r4, 80075b8 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800757e:	f06f 0002 	mvn.w	r0, #2
 8007582:	e7e5      	b.n	8007550 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007584:	2900      	cmp	r1, #0
 8007586:	d0e1      	beq.n	800754c <osMessageQueuePut+0xc>
 8007588:	2c00      	cmp	r4, #0
 800758a:	d1df      	bne.n	800754c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800758c:	4623      	mov	r3, r4
 800758e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007590:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007592:	f000 fded 	bl	8008170 <xQueueGenericSendFromISR>
 8007596:	2801      	cmp	r0, #1
 8007598:	d1f1      	bne.n	800757e <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800759a:	9b01      	ldr	r3, [sp, #4]
 800759c:	b90b      	cbnz	r3, 80075a2 <osMessageQueuePut+0x62>
  stat = osOK;
 800759e:	2000      	movs	r0, #0
 80075a0:	e7d6      	b.n	8007550 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80075a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	e7f2      	b.n	800759e <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 80075b8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80075bc:	e7c8      	b.n	8007550 <osMessageQueuePut+0x10>
 80075be:	bf00      	nop
 80075c0:	20003e98 	.word	0x20003e98

080075c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80075c4:	b513      	push	{r0, r1, r4, lr}
 80075c6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80075cc:	b123      	cbz	r3, 80075d8 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075ce:	b9d0      	cbnz	r0, 8007606 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 80075d0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80075d4:	b002      	add	sp, #8
 80075d6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80075dc:	b913      	cbnz	r3, 80075e4 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075de:	f3ef 8311 	mrs	r3, BASEPRI
 80075e2:	b11b      	cbz	r3, 80075ec <osMessageQueueGet+0x28>
 80075e4:	4b16      	ldr	r3, [pc, #88]	; (8007640 <osMessageQueueGet+0x7c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d0f0      	beq.n	80075ce <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0ef      	beq.n	80075d0 <osMessageQueueGet+0xc>
 80075f0:	2900      	cmp	r1, #0
 80075f2:	d0ed      	beq.n	80075d0 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80075f4:	4622      	mov	r2, r4
 80075f6:	f000 fe80 	bl	80082fa <xQueueReceive>
 80075fa:	2801      	cmp	r0, #1
 80075fc:	d00f      	beq.n	800761e <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 80075fe:	b9dc      	cbnz	r4, 8007638 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8007600:	f06f 0002 	mvn.w	r0, #2
 8007604:	e7e6      	b.n	80075d4 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007606:	2900      	cmp	r1, #0
 8007608:	d0e2      	beq.n	80075d0 <osMessageQueueGet+0xc>
 800760a:	2c00      	cmp	r4, #0
 800760c:	d1e0      	bne.n	80075d0 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800760e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007610:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007612:	f001 f806 	bl	8008622 <xQueueReceiveFromISR>
 8007616:	2801      	cmp	r0, #1
 8007618:	d1f2      	bne.n	8007600 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	b90b      	cbnz	r3, 8007622 <osMessageQueueGet+0x5e>
  stat = osOK;
 800761e:	2000      	movs	r0, #0
 8007620:	e7d8      	b.n	80075d4 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8007622:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	e7f2      	b.n	800761e <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8007638:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800763c:	e7ca      	b.n	80075d4 <osMessageQueueGet+0x10>
 800763e:	bf00      	nop
 8007640:	20003e98 	.word	0x20003e98

08007644 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007644:	4b03      	ldr	r3, [pc, #12]	; (8007654 <vApplicationGetIdleTaskMemory+0x10>)
 8007646:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007648:	4b03      	ldr	r3, [pc, #12]	; (8007658 <vApplicationGetIdleTaskMemory+0x14>)
 800764a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800764c:	2380      	movs	r3, #128	; 0x80
 800764e:	6013      	str	r3, [r2, #0]
}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20003e38 	.word	0x20003e38
 8007658:	20003c38 	.word	0x20003c38

0800765c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800765c:	4b03      	ldr	r3, [pc, #12]	; (800766c <vApplicationGetTimerTaskMemory+0x10>)
 800765e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007660:	4b03      	ldr	r3, [pc, #12]	; (8007670 <vApplicationGetTimerTaskMemory+0x14>)
 8007662:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007668:	6013      	str	r3, [r2, #0]
}
 800766a:	4770      	bx	lr
 800766c:	2000429c 	.word	0x2000429c
 8007670:	20003e9c 	.word	0x20003e9c

08007674 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007674:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <prvInsertBlockIntoFreeList+0x40>)
{
 8007676:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007678:	461a      	mov	r2, r3
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4283      	cmp	r3, r0
 800767e:	d3fb      	bcc.n	8007678 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007680:	6854      	ldr	r4, [r2, #4]
 8007682:	1911      	adds	r1, r2, r4
 8007684:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007686:	bf01      	itttt	eq
 8007688:	6841      	ldreq	r1, [r0, #4]
 800768a:	4610      	moveq	r0, r2
 800768c:	1909      	addeq	r1, r1, r4
 800768e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007690:	6844      	ldr	r4, [r0, #4]
 8007692:	1901      	adds	r1, r0, r4
 8007694:	428b      	cmp	r3, r1
 8007696:	d107      	bne.n	80076a8 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007698:	4907      	ldr	r1, [pc, #28]	; (80076b8 <prvInsertBlockIntoFreeList+0x44>)
 800769a:	6809      	ldr	r1, [r1, #0]
 800769c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800769e:	bf1f      	itttt	ne
 80076a0:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076a2:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076a4:	1909      	addne	r1, r1, r4
 80076a6:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076a8:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076aa:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076ac:	bf18      	it	ne
 80076ae:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b0:	bd10      	pop	{r4, pc}
 80076b2:	bf00      	nop
 80076b4:	20016804 	.word	0x20016804
 80076b8:	200042fc 	.word	0x200042fc

080076bc <pvPortMalloc>:
{
 80076bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80076c0:	4f41      	ldr	r7, [pc, #260]	; (80077c8 <pvPortMalloc+0x10c>)
{
 80076c2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80076c4:	f001 fa36 	bl	8008b34 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80076c8:	4840      	ldr	r0, [pc, #256]	; (80077cc <pvPortMalloc+0x110>)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	b9f3      	cbnz	r3, 800770c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 80076ce:	4940      	ldr	r1, [pc, #256]	; (80077d0 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 80076d0:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076d2:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076d4:	4d3f      	ldr	r5, [pc, #252]	; (80077d4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076d6:	bf1b      	ittet	ne
 80076d8:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076da:	4a3f      	ldrne	r2, [pc, #252]	; (80077d8 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076dc:	4a3f      	ldreq	r2, [pc, #252]	; (80077dc <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076de:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 80076e2:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076e4:	bf18      	it	ne
 80076e6:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076e8:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076ea:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 80076ec:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076ee:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 80076f2:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076f6:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 80076f8:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076fa:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076fe:	4a38      	ldr	r2, [pc, #224]	; (80077e0 <pvPortMalloc+0x124>)
 8007700:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007702:	4a38      	ldr	r2, [pc, #224]	; (80077e4 <pvPortMalloc+0x128>)
 8007704:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007706:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800770a:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800770c:	f8d0 8000 	ldr.w	r8, [r0]
 8007710:	ea18 0f04 	tst.w	r8, r4
 8007714:	d152      	bne.n	80077bc <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8007716:	2c00      	cmp	r4, #0
 8007718:	d041      	beq.n	800779e <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800771a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800771e:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007720:	bf1c      	itt	ne
 8007722:	f023 0307 	bicne.w	r3, r3, #7
 8007726:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007728:	2b00      	cmp	r3, #0
 800772a:	d047      	beq.n	80077bc <pvPortMalloc+0x100>
 800772c:	4c2d      	ldr	r4, [pc, #180]	; (80077e4 <pvPortMalloc+0x128>)
 800772e:	6826      	ldr	r6, [r4, #0]
 8007730:	429e      	cmp	r6, r3
 8007732:	d343      	bcc.n	80077bc <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8007734:	4a27      	ldr	r2, [pc, #156]	; (80077d4 <pvPortMalloc+0x118>)
 8007736:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007738:	6869      	ldr	r1, [r5, #4]
 800773a:	4299      	cmp	r1, r3
 800773c:	d201      	bcs.n	8007742 <pvPortMalloc+0x86>
 800773e:	6828      	ldr	r0, [r5, #0]
 8007740:	b9b0      	cbnz	r0, 8007770 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8007742:	6838      	ldr	r0, [r7, #0]
 8007744:	42a8      	cmp	r0, r5
 8007746:	d039      	beq.n	80077bc <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007748:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800774a:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800774c:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800774e:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007750:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007752:	d914      	bls.n	800777e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007754:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007756:	0742      	lsls	r2, r0, #29
 8007758:	d00d      	beq.n	8007776 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	b672      	cpsid	i
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	b662      	cpsie	i
 800776e:	e7fe      	b.n	800776e <pvPortMalloc+0xb2>
 8007770:	462a      	mov	r2, r5
 8007772:	4605      	mov	r5, r0
 8007774:	e7e0      	b.n	8007738 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007776:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007778:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800777a:	f7ff ff7b 	bl	8007674 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800777e:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007780:	4917      	ldr	r1, [pc, #92]	; (80077e0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007782:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007784:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007788:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800778a:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800778c:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007790:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007792:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007794:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007798:	bf38      	it	cc
 800779a:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800779c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800779e:	f001 fa6f 	bl	8008c80 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a2:	0763      	lsls	r3, r4, #29
 80077a4:	d00c      	beq.n	80077c0 <pvPortMalloc+0x104>
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	b672      	cpsid	i
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	b662      	cpsie	i
 80077ba:	e7fe      	b.n	80077ba <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 80077bc:	2400      	movs	r4, #0
 80077be:	e7ee      	b.n	800779e <pvPortMalloc+0xe2>
}
 80077c0:	4620      	mov	r0, r4
 80077c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c6:	bf00      	nop
 80077c8:	200042fc 	.word	0x200042fc
 80077cc:	200167f8 	.word	0x200167f8
 80077d0:	20004300 	.word	0x20004300
 80077d4:	20016804 	.word	0x20016804
 80077d8:	200167f8 	.word	0x200167f8
 80077dc:	000124f8 	.word	0x000124f8
 80077e0:	20016800 	.word	0x20016800
 80077e4:	200167fc 	.word	0x200167fc

080077e8 <vPortFree>:
{
 80077e8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80077ea:	4604      	mov	r4, r0
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d032      	beq.n	8007856 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077f0:	4a19      	ldr	r2, [pc, #100]	; (8007858 <vPortFree+0x70>)
 80077f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80077f6:	6812      	ldr	r2, [r2, #0]
 80077f8:	4213      	tst	r3, r2
 80077fa:	d10a      	bne.n	8007812 <vPortFree+0x2a>
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	b672      	cpsid	i
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	b662      	cpsie	i
 8007810:	e7fe      	b.n	8007810 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007812:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007816:	b151      	cbz	r1, 800782e <vPortFree+0x46>
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	b672      	cpsid	i
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	b662      	cpsie	i
 800782c:	e7fe      	b.n	800782c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800782e:	ea23 0302 	bic.w	r3, r3, r2
 8007832:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007836:	f001 f97d 	bl	8008b34 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800783a:	4a08      	ldr	r2, [pc, #32]	; (800785c <vPortFree+0x74>)
 800783c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007840:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007844:	6811      	ldr	r1, [r2, #0]
 8007846:	440b      	add	r3, r1
 8007848:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800784a:	f7ff ff13 	bl	8007674 <prvInsertBlockIntoFreeList>
}
 800784e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007852:	f001 ba15 	b.w	8008c80 <xTaskResumeAll>
}
 8007856:	bd10      	pop	{r4, pc}
 8007858:	200167f8 	.word	0x200167f8
 800785c:	200167fc 	.word	0x200167fc

08007860 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007860:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007864:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007868:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800786a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800786c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007874:	4770      	bx	lr

08007876 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800787a:	4770      	bx	lr

0800787c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800787c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800787e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007880:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007882:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007888:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800788a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800788c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800788e:	3301      	adds	r3, #1
 8007890:	6003      	str	r3, [r0, #0]
}
 8007892:	4770      	bx	lr

08007894 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007894:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007896:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007898:	1c63      	adds	r3, r4, #1
 800789a:	d10a      	bne.n	80078b2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800789c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078a2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078a4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80078a6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80078a8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80078aa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80078ac:	3301      	adds	r3, #1
 80078ae:	6003      	str	r3, [r0, #0]
}
 80078b0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078b2:	f100 0208 	add.w	r2, r0, #8
 80078b6:	4613      	mov	r3, r2
 80078b8:	6852      	ldr	r2, [r2, #4]
 80078ba:	6815      	ldr	r5, [r2, #0]
 80078bc:	42a5      	cmp	r5, r4
 80078be:	d9fa      	bls.n	80078b6 <vListInsert+0x22>
 80078c0:	e7ed      	b.n	800789e <vListInsert+0xa>

080078c2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078c2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078c4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80078c8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078ca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078cc:	6859      	ldr	r1, [r3, #4]
 80078ce:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078d0:	bf08      	it	eq
 80078d2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078d4:	2200      	movs	r2, #0
 80078d6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	3a01      	subs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078de:	6818      	ldr	r0, [r3, #0]
}
 80078e0:	4770      	bx	lr
	...

080078e4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078e4:	4808      	ldr	r0, [pc, #32]	; (8007908 <prvPortStartFirstTask+0x24>)
 80078e6:	6800      	ldr	r0, [r0, #0]
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	f380 8808 	msr	MSP, r0
 80078ee:	f04f 0000 	mov.w	r0, #0
 80078f2:	f380 8814 	msr	CONTROL, r0
 80078f6:	b662      	cpsie	i
 80078f8:	b661      	cpsie	f
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	df00      	svc	0
 8007904:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007906:	0000      	.short	0x0000
 8007908:	e000ed08 	.word	0xe000ed08

0800790c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800790c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800791c <vPortEnableVFP+0x10>
 8007910:	6801      	ldr	r1, [r0, #0]
 8007912:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007916:	6001      	str	r1, [r0, #0]
 8007918:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800791a:	0000      	.short	0x0000
 800791c:	e000ed88 	.word	0xe000ed88

08007920 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007920:	2300      	movs	r3, #0
{
 8007922:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007924:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <prvTaskExitError+0x44>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	d00a      	beq.n	8007944 <prvTaskExitError+0x24>
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	b672      	cpsid	i
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	b662      	cpsie	i
 8007942:	e7fe      	b.n	8007942 <prvTaskExitError+0x22>
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	b672      	cpsid	i
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	b662      	cpsie	i
	while( ulDummy == 0 )
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0fc      	beq.n	8007958 <prvTaskExitError+0x38>
}
 800795e:	b002      	add	sp, #8
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000040 	.word	0x20000040

08007968 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800796c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007970:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007974:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007976:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800797a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800797c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800797e:	f06f 0302 	mvn.w	r3, #2
 8007982:	6203      	str	r3, [r0, #32]
}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	08007921 	.word	0x08007921
 800798c:	00000000 	.word	0x00000000

08007990 <SVC_Handler>:
	__asm volatile (
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <pxCurrentTCBConst2>)
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	6808      	ldr	r0, [r1, #0]
 8007996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	f380 8809 	msr	PSP, r0
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	4770      	bx	lr
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst2>:
 80079b0:	20016854 	.word	0x20016854

080079b4 <vPortEnterCritical>:
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	b672      	cpsid	i
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	b662      	cpsie	i
	uxCriticalNesting++;
 80079c8:	4a0b      	ldr	r2, [pc, #44]	; (80079f8 <vPortEnterCritical+0x44>)
 80079ca:	6813      	ldr	r3, [r2, #0]
 80079cc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80079ce:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80079d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80079d2:	d110      	bne.n	80079f6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079d8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	b153      	cbz	r3, 80079f6 <vPortEnterCritical+0x42>
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	b672      	cpsid	i
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	b662      	cpsie	i
 80079f4:	e7fe      	b.n	80079f4 <vPortEnterCritical+0x40>
}
 80079f6:	4770      	bx	lr
 80079f8:	20000040 	.word	0x20000040

080079fc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80079fc:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <vPortExitCritical+0x28>)
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	b953      	cbnz	r3, 8007a18 <vPortExitCritical+0x1c>
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	b672      	cpsid	i
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	b662      	cpsie	i
 8007a16:	e7fe      	b.n	8007a16 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a1c:	b90b      	cbnz	r3, 8007a22 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a1e:	f383 8811 	msr	BASEPRI, r3
}
 8007a22:	4770      	bx	lr
 8007a24:	20000040 	.word	0x20000040
	...

08007a30 <PendSV_Handler>:
	__asm volatile
 8007a30:	f3ef 8009 	mrs	r0, PSP
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <pxCurrentTCBConst>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	f01e 0f10 	tst.w	lr, #16
 8007a40:	bf08      	it	eq
 8007a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	6010      	str	r0, [r2, #0]
 8007a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f380 8811 	msr	BASEPRI, r0
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	f001 fa16 	bl	8008e94 <vTaskSwitchContext>
 8007a68:	f04f 0000 	mov.w	r0, #0
 8007a6c:	f380 8811 	msr	BASEPRI, r0
 8007a70:	bc09      	pop	{r0, r3}
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	f01e 0f10 	tst.w	lr, #16
 8007a7e:	bf08      	it	eq
 8007a80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a84:	f380 8809 	msr	PSP, r0
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop

08007a90 <pxCurrentTCBConst>:
 8007a90:	20016854 	.word	0x20016854

08007a94 <SysTick_Handler>:
{
 8007a94:	b508      	push	{r3, lr}
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	b672      	cpsid	i
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8007aaa:	f001 f851 	bl	8008b50 <xTaskIncrementTick>
 8007aae:	b128      	cbz	r0, 8007abc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ab0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007abc:	2300      	movs	r3, #0
 8007abe:	f383 8811 	msr	BASEPRI, r3
}
 8007ac2:	bd08      	pop	{r3, pc}

08007ac4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ac4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007ac8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ace:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ad0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ad2:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <vPortSetupTimerInterrupt+0x20>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ada:	3b01      	subs	r3, #1
 8007adc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ade:	2307      	movs	r3, #7
 8007ae0:	6113      	str	r3, [r2, #16]
}
 8007ae2:	4770      	bx	lr
 8007ae4:	2000000c 	.word	0x2000000c

08007ae8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ae8:	4b2e      	ldr	r3, [pc, #184]	; (8007ba4 <xPortStartScheduler+0xbc>)
{
 8007aea:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aec:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aee:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007af4:	22ff      	movs	r2, #255	; 0xff
 8007af6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007af8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007afa:	4a2b      	ldr	r2, [pc, #172]	; (8007ba8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007b06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b0a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b0c:	2307      	movs	r3, #7
 8007b0e:	4a27      	ldr	r2, [pc, #156]	; (8007bac <xPortStartScheduler+0xc4>)
 8007b10:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b12:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007b16:	1e5c      	subs	r4, r3, #1
 8007b18:	0600      	lsls	r0, r0, #24
 8007b1a:	d40e      	bmi.n	8007b3a <xPortStartScheduler+0x52>
 8007b1c:	b111      	cbz	r1, 8007b24 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	d013      	beq.n	8007b4c <xPortStartScheduler+0x64>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	b672      	cpsid	i
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	b662      	cpsie	i
 8007b38:	e7fe      	b.n	8007b38 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007b3e:	2101      	movs	r1, #1
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f88d 3003 	strb.w	r3, [sp, #3]
 8007b48:	4623      	mov	r3, r4
 8007b4a:	e7e2      	b.n	8007b12 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b4c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b50:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007b54:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b56:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	4a12      	ldr	r2, [pc, #72]	; (8007ba4 <xPortStartScheduler+0xbc>)
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b68:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b6c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007b70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b74:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007b78:	f7ff ffa4 	bl	8007ac4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <xPortStartScheduler+0xc8>)
 8007b7e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007b80:	f7ff fec4 	bl	800790c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b84:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007b88:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b8c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007b90:	f7ff fea8 	bl	80078e4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007b94:	f001 f97e 	bl	8008e94 <vTaskSwitchContext>
}
 8007b98:	4628      	mov	r0, r5
	prvTaskExitError();
 8007b9a:	f7ff fec1 	bl	8007920 <prvTaskExitError>
}
 8007b9e:	b003      	add	sp, #12
 8007ba0:	bd30      	pop	{r4, r5, pc}
 8007ba2:	bf00      	nop
 8007ba4:	e000e400 	.word	0xe000e400
 8007ba8:	2001680c 	.word	0x2001680c
 8007bac:	20016810 	.word	0x20016810
 8007bb0:	20000040 	.word	0x20000040

08007bb4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bb4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bb8:	2b0f      	cmp	r3, #15
 8007bba:	d910      	bls.n	8007bde <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bbc:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <vPortValidateInterruptPriority+0x58>)
 8007bbe:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bc0:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <vPortValidateInterruptPriority+0x5c>)
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d90a      	bls.n	8007bde <vPortValidateInterruptPriority+0x2a>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	e7fe      	b.n	8007bdc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bde:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007be2:	4a0c      	ldr	r2, [pc, #48]	; (8007c14 <vPortValidateInterruptPriority+0x60>)
 8007be4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d90a      	bls.n	8007c08 <vPortValidateInterruptPriority+0x54>
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	b672      	cpsid	i
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	b662      	cpsie	i
 8007c06:	e7fe      	b.n	8007c06 <vPortValidateInterruptPriority+0x52>
	}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	e000e3f0 	.word	0xe000e3f0
 8007c10:	2001680c 	.word	0x2001680c
 8007c14:	20016810 	.word	0x20016810

08007c18 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c1c:	f7ff feca 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c20:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007c22:	f7ff feeb 	bl	80079fc <vPortExitCritical>

	return xReturn;
}
 8007c26:	fab4 f084 	clz	r0, r4
 8007c2a:	0940      	lsrs	r0, r0, #5
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <prvCopyDataToQueue>:
{
 8007c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c30:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c32:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007c34:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c36:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c38:	b952      	cbnz	r2, 8007c50 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c3a:	6807      	ldr	r7, [r0, #0]
 8007c3c:	bb47      	cbnz	r7, 8007c90 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c3e:	6880      	ldr	r0, [r0, #8]
 8007c40:	f001 fa98 	bl	8009174 <xTaskPriorityDisinherit>
 8007c44:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c46:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c48:	3601      	adds	r6, #1
}
 8007c4a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c4c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007c50:	b965      	cbnz	r5, 8007c6c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c52:	6840      	ldr	r0, [r0, #4]
 8007c54:	f023 fc12 	bl	802b47c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c5c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c5e:	68a2      	ldr	r2, [r4, #8]
 8007c60:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c62:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c64:	d3f0      	bcc.n	8007c48 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	e7ed      	b.n	8007c48 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c6c:	68c0      	ldr	r0, [r0, #12]
 8007c6e:	f023 fc05 	bl	802b47c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c74:	68e3      	ldr	r3, [r4, #12]
 8007c76:	4251      	negs	r1, r2
 8007c78:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c7e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c80:	bf3e      	ittt	cc
 8007c82:	68a3      	ldrcc	r3, [r4, #8]
 8007c84:	185b      	addcc	r3, r3, r1
 8007c86:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007c88:	2d02      	cmp	r5, #2
 8007c8a:	d101      	bne.n	8007c90 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c8c:	b116      	cbz	r6, 8007c94 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8007c8e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007c90:	2500      	movs	r5, #0
 8007c92:	e7d9      	b.n	8007c48 <prvCopyDataToQueue+0x1a>
 8007c94:	4635      	mov	r5, r6
 8007c96:	e7d7      	b.n	8007c48 <prvCopyDataToQueue+0x1a>

08007c98 <prvCopyDataFromQueue>:
{
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007c9e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ca0:	b162      	cbz	r2, 8007cbc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ca2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ca4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ca6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ca8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007caa:	60dc      	str	r4, [r3, #12]
}
 8007cac:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cb0:	bf24      	itt	cs
 8007cb2:	6819      	ldrcs	r1, [r3, #0]
 8007cb4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cb6:	68d9      	ldr	r1, [r3, #12]
 8007cb8:	f023 bbe0 	b.w	802b47c <memcpy>
}
 8007cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <prvUnlockQueue>:
{
 8007cc2:	b570      	push	{r4, r5, r6, lr}
 8007cc4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007cc6:	f7ff fe75 	bl	80079b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007cca:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cce:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007cd2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cd4:	2d00      	cmp	r5, #0
 8007cd6:	dc14      	bgt.n	8007d02 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007cd8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cda:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8007cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007ce2:	f7ff fe8b 	bl	80079fc <vPortExitCritical>
	taskENTER_CRITICAL();
 8007ce6:	f7ff fe65 	bl	80079b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007cea:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007cee:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cf0:	2d00      	cmp	r5, #0
 8007cf2:	dc12      	bgt.n	8007d1a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007cf4:	23ff      	movs	r3, #255	; 0xff
 8007cf6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007cfe:	f7ff be7d 	b.w	80079fc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0e7      	beq.n	8007cd8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f001 f945 	bl	8008f98 <xTaskRemoveFromEventList>
 8007d0e:	b108      	cbz	r0, 8007d14 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007d10:	f001 f9d4 	bl	80090bc <vTaskMissedYield>
			--cTxLock;
 8007d14:	3d01      	subs	r5, #1
 8007d16:	b26d      	sxtb	r5, r5
 8007d18:	e7dc      	b.n	8007cd4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0e9      	beq.n	8007cf4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d20:	4630      	mov	r0, r6
 8007d22:	f001 f939 	bl	8008f98 <xTaskRemoveFromEventList>
 8007d26:	b108      	cbz	r0, 8007d2c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007d28:	f001 f9c8 	bl	80090bc <vTaskMissedYield>
				--cRxLock;
 8007d2c:	3d01      	subs	r5, #1
 8007d2e:	b26d      	sxtb	r5, r5
 8007d30:	e7de      	b.n	8007cf0 <prvUnlockQueue+0x2e>

08007d32 <xQueueGenericReset>:
{
 8007d32:	b538      	push	{r3, r4, r5, lr}
 8007d34:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007d36:	4604      	mov	r4, r0
 8007d38:	b950      	cbnz	r0, 8007d50 <xQueueGenericReset+0x1e>
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	b672      	cpsid	i
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	b662      	cpsie	i
 8007d4e:	e7fe      	b.n	8007d4e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007d50:	f7ff fe30 	bl	80079b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d54:	6822      	ldr	r2, [r4, #0]
 8007d56:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d5a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d5c:	434b      	muls	r3, r1
 8007d5e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d60:	1a5b      	subs	r3, r3, r1
 8007d62:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d64:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d66:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d68:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d6a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d6c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007d6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007d76:	b9a5      	cbnz	r5, 8007da2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	b173      	cbz	r3, 8007d9a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d7c:	f104 0010 	add.w	r0, r4, #16
 8007d80:	f001 f90a 	bl	8008f98 <xTaskRemoveFromEventList>
 8007d84:	b148      	cbz	r0, 8007d9a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8007d86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007d9a:	f7ff fe2f 	bl	80079fc <vPortExitCritical>
}
 8007d9e:	2001      	movs	r0, #1
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007da2:	f104 0010 	add.w	r0, r4, #16
 8007da6:	f7ff fd5b 	bl	8007860 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007daa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007dae:	f7ff fd57 	bl	8007860 <vListInitialise>
 8007db2:	e7f2      	b.n	8007d9a <xQueueGenericReset+0x68>

08007db4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8007db4:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8007db6:	461c      	mov	r4, r3
 8007db8:	b953      	cbnz	r3, 8007dd0 <xQueueGenericCreateStatic.part.0+0x1c>
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	b672      	cpsid	i
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	b662      	cpsie	i
 8007dce:	e7fe      	b.n	8007dce <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dd0:	b15a      	cbz	r2, 8007dea <xQueueGenericCreateStatic.part.0+0x36>
 8007dd2:	b9b1      	cbnz	r1, 8007e02 <xQueueGenericCreateStatic.part.0+0x4e>
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	b672      	cpsid	i
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	b662      	cpsie	i
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dea:	b151      	cbz	r1, 8007e02 <xQueueGenericCreateStatic.part.0+0x4e>
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	b672      	cpsid	i
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	b662      	cpsie	i
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e02:	2350      	movs	r3, #80	; 0x50
 8007e04:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	2b50      	cmp	r3, #80	; 0x50
 8007e0a:	d00a      	beq.n	8007e22 <xQueueGenericCreateStatic.part.0+0x6e>
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	b672      	cpsid	i
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	b662      	cpsie	i
 8007e20:	e7fe      	b.n	8007e20 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e22:	2900      	cmp	r1, #0
 8007e24:	bf08      	it	eq
 8007e26:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e28:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	6022      	str	r2, [r4, #0]
 8007e2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007e32:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e36:	4619      	mov	r1, r3
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7ff ff7a 	bl	8007d32 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007e3e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8007e42:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007e44:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007e48:	b002      	add	sp, #8
 8007e4a:	bd10      	pop	{r4, pc}

08007e4c <xQueueGenericCreateStatic>:
	{
 8007e4c:	b410      	push	{r4}
 8007e4e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e52:	b950      	cbnz	r0, 8007e6a <xQueueGenericCreateStatic+0x1e>
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	e7fe      	b.n	8007e68 <xQueueGenericCreateStatic+0x1c>
 8007e6a:	9401      	str	r4, [sp, #4]
	}
 8007e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e70:	f7ff bfa0 	b.w	8007db4 <xQueueGenericCreateStatic.part.0>

08007e74 <xQueueGenericCreate>:
	{
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	460d      	mov	r5, r1
 8007e78:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	b950      	cbnz	r0, 8007e94 <xQueueGenericCreate+0x20>
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	b672      	cpsid	i
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	b662      	cpsie	i
 8007e92:	e7fe      	b.n	8007e92 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e94:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e96:	3050      	adds	r0, #80	; 0x50
 8007e98:	f7ff fc10 	bl	80076bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	b170      	cbz	r0, 8007ebe <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ea6:	b165      	cbz	r5, 8007ec2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ea8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007eac:	2101      	movs	r1, #1
 8007eae:	4620      	mov	r0, r4
 8007eb0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007eb2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007eb6:	f7ff ff3c 	bl	8007d32 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007eba:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	e7f2      	b.n	8007eac <xQueueGenericCreate+0x38>

08007ec6 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007ec6:	b513      	push	{r0, r1, r4, lr}
 8007ec8:	4613      	mov	r3, r2
 8007eca:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007ecc:	b950      	cbnz	r0, 8007ee4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	b672      	cpsid	i
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	b662      	cpsie	i
 8007ee2:	e7fe      	b.n	8007ee2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ee4:	4288      	cmp	r0, r1
 8007ee6:	d20a      	bcs.n	8007efe <xQueueCreateCountingSemaphoreStatic+0x38>
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	b672      	cpsid	i
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	b662      	cpsie	i
 8007efc:	e7fe      	b.n	8007efc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007efe:	2202      	movs	r2, #2
 8007f00:	9200      	str	r2, [sp, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	4611      	mov	r1, r2
 8007f06:	f7ff ffa1 	bl	8007e4c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007f0a:	b100      	cbz	r0, 8007f0e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f0c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007f0e:	b002      	add	sp, #8
 8007f10:	bd10      	pop	{r4, pc}

08007f12 <xQueueCreateCountingSemaphore>:
	{
 8007f12:	b510      	push	{r4, lr}
 8007f14:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007f16:	b950      	cbnz	r0, 8007f2e <xQueueCreateCountingSemaphore+0x1c>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	b672      	cpsid	i
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	b662      	cpsie	i
 8007f2c:	e7fe      	b.n	8007f2c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f2e:	4288      	cmp	r0, r1
 8007f30:	d20a      	bcs.n	8007f48 <xQueueCreateCountingSemaphore+0x36>
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	b672      	cpsid	i
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	b662      	cpsie	i
 8007f46:	e7fe      	b.n	8007f46 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f48:	2202      	movs	r2, #2
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f7ff ff92 	bl	8007e74 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007f50:	b100      	cbz	r0, 8007f54 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f52:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <xQueueGenericSend>:
{
 8007f56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	4688      	mov	r8, r1
 8007f5e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007f60:	4604      	mov	r4, r0
{
 8007f62:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007f64:	b950      	cbnz	r0, 8007f7c <xQueueGenericSend+0x26>
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	b672      	cpsid	i
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	b662      	cpsie	i
 8007f7a:	e7fe      	b.n	8007f7a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f7c:	b961      	cbnz	r1, 8007f98 <xQueueGenericSend+0x42>
 8007f7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007f80:	b153      	cbz	r3, 8007f98 <xQueueGenericSend+0x42>
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	e7fe      	b.n	8007f96 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f98:	2f02      	cmp	r7, #2
 8007f9a:	d10d      	bne.n	8007fb8 <xQueueGenericSend+0x62>
 8007f9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d00a      	beq.n	8007fb8 <xQueueGenericSend+0x62>
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	b672      	cpsid	i
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	b662      	cpsie	i
 8007fb6:	e7fe      	b.n	8007fb6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fb8:	f001 f88c 	bl	80090d4 <xTaskGetSchedulerState>
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	b960      	cbnz	r0, 8007fda <xQueueGenericSend+0x84>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	b15b      	cbz	r3, 8007fdc <xQueueGenericSend+0x86>
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	b672      	cpsid	i
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	b662      	cpsie	i
 8007fd8:	e7fe      	b.n	8007fd8 <xQueueGenericSend+0x82>
 8007fda:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007fdc:	f04f 0900 	mov.w	r9, #0
 8007fe0:	e037      	b.n	8008052 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe2:	9d01      	ldr	r5, [sp, #4]
 8007fe4:	b91d      	cbnz	r5, 8007fee <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8007fe6:	f7ff fd09 	bl	80079fc <vPortExitCritical>
			return errQUEUE_FULL;
 8007fea:	2000      	movs	r0, #0
 8007fec:	e052      	b.n	8008094 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8007fee:	b916      	cbnz	r6, 8007ff6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ff0:	a802      	add	r0, sp, #8
 8007ff2:	f001 f817 	bl	8009024 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007ff6:	f7ff fd01 	bl	80079fc <vPortExitCritical>
		vTaskSuspendAll();
 8007ffa:	f000 fd9b 	bl	8008b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ffe:	f7ff fcd9 	bl	80079b4 <vPortEnterCritical>
 8008002:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008006:	2bff      	cmp	r3, #255	; 0xff
 8008008:	d101      	bne.n	800800e <xQueueGenericSend+0xb8>
 800800a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800800e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008012:	2bff      	cmp	r3, #255	; 0xff
 8008014:	d101      	bne.n	800801a <xQueueGenericSend+0xc4>
 8008016:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800801a:	f7ff fcef 	bl	80079fc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800801e:	a901      	add	r1, sp, #4
 8008020:	a802      	add	r0, sp, #8
 8008022:	f001 f80b 	bl	800903c <xTaskCheckForTimeOut>
 8008026:	2800      	cmp	r0, #0
 8008028:	d14a      	bne.n	80080c0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800802a:	f7ff fcc3 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800802e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008032:	429a      	cmp	r2, r3
 8008034:	d131      	bne.n	800809a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008036:	f7ff fce1 	bl	80079fc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800803a:	9901      	ldr	r1, [sp, #4]
 800803c:	f104 0010 	add.w	r0, r4, #16
 8008040:	f000 ff6e 	bl	8008f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008044:	4620      	mov	r0, r4
 8008046:	f7ff fe3c 	bl	8007cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800804a:	f000 fe19 	bl	8008c80 <xTaskResumeAll>
 800804e:	b360      	cbz	r0, 80080aa <xQueueGenericSend+0x154>
 8008050:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008052:	f7ff fcaf 	bl	80079b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008056:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800805a:	429a      	cmp	r2, r3
 800805c:	d301      	bcc.n	8008062 <xQueueGenericSend+0x10c>
 800805e:	2f02      	cmp	r7, #2
 8008060:	d1bf      	bne.n	8007fe2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008062:	463a      	mov	r2, r7
 8008064:	4641      	mov	r1, r8
 8008066:	4620      	mov	r0, r4
 8008068:	f7ff fde1 	bl	8007c2e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800806c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800806e:	b11b      	cbz	r3, 8008078 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008070:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008074:	f000 ff90 	bl	8008f98 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008078:	b148      	cbz	r0, 800808e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800807a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800808e:	f7ff fcb5 	bl	80079fc <vPortExitCritical>
				return pdPASS;
 8008092:	2001      	movs	r0, #1
}
 8008094:	b005      	add	sp, #20
 8008096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800809a:	f7ff fcaf 	bl	80079fc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800809e:	4620      	mov	r0, r4
 80080a0:	f7ff fe0f 	bl	8007cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080a4:	f000 fdec 	bl	8008c80 <xTaskResumeAll>
 80080a8:	e7d2      	b.n	8008050 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 80080aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	e7c7      	b.n	8008050 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80080c0:	4620      	mov	r0, r4
 80080c2:	f7ff fdfe 	bl	8007cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080c6:	f000 fddb 	bl	8008c80 <xTaskResumeAll>
 80080ca:	e78e      	b.n	8007fea <xQueueGenericSend+0x94>

080080cc <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80080cc:	2200      	movs	r2, #0
	{
 80080ce:	460b      	mov	r3, r1
 80080d0:	b513      	push	{r0, r1, r4, lr}
 80080d2:	4611      	mov	r1, r2
 80080d4:	9000      	str	r0, [sp, #0]
 80080d6:	2001      	movs	r0, #1
 80080d8:	f7ff fe6c 	bl	8007db4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 80080dc:	4604      	mov	r4, r0
 80080de:	b138      	cbz	r0, 80080f0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80080e0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80080e2:	461a      	mov	r2, r3
 80080e4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80080e6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80080e8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80080ea:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80080ec:	f7ff ff33 	bl	8007f56 <xQueueGenericSend>
	}
 80080f0:	4620      	mov	r0, r4
 80080f2:	b002      	add	sp, #8
 80080f4:	bd10      	pop	{r4, pc}

080080f6 <xQueueGiveMutexRecursive>:
	{
 80080f6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80080f8:	4604      	mov	r4, r0
 80080fa:	b950      	cbnz	r0, 8008112 <xQueueGiveMutexRecursive+0x1c>
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	b672      	cpsid	i
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	b662      	cpsie	i
 8008110:	e7fe      	b.n	8008110 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008112:	6885      	ldr	r5, [r0, #8]
 8008114:	f000 ffd8 	bl	80090c8 <xTaskGetCurrentTaskHandle>
 8008118:	4285      	cmp	r5, r0
 800811a:	d10a      	bne.n	8008132 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800811c:	68e3      	ldr	r3, [r4, #12]
 800811e:	3b01      	subs	r3, #1
 8008120:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008122:	b923      	cbnz	r3, 800812e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008124:	461a      	mov	r2, r3
 8008126:	4619      	mov	r1, r3
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff ff14 	bl	8007f56 <xQueueGenericSend>
			xReturn = pdPASS;
 800812e:	2001      	movs	r0, #1
		return xReturn;
 8008130:	e000      	b.n	8008134 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8008132:	2000      	movs	r0, #0
	}
 8008134:	bd38      	pop	{r3, r4, r5, pc}

08008136 <xQueueCreateMutex>:
	{
 8008136:	b570      	push	{r4, r5, r6, lr}
 8008138:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800813a:	2050      	movs	r0, #80	; 0x50
 800813c:	f7ff fabe 	bl	80076bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008140:	4604      	mov	r4, r0
 8008142:	b198      	cbz	r0, 800816c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008144:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008146:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008148:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800814a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800814e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008152:	f7ff fdee 	bl	8007d32 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008156:	462b      	mov	r3, r5
 8008158:	462a      	mov	r2, r5
 800815a:	4629      	mov	r1, r5
 800815c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800815e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008162:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008164:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008166:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008168:	f7ff fef5 	bl	8007f56 <xQueueGenericSend>
	}
 800816c:	4620      	mov	r0, r4
 800816e:	bd70      	pop	{r4, r5, r6, pc}

08008170 <xQueueGenericSendFromISR>:
{
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4689      	mov	r9, r1
 8008176:	4690      	mov	r8, r2
 8008178:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800817a:	4604      	mov	r4, r0
 800817c:	b950      	cbnz	r0, 8008194 <xQueueGenericSendFromISR+0x24>
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	b672      	cpsid	i
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	b662      	cpsie	i
 8008192:	e7fe      	b.n	8008192 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008194:	b961      	cbnz	r1, 80081b0 <xQueueGenericSendFromISR+0x40>
 8008196:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008198:	b153      	cbz	r3, 80081b0 <xQueueGenericSendFromISR+0x40>
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	b672      	cpsid	i
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	b662      	cpsie	i
 80081ae:	e7fe      	b.n	80081ae <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081b0:	2f02      	cmp	r7, #2
 80081b2:	d10d      	bne.n	80081d0 <xQueueGenericSendFromISR+0x60>
 80081b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d00a      	beq.n	80081d0 <xQueueGenericSendFromISR+0x60>
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	b672      	cpsid	i
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	b662      	cpsie	i
 80081ce:	e7fe      	b.n	80081ce <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081d0:	f7ff fcf0 	bl	8007bb4 <vPortValidateInterruptPriority>
	__asm volatile
 80081d4:	f3ef 8611 	mrs	r6, BASEPRI
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	b672      	cpsid	i
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80081ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d301      	bcc.n	80081f8 <xQueueGenericSendFromISR+0x88>
 80081f4:	2f02      	cmp	r7, #2
 80081f6:	d122      	bne.n	800823e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80081f8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081fc:	463a      	mov	r2, r7
 80081fe:	4649      	mov	r1, r9
 8008200:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008202:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008204:	f7ff fd13 	bl	8007c2e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008208:	1c6b      	adds	r3, r5, #1
 800820a:	d113      	bne.n	8008234 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800820c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800820e:	b90b      	cbnz	r3, 8008214 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8008210:	2001      	movs	r0, #1
 8008212:	e00b      	b.n	800822c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008214:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008218:	f000 febe 	bl	8008f98 <xTaskRemoveFromEventList>
 800821c:	2800      	cmp	r0, #0
 800821e:	d0f7      	beq.n	8008210 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8008220:	f1b8 0f00 	cmp.w	r8, #0
 8008224:	d0f4      	beq.n	8008210 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008226:	2001      	movs	r0, #1
 8008228:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800822c:	f386 8811 	msr	BASEPRI, r6
}
 8008230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008234:	3501      	adds	r5, #1
 8008236:	b26d      	sxtb	r5, r5
 8008238:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800823c:	e7e8      	b.n	8008210 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800823e:	2000      	movs	r0, #0
 8008240:	e7f4      	b.n	800822c <xQueueGenericSendFromISR+0xbc>

08008242 <xQueueGiveFromISR>:
{
 8008242:	b570      	push	{r4, r5, r6, lr}
 8008244:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008246:	4604      	mov	r4, r0
 8008248:	b950      	cbnz	r0, 8008260 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	b672      	cpsid	i
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	b662      	cpsie	i
 800825e:	e7fe      	b.n	800825e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008260:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008262:	b153      	cbz	r3, 800827a <xQueueGiveFromISR+0x38>
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	b672      	cpsid	i
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	b662      	cpsie	i
 8008278:	e7fe      	b.n	8008278 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800827a:	6803      	ldr	r3, [r0, #0]
 800827c:	b963      	cbnz	r3, 8008298 <xQueueGiveFromISR+0x56>
 800827e:	6883      	ldr	r3, [r0, #8]
 8008280:	b153      	cbz	r3, 8008298 <xQueueGiveFromISR+0x56>
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	b672      	cpsid	i
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	b662      	cpsie	i
 8008296:	e7fe      	b.n	8008296 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008298:	f7ff fc8c 	bl	8007bb4 <vPortValidateInterruptPriority>
	__asm volatile
 800829c:	f3ef 8611 	mrs	r6, BASEPRI
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	b672      	cpsid	i
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80082b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d91c      	bls.n	80082f6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80082bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082c0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80082c2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80082c4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082c6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80082c8:	d110      	bne.n	80082ec <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082cc:	b90b      	cbnz	r3, 80082d2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80082ce:	2001      	movs	r0, #1
 80082d0:	e009      	b.n	80082e6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082d6:	f000 fe5f 	bl	8008f98 <xTaskRemoveFromEventList>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d0f7      	beq.n	80082ce <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80082de:	2d00      	cmp	r5, #0
 80082e0:	d0f5      	beq.n	80082ce <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082e2:	2001      	movs	r0, #1
 80082e4:	6028      	str	r0, [r5, #0]
	__asm volatile
 80082e6:	f386 8811 	msr	BASEPRI, r6
}
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082ec:	3301      	adds	r3, #1
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082f4:	e7eb      	b.n	80082ce <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80082f6:	2000      	movs	r0, #0
 80082f8:	e7f5      	b.n	80082e6 <xQueueGiveFromISR+0xa4>

080082fa <xQueueReceive>:
{
 80082fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80082fe:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008300:	4604      	mov	r4, r0
{
 8008302:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008304:	b950      	cbnz	r0, 800831c <xQueueReceive+0x22>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	b672      	cpsid	i
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	b662      	cpsie	i
 800831a:	e7fe      	b.n	800831a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800831c:	b961      	cbnz	r1, 8008338 <xQueueReceive+0x3e>
 800831e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008320:	b153      	cbz	r3, 8008338 <xQueueReceive+0x3e>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	e7fe      	b.n	8008336 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008338:	f000 fecc 	bl	80090d4 <xTaskGetSchedulerState>
 800833c:	4606      	mov	r6, r0
 800833e:	b960      	cbnz	r0, 800835a <xQueueReceive+0x60>
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	b15b      	cbz	r3, 800835c <xQueueReceive+0x62>
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	b672      	cpsid	i
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	b662      	cpsie	i
 8008358:	e7fe      	b.n	8008358 <xQueueReceive+0x5e>
 800835a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800835c:	f04f 0800 	mov.w	r8, #0
 8008360:	e03d      	b.n	80083de <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008362:	9d01      	ldr	r5, [sp, #4]
 8008364:	b91d      	cbnz	r5, 800836e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8008366:	f7ff fb49 	bl	80079fc <vPortExitCritical>
				return errQUEUE_EMPTY;
 800836a:	2000      	movs	r0, #0
 800836c:	e056      	b.n	800841c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800836e:	b916      	cbnz	r6, 8008376 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008370:	a802      	add	r0, sp, #8
 8008372:	f000 fe57 	bl	8009024 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008376:	f7ff fb41 	bl	80079fc <vPortExitCritical>
		vTaskSuspendAll();
 800837a:	f000 fbdb 	bl	8008b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800837e:	f7ff fb19 	bl	80079b4 <vPortEnterCritical>
 8008382:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008386:	2bff      	cmp	r3, #255	; 0xff
 8008388:	d101      	bne.n	800838e <xQueueReceive+0x94>
 800838a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800838e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008392:	2bff      	cmp	r3, #255	; 0xff
 8008394:	d101      	bne.n	800839a <xQueueReceive+0xa0>
 8008396:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800839a:	f7ff fb2f 	bl	80079fc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800839e:	a901      	add	r1, sp, #4
 80083a0:	a802      	add	r0, sp, #8
 80083a2:	f000 fe4b 	bl	800903c <xTaskCheckForTimeOut>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d141      	bne.n	800842e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083aa:	4620      	mov	r0, r4
 80083ac:	f7ff fc34 	bl	8007c18 <prvIsQueueEmpty>
 80083b0:	b3b8      	cbz	r0, 8008422 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083b2:	9901      	ldr	r1, [sp, #4]
 80083b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083b8:	f000 fdb2 	bl	8008f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff fc80 	bl	8007cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c2:	f000 fc5d 	bl	8008c80 <xTaskResumeAll>
 80083c6:	b948      	cbnz	r0, 80083dc <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 80083c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80083de:	f7ff fae9 	bl	80079b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083e4:	2d00      	cmp	r5, #0
 80083e6:	d0bc      	beq.n	8008362 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083e8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083ea:	4639      	mov	r1, r7
 80083ec:	4620      	mov	r0, r4
 80083ee:	f7ff fc53 	bl	8007c98 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083f2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	b173      	cbz	r3, 8008416 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f8:	f104 0010 	add.w	r0, r4, #16
 80083fc:	f000 fdcc 	bl	8008f98 <xTaskRemoveFromEventList>
 8008400:	b148      	cbz	r0, 8008416 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8008402:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008416:	f7ff faf1 	bl	80079fc <vPortExitCritical>
				return pdPASS;
 800841a:	2001      	movs	r0, #1
}
 800841c:	b004      	add	sp, #16
 800841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008422:	4620      	mov	r0, r4
 8008424:	f7ff fc4d 	bl	8007cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008428:	f000 fc2a 	bl	8008c80 <xTaskResumeAll>
 800842c:	e7d6      	b.n	80083dc <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800842e:	4620      	mov	r0, r4
 8008430:	f7ff fc47 	bl	8007cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008434:	f000 fc24 	bl	8008c80 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008438:	4620      	mov	r0, r4
 800843a:	f7ff fbed 	bl	8007c18 <prvIsQueueEmpty>
 800843e:	2800      	cmp	r0, #0
 8008440:	d0cc      	beq.n	80083dc <xQueueReceive+0xe2>
 8008442:	e792      	b.n	800836a <xQueueReceive+0x70>

08008444 <xQueueSemaphoreTake>:
{
 8008444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008446:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008448:	4604      	mov	r4, r0
{
 800844a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800844c:	b950      	cbnz	r0, 8008464 <xQueueSemaphoreTake+0x20>
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	b672      	cpsid	i
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	b662      	cpsie	i
 8008462:	e7fe      	b.n	8008462 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008464:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008466:	b155      	cbz	r5, 800847e <xQueueSemaphoreTake+0x3a>
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	b672      	cpsid	i
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	b662      	cpsie	i
 800847c:	e7fe      	b.n	800847c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800847e:	f000 fe29 	bl	80090d4 <xTaskGetSchedulerState>
 8008482:	4606      	mov	r6, r0
 8008484:	b960      	cbnz	r0, 80084a0 <xQueueSemaphoreTake+0x5c>
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	b16b      	cbz	r3, 80084a6 <xQueueSemaphoreTake+0x62>
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	b672      	cpsid	i
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	b662      	cpsie	i
 800849e:	e7fe      	b.n	800849e <xQueueSemaphoreTake+0x5a>
 80084a0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80084a2:	2700      	movs	r7, #0
 80084a4:	e055      	b.n	8008552 <xQueueSemaphoreTake+0x10e>
 80084a6:	4605      	mov	r5, r0
 80084a8:	e7fb      	b.n	80084a2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80084aa:	9b01      	ldr	r3, [sp, #4]
 80084ac:	b973      	cbnz	r3, 80084cc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80084ae:	b155      	cbz	r5, 80084c6 <xQueueSemaphoreTake+0x82>
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	b672      	cpsid	i
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	b662      	cpsie	i
 80084c4:	e7fe      	b.n	80084c4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 80084c6:	f7ff fa99 	bl	80079fc <vPortExitCritical>
					return errQUEUE_EMPTY;
 80084ca:	e062      	b.n	8008592 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 80084cc:	b916      	cbnz	r6, 80084d4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084ce:	a802      	add	r0, sp, #8
 80084d0:	f000 fda8 	bl	8009024 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80084d4:	f7ff fa92 	bl	80079fc <vPortExitCritical>
		vTaskSuspendAll();
 80084d8:	f000 fb2c 	bl	8008b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084dc:	f7ff fa6a 	bl	80079b4 <vPortEnterCritical>
 80084e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80084e4:	2bff      	cmp	r3, #255	; 0xff
 80084e6:	d101      	bne.n	80084ec <xQueueSemaphoreTake+0xa8>
 80084e8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80084ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80084f0:	2bff      	cmp	r3, #255	; 0xff
 80084f2:	d101      	bne.n	80084f8 <xQueueSemaphoreTake+0xb4>
 80084f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084f8:	f7ff fa80 	bl	80079fc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fc:	a901      	add	r1, sp, #4
 80084fe:	a802      	add	r0, sp, #8
 8008500:	f000 fd9c 	bl	800903c <xTaskCheckForTimeOut>
 8008504:	2800      	cmp	r0, #0
 8008506:	d14d      	bne.n	80085a4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008508:	4620      	mov	r0, r4
 800850a:	f7ff fb85 	bl	8007c18 <prvIsQueueEmpty>
 800850e:	2800      	cmp	r0, #0
 8008510:	d042      	beq.n	8008598 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	b93b      	cbnz	r3, 8008526 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8008516:	f7ff fa4d 	bl	80079b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800851a:	68a0      	ldr	r0, [r4, #8]
 800851c:	f000 fdea 	bl	80090f4 <xTaskPriorityInherit>
 8008520:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008522:	f7ff fa6b 	bl	80079fc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008526:	9901      	ldr	r1, [sp, #4]
 8008528:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800852c:	f000 fcf8 	bl	8008f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008530:	4620      	mov	r0, r4
 8008532:	f7ff fbc6 	bl	8007cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008536:	f000 fba3 	bl	8008c80 <xTaskResumeAll>
 800853a:	b948      	cbnz	r0, 8008550 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800853c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008544:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008552:	f7ff fa2f 	bl	80079b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0a6      	beq.n	80084aa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800855c:	3b01      	subs	r3, #1
 800855e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	b913      	cbnz	r3, 800856a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008564:	f000 fea4 	bl	80092b0 <pvTaskIncrementMutexHeldCount>
 8008568:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	b173      	cbz	r3, 800858c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856e:	f104 0010 	add.w	r0, r4, #16
 8008572:	f000 fd11 	bl	8008f98 <xTaskRemoveFromEventList>
 8008576:	b148      	cbz	r0, 800858c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8008578:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800857c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008580:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800858c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800858e:	f7ff fa35 	bl	80079fc <vPortExitCritical>
}
 8008592:	4628      	mov	r0, r5
 8008594:	b005      	add	sp, #20
 8008596:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8008598:	4620      	mov	r0, r4
 800859a:	f7ff fb92 	bl	8007cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800859e:	f000 fb6f 	bl	8008c80 <xTaskResumeAll>
 80085a2:	e7d5      	b.n	8008550 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff fb8c 	bl	8007cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085aa:	f000 fb69 	bl	8008c80 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7ff fb32 	bl	8007c18 <prvIsQueueEmpty>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d0cb      	beq.n	8008550 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 80085b8:	2d00      	cmp	r5, #0
 80085ba:	d0ea      	beq.n	8008592 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 80085bc:	f7ff f9fa 	bl	80079b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085c2:	b119      	cbz	r1, 80085cc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80085c6:	6819      	ldr	r1, [r3, #0]
 80085c8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80085cc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80085ce:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80085d0:	f000 fe18 	bl	8009204 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80085d4:	f7ff fa12 	bl	80079fc <vPortExitCritical>
 80085d8:	e7db      	b.n	8008592 <xQueueSemaphoreTake+0x14e>

080085da <xQueueTakeMutexRecursive>:
	{
 80085da:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 80085dc:	4604      	mov	r4, r0
 80085de:	b950      	cbnz	r0, 80085f6 <xQueueTakeMutexRecursive+0x1c>
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	b672      	cpsid	i
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	b662      	cpsie	i
 80085f4:	e7fe      	b.n	80085f4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80085f6:	6885      	ldr	r5, [r0, #8]
 80085f8:	9101      	str	r1, [sp, #4]
 80085fa:	f000 fd65 	bl	80090c8 <xTaskGetCurrentTaskHandle>
 80085fe:	4285      	cmp	r5, r0
 8008600:	9901      	ldr	r1, [sp, #4]
 8008602:	d105      	bne.n	8008610 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008604:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8008606:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008608:	3301      	adds	r3, #1
 800860a:	60e3      	str	r3, [r4, #12]
	}
 800860c:	b003      	add	sp, #12
 800860e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008610:	4620      	mov	r0, r4
 8008612:	f7ff ff17 	bl	8008444 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8008616:	2800      	cmp	r0, #0
 8008618:	d0f8      	beq.n	800860c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800861a:	68e3      	ldr	r3, [r4, #12]
 800861c:	3301      	adds	r3, #1
 800861e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8008620:	e7f4      	b.n	800860c <xQueueTakeMutexRecursive+0x32>

08008622 <xQueueReceiveFromISR>:
{
 8008622:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008626:	4689      	mov	r9, r1
 8008628:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800862a:	4605      	mov	r5, r0
 800862c:	b950      	cbnz	r0, 8008644 <xQueueReceiveFromISR+0x22>
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	b672      	cpsid	i
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	b662      	cpsie	i
 8008642:	e7fe      	b.n	8008642 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008644:	b961      	cbnz	r1, 8008660 <xQueueReceiveFromISR+0x3e>
 8008646:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008648:	b153      	cbz	r3, 8008660 <xQueueReceiveFromISR+0x3e>
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	b672      	cpsid	i
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	b662      	cpsie	i
 800865e:	e7fe      	b.n	800865e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008660:	f7ff faa8 	bl	8007bb4 <vPortValidateInterruptPriority>
	__asm volatile
 8008664:	f3ef 8711 	mrs	r7, BASEPRI
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	b672      	cpsid	i
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800867c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800867e:	b31c      	cbz	r4, 80086c8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008680:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008684:	4649      	mov	r1, r9
 8008686:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008688:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800868a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800868c:	f7ff fb04 	bl	8007c98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008690:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008692:	1c73      	adds	r3, r6, #1
 8008694:	d113      	bne.n	80086be <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008696:	692b      	ldr	r3, [r5, #16]
 8008698:	b90b      	cbnz	r3, 800869e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800869a:	2001      	movs	r0, #1
 800869c:	e00b      	b.n	80086b6 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800869e:	f105 0010 	add.w	r0, r5, #16
 80086a2:	f000 fc79 	bl	8008f98 <xTaskRemoveFromEventList>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d0f7      	beq.n	800869a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 80086aa:	f1b8 0f00 	cmp.w	r8, #0
 80086ae:	d0f4      	beq.n	800869a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80086b0:	2001      	movs	r0, #1
 80086b2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80086b6:	f387 8811 	msr	BASEPRI, r7
}
 80086ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80086be:	3601      	adds	r6, #1
 80086c0:	b276      	sxtb	r6, r6
 80086c2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80086c6:	e7e8      	b.n	800869a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 80086c8:	4620      	mov	r0, r4
 80086ca:	e7f4      	b.n	80086b6 <xQueueReceiveFromISR+0x94>

080086cc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086cc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086ce:	4a07      	ldr	r2, [pc, #28]	; (80086ec <vQueueAddToRegistry+0x20>)
	{
 80086d0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80086d6:	b92c      	cbnz	r4, 80086e4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086e0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086e2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086e4:	3301      	adds	r3, #1
 80086e6:	2b08      	cmp	r3, #8
 80086e8:	d1f3      	bne.n	80086d2 <vQueueAddToRegistry+0x6>
 80086ea:	e7fa      	b.n	80086e2 <vQueueAddToRegistry+0x16>
 80086ec:	20016814 	.word	0x20016814

080086f0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086f0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80086f2:	4a08      	ldr	r2, [pc, #32]	; (8008714 <vQueueUnregisterQueue+0x24>)
	{
 80086f4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80086f6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80086fa:	684c      	ldr	r4, [r1, #4]
 80086fc:	4284      	cmp	r4, r0
 80086fe:	d104      	bne.n	800870a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008700:	2000      	movs	r0, #0
 8008702:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008706:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008708:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800870a:	3301      	adds	r3, #1
 800870c:	2b08      	cmp	r3, #8
 800870e:	d1f2      	bne.n	80086f6 <vQueueUnregisterQueue+0x6>
 8008710:	e7fa      	b.n	8008708 <vQueueUnregisterQueue+0x18>
 8008712:	bf00      	nop
 8008714:	20016814 	.word	0x20016814

08008718 <vQueueDelete>:
{
 8008718:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800871a:	4604      	mov	r4, r0
 800871c:	b950      	cbnz	r0, 8008734 <vQueueDelete+0x1c>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	b672      	cpsid	i
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	b662      	cpsie	i
 8008732:	e7fe      	b.n	8008732 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8008734:	f7ff ffdc 	bl	80086f0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008738:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800873c:	b923      	cbnz	r3, 8008748 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800873e:	4620      	mov	r0, r4
}
 8008740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008744:	f7ff b850 	b.w	80077e8 <vPortFree>
}
 8008748:	bd10      	pop	{r4, pc}

0800874a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800874a:	b570      	push	{r4, r5, r6, lr}
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008752:	f7ff f92f 	bl	80079b4 <vPortEnterCritical>
 8008756:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800875a:	2bff      	cmp	r3, #255	; 0xff
 800875c:	d102      	bne.n	8008764 <vQueueWaitForMessageRestricted+0x1a>
 800875e:	2300      	movs	r3, #0
 8008760:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008764:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008768:	2bff      	cmp	r3, #255	; 0xff
 800876a:	d102      	bne.n	8008772 <vQueueWaitForMessageRestricted+0x28>
 800876c:	2300      	movs	r3, #0
 800876e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008772:	f7ff f943 	bl	80079fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008778:	b92b      	cbnz	r3, 8008786 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800877a:	4632      	mov	r2, r6
 800877c:	4629      	mov	r1, r5
 800877e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008782:	f000 fbe9 	bl	8008f58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008786:	4620      	mov	r0, r4
	}
 8008788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800878c:	f7ff ba99 	b.w	8007cc2 <prvUnlockQueue>

08008790 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008794:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008796:	f7ff f90d 	bl	80079b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800879a:	4b2f      	ldr	r3, [pc, #188]	; (8008858 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800879c:	4e2f      	ldr	r6, [pc, #188]	; (800885c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4f2f      	ldr	r7, [pc, #188]	; (8008860 <prvAddNewTaskToReadyList+0xd0>)
 80087a2:	3201      	adds	r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80087a6:	6835      	ldr	r5, [r6, #0]
 80087a8:	2d00      	cmp	r5, #0
 80087aa:	d14a      	bne.n	8008842 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087ac:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d11f      	bne.n	80087f4 <prvAddNewTaskToReadyList+0x64>
 80087b4:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087b6:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087b8:	4640      	mov	r0, r8
 80087ba:	f7ff f851 	bl	8007860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087be:	f108 0814 	add.w	r8, r8, #20
 80087c2:	2d38      	cmp	r5, #56	; 0x38
 80087c4:	d1f7      	bne.n	80087b6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087c6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008888 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80087ca:	4d26      	ldr	r5, [pc, #152]	; (8008864 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80087cc:	4640      	mov	r0, r8
 80087ce:	f7ff f847 	bl	8007860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087d2:	4628      	mov	r0, r5
 80087d4:	f7ff f844 	bl	8007860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087d8:	4823      	ldr	r0, [pc, #140]	; (8008868 <prvAddNewTaskToReadyList+0xd8>)
 80087da:	f7ff f841 	bl	8007860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087de:	4823      	ldr	r0, [pc, #140]	; (800886c <prvAddNewTaskToReadyList+0xdc>)
 80087e0:	f7ff f83e 	bl	8007860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087e4:	4822      	ldr	r0, [pc, #136]	; (8008870 <prvAddNewTaskToReadyList+0xe0>)
 80087e6:	f7ff f83b 	bl	8007860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087ea:	4b22      	ldr	r3, [pc, #136]	; (8008874 <prvAddNewTaskToReadyList+0xe4>)
 80087ec:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087f0:	4b21      	ldr	r3, [pc, #132]	; (8008878 <prvAddNewTaskToReadyList+0xe8>)
 80087f2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80087f4:	4a21      	ldr	r2, [pc, #132]	; (800887c <prvAddNewTaskToReadyList+0xec>)
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80087fc:	4a20      	ldr	r2, [pc, #128]	; (8008880 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087fe:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008800:	6811      	ldr	r1, [r2, #0]
 8008802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008804:	428b      	cmp	r3, r1
 8008806:	d900      	bls.n	800880a <prvAddNewTaskToReadyList+0x7a>
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	2014      	movs	r0, #20
 800880c:	1d21      	adds	r1, r4, #4
 800880e:	fb00 7003 	mla	r0, r0, r3, r7
 8008812:	f7ff f833 	bl	800787c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008816:	f7ff f8f1 	bl	80079fc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800881a:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <prvAddNewTaskToReadyList+0xf4>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	b173      	cbz	r3, 800883e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008820:	6833      	ldr	r3, [r6, #0]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008826:	429a      	cmp	r2, r3
 8008828:	d209      	bcs.n	800883e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800882a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
}
 800883e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <prvAddNewTaskToReadyList+0xf4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1d4      	bne.n	80087f4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800884a:	6833      	ldr	r3, [r6, #0]
 800884c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008850:	429a      	cmp	r2, r3
 8008852:	d8cf      	bhi.n	80087f4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008854:	6034      	str	r4, [r6, #0]
 8008856:	e7cd      	b.n	80087f4 <prvAddNewTaskToReadyList+0x64>
 8008858:	20016cc0 	.word	0x20016cc0
 800885c:	20016854 	.word	0x20016854
 8008860:	20016860 	.word	0x20016860
 8008864:	20016cec 	.word	0x20016cec
 8008868:	20016d08 	.word	0x20016d08
 800886c:	20016d34 	.word	0x20016d34
 8008870:	20016d20 	.word	0x20016d20
 8008874:	20016858 	.word	0x20016858
 8008878:	2001685c 	.word	0x2001685c
 800887c:	20016cd0 	.word	0x20016cd0
 8008880:	20016cd4 	.word	0x20016cd4
 8008884:	20016d1c 	.word	0x20016d1c
 8008888:	20016cd8 	.word	0x20016cd8

0800888c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800888e:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008890:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008892:	4e15      	ldr	r6, [pc, #84]	; (80088e8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008894:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008896:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008898:	6830      	ldr	r0, [r6, #0]
 800889a:	3004      	adds	r0, #4
 800889c:	f7ff f811 	bl	80078c2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088a0:	1c63      	adds	r3, r4, #1
 80088a2:	d107      	bne.n	80088b4 <prvAddCurrentTaskToDelayedList+0x28>
 80088a4:	b137      	cbz	r7, 80088b4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a6:	6831      	ldr	r1, [r6, #0]
 80088a8:	4810      	ldr	r0, [pc, #64]	; (80088ec <prvAddCurrentTaskToDelayedList+0x60>)
 80088aa:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088b0:	f7fe bfe4 	b.w	800787c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088b4:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088b6:	6833      	ldr	r3, [r6, #0]
 80088b8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088ba:	d307      	bcc.n	80088cc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088bc:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <prvAddCurrentTaskToDelayedList+0x64>)
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	6831      	ldr	r1, [r6, #0]
}
 80088c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088c6:	3104      	adds	r1, #4
 80088c8:	f7fe bfe4 	b.w	8007894 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <prvAddCurrentTaskToDelayedList+0x68>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	6831      	ldr	r1, [r6, #0]
 80088d2:	3104      	adds	r1, #4
 80088d4:	f7fe ffde 	bl	8007894 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088d8:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <prvAddCurrentTaskToDelayedList+0x6c>)
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	42a2      	cmp	r2, r4
 80088de:	d900      	bls.n	80088e2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80088e0:	601c      	str	r4, [r3, #0]
}
 80088e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e4:	20016d48 	.word	0x20016d48
 80088e8:	20016854 	.word	0x20016854
 80088ec:	20016d20 	.word	0x20016d20
 80088f0:	2001685c 	.word	0x2001685c
 80088f4:	20016858 	.word	0x20016858
 80088f8:	20016d00 	.word	0x20016d00

080088fc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fc:	4a06      	ldr	r2, [pc, #24]	; (8008918 <prvResetNextTaskUnblockTime+0x1c>)
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	6819      	ldr	r1, [r3, #0]
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <prvResetNextTaskUnblockTime+0x20>)
 8008904:	b919      	cbnz	r1, 800890e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800890a:	601a      	str	r2, [r3, #0]
}
 800890c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800890e:	6812      	ldr	r2, [r2, #0]
 8008910:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008912:	68d2      	ldr	r2, [r2, #12]
 8008914:	6852      	ldr	r2, [r2, #4]
 8008916:	e7f8      	b.n	800890a <prvResetNextTaskUnblockTime+0xe>
 8008918:	20016858 	.word	0x20016858
 800891c:	20016d00 	.word	0x20016d00

08008920 <prvDeleteTCB>:
	{
 8008920:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008922:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008926:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008928:	b93b      	cbnz	r3, 800893a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800892a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800892c:	f7fe ff5c 	bl	80077e8 <vPortFree>
				vPortFree( pxTCB );
 8008930:	4620      	mov	r0, r4
	}
 8008932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008936:	f7fe bf57 	b.w	80077e8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800893a:	2b01      	cmp	r3, #1
 800893c:	d0f9      	beq.n	8008932 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800893e:	2b02      	cmp	r3, #2
 8008940:	d00a      	beq.n	8008958 <prvDeleteTCB+0x38>
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	b672      	cpsid	i
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	b662      	cpsie	i
 8008956:	e7fe      	b.n	8008956 <prvDeleteTCB+0x36>
	}
 8008958:	bd10      	pop	{r4, pc}
	...

0800895c <prvIdleTask>:
{
 800895c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800895e:	4c14      	ldr	r4, [pc, #80]	; (80089b0 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008960:	4f14      	ldr	r7, [pc, #80]	; (80089b4 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8008962:	4d15      	ldr	r5, [pc, #84]	; (80089b8 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	b983      	cbnz	r3, 800898a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008968:	4b14      	ldr	r3, [pc, #80]	; (80089bc <prvIdleTask+0x60>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d909      	bls.n	8008984 <prvIdleTask+0x28>
				taskYIELD();
 8008970:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008978:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8008984:	f7f8 fa34 	bl	8000df0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008988:	e7eb      	b.n	8008962 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800898a:	f7ff f813 	bl	80079b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008992:	1d30      	adds	r0, r6, #4
 8008994:	f7fe ff95 	bl	80078c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	3b01      	subs	r3, #1
 800899c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80089a4:	f7ff f82a 	bl	80079fc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff ffb9 	bl	8008920 <prvDeleteTCB>
 80089ae:	e7d9      	b.n	8008964 <prvIdleTask+0x8>
 80089b0:	20016cc4 	.word	0x20016cc4
 80089b4:	20016d34 	.word	0x20016d34
 80089b8:	20016cc0 	.word	0x20016cc0
 80089bc:	20016860 	.word	0x20016860

080089c0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089c4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80089c8:	4606      	mov	r6, r0
 80089ca:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089cc:	21a5      	movs	r1, #165	; 0xa5
 80089ce:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80089d0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089d2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80089d6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80089dc:	f022 fd5c 	bl	802b498 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80089e2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089e4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80089e8:	b3b5      	cbz	r5, 8008a58 <prvInitialiseNewTask.constprop.0+0x98>
 80089ea:	1e6b      	subs	r3, r5, #1
 80089ec:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80089f0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089f2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80089f6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80089fa:	b108      	cbz	r0, 8008a00 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	d1f8      	bne.n	80089f2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a00:	2300      	movs	r3, #0
 8008a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a06:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008a08:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a0c:	1d20      	adds	r0, r4, #4
 8008a0e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008a10:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008a14:	bf28      	it	cs
 8008a16:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008a18:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008a1a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a1c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a20:	f7fe ff29 	bl	8007876 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a24:	f104 0018 	add.w	r0, r4, #24
 8008a28:	f7fe ff25 	bl	8007876 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008a2c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a30:	463a      	mov	r2, r7
 8008a32:	4631      	mov	r1, r6
 8008a34:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a36:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a38:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a3a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008a3c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a40:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a44:	f7fe ff90 	bl	8007968 <pxPortInitialiseStack>
 8008a48:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008a4a:	f1b8 0f00 	cmp.w	r8, #0
 8008a4e:	d001      	beq.n	8008a54 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a50:	f8c8 4000 	str.w	r4, [r8]
}
 8008a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a58:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008a5c:	e7d3      	b.n	8008a06 <prvInitialiseNewTask.constprop.0+0x46>

08008a5e <xTaskCreateStatic>:
	{
 8008a5e:	b570      	push	{r4, r5, r6, lr}
 8008a60:	b086      	sub	sp, #24
 8008a62:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008a66:	b955      	cbnz	r5, 8008a7e <xTaskCreateStatic+0x20>
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	b672      	cpsid	i
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	b662      	cpsie	i
 8008a7c:	e7fe      	b.n	8008a7c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008a7e:	b954      	cbnz	r4, 8008a96 <xTaskCreateStatic+0x38>
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	b672      	cpsid	i
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	b662      	cpsie	i
 8008a94:	e7fe      	b.n	8008a94 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a96:	2660      	movs	r6, #96	; 0x60
 8008a98:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a9a:	9e05      	ldr	r6, [sp, #20]
 8008a9c:	2e60      	cmp	r6, #96	; 0x60
 8008a9e:	d00a      	beq.n	8008ab6 <xTaskCreateStatic+0x58>
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	b672      	cpsid	i
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	b662      	cpsie	i
 8008ab4:	e7fe      	b.n	8008ab4 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ab6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ab8:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aba:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008abc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ac0:	ad04      	add	r5, sp, #16
 8008ac2:	9402      	str	r4, [sp, #8]
 8008ac4:	9501      	str	r5, [sp, #4]
 8008ac6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008ac8:	9500      	str	r5, [sp, #0]
 8008aca:	f7ff ff79 	bl	80089c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7ff fe5e 	bl	8008790 <prvAddNewTaskToReadyList>
	}
 8008ad4:	9804      	ldr	r0, [sp, #16]
 8008ad6:	b006      	add	sp, #24
 8008ad8:	bd70      	pop	{r4, r5, r6, pc}

08008ada <xTaskCreate>:
	{
 8008ada:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ade:	4607      	mov	r7, r0
 8008ae0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ae2:	0090      	lsls	r0, r2, #2
	{
 8008ae4:	4688      	mov	r8, r1
 8008ae6:	4616      	mov	r6, r2
 8008ae8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008aea:	f7fe fde7 	bl	80076bc <pvPortMalloc>
			if( pxStack != NULL )
 8008aee:	4605      	mov	r5, r0
 8008af0:	b1e8      	cbz	r0, 8008b2e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008af2:	2060      	movs	r0, #96	; 0x60
 8008af4:	f7fe fde2 	bl	80076bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008af8:	4604      	mov	r4, r0
 8008afa:	b1a8      	cbz	r0, 8008b28 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008afc:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008afe:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b00:	4632      	mov	r2, r6
 8008b02:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b04:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0a:	9002      	str	r0, [sp, #8]
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	464b      	mov	r3, r9
 8008b16:	f7ff ff53 	bl	80089c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7ff fe38 	bl	8008790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b20:	2001      	movs	r0, #1
	}
 8008b22:	b005      	add	sp, #20
 8008b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7fe fe5d 	bl	80077e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008b32:	e7f6      	b.n	8008b22 <xTaskCreate+0x48>

08008b34 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008b34:	4a02      	ldr	r2, [pc, #8]	; (8008b40 <vTaskSuspendAll+0xc>)
 8008b36:	6813      	ldr	r3, [r2, #0]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	6013      	str	r3, [r2, #0]
}
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20016ccc 	.word	0x20016ccc

08008b44 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008b44:	4b01      	ldr	r3, [pc, #4]	; (8008b4c <xTaskGetTickCount+0x8>)
 8008b46:	6818      	ldr	r0, [r3, #0]
}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20016d48 	.word	0x20016d48

08008b50 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b50:	4b40      	ldr	r3, [pc, #256]	; (8008c54 <xTaskIncrementTick+0x104>)
 8008b52:	681b      	ldr	r3, [r3, #0]
{
 8008b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d174      	bne.n	8008c46 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b5c:	4b3e      	ldr	r3, [pc, #248]	; (8008c58 <xTaskIncrementTick+0x108>)
 8008b5e:	681d      	ldr	r5, [r3, #0]
 8008b60:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008b62:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b64:	b9cd      	cbnz	r5, 8008b9a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008b66:	4b3d      	ldr	r3, [pc, #244]	; (8008c5c <xTaskIncrementTick+0x10c>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	b152      	cbz	r2, 8008b84 <xTaskIncrementTick+0x34>
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	b672      	cpsid	i
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	b662      	cpsie	i
 8008b82:	e7fe      	b.n	8008b82 <xTaskIncrementTick+0x32>
 8008b84:	4a36      	ldr	r2, [pc, #216]	; (8008c60 <xTaskIncrementTick+0x110>)
 8008b86:	6819      	ldr	r1, [r3, #0]
 8008b88:	6810      	ldr	r0, [r2, #0]
 8008b8a:	6018      	str	r0, [r3, #0]
 8008b8c:	6011      	str	r1, [r2, #0]
 8008b8e:	4a35      	ldr	r2, [pc, #212]	; (8008c64 <xTaskIncrementTick+0x114>)
 8008b90:	6813      	ldr	r3, [r2, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	f7ff feb1 	bl	80088fc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b9a:	4e33      	ldr	r6, [pc, #204]	; (8008c68 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008b9c:	2400      	movs	r4, #0
 8008b9e:	4f33      	ldr	r7, [pc, #204]	; (8008c6c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ba0:	6833      	ldr	r3, [r6, #0]
 8008ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008c78 <xTaskIncrementTick+0x128>
 8008ba6:	42ab      	cmp	r3, r5
 8008ba8:	d911      	bls.n	8008bce <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008baa:	f8d8 3000 	ldr.w	r3, [r8]
 8008bae:	2214      	movs	r2, #20
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	4353      	muls	r3, r2
 8008bb4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	bf28      	it	cs
 8008bba:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008bbc:	4b2c      	ldr	r3, [pc, #176]	; (8008c70 <xTaskIncrementTick+0x120>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008bc0:	2b00      	cmp	r3, #0
}
 8008bc2:	bf0c      	ite	eq
 8008bc4:	4620      	moveq	r0, r4
 8008bc6:	2001      	movne	r0, #1
 8008bc8:	b003      	add	sp, #12
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008c5c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008bd2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008c7c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bd6:	f8d9 3000 	ldr.w	r3, [r9]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	b91b      	cbnz	r3, 8008be6 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bde:	f04f 33ff 	mov.w	r3, #4294967295
 8008be2:	6033      	str	r3, [r6, #0]
					break;
 8008be4:	e7e1      	b.n	8008baa <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be6:	f8d9 3000 	ldr.w	r3, [r9]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bf0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008bf4:	4295      	cmp	r5, r2
 8008bf6:	d201      	bcs.n	8008bfc <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008bf8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008bfa:	e7d6      	b.n	8008baa <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bfc:	f10b 0104 	add.w	r1, fp, #4
 8008c00:	4608      	mov	r0, r1
 8008c02:	9101      	str	r1, [sp, #4]
 8008c04:	f7fe fe5d 	bl	80078c2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c08:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008c0c:	9901      	ldr	r1, [sp, #4]
 8008c0e:	b122      	cbz	r2, 8008c1a <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c10:	f10b 0018 	add.w	r0, fp, #24
 8008c14:	f7fe fe55 	bl	80078c2 <uxListRemove>
 8008c18:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008c1a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008c1e:	f8da 2000 	ldr.w	r2, [sl]
 8008c22:	4290      	cmp	r0, r2
 8008c24:	d901      	bls.n	8008c2a <xTaskIncrementTick+0xda>
 8008c26:	f8ca 0000 	str.w	r0, [sl]
 8008c2a:	2314      	movs	r3, #20
 8008c2c:	fb03 7000 	mla	r0, r3, r0, r7
 8008c30:	f7fe fe24 	bl	800787c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c34:	f8d8 1000 	ldr.w	r1, [r8]
 8008c38:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008c3c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	bf28      	it	cs
 8008c42:	2401      	movcs	r4, #1
 8008c44:	e7c7      	b.n	8008bd6 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8008c46:	4a0b      	ldr	r2, [pc, #44]	; (8008c74 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8008c48:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008c4a:	6813      	ldr	r3, [r2, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	e7b4      	b.n	8008bbc <xTaskIncrementTick+0x6c>
 8008c52:	bf00      	nop
 8008c54:	20016ccc 	.word	0x20016ccc
 8008c58:	20016d48 	.word	0x20016d48
 8008c5c:	20016858 	.word	0x20016858
 8008c60:	2001685c 	.word	0x2001685c
 8008c64:	20016d04 	.word	0x20016d04
 8008c68:	20016d00 	.word	0x20016d00
 8008c6c:	20016860 	.word	0x20016860
 8008c70:	20016d4c 	.word	0x20016d4c
 8008c74:	20016cc8 	.word	0x20016cc8
 8008c78:	20016854 	.word	0x20016854
 8008c7c:	20016cd4 	.word	0x20016cd4

08008c80 <xTaskResumeAll>:
{
 8008c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8008c82:	4c32      	ldr	r4, [pc, #200]	; (8008d4c <xTaskResumeAll+0xcc>)
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	b953      	cbnz	r3, 8008c9e <xTaskResumeAll+0x1e>
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	b672      	cpsid	i
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	b662      	cpsie	i
 8008c9c:	e7fe      	b.n	8008c9c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8008c9e:	f7fe fe89 	bl	80079b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca8:	6824      	ldr	r4, [r4, #0]
 8008caa:	b12c      	cbz	r4, 8008cb8 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8008cac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008cae:	f7fe fea5 	bl	80079fc <vPortExitCritical>
}
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	b003      	add	sp, #12
 8008cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cb8:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <xTaskResumeAll+0xd0>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0f5      	beq.n	8008cac <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cc0:	4d24      	ldr	r5, [pc, #144]	; (8008d54 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008cc2:	4e25      	ldr	r6, [pc, #148]	; (8008d58 <xTaskResumeAll+0xd8>)
 8008cc4:	4f25      	ldr	r7, [pc, #148]	; (8008d5c <xTaskResumeAll+0xdc>)
 8008cc6:	e01e      	b.n	8008d06 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc8:	68eb      	ldr	r3, [r5, #12]
 8008cca:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ccc:	f104 0018 	add.w	r0, r4, #24
 8008cd0:	f7fe fdf7 	bl	80078c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cd4:	1d21      	adds	r1, r4, #4
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	9101      	str	r1, [sp, #4]
 8008cda:	f7fe fdf2 	bl	80078c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ce0:	6832      	ldr	r2, [r6, #0]
 8008ce2:	9901      	ldr	r1, [sp, #4]
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d900      	bls.n	8008cea <xTaskResumeAll+0x6a>
 8008ce8:	6033      	str	r3, [r6, #0]
 8008cea:	2014      	movs	r0, #20
 8008cec:	fb00 7003 	mla	r0, r0, r3, r7
 8008cf0:	f7fe fdc4 	bl	800787c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <xTaskResumeAll+0xe0>)
 8008cf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d302      	bcc.n	8008d06 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 8008d00:	4b18      	ldr	r3, [pc, #96]	; (8008d64 <xTaskResumeAll+0xe4>)
 8008d02:	2201      	movs	r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1dd      	bne.n	8008cc8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008d0c:	b10c      	cbz	r4, 8008d12 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8008d0e:	f7ff fdf5 	bl	80088fc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008d12:	4d15      	ldr	r5, [pc, #84]	; (8008d68 <xTaskResumeAll+0xe8>)
 8008d14:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008d16:	b144      	cbz	r4, 8008d2a <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 8008d18:	4e12      	ldr	r6, [pc, #72]	; (8008d64 <xTaskResumeAll+0xe4>)
 8008d1a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008d1c:	f7ff ff18 	bl	8008b50 <xTaskIncrementTick>
 8008d20:	b100      	cbz	r0, 8008d24 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8008d22:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d24:	3c01      	subs	r4, #1
 8008d26:	d1f9      	bne.n	8008d1c <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8008d28:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <xTaskResumeAll+0xe4>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0bc      	beq.n	8008cac <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 8008d32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008d46:	2401      	movs	r4, #1
 8008d48:	e7b1      	b.n	8008cae <xTaskResumeAll+0x2e>
 8008d4a:	bf00      	nop
 8008d4c:	20016ccc 	.word	0x20016ccc
 8008d50:	20016cc0 	.word	0x20016cc0
 8008d54:	20016d08 	.word	0x20016d08
 8008d58:	20016cd4 	.word	0x20016cd4
 8008d5c:	20016860 	.word	0x20016860
 8008d60:	20016854 	.word	0x20016854
 8008d64:	20016d4c 	.word	0x20016d4c
 8008d68:	20016cc8 	.word	0x20016cc8

08008d6c <vTaskDelay>:
	{
 8008d6c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d6e:	b950      	cbnz	r0, 8008d86 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008d70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	f3bf 8f6f 	isb	sy
	}
 8008d84:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <vTaskDelay+0x48>)
 8008d88:	6819      	ldr	r1, [r3, #0]
 8008d8a:	b151      	cbz	r1, 8008da2 <vTaskDelay+0x36>
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	b672      	cpsid	i
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	b662      	cpsie	i
 8008da0:	e7fe      	b.n	8008da0 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8008da2:	f7ff fec7 	bl	8008b34 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008da6:	f7ff fd71 	bl	800888c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008daa:	f7ff ff69 	bl	8008c80 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d0de      	beq.n	8008d70 <vTaskDelay+0x4>
 8008db2:	e7e7      	b.n	8008d84 <vTaskDelay+0x18>
 8008db4:	20016ccc 	.word	0x20016ccc

08008db8 <vTaskSetApplicationTaskTag>:
	{
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	460d      	mov	r5, r1
		if( xTask == NULL )
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	b908      	cbnz	r0, 8008dc4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8008dc0:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <vTaskSetApplicationTaskTag+0x1c>)
 8008dc2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8008dc4:	f7fe fdf6 	bl	80079b4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8008dc8:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8008dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8008dce:	f7fe be15 	b.w	80079fc <vPortExitCritical>
 8008dd2:	bf00      	nop
 8008dd4:	20016854 	.word	0x20016854

08008dd8 <xTaskCallApplicationTaskHook>:
	{
 8008dd8:	4603      	mov	r3, r0
 8008dda:	4608      	mov	r0, r1
		if( xTask == NULL )
 8008ddc:	b90b      	cbnz	r3, 8008de2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8008dde:	4b03      	ldr	r3, [pc, #12]	; (8008dec <xTaskCallApplicationTaskHook+0x14>)
 8008de0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8008de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de4:	b103      	cbz	r3, 8008de8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8008de6:	4718      	bx	r3
	}
 8008de8:	4618      	mov	r0, r3
 8008dea:	4770      	bx	lr
 8008dec:	20016854 	.word	0x20016854

08008df0 <vTaskStartScheduler>:
{
 8008df0:	b510      	push	{r4, lr}
 8008df2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008df4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008df6:	aa07      	add	r2, sp, #28
 8008df8:	a906      	add	r1, sp, #24
 8008dfa:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dfc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e00:	f7fe fc20 	bl	8007644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e04:	9b05      	ldr	r3, [sp, #20]
 8008e06:	9a07      	ldr	r2, [sp, #28]
 8008e08:	9302      	str	r3, [sp, #8]
 8008e0a:	9b06      	ldr	r3, [sp, #24]
 8008e0c:	491b      	ldr	r1, [pc, #108]	; (8008e7c <vTaskStartScheduler+0x8c>)
 8008e0e:	481c      	ldr	r0, [pc, #112]	; (8008e80 <vTaskStartScheduler+0x90>)
 8008e10:	e9cd 4300 	strd	r4, r3, [sp]
 8008e14:	4623      	mov	r3, r4
 8008e16:	f7ff fe22 	bl	8008a5e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008e1a:	b360      	cbz	r0, 8008e76 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 8008e1c:	f000 faa6 	bl	800936c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008e20:	2801      	cmp	r0, #1
 8008e22:	d11b      	bne.n	8008e5c <vTaskStartScheduler+0x6c>
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e38:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3c:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 8008e3e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <vTaskStartScheduler+0x98>)
 8008e44:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e46:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <vTaskStartScheduler+0x9c>)
 8008e48:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8008e4a:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <vTaskStartScheduler+0xa0>)
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	f7ff ffc3 	bl	8008dd8 <xTaskCallApplicationTaskHook>
}
 8008e52:	b008      	add	sp, #32
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008e58:	f7fe be46 	b.w	8007ae8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d10a      	bne.n	8008e76 <vTaskStartScheduler+0x86>
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	b672      	cpsid	i
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	b662      	cpsie	i
 8008e74:	e7fe      	b.n	8008e74 <vTaskStartScheduler+0x84>
}
 8008e76:	b008      	add	sp, #32
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0802ebf4 	.word	0x0802ebf4
 8008e80:	0800895d 	.word	0x0800895d
 8008e84:	20016d00 	.word	0x20016d00
 8008e88:	20016d1c 	.word	0x20016d1c
 8008e8c:	20016d48 	.word	0x20016d48
 8008e90:	20016854 	.word	0x20016854

08008e94 <vTaskSwitchContext>:
{
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e96:	4b1d      	ldr	r3, [pc, #116]	; (8008f0c <vTaskSwitchContext+0x78>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <vTaskSwitchContext+0x7c>)
 8008e9c:	b112      	cbz	r2, 8008ea4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
}
 8008ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8008ea4:	4c1b      	ldr	r4, [pc, #108]	; (8008f14 <vTaskSwitchContext+0x80>)
 8008ea6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea8:	4e1b      	ldr	r6, [pc, #108]	; (8008f18 <vTaskSwitchContext+0x84>)
 8008eaa:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8008eac:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	f7ff ff92 	bl	8008dd8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb4:	6832      	ldr	r2, [r6, #0]
 8008eb6:	4919      	ldr	r1, [pc, #100]	; (8008f1c <vTaskSwitchContext+0x88>)
 8008eb8:	fb07 f302 	mul.w	r3, r7, r2
 8008ebc:	58cd      	ldr	r5, [r1, r3]
 8008ebe:	18c8      	adds	r0, r1, r3
 8008ec0:	b1ad      	cbz	r5, 8008eee <vTaskSwitchContext+0x5a>
 8008ec2:	6845      	ldr	r5, [r0, #4]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	686d      	ldr	r5, [r5, #4]
 8008ec8:	440b      	add	r3, r1
 8008eca:	429d      	cmp	r5, r3
 8008ecc:	6045      	str	r5, [r0, #4]
 8008ece:	bf04      	itt	eq
 8008ed0:	686b      	ldreq	r3, [r5, #4]
 8008ed2:	6043      	streq	r3, [r0, #4]
 8008ed4:	2314      	movs	r3, #20
 8008ed6:	fb03 1102 	mla	r1, r3, r2, r1
 8008eda:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8008edc:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8008ee4:	6820      	ldr	r0, [r4, #0]
}
 8008ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8008eea:	f7ff bf75 	b.w	8008dd8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eee:	b952      	cbnz	r2, 8008f06 <vTaskSwitchContext+0x72>
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	b672      	cpsid	i
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	b662      	cpsie	i
 8008f04:	e7fe      	b.n	8008f04 <vTaskSwitchContext+0x70>
 8008f06:	3a01      	subs	r2, #1
 8008f08:	e7d6      	b.n	8008eb8 <vTaskSwitchContext+0x24>
 8008f0a:	bf00      	nop
 8008f0c:	20016ccc 	.word	0x20016ccc
 8008f10:	20016d4c 	.word	0x20016d4c
 8008f14:	20016854 	.word	0x20016854
 8008f18:	20016cd4 	.word	0x20016cd4
 8008f1c:	20016860 	.word	0x20016860

08008f20 <vTaskPlaceOnEventList>:
{
 8008f20:	b510      	push	{r4, lr}
 8008f22:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008f24:	b950      	cbnz	r0, 8008f3c <vTaskPlaceOnEventList+0x1c>
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	b672      	cpsid	i
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	b662      	cpsie	i
 8008f3a:	e7fe      	b.n	8008f3a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <vTaskPlaceOnEventList+0x34>)
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	3118      	adds	r1, #24
 8008f42:	f7fe fca7 	bl	8007894 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f46:	4620      	mov	r0, r4
 8008f48:	2101      	movs	r1, #1
}
 8008f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f4e:	f7ff bc9d 	b.w	800888c <prvAddCurrentTaskToDelayedList>
 8008f52:	bf00      	nop
 8008f54:	20016854 	.word	0x20016854

08008f58 <vTaskPlaceOnEventListRestricted>:
	{
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008f5e:	b950      	cbnz	r0, 8008f76 <vTaskPlaceOnEventListRestricted+0x1e>
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	b672      	cpsid	i
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	b662      	cpsie	i
 8008f74:	e7fe      	b.n	8008f74 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f76:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008f78:	6819      	ldr	r1, [r3, #0]
 8008f7a:	3118      	adds	r1, #24
 8008f7c:	f7fe fc7e 	bl	800787c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008f80:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f82:	4621      	mov	r1, r4
 8008f84:	bf0c      	ite	eq
 8008f86:	4628      	moveq	r0, r5
 8008f88:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f90:	f7ff bc7c 	b.w	800888c <prvAddCurrentTaskToDelayedList>
 8008f94:	20016854 	.word	0x20016854

08008f98 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f98:	68c3      	ldr	r3, [r0, #12]
{
 8008f9a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008f9e:	b954      	cbnz	r4, 8008fb6 <xTaskRemoveFromEventList+0x1e>
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	b672      	cpsid	i
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	b662      	cpsie	i
 8008fb4:	e7fe      	b.n	8008fb4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fb6:	f104 0118 	add.w	r1, r4, #24
 8008fba:	4608      	mov	r0, r1
 8008fbc:	9101      	str	r1, [sp, #4]
 8008fbe:	f7fe fc80 	bl	80078c2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <xTaskRemoveFromEventList+0x74>)
 8008fc4:	9901      	ldr	r1, [sp, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	b9e3      	cbnz	r3, 8009004 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fca:	1d21      	adds	r1, r4, #4
 8008fcc:	4608      	mov	r0, r1
 8008fce:	9101      	str	r1, [sp, #4]
 8008fd0:	f7fe fc77 	bl	80078c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fd4:	4a0e      	ldr	r2, [pc, #56]	; (8009010 <xTaskRemoveFromEventList+0x78>)
 8008fd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fd8:	6810      	ldr	r0, [r2, #0]
 8008fda:	9901      	ldr	r1, [sp, #4]
 8008fdc:	4283      	cmp	r3, r0
 8008fde:	d900      	bls.n	8008fe2 <xTaskRemoveFromEventList+0x4a>
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	4a0c      	ldr	r2, [pc, #48]	; (8009014 <xTaskRemoveFromEventList+0x7c>)
 8008fe4:	2014      	movs	r0, #20
 8008fe6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fea:	f7fe fc47 	bl	800787c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fee:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <xTaskRemoveFromEventList+0x80>)
 8008ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d906      	bls.n	8009008 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	4b07      	ldr	r3, [pc, #28]	; (800901c <xTaskRemoveFromEventList+0x84>)
 8008ffe:	6018      	str	r0, [r3, #0]
}
 8009000:	b002      	add	sp, #8
 8009002:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009004:	4806      	ldr	r0, [pc, #24]	; (8009020 <xTaskRemoveFromEventList+0x88>)
 8009006:	e7f0      	b.n	8008fea <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 8009008:	2000      	movs	r0, #0
	return xReturn;
 800900a:	e7f9      	b.n	8009000 <xTaskRemoveFromEventList+0x68>
 800900c:	20016ccc 	.word	0x20016ccc
 8009010:	20016cd4 	.word	0x20016cd4
 8009014:	20016860 	.word	0x20016860
 8009018:	20016854 	.word	0x20016854
 800901c:	20016d4c 	.word	0x20016d4c
 8009020:	20016d08 	.word	0x20016d08

08009024 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009024:	4b03      	ldr	r3, [pc, #12]	; (8009034 <vTaskInternalSetTimeOutState+0x10>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800902a:	4b03      	ldr	r3, [pc, #12]	; (8009038 <vTaskInternalSetTimeOutState+0x14>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6043      	str	r3, [r0, #4]
}
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20016d04 	.word	0x20016d04
 8009038:	20016d48 	.word	0x20016d48

0800903c <xTaskCheckForTimeOut>:
{
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009040:	4605      	mov	r5, r0
 8009042:	b950      	cbnz	r0, 800905a <xTaskCheckForTimeOut+0x1e>
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	b672      	cpsid	i
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	b662      	cpsie	i
 8009058:	e7fe      	b.n	8009058 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800905a:	b951      	cbnz	r1, 8009072 <xTaskCheckForTimeOut+0x36>
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	b672      	cpsid	i
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	b662      	cpsie	i
 8009070:	e7fe      	b.n	8009070 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8009072:	f7fe fc9f 	bl	80079b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <xTaskCheckForTimeOut+0x78>)
 8009078:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	d010      	beq.n	80090a2 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009080:	480d      	ldr	r0, [pc, #52]	; (80090b8 <xTaskCheckForTimeOut+0x7c>)
 8009082:	682e      	ldr	r6, [r5, #0]
 8009084:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009086:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009088:	4286      	cmp	r6, r0
 800908a:	d001      	beq.n	8009090 <xTaskCheckForTimeOut+0x54>
 800908c:	428a      	cmp	r2, r1
 800908e:	d90f      	bls.n	80090b0 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009090:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009092:	4283      	cmp	r3, r0
 8009094:	d90a      	bls.n	80090ac <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8009096:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009098:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800909a:	4413      	add	r3, r2
 800909c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800909e:	f7ff ffc1 	bl	8009024 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80090a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80090a4:	f7fe fcaa 	bl	80079fc <vPortExitCritical>
}
 80090a8:	4620      	mov	r0, r4
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80090b0:	2401      	movs	r4, #1
 80090b2:	e7f7      	b.n	80090a4 <xTaskCheckForTimeOut+0x68>
 80090b4:	20016d48 	.word	0x20016d48
 80090b8:	20016d04 	.word	0x20016d04

080090bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80090bc:	4b01      	ldr	r3, [pc, #4]	; (80090c4 <vTaskMissedYield+0x8>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
}
 80090c2:	4770      	bx	lr
 80090c4:	20016d4c 	.word	0x20016d4c

080090c8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80090c8:	4b01      	ldr	r3, [pc, #4]	; (80090d0 <xTaskGetCurrentTaskHandle+0x8>)
 80090ca:	6818      	ldr	r0, [r3, #0]
	}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20016854 	.word	0x20016854

080090d4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <xTaskGetSchedulerState+0x18>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	b133      	cbz	r3, 80090e8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <xTaskGetSchedulerState+0x1c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bf0c      	ite	eq
 80090e2:	2002      	moveq	r0, #2
 80090e4:	2000      	movne	r0, #0
 80090e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090e8:	2001      	movs	r0, #1
	}
 80090ea:	4770      	bx	lr
 80090ec:	20016d1c 	.word	0x20016d1c
 80090f0:	20016ccc 	.word	0x20016ccc

080090f4 <xTaskPriorityInherit>:
	{
 80090f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80090f6:	4604      	mov	r4, r0
 80090f8:	b340      	cbz	r0, 800914c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090fa:	4d1b      	ldr	r5, [pc, #108]	; (8009168 <xTaskPriorityInherit+0x74>)
 80090fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090fe:	682a      	ldr	r2, [r5, #0]
 8009100:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009102:	4293      	cmp	r3, r2
 8009104:	d228      	bcs.n	8009158 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009106:	6982      	ldr	r2, [r0, #24]
 8009108:	2a00      	cmp	r2, #0
 800910a:	db04      	blt.n	8009116 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910c:	682a      	ldr	r2, [r5, #0]
 800910e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009110:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009114:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009116:	2214      	movs	r2, #20
 8009118:	4e14      	ldr	r6, [pc, #80]	; (800916c <xTaskPriorityInherit+0x78>)
 800911a:	fb02 6303 	mla	r3, r2, r3, r6
 800911e:	6962      	ldr	r2, [r4, #20]
 8009120:	429a      	cmp	r2, r3
 8009122:	d115      	bne.n	8009150 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009124:	1d21      	adds	r1, r4, #4
 8009126:	4608      	mov	r0, r1
 8009128:	9101      	str	r1, [sp, #4]
 800912a:	f7fe fbca 	bl	80078c2 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800912e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009130:	4a0f      	ldr	r2, [pc, #60]	; (8009170 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009134:	6810      	ldr	r0, [r2, #0]
 8009136:	9901      	ldr	r1, [sp, #4]
 8009138:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800913a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800913c:	d900      	bls.n	8009140 <xTaskPriorityInherit+0x4c>
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	2014      	movs	r0, #20
 8009142:	fb00 6003 	mla	r0, r0, r3, r6
 8009146:	f7fe fb99 	bl	800787c <vListInsertEnd>
				xReturn = pdTRUE;
 800914a:	2001      	movs	r0, #1
	}
 800914c:	b002      	add	sp, #8
 800914e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009156:	e7f8      	b.n	800914a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800915c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800915e:	42a0      	cmp	r0, r4
 8009160:	bf2c      	ite	cs
 8009162:	2000      	movcs	r0, #0
 8009164:	2001      	movcc	r0, #1
 8009166:	e7f1      	b.n	800914c <xTaskPriorityInherit+0x58>
 8009168:	20016854 	.word	0x20016854
 800916c:	20016860 	.word	0x20016860
 8009170:	20016cd4 	.word	0x20016cd4

08009174 <xTaskPriorityDisinherit>:
	{
 8009174:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8009176:	b910      	cbnz	r0, 800917e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009178:	2000      	movs	r0, #0
	}
 800917a:	b002      	add	sp, #8
 800917c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800917e:	4b1e      	ldr	r3, [pc, #120]	; (80091f8 <xTaskPriorityDisinherit+0x84>)
 8009180:	681c      	ldr	r4, [r3, #0]
 8009182:	4284      	cmp	r4, r0
 8009184:	d00a      	beq.n	800919c <xTaskPriorityDisinherit+0x28>
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	b672      	cpsid	i
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	b662      	cpsie	i
 800919a:	e7fe      	b.n	800919a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800919c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800919e:	b953      	cbnz	r3, 80091b6 <xTaskPriorityDisinherit+0x42>
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	b672      	cpsid	i
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	b662      	cpsie	i
 80091b4:	e7fe      	b.n	80091b4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80091b8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091ba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80091bc:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091be:	4291      	cmp	r1, r2
 80091c0:	d0da      	beq.n	8009178 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1d8      	bne.n	8009178 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c6:	1d21      	adds	r1, r4, #4
 80091c8:	4608      	mov	r0, r1
 80091ca:	9101      	str	r1, [sp, #4]
 80091cc:	f7fe fb79 	bl	80078c2 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80091d2:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091da:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80091dc:	4a07      	ldr	r2, [pc, #28]	; (80091fc <xTaskPriorityDisinherit+0x88>)
 80091de:	6810      	ldr	r0, [r2, #0]
 80091e0:	4283      	cmp	r3, r0
 80091e2:	d900      	bls.n	80091e6 <xTaskPriorityDisinherit+0x72>
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	4a06      	ldr	r2, [pc, #24]	; (8009200 <xTaskPriorityDisinherit+0x8c>)
 80091e8:	2014      	movs	r0, #20
 80091ea:	fb00 2003 	mla	r0, r0, r3, r2
 80091ee:	f7fe fb45 	bl	800787c <vListInsertEnd>
					xReturn = pdTRUE;
 80091f2:	2001      	movs	r0, #1
		return xReturn;
 80091f4:	e7c1      	b.n	800917a <xTaskPriorityDisinherit+0x6>
 80091f6:	bf00      	nop
 80091f8:	20016854 	.word	0x20016854
 80091fc:	20016cd4 	.word	0x20016cd4
 8009200:	20016860 	.word	0x20016860

08009204 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8009204:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8009206:	4604      	mov	r4, r0
 8009208:	2800      	cmp	r0, #0
 800920a:	d048      	beq.n	800929e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800920c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800920e:	b952      	cbnz	r2, 8009226 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	b672      	cpsid	i
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	b662      	cpsie	i
 8009224:	e7fe      	b.n	8009224 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009226:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009228:	4299      	cmp	r1, r3
 800922a:	bf38      	it	cc
 800922c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800922e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009230:	428b      	cmp	r3, r1
 8009232:	d034      	beq.n	800929e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009234:	2a01      	cmp	r2, #1
 8009236:	d132      	bne.n	800929e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8009238:	4a1a      	ldr	r2, [pc, #104]	; (80092a4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	4282      	cmp	r2, r0
 800923e:	d10a      	bne.n	8009256 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	b672      	cpsid	i
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	b662      	cpsie	i
 8009254:	e7fe      	b.n	8009254 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009256:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009258:	4d13      	ldr	r5, [pc, #76]	; (80092a8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800925a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800925c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8009260:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009262:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009266:	bfa8      	it	ge
 8009268:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800926c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800926e:	bfa8      	it	ge
 8009270:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009272:	429a      	cmp	r2, r3
 8009274:	d113      	bne.n	800929e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009276:	1d01      	adds	r1, r0, #4
 8009278:	4608      	mov	r0, r1
 800927a:	9101      	str	r1, [sp, #4]
 800927c:	f7fe fb21 	bl	80078c2 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009280:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8009282:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009284:	6810      	ldr	r0, [r2, #0]
 8009286:	9901      	ldr	r1, [sp, #4]
 8009288:	4283      	cmp	r3, r0
 800928a:	d900      	bls.n	800928e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	2014      	movs	r0, #20
 8009290:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8009294:	b003      	add	sp, #12
 8009296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800929a:	f7fe baef 	b.w	800787c <vListInsertEnd>
	}
 800929e:	b003      	add	sp, #12
 80092a0:	bd30      	pop	{r4, r5, pc}
 80092a2:	bf00      	nop
 80092a4:	20016854 	.word	0x20016854
 80092a8:	20016860 	.word	0x20016860
 80092ac:	20016cd4 	.word	0x20016cd4

080092b0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80092b0:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <pvTaskIncrementMutexHeldCount+0x14>)
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	b11a      	cbz	r2, 80092be <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80092ba:	3201      	adds	r2, #1
 80092bc:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80092be:	6818      	ldr	r0, [r3, #0]
	}
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20016854 	.word	0x20016854

080092c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80092c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80092ca:	4c11      	ldr	r4, [pc, #68]	; (8009310 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80092cc:	f7fe fb72 	bl	80079b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80092d0:	6825      	ldr	r5, [r4, #0]
 80092d2:	b9bd      	cbnz	r5, 8009304 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80092d4:	4f0f      	ldr	r7, [pc, #60]	; (8009314 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80092d6:	4e10      	ldr	r6, [pc, #64]	; (8009318 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80092d8:	4638      	mov	r0, r7
 80092da:	f7fe fac1 	bl	8007860 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80092de:	4630      	mov	r0, r6
 80092e0:	f7fe fabe 	bl	8007860 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092e4:	4b0d      	ldr	r3, [pc, #52]	; (800931c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092e6:	4a0e      	ldr	r2, [pc, #56]	; (8009320 <prvCheckForValidListAndQueue+0x58>)
 80092e8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80092ea:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092ec:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <prvCheckForValidListAndQueue+0x5c>)
 80092f0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <prvCheckForValidListAndQueue+0x60>)
 80092f4:	9500      	str	r5, [sp, #0]
 80092f6:	f7fe fda9 	bl	8007e4c <xQueueGenericCreateStatic>
 80092fa:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092fc:	b110      	cbz	r0, 8009304 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092fe:	490b      	ldr	r1, [pc, #44]	; (800932c <prvCheckForValidListAndQueue+0x64>)
 8009300:	f7ff f9e4 	bl	80086cc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009304:	b003      	add	sp, #12
 8009306:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800930a:	f7fe bb77 	b.w	80079fc <vPortExitCritical>
 800930e:	bf00      	nop
 8009310:	20016e74 	.word	0x20016e74
 8009314:	20016df8 	.word	0x20016df8
 8009318:	20016e0c 	.word	0x20016e0c
 800931c:	20016d50 	.word	0x20016d50
 8009320:	20016d58 	.word	0x20016d58
 8009324:	20016d54 	.word	0x20016d54
 8009328:	20016e24 	.word	0x20016e24
 800932c:	0802ebf9 	.word	0x0802ebf9

08009330 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009330:	4291      	cmp	r1, r2
{
 8009332:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009334:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009336:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009338:	d80a      	bhi.n	8009350 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	6983      	ldr	r3, [r0, #24]
 800933e:	429a      	cmp	r2, r3
 8009340:	d20d      	bcs.n	800935e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009342:	1d01      	adds	r1, r0, #4
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	f7fe faa4 	bl	8007894 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800934c:	2000      	movs	r0, #0
}
 800934e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009350:	429a      	cmp	r2, r3
 8009352:	d201      	bcs.n	8009358 <prvInsertTimerInActiveList+0x28>
 8009354:	4299      	cmp	r1, r3
 8009356:	d202      	bcs.n	800935e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009358:	1d01      	adds	r1, r0, #4
 800935a:	4b03      	ldr	r3, [pc, #12]	; (8009368 <prvInsertTimerInActiveList+0x38>)
 800935c:	e7f3      	b.n	8009346 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800935e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009360:	e7f5      	b.n	800934e <prvInsertTimerInActiveList+0x1e>
 8009362:	bf00      	nop
 8009364:	20016d54 	.word	0x20016d54
 8009368:	20016d50 	.word	0x20016d50

0800936c <xTimerCreateTimerTask>:
{
 800936c:	b510      	push	{r4, lr}
 800936e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009370:	f7ff ffaa 	bl	80092c8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009374:	4b13      	ldr	r3, [pc, #76]	; (80093c4 <xTimerCreateTimerTask+0x58>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	b1b3      	cbz	r3, 80093a8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800937a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800937c:	aa07      	add	r2, sp, #28
 800937e:	a906      	add	r1, sp, #24
 8009380:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009382:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009386:	f7fe f969 	bl	800765c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800938a:	9b05      	ldr	r3, [sp, #20]
 800938c:	9a07      	ldr	r2, [sp, #28]
 800938e:	9302      	str	r3, [sp, #8]
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	490d      	ldr	r1, [pc, #52]	; (80093c8 <xTimerCreateTimerTask+0x5c>)
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	2302      	movs	r3, #2
 8009398:	480c      	ldr	r0, [pc, #48]	; (80093cc <xTimerCreateTimerTask+0x60>)
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	4623      	mov	r3, r4
 800939e:	f7ff fb5e 	bl	8008a5e <xTaskCreateStatic>
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <xTimerCreateTimerTask+0x64>)
 80093a4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80093a6:	b950      	cbnz	r0, 80093be <xTimerCreateTimerTask+0x52>
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	b672      	cpsid	i
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	b662      	cpsie	i
	configASSERT( xReturn );
 80093bc:	e7fe      	b.n	80093bc <xTimerCreateTimerTask+0x50>
}
 80093be:	2001      	movs	r0, #1
 80093c0:	b008      	add	sp, #32
 80093c2:	bd10      	pop	{r4, pc}
 80093c4:	20016e74 	.word	0x20016e74
 80093c8:	0802ebfe 	.word	0x0802ebfe
 80093cc:	080094dd 	.word	0x080094dd
 80093d0:	20016e78 	.word	0x20016e78

080093d4 <xTimerGenericCommand>:
{
 80093d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80093d6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80093d8:	4604      	mov	r4, r0
{
 80093da:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80093dc:	b950      	cbnz	r0, 80093f4 <xTimerGenericCommand+0x20>
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	b672      	cpsid	i
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	b662      	cpsie	i
 80093f2:	e7fe      	b.n	80093f2 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 80093f4:	4d0c      	ldr	r5, [pc, #48]	; (8009428 <xTimerGenericCommand+0x54>)
 80093f6:	6828      	ldr	r0, [r5, #0]
 80093f8:	b178      	cbz	r0, 800941a <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093fa:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093fc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093fe:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009402:	dc0c      	bgt.n	800941e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009404:	f7ff fe66 	bl	80090d4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009408:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800940a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800940c:	4669      	mov	r1, sp
 800940e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009410:	bf0c      	ite	eq
 8009412:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009414:	461a      	movne	r2, r3
 8009416:	f7fe fd9e 	bl	8007f56 <xQueueGenericSend>
}
 800941a:	b004      	add	sp, #16
 800941c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800941e:	2300      	movs	r3, #0
 8009420:	4669      	mov	r1, sp
 8009422:	f7fe fea5 	bl	8008170 <xQueueGenericSendFromISR>
 8009426:	e7f8      	b.n	800941a <xTimerGenericCommand+0x46>
 8009428:	20016e74 	.word	0x20016e74

0800942c <prvSampleTimeNow>:
{
 800942c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009430:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80094d8 <prvSampleTimeNow+0xac>
{
 8009434:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009436:	f7ff fb85 	bl	8008b44 <xTaskGetTickCount>
 800943a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800943c:	f8d8 3000 	ldr.w	r3, [r8]
 8009440:	4283      	cmp	r3, r0
 8009442:	d942      	bls.n	80094ca <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009444:	4f22      	ldr	r7, [pc, #136]	; (80094d0 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009446:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	b95a      	cbnz	r2, 8009468 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009450:	4a20      	ldr	r2, [pc, #128]	; (80094d4 <prvSampleTimeNow+0xa8>)
 8009452:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009454:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009456:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8009458:	6039      	str	r1, [r7, #0]
}
 800945a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800945c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800945e:	f8c8 5000 	str.w	r5, [r8]
}
 8009462:	b004      	add	sp, #16
 8009464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009468:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800946c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009470:	1d21      	adds	r1, r4, #4
 8009472:	4608      	mov	r0, r1
 8009474:	9103      	str	r1, [sp, #12]
 8009476:	f7fe fa24 	bl	80078c2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800947a:	6a23      	ldr	r3, [r4, #32]
 800947c:	4620      	mov	r0, r4
 800947e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009480:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009484:	9903      	ldr	r1, [sp, #12]
 8009486:	f013 0f04 	tst.w	r3, #4
 800948a:	d0de      	beq.n	800944a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800948c:	69a3      	ldr	r3, [r4, #24]
 800948e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009490:	459a      	cmp	sl, r3
 8009492:	d205      	bcs.n	80094a0 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009494:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009496:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009498:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800949a:	f7fe f9fb 	bl	8007894 <vListInsert>
 800949e:	e7d4      	b.n	800944a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a0:	2300      	movs	r3, #0
 80094a2:	4652      	mov	r2, sl
 80094a4:	4620      	mov	r0, r4
 80094a6:	f8cd 9000 	str.w	r9, [sp]
 80094aa:	4619      	mov	r1, r3
 80094ac:	f7ff ff92 	bl	80093d4 <xTimerGenericCommand>
				configASSERT( xResult );
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d1ca      	bne.n	800944a <prvSampleTimeNow+0x1e>
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	b672      	cpsid	i
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	b662      	cpsie	i
 80094c8:	e7fe      	b.n	80094c8 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e7c5      	b.n	800945a <prvSampleTimeNow+0x2e>
 80094ce:	bf00      	nop
 80094d0:	20016d50 	.word	0x20016d50
 80094d4:	20016d54 	.word	0x20016d54
 80094d8:	20016e20 	.word	0x20016e20

080094dc <prvTimerTask>:
{
 80094dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094e0:	4d71      	ldr	r5, [pc, #452]	; (80096a8 <prvTimerTask+0x1cc>)
{
 80094e2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094e4:	4e71      	ldr	r6, [pc, #452]	; (80096ac <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094e6:	682b      	ldr	r3, [r5, #0]
 80094e8:	f8d3 8000 	ldr.w	r8, [r3]
 80094ec:	f1b8 0f00 	cmp.w	r8, #0
 80094f0:	d037      	beq.n	8009562 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094f2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094f4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094f6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80094fa:	f7ff fb1b 	bl	8008b34 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094fe:	a804      	add	r0, sp, #16
 8009500:	f7ff ff94 	bl	800942c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009504:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009506:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009508:	2b00      	cmp	r3, #0
 800950a:	d16b      	bne.n	80095e4 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800950c:	2c00      	cmp	r4, #0
 800950e:	d14e      	bne.n	80095ae <prvTimerTask+0xd2>
 8009510:	4540      	cmp	r0, r8
 8009512:	d352      	bcc.n	80095ba <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8009514:	f7ff fbb4 	bl	8008c80 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800951e:	1d38      	adds	r0, r7, #4
 8009520:	f7fe f9cf 	bl	80078c2 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009524:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009528:	0758      	lsls	r0, r3, #29
 800952a:	d51c      	bpl.n	8009566 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800952c:	69b9      	ldr	r1, [r7, #24]
 800952e:	4643      	mov	r3, r8
 8009530:	464a      	mov	r2, r9
 8009532:	4638      	mov	r0, r7
 8009534:	4441      	add	r1, r8
 8009536:	f7ff fefb 	bl	8009330 <prvInsertTimerInActiveList>
 800953a:	b1c0      	cbz	r0, 800956e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800953c:	4623      	mov	r3, r4
 800953e:	4642      	mov	r2, r8
 8009540:	4621      	mov	r1, r4
 8009542:	4638      	mov	r0, r7
 8009544:	9400      	str	r4, [sp, #0]
 8009546:	f7ff ff45 	bl	80093d4 <xTimerGenericCommand>
			configASSERT( xResult );
 800954a:	b980      	cbnz	r0, 800956e <prvTimerTask+0x92>
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	b672      	cpsid	i
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	b662      	cpsie	i
 8009560:	e7fe      	b.n	8009560 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009562:	2401      	movs	r4, #1
 8009564:	e7c9      	b.n	80094fa <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009566:	f023 0301 	bic.w	r3, r3, #1
 800956a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	4638      	mov	r0, r7
 8009572:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009574:	2200      	movs	r2, #0
 8009576:	a904      	add	r1, sp, #16
 8009578:	6830      	ldr	r0, [r6, #0]
 800957a:	f7fe febe 	bl	80082fa <xQueueReceive>
 800957e:	2800      	cmp	r0, #0
 8009580:	d0b1      	beq.n	80094e6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009582:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009584:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009586:	2b00      	cmp	r3, #0
 8009588:	db2f      	blt.n	80095ea <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800958a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800958c:	6963      	ldr	r3, [r4, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d132      	bne.n	80095f8 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009592:	a803      	add	r0, sp, #12
 8009594:	f7ff ff4a 	bl	800942c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009598:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800959a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800959c:	2b09      	cmp	r3, #9
 800959e:	d8e9      	bhi.n	8009574 <prvTimerTask+0x98>
 80095a0:	e8df f003 	tbb	[pc, r3]
 80095a4:	592e2e2e 	.word	0x592e2e2e
 80095a8:	2e2e7a60 	.word	0x2e2e7a60
 80095ac:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095ae:	4b40      	ldr	r3, [pc, #256]	; (80096b0 <prvTimerTask+0x1d4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681c      	ldr	r4, [r3, #0]
 80095b4:	fab4 f484 	clz	r4, r4
 80095b8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095ba:	4622      	mov	r2, r4
 80095bc:	eba8 0109 	sub.w	r1, r8, r9
 80095c0:	6830      	ldr	r0, [r6, #0]
 80095c2:	f7ff f8c2 	bl	800874a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095c6:	f7ff fb5b 	bl	8008c80 <xTaskResumeAll>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d1d2      	bne.n	8009574 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 80095ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80095d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	e7c7      	b.n	8009574 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 80095e4:	f7ff fb4c 	bl	8008c80 <xTaskResumeAll>
}
 80095e8:	e7c4      	b.n	8009574 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095ea:	9b05      	ldr	r3, [sp, #20]
 80095ec:	9907      	ldr	r1, [sp, #28]
 80095ee:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095f0:	9b04      	ldr	r3, [sp, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dbbe      	blt.n	8009574 <prvTimerTask+0x98>
 80095f6:	e7c8      	b.n	800958a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095f8:	1d20      	adds	r0, r4, #4
 80095fa:	f7fe f962 	bl	80078c2 <uxListRemove>
 80095fe:	e7c8      	b.n	8009592 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009600:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009604:	4620      	mov	r0, r4
 8009606:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009608:	f043 0301 	orr.w	r3, r3, #1
 800960c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009610:	9b05      	ldr	r3, [sp, #20]
 8009612:	4419      	add	r1, r3
 8009614:	f7ff fe8c 	bl	8009330 <prvInsertTimerInActiveList>
 8009618:	2800      	cmp	r0, #0
 800961a:	d0ab      	beq.n	8009574 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800961c:	6a23      	ldr	r3, [r4, #32]
 800961e:	4620      	mov	r0, r4
 8009620:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009622:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009626:	0759      	lsls	r1, r3, #29
 8009628:	d5a4      	bpl.n	8009574 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800962a:	69a2      	ldr	r2, [r4, #24]
 800962c:	2300      	movs	r3, #0
 800962e:	9905      	ldr	r1, [sp, #20]
 8009630:	4620      	mov	r0, r4
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	440a      	add	r2, r1
 8009636:	4619      	mov	r1, r3
 8009638:	f7ff fecc 	bl	80093d4 <xTimerGenericCommand>
							configASSERT( xResult );
 800963c:	2800      	cmp	r0, #0
 800963e:	d199      	bne.n	8009574 <prvTimerTask+0x98>
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	b672      	cpsid	i
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	b662      	cpsie	i
 8009654:	e7fe      	b.n	8009654 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009656:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800965a:	f023 0301 	bic.w	r3, r3, #1
 800965e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009662:	e787      	b.n	8009574 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009664:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009670:	9905      	ldr	r1, [sp, #20]
 8009672:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009674:	b951      	cbnz	r1, 800968c <prvTimerTask+0x1b0>
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	b672      	cpsid	i
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	b662      	cpsie	i
 800968a:	e7fe      	b.n	800968a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800968c:	4603      	mov	r3, r0
 800968e:	4401      	add	r1, r0
 8009690:	4620      	mov	r0, r4
 8009692:	f7ff fe4d 	bl	8009330 <prvInsertTimerInActiveList>
					break;
 8009696:	e76d      	b.n	8009574 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009698:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800969c:	079a      	lsls	r2, r3, #30
 800969e:	d4dc      	bmi.n	800965a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7fe f8a1 	bl	80077e8 <vPortFree>
 80096a6:	e765      	b.n	8009574 <prvTimerTask+0x98>
 80096a8:	20016d50 	.word	0x20016d50
 80096ac:	20016e74 	.word	0x20016e74
 80096b0:	20016d54 	.word	0x20016d54

080096b4 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 80096b4:	6843      	ldr	r3, [r0, #4]
{
 80096b6:	b510      	push	{r4, lr}
 80096b8:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 80096ba:	b14b      	cbz	r3, 80096d0 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	2101      	movs	r1, #1
 80096c0:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	b12b      	cbz	r3, 80096d2 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 80096c6:	23c8      	movs	r3, #200	; 0xc8
 80096c8:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 80096d0:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 80096d2:	2364      	movs	r3, #100	; 0x64
 80096d4:	6163      	str	r3, [r4, #20]
 80096d6:	e7fb      	b.n	80096d0 <jpeg_abort+0x1c>

080096d8 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 80096d8:	6843      	ldr	r3, [r0, #4]
{
 80096da:	b510      	push	{r4, lr}
 80096dc:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 80096de:	b10b      	cbz	r3, 80096e4 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 80096e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e2:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 80096e4:	2300      	movs	r3, #0
 80096e6:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 80096e8:	6163      	str	r3, [r4, #20]
}
 80096ea:	bd10      	pop	{r4, pc}

080096ec <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 80096ec:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 80096ee:	6843      	ldr	r3, [r0, #4]
 80096f0:	2284      	movs	r2, #132	; 0x84
 80096f2:	2100      	movs	r1, #0
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 80096fe:	bd08      	pop	{r3, pc}

08009700 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009700:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009702:	6843      	ldr	r3, [r0, #4]
 8009704:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009708:	2100      	movs	r1, #0
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800970e:	2200      	movs	r2, #0
 8009710:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8009714:	bd08      	pop	{r3, pc}

08009716 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009716:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8009718:	2950      	cmp	r1, #80	; 0x50
{
 800971a:	b570      	push	{r4, r5, r6, lr}
 800971c:	4604      	mov	r4, r0
 800971e:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009720:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 8009722:	d007      	beq.n	8009734 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8009724:	6803      	ldr	r3, [r0, #0]
 8009726:	260d      	movs	r6, #13
 8009728:	2250      	movs	r2, #80	; 0x50
 800972a:	61d9      	str	r1, [r3, #28]
 800972c:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8009734:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8009738:	d009      	beq.n	800974e <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	2116      	movs	r1, #22
 800973e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009742:	4620      	mov	r0, r4
 8009744:	61dd      	str	r5, [r3, #28]
 8009746:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800974e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009752:	2100      	movs	r1, #0
 8009754:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8009756:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8009758:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800975a:	f021 fe9d 	bl	802b498 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800975e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009760:	4620      	mov	r0, r4
    cinfo->err = err;
 8009762:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8009764:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8009766:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009768:	f00b feac 	bl	80154c4 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800976c:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800976e:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8009770:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8009772:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009774:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009778:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800977c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009780:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009784:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009788:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800978c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009790:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8009794:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8009798:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 800979c:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 80097a0:	f005 f8ba 	bl	800e918 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 80097a4:	4620      	mov	r0, r4
 80097a6:	f003 fdbd 	bl	800d324 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 80097aa:	23c8      	movs	r3, #200	; 0xc8
 80097ac:	6163      	str	r3, [r4, #20]
}
 80097ae:	bd70      	pop	{r4, r5, r6, pc}

080097b0 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 80097b0:	f7ff bf92 	b.w	80096d8 <jpeg_destroy>

080097b4 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 80097b4:	6942      	ldr	r2, [r0, #20]
 80097b6:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 80097ba:	b570      	push	{r4, r5, r6, lr}
 80097bc:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 80097be:	2b0a      	cmp	r3, #10
 80097c0:	f200 80a5 	bhi.w	800990e <jpeg_consume_input+0x15a>
 80097c4:	e8df f003 	tbb	[pc, r3]
 80097c8:	9dab1006 	.word	0x9dab1006
 80097cc:	9d9d9d9d 	.word	0x9d9d9d9d
 80097d0:	a39d      	.short	0xa39d
 80097d2:	9d          	.byte	0x9d
 80097d3:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 80097d4:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 80097dc:	69a3      	ldr	r3, [r4, #24]
 80097de:	4620      	mov	r0, r4
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 80097e4:	23c9      	movs	r3, #201	; 0xc9
 80097e6:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80097e8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80097ec:	4620      	mov	r0, r4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80097f2:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80097f4:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80097f6:	d146      	bne.n	8009886 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 80097f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097fa:	2d03      	cmp	r5, #3
 80097fc:	d007      	beq.n	800980e <jpeg_consume_input+0x5a>
 80097fe:	2d04      	cmp	r5, #4
 8009800:	d064      	beq.n	80098cc <jpeg_consume_input+0x118>
 8009802:	2d01      	cmp	r5, #1
 8009804:	d17b      	bne.n	80098fe <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8009806:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800980a:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 800980c:	e01c      	b.n	8009848 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 800980e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009812:	b10b      	cbz	r3, 8009818 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009814:	2303      	movs	r3, #3
 8009816:	e056      	b.n	80098c6 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 8009818:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800981c:	2b00      	cmp	r3, #0
 800981e:	d034      	beq.n	800988a <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 8009820:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009824:	2a00      	cmp	r2, #0
 8009826:	d04d      	beq.n	80098c4 <jpeg_consume_input+0x110>
 8009828:	2a01      	cmp	r2, #1
 800982a:	d008      	beq.n	800983e <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	2174      	movs	r1, #116	; 0x74
 8009830:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009832:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f04f 31ff 	mov.w	r1, #4294967295
 800983c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800983e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 8009842:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 8009844:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8009848:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 800984c:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 800984e:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009850:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8009854:	4b33      	ldr	r3, [pc, #204]	; (8009924 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 8009856:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 800985a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 800985e:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009860:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8009862:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 8009866:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 800986a:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 800986c:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 800986e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8009872:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8009874:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8009878:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 800987c:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009880:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8009882:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8009884:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 8009886:	4630      	mov	r0, r6
 8009888:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 800988a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800988e:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009890:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009892:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8009894:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009898:	d10e      	bne.n	80098b8 <jpeg_consume_input+0x104>
 800989a:	2902      	cmp	r1, #2
 800989c:	d101      	bne.n	80098a2 <jpeg_consume_input+0xee>
 800989e:	2a03      	cmp	r2, #3
 80098a0:	d0b8      	beq.n	8009814 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	621a      	str	r2, [r3, #32]
 80098a6:	2271      	movs	r2, #113	; 0x71
 80098a8:	e9c3 0106 	strd	r0, r1, [r3, #24]
 80098ac:	615a      	str	r2, [r3, #20]
 80098ae:	2101      	movs	r1, #1
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	4620      	mov	r0, r4
 80098b4:	4798      	blx	r3
 80098b6:	e7ad      	b.n	8009814 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 80098b8:	2852      	cmp	r0, #82	; 0x52
 80098ba:	d1f2      	bne.n	80098a2 <jpeg_consume_input+0xee>
 80098bc:	2947      	cmp	r1, #71	; 0x47
 80098be:	d1f0      	bne.n	80098a2 <jpeg_consume_input+0xee>
 80098c0:	2a42      	cmp	r2, #66	; 0x42
 80098c2:	d1ee      	bne.n	80098a2 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 80098c4:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 80098c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80098ca:	e7ba      	b.n	8009842 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 80098cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80098d0:	b193      	cbz	r3, 80098f8 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 80098d2:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 80098d6:	b17a      	cbz	r2, 80098f8 <jpeg_consume_input+0x144>
 80098d8:	2a02      	cmp	r2, #2
 80098da:	d008      	beq.n	80098ee <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	2174      	movs	r1, #116	; 0x74
 80098e0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 80098e2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f04f 31ff 	mov.w	r1, #4294967295
 80098ec:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 80098ee:	2305      	movs	r3, #5
 80098f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 80098f4:	2304      	movs	r3, #4
 80098f6:	e7a5      	b.n	8009844 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 80098f8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 80098fc:	e7fa      	b.n	80098f4 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 80098fe:	2300      	movs	r3, #0
 8009900:	e783      	b.n	800980a <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009902:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8009906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800990e:	6803      	ldr	r3, [r0, #0]
 8009910:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8009912:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009914:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4798      	blx	r3
 800991c:	e7b3      	b.n	8009886 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 800991e:	2601      	movs	r6, #1
  return retcode;
 8009920:	e7b1      	b.n	8009886 <jpeg_consume_input+0xd2>
 8009922:	bf00      	nop
 8009924:	3ff00000 	.word	0x3ff00000

08009928 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8009928:	6942      	ldr	r2, [r0, #20]
 800992a:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 800992e:	2b01      	cmp	r3, #1
{
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	4604      	mov	r4, r0
 8009934:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8009936:	d905      	bls.n	8009944 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009938:	6803      	ldr	r3, [r0, #0]
 800993a:	2115      	movs	r1, #21
 800993c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009944:	4620      	mov	r0, r4
 8009946:	f7ff ff35 	bl	80097b4 <jpeg_consume_input>
  switch (retcode) {
 800994a:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800994c:	4605      	mov	r5, r0
  switch (retcode) {
 800994e:	d00b      	beq.n	8009968 <jpeg_read_header+0x40>
 8009950:	2802      	cmp	r0, #2
 8009952:	d109      	bne.n	8009968 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009954:	b12e      	cbz	r6, 8009962 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	2235      	movs	r2, #53	; 0x35
 800995a:	4620      	mov	r0, r4
 800995c:	615a      	str	r2, [r3, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff fea6 	bl	80096b4 <jpeg_abort>
}
 8009968:	4628      	mov	r0, r5
 800996a:	bd70      	pop	{r4, r5, r6, pc}

0800996c <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800996c:	6943      	ldr	r3, [r0, #20]
 800996e:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009972:	2a01      	cmp	r2, #1
{
 8009974:	b510      	push	{r4, lr}
 8009976:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009978:	d81f      	bhi.n	80099ba <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800997a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800997c:	bb0a      	cbnz	r2, 80099c2 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 800997e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009982:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009984:	429a      	cmp	r2, r3
 8009986:	d204      	bcs.n	8009992 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8009988:	6803      	ldr	r3, [r0, #0]
 800998a:	2245      	movs	r2, #69	; 0x45
 800998c:	615a      	str	r2, [r3, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009992:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009996:	4620      	mov	r0, r4
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800999c:	23d2      	movs	r3, #210	; 0xd2
 800999e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 80099a0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80099a4:	695a      	ldr	r2, [r3, #20]
 80099a6:	b1a2      	cbz	r2, 80099d2 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 80099a8:	69a3      	ldr	r3, [r4, #24]
 80099aa:	4620      	mov	r0, r4
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff fe7f 	bl	80096b4 <jpeg_abort>
  return TRUE;
 80099b6:	2001      	movs	r0, #1
 80099b8:	e010      	b.n	80099dc <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 80099ba:	2bcf      	cmp	r3, #207	; 0xcf
 80099bc:	d0ee      	beq.n	800999c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 80099be:	2bd2      	cmp	r3, #210	; 0xd2
 80099c0:	d0ee      	beq.n	80099a0 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80099c2:	6822      	ldr	r2, [r4, #0]
 80099c4:	2115      	movs	r1, #21
 80099c6:	4620      	mov	r0, r4
 80099c8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80099cc:	6813      	ldr	r3, [r2, #0]
 80099ce:	4798      	blx	r3
 80099d0:	e7e6      	b.n	80099a0 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4620      	mov	r0, r4
 80099d6:	4798      	blx	r3
 80099d8:	2800      	cmp	r0, #0
 80099da:	d1e1      	bne.n	80099a0 <jpeg_finish_decompress+0x34>
}
 80099dc:	bd10      	pop	{r4, pc}

080099de <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80099de:	6943      	ldr	r3, [r0, #20]
 80099e0:	2bcc      	cmp	r3, #204	; 0xcc
{
 80099e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e6:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80099e8:	d008      	beq.n	80099fc <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80099ea:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 80099f8:	23cc      	movs	r3, #204	; 0xcc
 80099fa:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 80099fc:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8009a00:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8009a02:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	b9f3      	cbnz	r3, 8009a48 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009a0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 8009a0c:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bf14      	ite	ne
 8009a12:	23ce      	movne	r3, #206	; 0xce
 8009a14:	23cd      	moveq	r3, #205	; 0xcd
 8009a16:	6163      	str	r3, [r4, #20]
}
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 8009a1c:	68a3      	ldr	r3, [r4, #8]
 8009a1e:	b123      	cbz	r3, 8009a2a <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009a20:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009a22:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009a2a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009a2e:	462a      	mov	r2, r5
 8009a30:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8009a32:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009a36:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009a40:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009a44:	42bb      	cmp	r3, r7
 8009a46:	d011      	beq.n	8009a6c <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8009a48:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009a4c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009a4e:	4291      	cmp	r1, r2
 8009a50:	d3e4      	bcc.n	8009a1c <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009a52:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009a56:	4620      	mov	r0, r4
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009a5c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009a60:	4620      	mov	r0, r4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009a66:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8009a6a:	e7ca      	b.n	8009a02 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e7d3      	b.n	8009a18 <output_pass_setup+0x3a>

08009a70 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009a70:	6943      	ldr	r3, [r0, #20]
 8009a72:	2bca      	cmp	r3, #202	; 0xca
{
 8009a74:	b510      	push	{r4, lr}
 8009a76:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8009a78:	d109      	bne.n	8009a8e <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 8009a7a:	f005 f8f7 	bl	800ec6c <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8009a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a80:	b11b      	cbz	r3, 8009a8a <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009a82:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009a84:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009a86:	6163      	str	r3, [r4, #20]
}
 8009a88:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 8009a8a:	23cb      	movs	r3, #203	; 0xcb
 8009a8c:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8009a8e:	6962      	ldr	r2, [r4, #20]
 8009a90:	2acb      	cmp	r2, #203	; 0xcb
 8009a92:	d12c      	bne.n	8009aee <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009a94:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	b1fb      	cbz	r3, 8009adc <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 8009a9c:	68a3      	ldr	r3, [r4, #8]
 8009a9e:	b113      	cbz	r3, 8009aa6 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009aa6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009aaa:	4620      	mov	r0, r4
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0e9      	beq.n	8009a88 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009ab4:	2802      	cmp	r0, #2
 8009ab6:	d011      	beq.n	8009adc <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8009ab8:	68a3      	ldr	r3, [r4, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0ee      	beq.n	8009a9c <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8009abe:	f020 0002 	bic.w	r0, r0, #2
 8009ac2:	2801      	cmp	r0, #1
 8009ac4:	d1ea      	bne.n	8009a9c <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	6899      	ldr	r1, [r3, #8]
 8009aca:	3201      	adds	r2, #1
 8009acc:	428a      	cmp	r2, r1
 8009ace:	605a      	str	r2, [r3, #4]
 8009ad0:	dbe4      	blt.n	8009a9c <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009ad2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009ad6:	440a      	add	r2, r1
 8009ad8:	609a      	str	r2, [r3, #8]
 8009ada:	e7df      	b.n	8009a9c <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 8009adc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009ae0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8009ae4:	4620      	mov	r0, r4
}
 8009ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 8009aea:	f7ff bf78 	b.w	80099de <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 8009aee:	2acc      	cmp	r2, #204	; 0xcc
 8009af0:	d0f8      	beq.n	8009ae4 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	2115      	movs	r1, #21
 8009af6:	4620      	mov	r0, r4
 8009af8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4798      	blx	r3
 8009b00:	e7f0      	b.n	8009ae4 <jpeg_start_decompress+0x74>

08009b02 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b04:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8009b06:	6942      	ldr	r2, [r0, #20]
{
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8009b0c:	2acd      	cmp	r2, #205	; 0xcd
 8009b0e:	d005      	beq.n	8009b1c <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009b10:	6803      	ldr	r3, [r0, #0]
 8009b12:	2115      	movs	r1, #21
 8009b14:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8009b1c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009b20:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d30a      	bcc.n	8009b3c <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	227e      	movs	r2, #126	; 0x7e
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b30:	615a      	str	r2, [r3, #20]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	4798      	blx	r3
    return 0;
 8009b36:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8009b38:	b003      	add	sp, #12
 8009b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8009b3c:	68a0      	ldr	r0, [r4, #8]
 8009b3e:	b120      	cbz	r0, 8009b4a <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009b40:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009b44:	6803      	ldr	r3, [r0, #0]
 8009b46:	4620      	mov	r0, r4
 8009b48:	4798      	blx	r3
  row_ctr = 0;
 8009b4a:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	aa01      	add	r2, sp, #4
 8009b50:	4629      	mov	r1, r5
  row_ctr = 0;
 8009b52:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009b54:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009b58:	685f      	ldr	r7, [r3, #4]
 8009b5a:	4633      	mov	r3, r6
 8009b5c:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8009b5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b62:	9801      	ldr	r0, [sp, #4]
 8009b64:	4403      	add	r3, r0
 8009b66:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 8009b6a:	e7e5      	b.n	8009b38 <jpeg_read_scanlines+0x36>

08009b6c <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8009b6c:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 8009b6e:	6984      	ldr	r4, [r0, #24]
{
 8009b70:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 8009b72:	6863      	ldr	r3, [r4, #4]
 8009b74:	b943      	cbnz	r3, 8009b88 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 8009b76:	68e3      	ldr	r3, [r4, #12]
 8009b78:	4798      	blx	r3
 8009b7a:	b928      	cbnz	r0, 8009b88 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	2219      	movs	r2, #25
 8009b80:	4628      	mov	r0, r5
 8009b82:	615a      	str	r2, [r3, #20]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4798      	blx	r3
  src->bytes_in_buffer--;
 8009b88:	6863      	ldr	r3, [r4, #4]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	6022      	str	r2, [r4, #0]
}
 8009b94:	7818      	ldrb	r0, [r3, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}

08009b98 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8009b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8009ba0:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009ba4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 8009ba8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 8009bac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009bb0:	db20      	blt.n	8009bf4 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009bb2:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009bb4:	4b2e      	ldr	r3, [pc, #184]	; (8009c70 <arith_decode+0xd8>)
 8009bb6:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8009bba:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 8009bbe:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 8009bc0:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009bc4:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 8009bc8:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8009bcc:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 8009bd0:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 8009bd2:	428d      	cmp	r5, r1
 8009bd4:	db3c      	blt.n	8009c50 <arith_decode+0xb8>
    e->c -= temp;
 8009bd6:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8009bd8:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009bda:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 8009bde:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 8009be2:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009be4:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 8009be6:	dd2e      	ble.n	8009c46 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009be8:	ea85 050e 	eor.w	r5, r5, lr
 8009bec:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 8009bee:	09c0      	lsrs	r0, r0, #7
 8009bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 8009bf4:	3901      	subs	r1, #1
 8009bf6:	2900      	cmp	r1, #0
 8009bf8:	6121      	str	r1, [r4, #16]
 8009bfa:	da1a      	bge.n	8009c32 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 8009bfc:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 8009c00:	b96b      	cbnz	r3, 8009c1e <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 8009c02:	4640      	mov	r0, r8
 8009c04:	f7ff ffb2 	bl	8009b6c <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009c08:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8009c0a:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009c0c:	d108      	bne.n	8009c20 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 8009c0e:	4640      	mov	r0, r8
 8009c10:	f7ff ffac 	bl	8009b6c <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8009c14:	28ff      	cmp	r0, #255	; 0xff
 8009c16:	d0fa      	beq.n	8009c0e <arith_decode+0x76>
	  if (data == 0)
 8009c18:	b110      	cbz	r0, 8009c20 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 8009c1a:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 8009c1e:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009c20:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009c22:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009c24:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009c28:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009c2c:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009c2e:	d404      	bmi.n	8009c3a <arith_decode+0xa2>
 8009c30:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 8009c32:	68e3      	ldr	r3, [r4, #12]
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	60e3      	str	r3, [r4, #12]
 8009c38:	e7b6      	b.n	8009ba8 <arith_decode+0x10>
	if (++e->ct == 0)
 8009c3a:	3309      	adds	r3, #9
 8009c3c:	6123      	str	r3, [r4, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1f7      	bne.n	8009c32 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009c42:	60e7      	str	r7, [r4, #12]
 8009c44:	e7f5      	b.n	8009c32 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009c46:	407d      	eors	r5, r7
 8009c48:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8009c4a:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8009c4e:	e7ce      	b.n	8009bee <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 8009c50:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009c54:	dacb      	bge.n	8009bee <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009c56:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 8009c5a:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009c5c:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 8009c5e:	dd02      	ble.n	8009c66 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009c60:	407b      	eors	r3, r7
 8009c62:	7033      	strb	r3, [r6, #0]
 8009c64:	e7f1      	b.n	8009c4a <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009c66:	ea83 030e 	eor.w	r3, r3, lr
 8009c6a:	7033      	strb	r3, [r6, #0]
 8009c6c:	e7bf      	b.n	8009bee <arith_decode+0x56>
 8009c6e:	bf00      	nop
 8009c70:	0802ec08 	.word	0x0802ec08

08009c74 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8009c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8009c78:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8009c7c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 8009c80:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009c82:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8009c86:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 8009c8a:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 808a 	beq.w	8009da6 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 8009c92:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8009c96:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 8009c9a:	b95a      	cbnz	r2, 8009cb4 <start_pass+0x40>
      if (cinfo->Se != 0)
 8009c9c:	b1a1      	cbz	r1, 8009cc8 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	2611      	movs	r6, #17
 8009ca2:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8009ca6:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009caa:	6258      	str	r0, [r3, #36]	; 0x24
 8009cac:	4620      	mov	r0, r4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4798      	blx	r3
 8009cb2:	e00f      	b.n	8009cd4 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8009cb4:	428a      	cmp	r2, r1
 8009cb6:	dcf2      	bgt.n	8009c9e <start_pass+0x2a>
 8009cb8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009cbc:	428b      	cmp	r3, r1
 8009cbe:	dbee      	blt.n	8009c9e <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 8009cc0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d1ea      	bne.n	8009c9e <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 8009cc8:	b117      	cbz	r7, 8009cd0 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 8009cca:	1e7b      	subs	r3, r7, #1
 8009ccc:	4283      	cmp	r3, r0
 8009cce:	d1e6      	bne.n	8009c9e <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8009cd0:	280d      	cmp	r0, #13
 8009cd2:	dce4      	bgt.n	8009c9e <start_pass+0x2a>
 8009cd4:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 8009cd8:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009cdc:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009ce0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009ce4:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009ce8:	454b      	cmp	r3, r9
 8009cea:	dc1d      	bgt.n	8009d28 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8009cec:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d153      	bne.n	8009d9c <start_pass+0x128>
      if (cinfo->Ss == 0)
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	d14f      	bne.n	8009d98 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8009cf8:	4b63      	ldr	r3, [pc, #396]	; (8009e88 <start_pass+0x214>)
{
 8009cfa:	f04f 0800 	mov.w	r8, #0
 8009cfe:	f105 0914 	add.w	r9, r5, #20
 8009d02:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009d04:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 8009d06:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009d08:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009d0c:	4543      	cmp	r3, r8
 8009d0e:	dc63      	bgt.n	8009dd8 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 8009d10:	2300      	movs	r3, #0
  entropy->a = 0;
 8009d12:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009d16:	f06f 030f 	mvn.w	r3, #15
 8009d1a:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8009d1c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009d20:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009d22:	b003      	add	sp, #12
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009d28:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009d2c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009d30:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009d32:	0230      	lsls	r0, r6, #8
 8009d34:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009d38:	b162      	cbz	r2, 8009d54 <start_pass+0xe0>
 8009d3a:	580a      	ldr	r2, [r1, r0]
 8009d3c:	2a00      	cmp	r2, #0
 8009d3e:	da09      	bge.n	8009d54 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009d40:	6822      	ldr	r2, [r4, #0]
 8009d42:	2300      	movs	r3, #0
 8009d44:	f04f 31ff 	mov.w	r1, #4294967295
 8009d48:	4620      	mov	r0, r4
 8009d4a:	61d3      	str	r3, [r2, #28]
 8009d4c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009d50:	6852      	ldr	r2, [r2, #4]
 8009d52:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009d54:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8009d58:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8009d5c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8009d60:	42ba      	cmp	r2, r7
 8009d62:	da02      	bge.n	8009d6a <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009d64:	f109 0901 	add.w	r9, r9, #1
 8009d68:	e7ba      	b.n	8009ce0 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009d6a:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 8009d6e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009d72:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 8009d76:	4291      	cmp	r1, r2
 8009d78:	d008      	beq.n	8009d8c <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8009d80:	4620      	mov	r0, r4
 8009d82:	61d7      	str	r7, [r2, #28]
 8009d84:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009d88:	6852      	ldr	r2, [r2, #4]
 8009d8a:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 8009d8c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009d90:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 8009d92:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009d96:	e7e1      	b.n	8009d5c <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8009d98:	4b3c      	ldr	r3, [pc, #240]	; (8009e8c <start_pass+0x218>)
 8009d9a:	e7ae      	b.n	8009cfa <start_pass+0x86>
      if (cinfo->Ss == 0)
 8009d9c:	b90a      	cbnz	r2, 8009da2 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8009d9e:	4b3c      	ldr	r3, [pc, #240]	; (8009e90 <start_pass+0x21c>)
 8009da0:	e7ab      	b.n	8009cfa <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8009da2:	4b3c      	ldr	r3, [pc, #240]	; (8009e94 <start_pass+0x220>)
 8009da4:	e7a9      	b.n	8009cfa <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009da6:	b96a      	cbnz	r2, 8009dc4 <start_pass+0x150>
 8009da8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8009dac:	b953      	cbnz	r3, 8009dc4 <start_pass+0x150>
 8009dae:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8009db2:	b93b      	cbnz	r3, 8009dc4 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009db4:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009db8:	2b3f      	cmp	r3, #63	; 0x3f
 8009dba:	dc0b      	bgt.n	8009dd4 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009dbc:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d007      	beq.n	8009dd4 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	227d      	movs	r2, #125	; 0x7d
 8009dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8009dcc:	4620      	mov	r0, r4
 8009dce:	615a      	str	r2, [r3, #20]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 8009dd4:	4b30      	ldr	r3, [pc, #192]	; (8009e98 <start_pass+0x224>)
 8009dd6:	e790      	b.n	8009cfa <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009dd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8009ddc:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009de0:	b133      	cbz	r3, 8009df0 <start_pass+0x17c>
 8009de2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009de6:	bb43      	cbnz	r3, 8009e3a <start_pass+0x1c6>
 8009de8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d13a      	bne.n	8009e66 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 8009df0:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8009df4:	2f0f      	cmp	r7, #15
 8009df6:	d906      	bls.n	8009e06 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	2232      	movs	r2, #50	; 0x32
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8009e06:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0c:	b933      	cbnz	r3, 8009e1c <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	2240      	movs	r2, #64	; 0x40
 8009e12:	2101      	movs	r1, #1
 8009e14:	4620      	mov	r0, r4
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4798      	blx	r3
 8009e1a:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8009e1c:	2240      	movs	r2, #64	; 0x40
 8009e1e:	2100      	movs	r1, #0
 8009e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e22:	f021 fb39 	bl	802b498 <memset>
      entropy->last_dc_val[ci] = 0;
 8009e26:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8009e2a:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009e2e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009e32:	b9eb      	cbnz	r3, 8009e70 <start_pass+0x1fc>
 8009e34:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009e38:	b1ab      	cbz	r3, 8009e66 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 8009e3a:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8009e3e:	2f0f      	cmp	r7, #15
 8009e40:	d819      	bhi.n	8009e76 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 8009e42:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e48:	b93b      	cbnz	r3, 8009e5a <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009e4a:	6863      	ldr	r3, [r4, #4]
 8009e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e50:	2101      	movs	r1, #1
 8009e52:	4620      	mov	r0, r4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4798      	blx	r3
 8009e58:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e5e:	2100      	movs	r1, #0
 8009e60:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009e62:	f021 fb19 	bl	802b498 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009e66:	f108 0801 	add.w	r8, r8, #1
 8009e6a:	f109 0904 	add.w	r9, r9, #4
 8009e6e:	e74b      	b.n	8009d08 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009e70:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009e74:	e7e0      	b.n	8009e38 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	2232      	movs	r2, #50	; 0x32
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4798      	blx	r3
 8009e84:	e7dd      	b.n	8009e42 <start_pass+0x1ce>
 8009e86:	bf00      	nop
 8009e88:	0800a43f 	.word	0x0800a43f
 8009e8c:	0800a30b 	.word	0x0800a30b
 8009e90:	0800a2b9 	.word	0x0800a2b9
 8009e94:	0800a193 	.word	0x0800a193
 8009e98:	08009f3f 	.word	0x08009f3f

08009e9c <process_restart>:
{
 8009e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009ea0:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8009ea4:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	4798      	blx	r3
 8009eaa:	b928      	cbnz	r0, 8009eb8 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	2219      	movs	r2, #25
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	615a      	str	r2, [r3, #20]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4798      	blx	r3
{
 8009eb8:	2600      	movs	r6, #0
 8009eba:	f105 0714 	add.w	r7, r5, #20
 8009ebe:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8009ec2:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009ec4:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009ec8:	42b3      	cmp	r3, r6
 8009eca:	dc0a      	bgt.n	8009ee2 <process_restart+0x46>
  entropy->c = 0;
 8009ecc:	2300      	movs	r3, #0
  entropy->a = 0;
 8009ece:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009ed2:	f06f 030f 	mvn.w	r3, #15
 8009ed6:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8009ed8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009edc:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009ee2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8009ee6:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009eea:	b12b      	cbz	r3, 8009ef8 <process_restart+0x5c>
 8009eec:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009ef0:	b9ab      	cbnz	r3, 8009f1e <process_restart+0x82>
 8009ef2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009ef6:	b9e3      	cbnz	r3, 8009f32 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8009ef8:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009efc:	2240      	movs	r2, #64	; 0x40
 8009efe:	2100      	movs	r1, #0
 8009f00:	330e      	adds	r3, #14
 8009f02:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009f06:	f021 fac7 	bl	802b498 <memset>
      entropy->last_dc_val[ci] = 0;
 8009f0a:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 8009f0e:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009f12:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009f16:	b97b      	cbnz	r3, 8009f38 <process_restart+0x9c>
 8009f18:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009f1c:	b14b      	cbz	r3, 8009f32 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8009f1e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8009f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f26:	2100      	movs	r1, #0
 8009f28:	331e      	adds	r3, #30
 8009f2a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009f2e:	f021 fab3 	bl	802b498 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009f32:	3601      	adds	r6, #1
 8009f34:	3704      	adds	r7, #4
 8009f36:	e7c5      	b.n	8009ec4 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009f38:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009f3c:	e7ee      	b.n	8009f1c <process_restart+0x80>

08009f3e <decode_mcu>:
{
 8009f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8009f42:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009f46:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009f48:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8009f4c:	ed2d 8b02 	vpush	{d8}
 8009f50:	b087      	sub	sp, #28
 8009f52:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 8009f54:	b133      	cbz	r3, 8009f64 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 8009f56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f58:	b90b      	cbnz	r3, 8009f5e <decode_mcu+0x20>
      process_restart(cinfo);
 8009f5a:	f7ff ff9f 	bl	8009e9c <process_restart>
    entropy->restarts_to_go--;
 8009f5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f60:	3b01      	subs	r3, #1
 8009f62:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009f64:	692b      	ldr	r3, [r5, #16]
 8009f66:	3301      	adds	r3, #1
 8009f68:	f000 809f 	beq.w	800a0aa <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 8009f6c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009f70:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 8009f72:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009f74:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8009f78:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009f7a:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 8009f7e:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009f82:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009f86:	42bb      	cmp	r3, r7
 8009f88:	f340 808f 	ble.w	800a0aa <decode_mcu+0x16c>
    block = MCU_data[blkn];
 8009f8c:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 8009f8e:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8009f90:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 8009f92:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009f96:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8009f98:	f852 3b04 	ldr.w	r3, [r2], #4
 8009f9c:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 8009f9e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009fa2:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8009fa6:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009faa:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 8009fae:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 8009fb0:	6952      	ldr	r2, [r2, #20]
 8009fb2:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8009fb6:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009fb8:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 8009fbc:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	f7ff fdea 	bl	8009b98 <arith_decode>
 8009fc4:	bb68      	cbnz	r0, 800a022 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 8009fc6:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8009fca:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009fce:	9a00      	ldr	r2, [sp, #0]
 8009fd0:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 8009fd2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80c4 	beq.w	800a164 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 8009fdc:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 8009fde:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 8009fe0:	699b      	ldr	r3, [r3, #24]
    k = 0;
 8009fe2:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009fe6:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 8009fea:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8009fee:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009ff2:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8009ff4:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	f7ff fdcd 	bl	8009b98 <arith_decode>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	f040 80b0 	bne.w	800a164 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 800a004:	f109 0101 	add.w	r1, r9, #1
 800a008:	4620      	mov	r0, r4
	k++;
 800a00a:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800a00c:	f7ff fdc4 	bl	8009b98 <arith_decode>
 800a010:	2800      	cmp	r0, #0
 800a012:	d16e      	bne.n	800a0f2 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 800a014:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800a018:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800a01c:	42b2      	cmp	r2, r6
 800a01e:	dcf1      	bgt.n	800a004 <decode_mcu+0xc6>
 800a020:	e038      	b.n	800a094 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800a022:	1c71      	adds	r1, r6, #1
 800a024:	4620      	mov	r0, r4
 800a026:	f7ff fdb7 	bl	8009b98 <arith_decode>
      st += 2; st += sign;
 800a02a:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a02c:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a02e:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a030:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a034:	4651      	mov	r1, sl
 800a036:	f7ff fdaf 	bl	8009b98 <arith_decode>
 800a03a:	4606      	mov	r6, r0
 800a03c:	b140      	cbz	r0, 800a050 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a03e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a042:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800a046:	4651      	mov	r1, sl
 800a048:	4620      	mov	r0, r4
 800a04a:	f7ff fda5 	bl	8009b98 <arith_decode>
 800a04e:	b9e8      	cbnz	r0, 800a08c <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a050:	9b02      	ldr	r3, [sp, #8]
 800a052:	4423      	add	r3, r4
 800a054:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a058:	4699      	mov	r9, r3
 800a05a:	2301      	movs	r3, #1
 800a05c:	fa03 f202 	lsl.w	r2, r3, r2
 800a060:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800a064:	da2a      	bge.n	800a0bc <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a066:	2200      	movs	r2, #0
      st += 14;
 800a068:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800a06c:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a06e:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800a072:	1076      	asrs	r6, r6, #1
 800a074:	d130      	bne.n	800a0d8 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	d137      	bne.n	800a0ec <decode_mcu+0x1ae>
 800a07c:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a080:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a084:	444a      	add	r2, r9
 800a086:	f8cb 2014 	str.w	r2, [fp, #20]
 800a08a:	e79e      	b.n	8009fca <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800a08c:	0076      	lsls	r6, r6, #1
 800a08e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a092:	d110      	bne.n	800a0b6 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	2275      	movs	r2, #117	; 0x75
 800a098:	f04f 31ff 	mov.w	r1, #4294967295
 800a09c:	4620      	mov	r0, r4
 800a09e:	615a      	str	r2, [r3, #20]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a8:	612b      	str	r3, [r5, #16]
}
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	b007      	add	sp, #28
 800a0ae:	ecbd 8b02 	vpop	{d8}
 800a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a0b6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ba:	e7c4      	b.n	800a046 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a0bc:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	fa03 f202 	lsl.w	r2, r3, r2
 800a0c6:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a0ca:	bfcc      	ite	gt
 800a0cc:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a0d0:	f108 0201 	addle.w	r2, r8, #1
 800a0d4:	0092      	lsls	r2, r2, #2
 800a0d6:	e7c7      	b.n	800a068 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 800a0d8:	4620      	mov	r0, r4
 800a0da:	9102      	str	r1, [sp, #8]
 800a0dc:	f7ff fd5c 	bl	8009b98 <arith_decode>
 800a0e0:	9902      	ldr	r1, [sp, #8]
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d0c5      	beq.n	800a072 <decode_mcu+0x134>
 800a0e6:	ea49 0906 	orr.w	r9, r9, r6
 800a0ea:	e7c2      	b.n	800a072 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 800a0ec:	ea6f 0909 	mvn.w	r9, r9
 800a0f0:	e7c6      	b.n	800a080 <decode_mcu+0x142>
      st += 2;
 800a0f2:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a0f6:	ee18 1a10 	vmov	r1, s16
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f7ff fd4c 	bl	8009b98 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a100:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a102:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a104:	4620      	mov	r0, r4
 800a106:	f7ff fd47 	bl	8009b98 <arith_decode>
 800a10a:	4680      	mov	r8, r0
 800a10c:	b1a8      	cbz	r0, 800a13a <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800a10e:	4649      	mov	r1, r9
 800a110:	4620      	mov	r0, r4
 800a112:	f7ff fd41 	bl	8009b98 <arith_decode>
 800a116:	b180      	cbz	r0, 800a13a <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a118:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800a11c:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800a120:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a124:	42b1      	cmp	r1, r6
 800a126:	bfac      	ite	ge
 800a128:	21bd      	movge	r1, #189	; 0xbd
 800a12a:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800a12c:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800a130:	4649      	mov	r1, r9
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff fd30 	bl	8009b98 <arith_decode>
 800a138:	b9b0      	cbnz	r0, 800a168 <decode_mcu+0x22a>
      st += 14;
 800a13a:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800a13e:	46c1      	mov	r9, r8
      while (m >>= 1)
 800a140:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a144:	d118      	bne.n	800a178 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	bb03      	cbnz	r3, 800a18c <decode_mcu+0x24e>
 800a14a:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800a14e:	9b04      	ldr	r3, [sp, #16]
 800a150:	9900      	ldr	r1, [sp, #0]
 800a152:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a156:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800a15a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a15e:	42b3      	cmp	r3, r6
 800a160:	f73f af43 	bgt.w	8009fea <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a164:	3701      	adds	r7, #1
 800a166:	e70c      	b.n	8009f82 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800a168:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a16c:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800a170:	d090      	beq.n	800a094 <decode_mcu+0x156>
	    st += 1;
 800a172:	f109 0901 	add.w	r9, r9, #1
 800a176:	e7db      	b.n	800a130 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 800a178:	4620      	mov	r0, r4
 800a17a:	9102      	str	r1, [sp, #8]
 800a17c:	f7ff fd0c 	bl	8009b98 <arith_decode>
 800a180:	9902      	ldr	r1, [sp, #8]
 800a182:	2800      	cmp	r0, #0
 800a184:	d0dc      	beq.n	800a140 <decode_mcu+0x202>
 800a186:	ea49 0908 	orr.w	r9, r9, r8
 800a18a:	e7d9      	b.n	800a140 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 800a18c:	ea6f 0209 	mvn.w	r2, r9
 800a190:	e7dd      	b.n	800a14e <decode_mcu+0x210>

0800a192 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800a192:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	4604      	mov	r4, r0
 800a19c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a19e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a1a2:	ed2d 8b02 	vpush	{d8}
 800a1a6:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800a1a8:	b133      	cbz	r3, 800a1b8 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800a1aa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a1ac:	b90b      	cbnz	r3, 800a1b2 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800a1ae:	f7ff fe75 	bl	8009e9c <process_restart>
    entropy->restarts_to_go--;
 800a1b2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a1b8:	6933      	ldr	r3, [r6, #16]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	d076      	beq.n	800a2ac <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a1be:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a1c2:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a1c4:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800a1c8:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a1cc:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a1ce:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800a1d2:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a1d6:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800a1d8:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a1dc:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a1e0:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a1e2:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	dc37      	bgt.n	800a258 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a1e8:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a1ec:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a1f0:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a1f2:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800a1f6:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a1fa:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a1fe:	42ab      	cmp	r3, r5
 800a200:	db54      	blt.n	800a2ac <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a202:	1e6b      	subs	r3, r5, #1
 800a204:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800a206:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a20c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a210:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800a214:	dd05      	ble.n	800a222 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a216:	4651      	mov	r1, sl
 800a218:	4620      	mov	r0, r4
 800a21a:	f7ff fcbd 	bl	8009b98 <arith_decode>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d144      	bne.n	800a2ac <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800a222:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800a226:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800a228:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800a22c:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a230:	b1d1      	cbz	r1, 800a268 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800a232:	f10a 0102 	add.w	r1, sl, #2
 800a236:	4620      	mov	r0, r4
 800a238:	f7ff fcae 	bl	8009b98 <arith_decode>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d0dc      	beq.n	800a1fa <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800a240:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800a244:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800a248:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800a24a:	bfb4      	ite	lt
 800a24c:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800a24e:	9a01      	ldrge	r2, [sp, #4]
 800a250:	4413      	add	r3, r2
 800a252:	f8a8 3000 	strh.w	r3, [r8]
 800a256:	e7d0      	b.n	800a1fa <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800a258:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a25c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1c1      	bne.n	800a1e8 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800a264:	3f01      	subs	r7, #1
 800a266:	e7bd      	b.n	800a1e4 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800a268:	f10a 0101 	add.w	r1, sl, #1
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7ff fc93 	bl	8009b98 <arith_decode>
 800a272:	b150      	cbz	r0, 800a28a <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a274:	ee18 1a10 	vmov	r1, s16
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff fc8d 	bl	8009b98 <arith_decode>
	  *thiscoef = m1;
 800a27e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800a282:	2800      	cmp	r0, #0
 800a284:	bf18      	it	ne
 800a286:	4613      	movne	r3, r2
 800a288:	e7e3      	b.n	800a252 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800a28a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a28e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800a292:	42aa      	cmp	r2, r5
 800a294:	dac5      	bge.n	800a222 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	2275      	movs	r2, #117	; 0x75
 800a29a:	f04f 31ff 	mov.w	r1, #4294967295
 800a29e:	4620      	mov	r0, r4
 800a2a0:	615a      	str	r2, [r3, #20]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2aa:	6133      	str	r3, [r6, #16]
}
 800a2ac:	2001      	movs	r0, #1
 800a2ae:	b005      	add	sp, #20
 800a2b0:	ecbd 8b02 	vpop	{d8}
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2b8 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800a2b8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a2c4:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a2c8:	b133      	cbz	r3, 800a2d8 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800a2ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a2cc:	b90b      	cbnz	r3, 800a2d2 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800a2ce:	f7ff fde5 	bl	8009e9c <process_restart>
    entropy->restarts_to_go--;
 800a2d2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a2d8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800a2dc:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800a2de:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a2e0:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a2e2:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a2e4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a2e8:	42ab      	cmp	r3, r5
 800a2ea:	dc02      	bgt.n	800a2f2 <decode_mcu_DC_refine+0x3a>
}
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f7ff fc4f 	bl	8009b98 <arith_decode>
 800a2fa:	b120      	cbz	r0, 800a306 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800a2fc:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800a300:	8813      	ldrh	r3, [r2, #0]
 800a302:	433b      	orrs	r3, r7
 800a304:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a306:	3501      	adds	r5, #1
 800a308:	e7ec      	b.n	800a2e4 <decode_mcu_DC_refine+0x2c>

0800a30a <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800a30a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a30e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a312:	4604      	mov	r4, r0
 800a314:	b087      	sub	sp, #28
 800a316:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a318:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a31c:	b133      	cbz	r3, 800a32c <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a31e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a320:	b90b      	cbnz	r3, 800a326 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800a322:	f7ff fdbb 	bl	8009e9c <process_restart>
    entropy->restarts_to_go--;
 800a326:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a328:	3b01      	subs	r3, #1
 800a32a:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a32c:	6933      	ldr	r3, [r6, #16]
 800a32e:	3301      	adds	r3, #1
 800a330:	d01d      	beq.n	800a36e <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800a332:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a334:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800a338:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800a33c:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a33e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a342:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800a34c:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a34e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a352:	42ab      	cmp	r3, r5
 800a354:	db0b      	blt.n	800a36e <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a356:	1e69      	subs	r1, r5, #1
 800a358:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a35c:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a35e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a362:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a366:	4641      	mov	r1, r8
 800a368:	f7ff fc16 	bl	8009b98 <arith_decode>
 800a36c:	b1b0      	cbz	r0, 800a39c <decode_mcu_AC_first+0x92>
}
 800a36e:	2001      	movs	r0, #1
 800a370:	b007      	add	sp, #28
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800a376:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800a378:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a37c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800a380:	42aa      	cmp	r2, r5
 800a382:	da0b      	bge.n	800a39c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	2275      	movs	r2, #117	; 0x75
 800a388:	f04f 31ff 	mov.w	r1, #4294967295
 800a38c:	4620      	mov	r0, r4
 800a38e:	615a      	str	r2, [r3, #20]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a394:	f04f 33ff 	mov.w	r3, #4294967295
 800a398:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800a39a:	e7e8      	b.n	800a36e <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a39c:	f108 0101 	add.w	r1, r8, #1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f7ff fbf9 	bl	8009b98 <arith_decode>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0e5      	beq.n	800a376 <decode_mcu_AC_first+0x6c>
    st += 2;
 800a3aa:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a3ae:	4659      	mov	r1, fp
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f7ff fbf1 	bl	8009b98 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a3b6:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a3b8:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f7ff fbec 	bl	8009b98 <arith_decode>
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	b1b0      	cbz	r0, 800a3f2 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800a3c4:	4641      	mov	r1, r8
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7ff fbe6 	bl	8009b98 <arith_decode>
 800a3cc:	b188      	cbz	r0, 800a3f2 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a3ce:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800a3d0:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800a3d2:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a3d6:	18e1      	adds	r1, r4, r3
 800a3d8:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800a3dc:	42a9      	cmp	r1, r5
 800a3de:	bfac      	ite	ge
 800a3e0:	21bd      	movge	r1, #189	; 0xbd
 800a3e2:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a3e4:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f7ff fbd4 	bl	8009b98 <arith_decode>
 800a3f0:	b988      	cbnz	r0, 800a416 <decode_mcu_AC_first+0x10c>
    st += 14;
 800a3f2:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800a3f6:	463a      	mov	r2, r7
    while (m >>= 1)
 800a3f8:	107f      	asrs	r7, r7, #1
 800a3fa:	d113      	bne.n	800a424 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	b9e3      	cbnz	r3, 800a43a <decode_mcu_AC_first+0x130>
 800a400:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a402:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800a406:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a40a:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a40c:	408a      	lsls	r2, r1
 800a40e:	9902      	ldr	r1, [sp, #8]
 800a410:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a414:	e79b      	b.n	800a34e <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800a416:	007f      	lsls	r7, r7, #1
 800a418:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800a41c:	d0b2      	beq.n	800a384 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800a41e:	f108 0801 	add.w	r8, r8, #1
 800a422:	e7e1      	b.n	800a3e8 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800a424:	4620      	mov	r0, r4
 800a426:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a42a:	f7ff fbb5 	bl	8009b98 <arith_decode>
 800a42e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a432:	2800      	cmp	r0, #0
 800a434:	d0e0      	beq.n	800a3f8 <decode_mcu_AC_first+0xee>
 800a436:	433a      	orrs	r2, r7
 800a438:	e7de      	b.n	800a3f8 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800a43a:	43d2      	mvns	r2, r2
 800a43c:	e7e1      	b.n	800a402 <decode_mcu_AC_first+0xf8>

0800a43e <decode_mcu_DC_first>:
{
 800a43e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a442:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a446:	b085      	sub	sp, #20
 800a448:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a44a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a44e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800a450:	b133      	cbz	r3, 800a460 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a452:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a454:	b90b      	cbnz	r3, 800a45a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800a456:	f7ff fd21 	bl	8009e9c <process_restart>
    entropy->restarts_to_go--;
 800a45a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a45c:	3b01      	subs	r3, #1
 800a45e:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a460:	6933      	ldr	r3, [r6, #16]
 800a462:	3301      	adds	r3, #1
 800a464:	d073      	beq.n	800a54e <decode_mcu_DC_first+0x110>
 800a466:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a474:	4543      	cmp	r3, r8
 800a476:	dd6a      	ble.n	800a54e <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800a478:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800a47a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a47c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800a47e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a482:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800a484:	f852 3b04 	ldr.w	r3, [r2], #4
 800a488:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a48a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a48e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800a492:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a496:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a49a:	6952      	ldr	r2, [r2, #20]
 800a49c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800a4a0:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a4a2:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800a4a6:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7ff fb75 	bl	8009b98 <arith_decode>
 800a4ae:	b958      	cbnz	r0, 800a4c8 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800a4b0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a4b4:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a4b8:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a4bc:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a4c0:	4093      	lsls	r3, r2
 800a4c2:	9a02      	ldr	r2, [sp, #8]
 800a4c4:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a4c6:	e7d3      	b.n	800a470 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800a4c8:	1c69      	adds	r1, r5, #1
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7ff fb64 	bl	8009b98 <arith_decode>
      st += 2; st += sign;
 800a4d0:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a4d2:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a4d4:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a4d6:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a4da:	4659      	mov	r1, fp
 800a4dc:	f7ff fb5c 	bl	8009b98 <arith_decode>
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	b140      	cbz	r0, 800a4f6 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a4e4:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a4e8:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f7ff fb52 	bl	8009b98 <arith_decode>
 800a4f4:	b9e0      	cbnz	r0, 800a530 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a4f6:	9b00      	ldr	r3, [sp, #0]
 800a4f8:	4423      	add	r3, r4
 800a4fa:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a4fe:	4699      	mov	r9, r3
 800a500:	2301      	movs	r3, #1
 800a502:	fa03 f202 	lsl.w	r2, r3, r2
 800a506:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800a50a:	da27      	bge.n	800a55c <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a50c:	2300      	movs	r3, #0
 800a50e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800a512:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800a516:	46a9      	mov	r9, r5
 800a518:	106d      	asrs	r5, r5, #1
 800a51a:	d12d      	bne.n	800a578 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800a51c:	2f00      	cmp	r7, #0
 800a51e:	d135      	bne.n	800a58c <decode_mcu_DC_first+0x14e>
 800a520:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a524:	f8da 2014 	ldr.w	r2, [sl, #20]
 800a528:	444a      	add	r2, r9
 800a52a:	f8ca 2014 	str.w	r2, [sl, #20]
 800a52e:	e7c1      	b.n	800a4b4 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800a530:	006d      	lsls	r5, r5, #1
 800a532:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a536:	d10e      	bne.n	800a556 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	2275      	movs	r2, #117	; 0x75
 800a53c:	f04f 31ff 	mov.w	r1, #4294967295
 800a540:	4620      	mov	r0, r4
 800a542:	615a      	str	r2, [r3, #20]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	6133      	str	r3, [r6, #16]
}
 800a54e:	2001      	movs	r0, #1
 800a550:	b005      	add	sp, #20
 800a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a556:	f10b 0b01 	add.w	fp, fp, #1
 800a55a:	e7c7      	b.n	800a4ec <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a55c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a560:	2301      	movs	r3, #1
 800a562:	fa03 f202 	lsl.w	r2, r3, r2
 800a566:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a56a:	bfcc      	ite	gt
 800a56c:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a56e:	1c7a      	addle	r2, r7, #1
 800a570:	0092      	lsls	r2, r2, #2
 800a572:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800a576:	e7cc      	b.n	800a512 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800a578:	4620      	mov	r0, r4
 800a57a:	9100      	str	r1, [sp, #0]
 800a57c:	f7ff fb0c 	bl	8009b98 <arith_decode>
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	2800      	cmp	r0, #0
 800a584:	d0c8      	beq.n	800a518 <decode_mcu_DC_first+0xda>
 800a586:	ea49 0905 	orr.w	r9, r9, r5
 800a58a:	e7c5      	b.n	800a518 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800a58c:	ea6f 0909 	mvn.w	r9, r9
 800a590:	e7c8      	b.n	800a524 <decode_mcu_DC_first+0xe6>
	...

0800a594 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a594:	6843      	ldr	r3, [r0, #4]
 800a596:	22bc      	movs	r2, #188	; 0xbc
 800a598:	2101      	movs	r1, #1
 800a59a:	681b      	ldr	r3, [r3, #0]
{
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a5a0:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a5a4:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800a5a6:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800a5aa:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800a5ac:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	f020 ff71 	bl	802b498 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800a5b6:	2371      	movs	r3, #113	; 0x71
 800a5b8:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800a5bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a5c0:	b17b      	cbz	r3, 800a5e2 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a5c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	6863      	ldr	r3, [r4, #4]
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a5cc:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4798      	blx	r3
 800a5d2:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800a5d4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a5d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5da:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800a5de:	42ab      	cmp	r3, r5
 800a5e0:	dc00      	bgt.n	800a5e4 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800a5e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5e8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a5ea:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800a5ec:	f020 ff54 	bl	802b498 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a5f0:	e7f2      	b.n	800a5d8 <jinit_arith_decoder+0x44>
 800a5f2:	bf00      	nop
 800a5f4:	08009c75 	.word	0x08009c75

0800a5f8 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800a5f8:	4770      	bx	lr
	...

0800a5fc <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a5fc:	6803      	ldr	r3, [r0, #0]
 800a5fe:	227b      	movs	r2, #123	; 0x7b
 800a600:	f04f 31ff 	mov.w	r1, #4294967295
{
 800a604:	b510      	push	{r4, lr}
 800a606:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a608:	615a      	str	r2, [r3, #20]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800a60e:	69a3      	ldr	r3, [r4, #24]
 800a610:	4a02      	ldr	r2, [pc, #8]	; (800a61c <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800a612:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800a614:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800a616:	2202      	movs	r2, #2
 800a618:	605a      	str	r2, [r3, #4]
}
 800a61a:	bd10      	pop	{r4, pc}
 800a61c:	0802edd0 	.word	0x0802edd0

0800a620 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800a620:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800a622:	1e0c      	subs	r4, r1, #0
{
 800a624:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800a626:	dd08      	ble.n	800a63a <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800a628:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800a62a:	6869      	ldr	r1, [r5, #4]
 800a62c:	42a1      	cmp	r1, r4
 800a62e:	db05      	blt.n	800a63c <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800a630:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a632:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800a634:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a636:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800a638:	602b      	str	r3, [r5, #0]
  }
}
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800a63c:	68eb      	ldr	r3, [r5, #12]
 800a63e:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800a640:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800a642:	4798      	blx	r3
 800a644:	e7f1      	b.n	800a62a <skip_input_data+0xa>

0800a646 <term_source>:
 800a646:	4770      	bx	lr

0800a648 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	4604      	mov	r4, r0
 800a64c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800a64e:	460d      	mov	r5, r1
 800a650:	b101      	cbz	r1, 800a654 <jpeg_mem_src+0xc>
 800a652:	b92a      	cbnz	r2, 800a660 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	222b      	movs	r2, #43	; 0x2b
 800a658:	4620      	mov	r0, r4
 800a65a:	615a      	str	r2, [r3, #20]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800a660:	69a1      	ldr	r1, [r4, #24]
 800a662:	b929      	cbnz	r1, 800a670 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	221c      	movs	r2, #28
 800a668:	4620      	mov	r0, r4
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800a66e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800a670:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800a672:	4a06      	ldr	r2, [pc, #24]	; (800a68c <jpeg_mem_src+0x44>)
 800a674:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800a676:	4a06      	ldr	r2, [pc, #24]	; (800a690 <jpeg_mem_src+0x48>)
 800a678:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800a67a:	4a06      	ldr	r2, [pc, #24]	; (800a694 <jpeg_mem_src+0x4c>)
 800a67c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800a67e:	4a06      	ldr	r2, [pc, #24]	; (800a698 <jpeg_mem_src+0x50>)
 800a680:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800a682:	4a06      	ldr	r2, [pc, #24]	; (800a69c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800a684:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800a688:	619a      	str	r2, [r3, #24]
}
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	0800a5f9 	.word	0x0800a5f9
 800a690:	0800a5fd 	.word	0x0800a5fd
 800a694:	0800a621 	.word	0x0800a621
 800a698:	0800e879 	.word	0x0800e879
 800a69c:	0800a647 	.word	0x0800a647

0800a6a0 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800a6a0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a6a4:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800a6a8:	2a01      	cmp	r2, #1
 800a6aa:	dd05      	ble.n	800a6b8 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800a6ac:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a6ae:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800a6b0:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800a6b2:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800a6b6:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a6b8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a6bc:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a6c0:	3a01      	subs	r2, #1
 800a6c2:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800a6c6:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a6c8:	bf34      	ite	cc
 800a6ca:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a6cc:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800a6ce:	e7ee      	b.n	800a6ae <start_iMCU_row+0xe>

0800a6d0 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800a6d6:	f7ff bfe3 	b.w	800a6a0 <start_iMCU_row>

0800a6da <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800a6da:	2000      	movs	r0, #0
 800a6dc:	4770      	bx	lr

0800a6de <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800a6de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e2:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800a6e6:	b08f      	sub	sp, #60	; 0x3c
 800a6e8:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a6ea:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a6ee:	465f      	mov	r7, fp
 800a6f0:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a6f2:	f04f 0801 	mov.w	r8, #1
 800a6f6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a6fa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a6fe:	42b3      	cmp	r3, r6
 800a700:	dc13      	bgt.n	800a72a <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a702:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a704:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a708:	69eb      	ldr	r3, [r5, #28]
 800a70a:	42b3      	cmp	r3, r6
 800a70c:	dc22      	bgt.n	800a754 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a70e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a712:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a716:	3301      	adds	r3, #1
 800a718:	4293      	cmp	r3, r2
 800a71a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a71e:	d270      	bcs.n	800a802 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800a720:	4620      	mov	r0, r4
 800a722:	f7ff ffbd 	bl	800a6a0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a726:	2003      	movs	r0, #3
 800a728:	e044      	b.n	800a7b4 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800a72a:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a72e:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800a730:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a732:	6849      	ldr	r1, [r1, #4]
 800a734:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a738:	3112      	adds	r1, #18
 800a73a:	f8cd 8000 	str.w	r8, [sp]
 800a73e:	435a      	muls	r2, r3
 800a740:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800a744:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a748:	4620      	mov	r0, r4
 800a74a:	47d0      	blx	sl
 800a74c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a750:	3601      	adds	r6, #1
 800a752:	e7d2      	b.n	800a6fa <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800a754:	00b3      	lsls	r3, r6, #2
 800a756:	696f      	ldr	r7, [r5, #20]
 800a758:	9308      	str	r3, [sp, #32]
 800a75a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800a75e:	42bb      	cmp	r3, r7
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	d94a      	bls.n	800a7fc <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a766:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a76a:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800a76c:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a76e:	9206      	str	r2, [sp, #24]
 800a770:	e013      	b.n	800a79a <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800a772:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a776:	f04f 0c00 	mov.w	ip, #0
 800a77a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a77e:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800a782:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a784:	fb07 f20e 	mul.w	r2, r7, lr
 800a788:	01d2      	lsls	r2, r2, #7
 800a78a:	9204      	str	r2, [sp, #16]
 800a78c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800a790:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a792:	9a05      	ldr	r2, [sp, #20]
 800a794:	4562      	cmp	r2, ip
 800a796:	dc10      	bgt.n	800a7ba <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a798:	3301      	adds	r3, #1
 800a79a:	9a06      	ldr	r2, [sp, #24]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	dce8      	bgt.n	800a772 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a7a0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a7a4:	f105 0120 	add.w	r1, r5, #32
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	4798      	blx	r3
 800a7ae:	bb18      	cbnz	r0, 800a7f8 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800a7b0:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800a7b4:	b00f      	add	sp, #60	; 0x3c
 800a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a7ba:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800a7be:	9904      	ldr	r1, [sp, #16]
 800a7c0:	f852 2008 	ldr.w	r2, [r2, r8]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a7c8:	9a03      	ldr	r2, [sp, #12]
 800a7ca:	f102 0108 	add.w	r1, r2, #8
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800a7d4:	9807      	ldr	r0, [sp, #28]
 800a7d6:	4596      	cmp	lr, r2
 800a7d8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800a7dc:	dc08      	bgt.n	800a7f0 <consume_data+0x112>
 800a7de:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a7e0:	f10c 0c01 	add.w	ip, ip, #1
 800a7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e6:	f108 0804 	add.w	r8, r8, #4
 800a7ea:	4411      	add	r1, r2
 800a7ec:	9103      	str	r1, [sp, #12]
 800a7ee:	e7d0      	b.n	800a792 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a7f0:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800a7f2:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a7f6:	e7ed      	b.n	800a7d4 <consume_data+0xf6>
	 MCU_col_num++) {
 800a7f8:	3701      	adds	r7, #1
 800a7fa:	e7ae      	b.n	800a75a <consume_data+0x7c>
       yoffset++) {
 800a7fc:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800a7fe:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a800:	e782      	b.n	800a708 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a802:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a806:	4620      	mov	r0, r4
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a80c:	2004      	movs	r0, #4
 800a80e:	e7d1      	b.n	800a7b4 <consume_data+0xd6>

0800a810 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	4604      	mov	r4, r0
 800a816:	b089      	sub	sp, #36	; 0x24
 800a818:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a81a:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a81e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a822:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a826:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a82a:	429a      	cmp	r2, r3
 800a82c:	db1d      	blt.n	800a86a <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800a82e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a832:	d103      	bne.n	800a83c <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800a834:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a838:	429a      	cmp	r2, r3
 800a83a:	d916      	bls.n	800a86a <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a83c:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a83e:	2600      	movs	r6, #0
 800a840:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a844:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800a846:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a84a:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a84c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a84e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a852:	42b3      	cmp	r3, r6
 800a854:	dc13      	bgt.n	800a87e <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a856:	1c50      	adds	r0, r2, #1
 800a858:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a85c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a860:	4290      	cmp	r0, r2
 800a862:	bf2c      	ite	cs
 800a864:	2004      	movcs	r0, #4
 800a866:	2003      	movcc	r0, #3
 800a868:	e006      	b.n	800a878 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a86a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a86e:	4620      	mov	r0, r4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4798      	blx	r3
 800a874:	2800      	cmp	r0, #0
 800a876:	d1d4      	bne.n	800a822 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800a878:	b009      	add	sp, #36	; 0x24
 800a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a87e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a880:	b913      	cbnz	r3, 800a888 <decompress_data+0x78>
       ci++, compptr++) {
 800a882:	3601      	adds	r6, #1
 800a884:	3558      	adds	r5, #88	; 0x58
 800a886:	e7e1      	b.n	800a84c <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800a888:	6861      	ldr	r1, [r4, #4]
 800a88a:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a88c:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a88e:	9000      	str	r0, [sp, #0]
 800a890:	4620      	mov	r0, r4
 800a892:	6a0f      	ldr	r7, [r1, #32]
 800a894:	435a      	muls	r2, r3
 800a896:	9906      	ldr	r1, [sp, #24]
 800a898:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800a89c:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a89e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a8a2:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a8a4:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	68eb      	ldr	r3, [r5, #12]
 800a8aa:	d221      	bcs.n	800a8f0 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800a8ac:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a8ae:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a8b2:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a8b4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800a8bc:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a8c0:	9202      	str	r2, [sp, #8]
 800a8c2:	9a02      	ldr	r2, [sp, #8]
 800a8c4:	4552      	cmp	r2, sl
 800a8c6:	dadc      	bge.n	800a882 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800a8c8:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800a8ca:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800a8ce:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a8d0:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800a8d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a8d6:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a8d8:	69e9      	ldr	r1, [r5, #28]
 800a8da:	9a05      	ldr	r2, [sp, #20]
 800a8dc:	4541      	cmp	r1, r8
 800a8de:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800a8e2:	d80f      	bhi.n	800a904 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800a8e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a8e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a8ea:	9a02      	ldr	r2, [sp, #8]
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	e7e7      	b.n	800a8c0 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a8f0:	6a2a      	ldr	r2, [r5, #32]
 800a8f2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8f6:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800a8fa:	f1ba 0f00 	cmp.w	sl, #0
 800a8fe:	bf08      	it	eq
 800a900:	469a      	moveq	sl, r3
 800a902:	e7d4      	b.n	800a8ae <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800a904:	f8cd 9000 	str.w	r9, [sp]
 800a908:	4629      	mov	r1, r5
 800a90a:	9307      	str	r3, [sp, #28]
 800a90c:	4620      	mov	r0, r4
 800a90e:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800a910:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a912:	f108 0801 	add.w	r8, r8, #1
 800a916:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800a918:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a91a:	e7dd      	b.n	800a8d8 <decompress_data+0xc8>

0800a91c <start_output_pass>:
{
 800a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a920:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a924:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800a926:	692b      	ldr	r3, [r5, #16]
 800a928:	b323      	cbz	r3, 800a974 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a92a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d04b      	beq.n	800a9c8 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800a930:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d047      	beq.n	800a9c8 <start_output_pass+0xac>
 800a938:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d043      	beq.n	800a9c8 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800a940:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a942:	b93b      	cbnz	r3, 800a954 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a944:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a946:	2118      	movs	r1, #24
 800a948:	6843      	ldr	r3, [r0, #4]
 800a94a:	434a      	muls	r2, r1
 800a94c:	2101      	movs	r1, #1
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800a952:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a954:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800a956:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a95a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800a95e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800a962:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a964:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a966:	fb0e c703 	mla	r7, lr, r3, ip
 800a96a:	4293      	cmp	r3, r2
 800a96c:	db07      	blt.n	800a97e <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a96e:	b359      	cbz	r1, 800a9c8 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800a970:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800a972:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800a97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800a97e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a980:	b312      	cbz	r2, 800a9c8 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800a982:	8816      	ldrh	r6, [r2, #0]
 800a984:	b306      	cbz	r6, 800a9c8 <start_output_pass+0xac>
 800a986:	8856      	ldrh	r6, [r2, #2]
 800a988:	b1f6      	cbz	r6, 800a9c8 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800a98a:	8a16      	ldrh	r6, [r2, #16]
 800a98c:	b1e6      	cbz	r6, 800a9c8 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800a98e:	8c16      	ldrh	r6, [r2, #32]
 800a990:	b1d6      	cbz	r6, 800a9c8 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800a992:	8a56      	ldrh	r6, [r2, #18]
 800a994:	b1c6      	cbz	r6, 800a9c8 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800a996:	8892      	ldrh	r2, [r2, #4]
 800a998:	b1b2      	cbz	r2, 800a9c8 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800a99a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800a99e:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800a9a0:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800a9a2:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	db0e      	blt.n	800a9c8 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800a9aa:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a9ac:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800a9b0:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a9b2:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800a9b6:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800a9ba:	bf18      	it	ne
 800a9bc:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800a9be:	2a06      	cmp	r2, #6
 800a9c0:	d1f4      	bne.n	800a9ac <start_output_pass+0x90>
       ci++, compptr++) {
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	3058      	adds	r0, #88	; 0x58
 800a9c6:	e7cd      	b.n	800a964 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800a9c8:	4b01      	ldr	r3, [pc, #4]	; (800a9d0 <start_output_pass+0xb4>)
 800a9ca:	e7d2      	b.n	800a972 <start_output_pass+0x56>
 800a9cc:	0800ab53 	.word	0x0800ab53
 800a9d0:	0800a811 	.word	0x0800a811

0800a9d4 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a9d4:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a9dc:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a9de:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	ed2d 8b02 	vpush	{d8}
 800a9e8:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a9ea:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a9ec:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800a9f0:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a9f6:	69ab      	ldr	r3, [r5, #24]
 800a9f8:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a9fa:	f105 0320 	add.w	r3, r5, #32
 800a9fe:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800aa02:	69eb      	ldr	r3, [r5, #28]
 800aa04:	9a03      	ldr	r2, [sp, #12]
 800aa06:	4293      	cmp	r3, r2
 800aa08:	dc13      	bgt.n	800aa32 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800aa0a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800aa0e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800aa12:	3301      	adds	r3, #1
 800aa14:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800aa18:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800aa24:	f080 808e 	bcs.w	800ab44 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f7ff fe39 	bl	800a6a0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800aa2e:	2003      	movs	r0, #3
 800aa30:	e02a      	b.n	800aa88 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800aa32:	696f      	ldr	r7, [r5, #20]
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	429f      	cmp	r7, r3
 800aa38:	d905      	bls.n	800aa46 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	3301      	adds	r3, #1
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	e7dd      	b.n	800aa02 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800aa46:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800aa4a:	b133      	cbz	r3, 800aa5a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800aa4c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800aa50:	2100      	movs	r1, #0
 800aa52:	6a28      	ldr	r0, [r5, #32]
 800aa54:	01d2      	lsls	r2, r2, #7
 800aa56:	f020 fd1f 	bl	802b498 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800aa5a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800aa5e:	ee18 1a10 	vmov	r1, s16
 800aa62:	4620      	mov	r0, r4
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	4798      	blx	r3
 800aa68:	b158      	cbz	r0, 800aa82 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aa6a:	f04f 0b00 	mov.w	fp, #0
 800aa6e:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800aa72:	46da      	mov	sl, fp
 800aa74:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aa76:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800aa7a:	455b      	cmp	r3, fp
 800aa7c:	dc09      	bgt.n	800aa92 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800aa7e:	3701      	adds	r7, #1
 800aa80:	e7d8      	b.n	800aa34 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800aa82:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800aa84:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800aa88:	b00f      	add	sp, #60	; 0x3c
 800aa8a:	ecbd 8b02 	vpop	{d8}
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa98:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800aa9a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800aa9c:	b923      	cbnz	r3, 800aaa8 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800aa9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaa0:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aaa2:	f10b 0b01 	add.w	fp, fp, #1
 800aaa6:	e7e6      	b.n	800aa76 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800aaa8:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aaaa:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800aaae:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800aab2:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800aab4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800aabc:	9b08      	ldr	r3, [sp, #32]
 800aabe:	429f      	cmp	r7, r3
 800aac0:	bf34      	ite	cc
 800aac2:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800aac4:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800aac6:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800aac8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800aaca:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800aacc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aace:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800aad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800aad6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800aad8:	437a      	muls	r2, r7
 800aada:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aadc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800aade:	4542      	cmp	r2, r8
 800aae0:	dddf      	ble.n	800aaa2 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800aae2:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800aae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aae8:	4282      	cmp	r2, r0
 800aaea:	d304      	bcc.n	800aaf6 <decompress_onepass+0x122>
 800aaec:	9a03      	ldr	r2, [sp, #12]
 800aaee:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800aaf0:	4442      	add	r2, r8
 800aaf2:	4290      	cmp	r0, r2
 800aaf4:	dd0b      	ble.n	800ab0e <decompress_onepass+0x13a>
 800aaf6:	f10a 0908 	add.w	r9, sl, #8
 800aafa:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800aafe:	f04f 0900 	mov.w	r9, #0
 800ab02:	9207      	str	r2, [sp, #28]
 800ab04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab06:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800ab08:	9a06      	ldr	r2, [sp, #24]
 800ab0a:	4591      	cmp	r9, r2
 800ab0c:	db07      	blt.n	800ab1e <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800ab0e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ab10:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800ab14:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800ab16:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800ab18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ab1c:	e7de      	b.n	800aadc <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800ab1e:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800ab20:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800ab24:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab28:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800ab2a:	9804      	ldr	r0, [sp, #16]
 800ab2c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800ab30:	9000      	str	r0, [sp, #0]
 800ab32:	4620      	mov	r0, r4
 800ab34:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800ab36:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab38:	9b04      	ldr	r3, [sp, #16]
 800ab3a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800ab3c:	4413      	add	r3, r2
 800ab3e:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800ab40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab42:	e7e1      	b.n	800ab08 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800ab44:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ab48:	4620      	mov	r0, r4
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800ab4e:	2004      	movs	r0, #4
 800ab50:	e79a      	b.n	800aa88 <decompress_onepass+0xb4>

0800ab52 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800ab52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ab56:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800ab5a:	b0c5      	sub	sp, #276	; 0x114
 800ab5c:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ab5e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800ab62:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ab64:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800ab66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ab6a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800ab6e:	428b      	cmp	r3, r1
 800ab70:	dc03      	bgt.n	800ab7a <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800ab72:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800ab76:	6950      	ldr	r0, [r2, #20]
 800ab78:	b1a8      	cbz	r0, 800aba6 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ab7a:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab7c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ab80:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab82:	2300      	movs	r3, #0
 800ab84:	9303      	str	r3, [sp, #12]
 800ab86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab88:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800ab8a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab8e:	428b      	cmp	r3, r1
 800ab90:	dc1e      	bgt.n	800abd0 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800ab92:	3201      	adds	r2, #1
 800ab94:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800ab98:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800ab9c:	4282      	cmp	r2, r0
 800ab9e:	bf2c      	ite	cs
 800aba0:	2004      	movcs	r0, #4
 800aba2:	2003      	movcc	r0, #3
 800aba4:	e011      	b.n	800abca <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800aba6:	428b      	cmp	r3, r1
 800aba8:	d10a      	bne.n	800abc0 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800abaa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800abae:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800abb2:	2900      	cmp	r1, #0
 800abb4:	bf08      	it	eq
 800abb6:	3301      	addeq	r3, #1
 800abb8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800abbc:	4299      	cmp	r1, r3
 800abbe:	d8dc      	bhi.n	800ab7a <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800abc0:	6813      	ldr	r3, [r2, #0]
 800abc2:	4620      	mov	r0, r4
 800abc4:	4798      	blx	r3
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d1cd      	bne.n	800ab66 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800abca:	b045      	add	sp, #276	; 0x114
 800abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800abd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800abd2:	b923      	cbnz	r3, 800abde <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	3558      	adds	r5, #88	; 0x58
 800abd8:	3301      	adds	r3, #1
 800abda:	9303      	str	r3, [sp, #12]
 800abdc:	e7d3      	b.n	800ab86 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800abde:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800abe0:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800abe2:	4293      	cmp	r3, r2
 800abe4:	f240 815a 	bls.w	800ae9c <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800abe8:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800abea:	4681      	mov	r9, r0
      last_row = FALSE;
 800abec:	2100      	movs	r1, #0
      last_row = TRUE;
 800abee:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800abf0:	6861      	ldr	r1, [r4, #4]
 800abf2:	9e03      	ldr	r6, [sp, #12]
 800abf4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800abf8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800abfa:	3148      	adds	r1, #72	; 0x48
 800abfc:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	f000 8159 	beq.w	800aeb8 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800ac06:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800ac08:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800ac0a:	4403      	add	r3, r0
 800ac0c:	4342      	muls	r2, r0
 800ac0e:	4620      	mov	r0, r4
 800ac10:	9600      	str	r6, [sp, #0]
 800ac12:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800ac14:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800ac16:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800ac18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800ac1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac1e:	2218      	movs	r2, #24
 800ac20:	9903      	ldr	r1, [sp, #12]
 800ac22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ac24:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800ac26:	fb02 3301 	mla	r3, r2, r1, r3
 800ac2a:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800ac2c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800ac2e:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800ac30:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800ac34:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800ac38:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800ac3a:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800ac3c:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800ac3e:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ac40:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800ac44:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800ac4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac4e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800ac52:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800ac54:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800ac58:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac5a:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800ac5e:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800ac60:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800ac64:	9315      	str	r3, [sp, #84]	; 0x54
 800ac66:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800ac6a:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800ac6c:	01f3      	lsls	r3, r6, #7
 800ac6e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac70:	0233      	lsls	r3, r6, #8
 800ac72:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800ac74:	01cb      	lsls	r3, r1, #7
 800ac76:	9319      	str	r3, [sp, #100]	; 0x64
 800ac78:	020b      	lsls	r3, r1, #8
 800ac7a:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800ac7c:	01d3      	lsls	r3, r2, #7
 800ac7e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac80:	0213      	lsls	r3, r2, #8
 800ac82:	931c      	str	r3, [sp, #112]	; 0x70
 800ac84:	1f03      	subs	r3, r0, #4
 800ac86:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800ac8c:	f109 33ff 	add.w	r3, r9, #4294967295
 800ac90:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ac92:	9b04      	ldr	r3, [sp, #16]
 800ac94:	454b      	cmp	r3, r9
 800ac96:	da9d      	bge.n	800abd4 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800ac98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac9a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800ac9e:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800aca0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aca2:	b11b      	cbz	r3, 800acac <decompress_smooth_data+0x15a>
 800aca4:	9b04      	ldr	r3, [sp, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 810c 	beq.w	800aec4 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800acac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acae:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800acb2:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800acb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb6:	b123      	cbz	r3, 800acc2 <decompress_smooth_data+0x170>
 800acb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800acba:	9a04      	ldr	r2, [sp, #16]
 800acbc:	4293      	cmp	r3, r2
 800acbe:	f000 8104 	beq.w	800aeca <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800acc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800acc8:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800acca:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800accc:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800acce:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800acd2:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800acd4:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800acd6:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800acda:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800acdc:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800acde:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800ace0:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800ace2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800ace6:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800acea:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800acec:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800acee:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800acf2:	2201      	movs	r2, #1
 800acf4:	a924      	add	r1, sp, #144	; 0x90
 800acf6:	4640      	mov	r0, r8
 800acf8:	930a      	str	r3, [sp, #40]	; 0x28
 800acfa:	f00b fe0e 	bl	801691a <jcopy_block_row>
	if (block_num < last_block_column) {
 800acfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad02:	4293      	cmp	r3, r2
 800ad04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad06:	f240 80ea 	bls.w	800aede <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800ad10:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800ad12:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800ad16:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800ad18:	9a08      	ldr	r2, [sp, #32]
 800ad1a:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800ad1e:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800ad20:	9a05      	ldr	r2, [sp, #20]
 800ad22:	6851      	ldr	r1, [r2, #4]
 800ad24:	b1c1      	cbz	r1, 800ad58 <decompress_smooth_data+0x206>
 800ad26:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800ad2a:	b9aa      	cbnz	r2, 800ad58 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800ad2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad2e:	1a3a      	subs	r2, r7, r0
 800ad30:	9806      	ldr	r0, [sp, #24]
 800ad32:	4342      	muls	r2, r0
	  if (num >= 0) {
 800ad34:	2024      	movs	r0, #36	; 0x24
 800ad36:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800ad38:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800ad3a:	f100 80d7 	bmi.w	800aeec <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800ad3e:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ad40:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800ad42:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ad44:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ad48:	dd04      	ble.n	800ad54 <decompress_smooth_data+0x202>
 800ad4a:	fa06 f101 	lsl.w	r1, r6, r1
 800ad4e:	4291      	cmp	r1, r2
 800ad50:	dc00      	bgt.n	800ad54 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800ad52:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800ad54:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800ad58:	9a05      	ldr	r2, [sp, #20]
 800ad5a:	6891      	ldr	r1, [r2, #8]
 800ad5c:	b1c9      	cbz	r1, 800ad92 <decompress_smooth_data+0x240>
 800ad5e:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800ad62:	b9b2      	cbnz	r2, 800ad92 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800ad64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad66:	9806      	ldr	r0, [sp, #24]
 800ad68:	ebab 0202 	sub.w	r2, fp, r2
 800ad6c:	4342      	muls	r2, r0
	  if (num >= 0) {
 800ad6e:	2024      	movs	r0, #36	; 0x24
 800ad70:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800ad72:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800ad74:	f100 80c8 	bmi.w	800af08 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800ad78:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ad7a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800ad7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ad7e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ad82:	dd04      	ble.n	800ad8e <decompress_smooth_data+0x23c>
 800ad84:	fa06 f101 	lsl.w	r1, r6, r1
 800ad88:	4291      	cmp	r1, r2
 800ad8a:	dc00      	bgt.n	800ad8e <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800ad8c:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800ad8e:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800ad92:	9a05      	ldr	r2, [sp, #20]
 800ad94:	68d1      	ldr	r1, [r2, #12]
 800ad96:	b1d1      	cbz	r1, 800adce <decompress_smooth_data+0x27c>
 800ad98:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800ad9c:	b9ba      	cbnz	r2, 800adce <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800ad9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ada0:	9806      	ldr	r0, [sp, #24]
 800ada2:	445a      	add	r2, fp
 800ada4:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800ada8:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800adaa:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800adac:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800adb0:	f100 80b8 	bmi.w	800af24 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800adb4:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800adb6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800adb8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800adba:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800adbe:	dd04      	ble.n	800adca <decompress_smooth_data+0x278>
 800adc0:	fa06 f101 	lsl.w	r1, r6, r1
 800adc4:	4291      	cmp	r1, r2
 800adc6:	dc00      	bgt.n	800adca <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800adc8:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800adca:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800adce:	9a05      	ldr	r2, [sp, #20]
 800add0:	6912      	ldr	r2, [r2, #16]
 800add2:	b1e2      	cbz	r2, 800ae0e <decompress_smooth_data+0x2bc>
 800add4:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800add8:	b9c9      	cbnz	r1, 800ae0e <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800adda:	9912      	ldr	r1, [sp, #72]	; 0x48
 800addc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adde:	1a09      	subs	r1, r1, r0
 800ade0:	1acb      	subs	r3, r1, r3
 800ade2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ade4:	440b      	add	r3, r1
 800ade6:	9906      	ldr	r1, [sp, #24]
 800ade8:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800adea:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800adec:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800adf0:	f100 80a6 	bmi.w	800af40 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800adf4:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800adf6:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800adf8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800adfa:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800adfe:	dd04      	ble.n	800ae0a <decompress_smooth_data+0x2b8>
 800ae00:	fa06 f202 	lsl.w	r2, r6, r2
 800ae04:	429a      	cmp	r2, r3
 800ae06:	dc00      	bgt.n	800ae0a <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800ae08:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800ae0a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800ae0e:	9b05      	ldr	r3, [sp, #20]
 800ae10:	695a      	ldr	r2, [r3, #20]
 800ae12:	b1da      	cbz	r2, 800ae4c <decompress_smooth_data+0x2fa>
 800ae14:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800ae18:	b9c3      	cbnz	r3, 800ae4c <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800ae1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	440b      	add	r3, r1
 800ae20:	9906      	ldr	r1, [sp, #24]
 800ae22:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800ae26:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800ae28:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800ae2a:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800ae2e:	f100 8095 	bmi.w	800af5c <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800ae32:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ae34:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800ae36:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae38:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ae3c:	dd04      	ble.n	800ae48 <decompress_smooth_data+0x2f6>
 800ae3e:	fa06 f202 	lsl.w	r2, r6, r2
 800ae42:	429a      	cmp	r2, r3
 800ae44:	dc00      	bgt.n	800ae48 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800ae46:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800ae48:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800ae4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae4e:	aa24      	add	r2, sp, #144	; 0x90
 800ae50:	4629      	mov	r1, r5
 800ae52:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	4620      	mov	r0, r4
 800ae58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800ae5a:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800ae5e:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800ae60:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800ae62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae64:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800ae66:	3380      	adds	r3, #128	; 0x80
 800ae68:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800ae6c:	9307      	str	r3, [sp, #28]
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	3380      	adds	r3, #128	; 0x80
 800ae72:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800ae74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae76:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800ae78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800ae7a:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800ae7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae7e:	3301      	adds	r3, #1
 800ae80:	930c      	str	r3, [sp, #48]	; 0x30
 800ae82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae86:	428a      	cmp	r2, r1
 800ae88:	d222      	bcs.n	800aed0 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800ae8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ae8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae92:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ae94:	9b04      	ldr	r3, [sp, #16]
 800ae96:	3301      	adds	r3, #1
 800ae98:	9304      	str	r3, [sp, #16]
 800ae9a:	e6fa      	b.n	800ac92 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800ae9c:	6a2b      	ldr	r3, [r5, #32]
 800ae9e:	fbb3 f1f0 	udiv	r1, r3, r0
 800aea2:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800aea6:	f1b9 0f00 	cmp.w	r9, #0
 800aeaa:	d103      	bne.n	800aeb4 <decompress_smooth_data+0x362>
 800aeac:	4603      	mov	r3, r0
 800aeae:	4681      	mov	r9, r0
      last_row = TRUE;
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	e69c      	b.n	800abee <decompress_smooth_data+0x9c>
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	e7fb      	b.n	800aeb0 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800aeb8:	4620      	mov	r0, r4
 800aeba:	9200      	str	r2, [sp, #0]
 800aebc:	47c0      	blx	r8
      first_row = TRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	931d      	str	r3, [sp, #116]	; 0x74
 800aec2:	e6ab      	b.n	800ac1c <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800aec4:	f8cd 801c 	str.w	r8, [sp, #28]
 800aec8:	e6f4      	b.n	800acb4 <decompress_smooth_data+0x162>
 800aeca:	f8cd 8020 	str.w	r8, [sp, #32]
 800aece:	e6fb      	b.n	800acc8 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800aed0:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800aed2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800aed6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800aeda:	9209      	str	r2, [sp, #36]	; 0x24
 800aedc:	e709      	b.n	800acf2 <decompress_smooth_data+0x1a0>
 800aede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800aee4:	9211      	str	r2, [sp, #68]	; 0x44
 800aee6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800aeea:	e719      	b.n	800ad20 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800aeec:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800aeee:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800aef0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aef2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800aef6:	dd05      	ble.n	800af04 <decompress_smooth_data+0x3b2>
 800aef8:	fa06 f101 	lsl.w	r1, r6, r1
 800aefc:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800aefe:	bfd8      	it	le
 800af00:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800af04:	4252      	negs	r2, r2
 800af06:	e725      	b.n	800ad54 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800af08:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800af0a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800af0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800af0e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af12:	dd05      	ble.n	800af20 <decompress_smooth_data+0x3ce>
 800af14:	fa06 f101 	lsl.w	r1, r6, r1
 800af18:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800af1a:	bfd8      	it	le
 800af1c:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800af20:	4252      	negs	r2, r2
 800af22:	e734      	b.n	800ad8e <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800af24:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800af26:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800af28:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af2a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800af2e:	dd05      	ble.n	800af3c <decompress_smooth_data+0x3ea>
 800af30:	fa06 f101 	lsl.w	r1, r6, r1
 800af34:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800af36:	bfd8      	it	le
 800af38:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800af3c:	4252      	negs	r2, r2
 800af3e:	e744      	b.n	800adca <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800af40:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800af42:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800af44:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af46:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800af4a:	dd05      	ble.n	800af58 <decompress_smooth_data+0x406>
 800af4c:	fa06 f202 	lsl.w	r2, r6, r2
 800af50:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800af52:	bfd8      	it	le
 800af54:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800af58:	425b      	negs	r3, r3
 800af5a:	e756      	b.n	800ae0a <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800af5c:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800af5e:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800af60:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af62:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800af66:	dd05      	ble.n	800af74 <decompress_smooth_data+0x422>
 800af68:	fa06 f202 	lsl.w	r2, r6, r2
 800af6c:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800af6e:	bfd8      	it	le
 800af70:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800af74:	425b      	negs	r3, r3
 800af76:	e767      	b.n	800ae48 <decompress_smooth_data+0x2f6>

0800af78 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800af78:	6843      	ldr	r3, [r0, #4]
 800af7a:	2274      	movs	r2, #116	; 0x74
{
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800af80:	681b      	ldr	r3, [r3, #0]
{
 800af82:	b085      	sub	sp, #20
 800af84:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800af86:	2101      	movs	r1, #1
{
 800af88:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800af8a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800af8c:	4b2c      	ldr	r3, [pc, #176]	; (800b040 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800af8e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800af90:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800af94:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800af96:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800af98:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800af9c:	4b29      	ldr	r3, [pc, #164]	; (800b044 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800af9e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800afa0:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800afa2:	b37e      	cbz	r6, 800b004 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800afa4:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800afa8:	46ca      	mov	sl, r9
 800afaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afac:	42bb      	cmp	r3, r7
 800afae:	dc07      	bgt.n	800afc0 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800afb0:	4b25      	ldr	r3, [pc, #148]	; (800b048 <jinit_d_coef_controller+0xd0>)
 800afb2:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800afb4:	4b25      	ldr	r3, [pc, #148]	; (800b04c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800afb6:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800afba:	b005      	add	sp, #20
 800afbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800afc0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800afc4:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800afc8:	b10b      	cbz	r3, 800afce <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800afca:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800afce:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800afd0:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800afd2:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800afd4:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800afd6:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800afda:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800afde:	f00b fc82 	bl	80168e6 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800afe2:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800afe6:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800afe8:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800afec:	f00b fc7b 	bl	80168e6 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800aff0:	2201      	movs	r2, #1
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	4611      	mov	r1, r2
 800aff6:	e9cd 0800 	strd	r0, r8, [sp]
 800affa:	4628      	mov	r0, r5
 800affc:	47d8      	blx	fp
 800affe:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800b002:	e7d2      	b.n	800afaa <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b004:	686b      	ldr	r3, [r5, #4]
 800b006:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b00a:	2101      	movs	r1, #1
 800b00c:	4628      	mov	r0, r5
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b012:	f104 0320 	add.w	r3, r4, #32
 800b016:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800b018:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b01c:	454b      	cmp	r3, r9
 800b01e:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800b022:	d1f9      	bne.n	800b018 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800b024:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800b028:	b919      	cbnz	r1, 800b032 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800b02a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b02e:	f020 fa33 	bl	802b498 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800b032:	4b07      	ldr	r3, [pc, #28]	; (800b050 <jinit_d_coef_controller+0xd8>)
 800b034:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800b036:	4b07      	ldr	r3, [pc, #28]	; (800b054 <jinit_d_coef_controller+0xdc>)
 800b038:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800b03a:	2300      	movs	r3, #0
 800b03c:	6123      	str	r3, [r4, #16]
}
 800b03e:	e7bc      	b.n	800afba <jinit_d_coef_controller+0x42>
 800b040:	0800a6d1 	.word	0x0800a6d1
 800b044:	0800a91d 	.word	0x0800a91d
 800b048:	0800a6df 	.word	0x0800a6df
 800b04c:	0800a811 	.word	0x0800a811
 800b050:	0800a6db 	.word	0x0800a6db
 800b054:	0800a9d5 	.word	0x0800a9d5

0800b058 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b058:	6843      	ldr	r3, [r0, #4]
 800b05a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b05e:	2101      	movs	r1, #1
 800b060:	681b      	ldr	r3, [r3, #0]
{
 800b062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b066:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b068:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b06c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b06e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b072:	6863      	ldr	r3, [r4, #4]
 800b074:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800b076:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b078:	4620      	mov	r0, r4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b07e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800b080:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2101      	movs	r1, #1
 800b08a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b08c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800b10c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b090:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b092:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800b094:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b096:	2101      	movs	r1, #1
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4620      	mov	r0, r4
 800b09c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b0a0:	4f17      	ldr	r7, [pc, #92]	; (800b100 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b0a2:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b0a4:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800b0a6:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b0a8:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b0aa:	f8df e064 	ldr.w	lr, [pc, #100]	; 800b110 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b0ae:	4915      	ldr	r1, [pc, #84]	; (800b104 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800b0b0:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b0b4:	4d14      	ldr	r5, [pc, #80]	; (800b108 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b0b6:	fb08 e203 	mla	r2, r8, r3, lr
 800b0ba:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800b0bc:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b0c0:	fb07 f203 	mul.w	r2, r7, r3
 800b0c4:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800b0c8:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800b0cc:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800b0ce:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b0d2:	fb05 f203 	mul.w	r2, r5, r3
 800b0d6:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800b0da:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800b0de:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b0e2:	fb01 f203 	mul.w	r2, r1, r3
 800b0e6:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800b0ea:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800b0ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f8:	d1dd      	bne.n	800b0b6 <build_ycc_rgb_table+0x5e>
  }
}
 800b0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fe:	bf00      	nop
 800b100:	0001c5a2 	.word	0x0001c5a2
 800b104:	ffffa7e6 	.word	0xffffa7e6
 800b108:	ffff492e 	.word	0xffff492e
 800b10c:	000166e9 	.word	0x000166e9
 800b110:	ff4d0b80 	.word	0xff4d0b80

0800b114 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b118:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b11c:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b11e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b120:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b124:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b128:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b12c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800b12e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800b130:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b132:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800b136:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b138:	6920      	ldr	r0, [r4, #16]
 800b13a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b13c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b13e:	3a01      	subs	r2, #1
 800b140:	9210      	str	r2, [sp, #64]	; 0x40
 800b142:	d502      	bpl.n	800b14a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b144:	b007      	add	sp, #28
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b14a:	9a05      	ldr	r2, [sp, #20]
 800b14c:	680c      	ldr	r4, [r1, #0]
 800b14e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800b150:	f853 0b04 	ldr.w	r0, [r3], #4
 800b154:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800b158:	684c      	ldr	r4, [r1, #4]
 800b15a:	5964      	ldr	r4, [r4, r5]
 800b15c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800b160:	688c      	ldr	r4, [r1, #8]
 800b162:	5967      	ldr	r7, [r4, r5]
 800b164:	9c01      	ldr	r4, [sp, #4]
 800b166:	3f01      	subs	r7, #1
 800b168:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800b16c:	45d0      	cmp	r8, sl
 800b16e:	f100 0003 	add.w	r0, r0, #3
 800b172:	d0e3      	beq.n	800b13c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b174:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800b178:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b17c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800b17e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b182:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800b186:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b188:	fa0f fb8b 	sxth.w	fp, fp
 800b18c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b18e:	5d65      	ldrb	r5, [r4, r5]
 800b190:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b194:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800b198:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800b19c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b19e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b1a0:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800b1a2:	5d65      	ldrb	r5, [r4, r5]
 800b1a4:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b1a8:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800b1ac:	5d64      	ldrb	r4, [r4, r5]
 800b1ae:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800b1b2:	e7db      	b.n	800b16c <ycc_rgb_convert+0x58>

0800b1b4 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b1b8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800b1bc:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800b1c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b1c2:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b1c4:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b1c6:	3d01      	subs	r5, #1
 800b1c8:	d501      	bpl.n	800b1ce <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b1ce:	189c      	adds	r4, r3, r2
 800b1d0:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800b1d2:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800b1d6:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800b1da:	6848      	ldr	r0, [r1, #4]
 800b1dc:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800b1e0:	6888      	ldr	r0, [r1, #8]
 800b1e2:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	42b8      	cmp	r0, r7
 800b1ea:	d0ec      	beq.n	800b1c6 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800b1ec:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800b1f0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800b1f4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800b1f8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800b1fc:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800b200:	4454      	add	r4, sl
 800b202:	f818 a000 	ldrb.w	sl, [r8, r0]
 800b206:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800b20a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800b20e:	4454      	add	r4, sl
		 >> SCALEBITS);
 800b210:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800b212:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800b216:	3001      	adds	r0, #1
 800b218:	e7e6      	b.n	800b1e8 <rgb_gray_convert+0x34>

0800b21a <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800b21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b21e:	9d06      	ldr	r5, [sp, #24]
 800b220:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b224:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b226:	3d01      	subs	r5, #1
 800b228:	d501      	bpl.n	800b22e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800b22e:	1898      	adds	r0, r3, r2
 800b230:	680c      	ldr	r4, [r1, #0]
 800b232:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800b234:	684c      	ldr	r4, [r1, #4]
 800b236:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800b23a:	688c      	ldr	r4, [r1, #8]
 800b23c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800b240:	2000      	movs	r0, #0
 800b242:	f853 4b04 	ldr.w	r4, [r3], #4
 800b246:	42b0      	cmp	r0, r6
 800b248:	f104 0403 	add.w	r4, r4, #3
 800b24c:	d0eb      	beq.n	800b226 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800b24e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800b252:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800b256:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800b25a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800b25e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800b262:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800b264:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800b268:	e7ed      	b.n	800b246 <rgb_convert+0x2c>

0800b26a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800b26a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b26e:	9e07      	ldr	r6, [sp, #28]
 800b270:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800b274:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800b276:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800b27a:	3e01      	subs	r6, #1
 800b27c:	d418      	bmi.n	800b2b0 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800b27e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800b282:	2000      	movs	r0, #0
 800b284:	e00a      	b.n	800b29c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800b286:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b28a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800b28e:	681c      	ldr	r4, [r3, #0]
 800b290:	eb05 080e 	add.w	r8, r5, lr
 800b294:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800b296:	4545      	cmp	r5, r8
 800b298:	d104      	bne.n	800b2a4 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800b29a:	3001      	adds	r0, #1
 800b29c:	42b8      	cmp	r0, r7
 800b29e:	dbf2      	blt.n	800b286 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	e7ea      	b.n	800b27a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800b2a4:	f815 9b01 	ldrb.w	r9, [r5], #1
 800b2a8:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800b2ac:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800b2ae:	e7f2      	b.n	800b296 <null_convert+0x2c>
  }
}
 800b2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b2b4 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b6:	9d05      	ldr	r5, [sp, #20]
 800b2b8:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b2bc:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b2be:	3d01      	subs	r5, #1
 800b2c0:	d500      	bpl.n	800b2c4 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800b2c4:	6808      	ldr	r0, [r1, #0]
 800b2c6:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800b2c8:	f853 0b04 	ldr.w	r0, [r3], #4
 800b2cc:	58a4      	ldr	r4, [r4, r2]
 800b2ce:	eb04 0c07 	add.w	ip, r4, r7
 800b2d2:	4564      	cmp	r4, ip
 800b2d4:	f100 0003 	add.w	r0, r0, #3
 800b2d8:	d0f1      	beq.n	800b2be <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800b2da:	f814 6b01 	ldrb.w	r6, [r4], #1
 800b2de:	f800 6c03 	strb.w	r6, [r0, #-3]
 800b2e2:	f800 6c02 	strb.w	r6, [r0, #-2]
 800b2e6:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800b2ea:	e7f2      	b.n	800b2d2 <gray_rgb_convert+0x1e>

0800b2ec <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b2f0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b2f4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b2f6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b2f8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b2fc:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b300:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800b304:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b306:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800b30a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b30c:	6920      	ldr	r0, [r4, #16]
 800b30e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b310:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b312:	3a01      	subs	r2, #1
 800b314:	9210      	str	r2, [sp, #64]	; 0x40
 800b316:	d502      	bpl.n	800b31e <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800b318:	b007      	add	sp, #28
 800b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b31e:	eb03 0008 	add.w	r0, r3, r8
 800b322:	680a      	ldr	r2, [r1, #0]
 800b324:	f853 5b04 	ldr.w	r5, [r3], #4
 800b328:	5812      	ldr	r2, [r2, r0]
 800b32a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800b32c:	684a      	ldr	r2, [r1, #4]
 800b32e:	5812      	ldr	r2, [r2, r0]
 800b330:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800b332:	688a      	ldr	r2, [r1, #8]
 800b334:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800b338:	68ca      	ldr	r2, [r1, #12]
 800b33a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800b33e:	2200      	movs	r2, #0
 800b340:	9800      	ldr	r0, [sp, #0]
 800b342:	3504      	adds	r5, #4
 800b344:	4282      	cmp	r2, r0
 800b346:	d0e3      	beq.n	800b310 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b348:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800b34c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800b34e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800b350:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800b354:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b356:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b35a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b35e:	4404      	add	r4, r0
 800b360:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b364:	5d34      	ldrb	r4, [r6, r4]
 800b366:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b36a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800b36e:	9405      	str	r4, [sp, #20]
 800b370:	9c02      	ldr	r4, [sp, #8]
 800b372:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b376:	9c05      	ldr	r4, [sp, #20]
 800b378:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800b37a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800b37e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b382:	5d34      	ldrb	r4, [r6, r4]
 800b384:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800b388:	9c01      	ldr	r4, [sp, #4]
 800b38a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800b38e:	4420      	add	r0, r4
 800b390:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b394:	5c30      	ldrb	r0, [r6, r0]
 800b396:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b39a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800b39e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b3a0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800b3a4:	e7cc      	b.n	800b340 <ycck_cmyk_convert+0x54>

0800b3a6 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800b3a6:	4770      	bx	lr

0800b3a8 <grayscale_convert>:
{
 800b3a8:	b513      	push	{r0, r1, r4, lr}
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800b3b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b3b2:	6820      	ldr	r0, [r4, #0]
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f00b fa9b 	bl	80168f6 <jcopy_sample_rows>
}
 800b3c0:	b002      	add	sp, #8
 800b3c2:	bd10      	pop	{r4, pc}

0800b3c4 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b3c4:	6843      	ldr	r3, [r0, #4]
 800b3c6:	221c      	movs	r2, #28
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	681b      	ldr	r3, [r3, #0]
{
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b3d0:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800b3d2:	4b4a      	ldr	r3, [pc, #296]	; (800b4fc <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b3d4:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800b3d6:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800b3da:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800b3dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b3e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d821      	bhi.n	800b42a <jinit_color_deconverter+0x66>
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d82d      	bhi.n	800b446 <jinit_color_deconverter+0x82>
 800b3ea:	d023      	beq.n	800b434 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	dd23      	ble.n	800b438 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800b3f0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b3f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800b3f8:	2902      	cmp	r1, #2
 800b3fa:	d055      	beq.n	800b4a8 <jinit_color_deconverter+0xe4>
 800b3fc:	2904      	cmp	r1, #4
 800b3fe:	d066      	beq.n	800b4ce <jinit_color_deconverter+0x10a>
 800b400:	2901      	cmp	r1, #1
 800b402:	d16d      	bne.n	800b4e0 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b404:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800b408:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b40a:	2a01      	cmp	r2, #1
 800b40c:	d124      	bne.n	800b458 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800b40e:	4b3c      	ldr	r3, [pc, #240]	; (800b500 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800b410:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b412:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800b414:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b416:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800b418:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b41a:	4299      	cmp	r1, r3
 800b41c:	dc15      	bgt.n	800b44a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800b41e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b420:	2b00      	cmp	r3, #0
 800b422:	d169      	bne.n	800b4f8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800b424:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b426:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800b428:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800b42a:	3b04      	subs	r3, #4
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d8dd      	bhi.n	800b3ec <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800b430:	2a04      	cmp	r2, #4
 800b432:	e000      	b.n	800b436 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800b434:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800b436:	d0db      	beq.n	800b3f0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	220b      	movs	r2, #11
 800b43c:	4620      	mov	r0, r4
 800b43e:	615a      	str	r2, [r3, #20]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4798      	blx	r3
 800b444:	e7d4      	b.n	800b3f0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800b446:	2a03      	cmp	r2, #3
 800b448:	e7f5      	b.n	800b436 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800b44a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800b44e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b452:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800b454:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b456:	e7e0      	b.n	800b41a <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d146      	bne.n	800b4ea <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800b45c:	4b29      	ldr	r3, [pc, #164]	; (800b504 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b45e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b462:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b464:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800b468:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b46a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b46c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b474:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800b476:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b478:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800b47c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b47e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b482:	fb06 f203 	mul.w	r2, r6, r3
 800b486:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b48a:	fb05 f203 	mul.w	r2, r5, r3
 800b48e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b492:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b496:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b498:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b49c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b4a0:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b4a4:	d1ed      	bne.n	800b482 <jinit_color_deconverter+0xbe>
 800b4a6:	e7ba      	b.n	800b41e <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b4a8:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b4aa:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b4ac:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b4ae:	d105      	bne.n	800b4bc <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800b4b0:	4b15      	ldr	r3, [pc, #84]	; (800b508 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800b4b2:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b4b4:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800b4b6:	f7ff fdcf 	bl	800b058 <build_ycc_rgb_table>
 800b4ba:	e7b0      	b.n	800b41e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d102      	bne.n	800b4c6 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800b4c0:	4b12      	ldr	r3, [pc, #72]	; (800b50c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800b4c2:	606b      	str	r3, [r5, #4]
 800b4c4:	e7ab      	b.n	800b41e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d10f      	bne.n	800b4ea <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800b4ca:	4b11      	ldr	r3, [pc, #68]	; (800b510 <jinit_color_deconverter+0x14c>)
 800b4cc:	e7f9      	b.n	800b4c2 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b4ce:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800b4d0:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b4d2:	d101      	bne.n	800b4d8 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <jinit_color_deconverter+0x150>)
 800b4d6:	e7ec      	b.n	800b4b2 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	d106      	bne.n	800b4ea <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <jinit_color_deconverter+0x154>)
 800b4de:	e7f0      	b.n	800b4c2 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800b4e0:	4299      	cmp	r1, r3
 800b4e2:	d102      	bne.n	800b4ea <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800b4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4e6:	67a3      	str	r3, [r4, #120]	; 0x78
 800b4e8:	e7f8      	b.n	800b4dc <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	221c      	movs	r2, #28
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	615a      	str	r2, [r3, #20]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4798      	blx	r3
 800b4f6:	e792      	b.n	800b41e <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e794      	b.n	800b426 <jinit_color_deconverter+0x62>
 800b4fc:	0800b3a7 	.word	0x0800b3a7
 800b500:	0800b3a9 	.word	0x0800b3a9
 800b504:	0800b1b5 	.word	0x0800b1b5
 800b508:	0800b115 	.word	0x0800b115
 800b50c:	0800b2b5 	.word	0x0800b2b5
 800b510:	0800b21b 	.word	0x0800b21b
 800b514:	0800b2ed 	.word	0x0800b2ed
 800b518:	0800b26b 	.word	0x0800b26b

0800b51c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b520:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800b524:	2500      	movs	r5, #0
{
 800b526:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b528:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800b52c:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800b530:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b532:	46ab      	mov	fp, r5
{
 800b534:	ed2d 8b04 	vpush	{d8-d9}
 800b538:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	455b      	cmp	r3, fp
 800b53e:	dc04      	bgt.n	800b54a <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800b540:	b007      	add	sp, #28
 800b542:	ecbd 8b04 	vpop	{d8-d9}
 800b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b54a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800b54e:	f240 700e 	movw	r0, #1806	; 0x70e
 800b552:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800b556:	4283      	cmp	r3, r0
 800b558:	f000 80d9 	beq.w	800b70e <start_pass+0x1f2>
 800b55c:	dc5a      	bgt.n	800b614 <start_pass+0xf8>
 800b55e:	f240 4004 	movw	r0, #1028	; 0x404
 800b562:	4283      	cmp	r3, r0
 800b564:	f000 80d6 	beq.w	800b714 <start_pass+0x1f8>
 800b568:	dc2f      	bgt.n	800b5ca <start_pass+0xae>
 800b56a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b56e:	f000 80d3 	beq.w	800b718 <start_pass+0x1fc>
 800b572:	dc1a      	bgt.n	800b5aa <start_pass+0x8e>
 800b574:	f240 2001 	movw	r0, #513	; 0x201
 800b578:	4283      	cmp	r3, r0
 800b57a:	f000 80cf 	beq.w	800b71c <start_pass+0x200>
 800b57e:	dc0e      	bgt.n	800b59e <start_pass+0x82>
 800b580:	f240 1001 	movw	r0, #257	; 0x101
 800b584:	4283      	cmp	r3, r0
 800b586:	f000 80cb 	beq.w	800b720 <start_pass+0x204>
 800b58a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b58e:	f000 80c9 	beq.w	800b724 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2007      	movs	r0, #7
 800b596:	61da      	str	r2, [r3, #28]
 800b598:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800b59c:	e0b3      	b.n	800b706 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b59e:	f240 2002 	movw	r0, #514	; 0x202
 800b5a2:	4283      	cmp	r3, r0
 800b5a4:	d1f5      	bne.n	800b592 <start_pass+0x76>
 800b5a6:	4d9e      	ldr	r5, [pc, #632]	; (800b820 <start_pass+0x304>)
 800b5a8:	e0b2      	b.n	800b710 <start_pass+0x1f4>
 800b5aa:	f240 3006 	movw	r0, #774	; 0x306
 800b5ae:	4283      	cmp	r3, r0
 800b5b0:	f000 80ba 	beq.w	800b728 <start_pass+0x20c>
 800b5b4:	f240 4002 	movw	r0, #1026	; 0x402
 800b5b8:	4283      	cmp	r3, r0
 800b5ba:	f000 80b7 	beq.w	800b72c <start_pass+0x210>
 800b5be:	f240 3003 	movw	r0, #771	; 0x303
 800b5c2:	4283      	cmp	r3, r0
 800b5c4:	d1e5      	bne.n	800b592 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800b5c6:	4d97      	ldr	r5, [pc, #604]	; (800b824 <start_pass+0x308>)
 800b5c8:	e0a2      	b.n	800b710 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b5ca:	f240 6003 	movw	r0, #1539	; 0x603
 800b5ce:	4283      	cmp	r3, r0
 800b5d0:	f000 80ae 	beq.w	800b730 <start_pass+0x214>
 800b5d4:	dc0e      	bgt.n	800b5f4 <start_pass+0xd8>
 800b5d6:	f240 5005 	movw	r0, #1285	; 0x505
 800b5da:	4283      	cmp	r3, r0
 800b5dc:	f000 80aa 	beq.w	800b734 <start_pass+0x218>
 800b5e0:	f240 500a 	movw	r0, #1290	; 0x50a
 800b5e4:	4283      	cmp	r3, r0
 800b5e6:	f000 80a7 	beq.w	800b738 <start_pass+0x21c>
 800b5ea:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800b5ee:	d1d0      	bne.n	800b592 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800b5f0:	4d8d      	ldr	r5, [pc, #564]	; (800b828 <start_pass+0x30c>)
 800b5f2:	e08d      	b.n	800b710 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b5f4:	f240 600c 	movw	r0, #1548	; 0x60c
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	f000 809f 	beq.w	800b73c <start_pass+0x220>
 800b5fe:	f240 7007 	movw	r0, #1799	; 0x707
 800b602:	4283      	cmp	r3, r0
 800b604:	f000 809c 	beq.w	800b740 <start_pass+0x224>
 800b608:	f240 6006 	movw	r0, #1542	; 0x606
 800b60c:	4283      	cmp	r3, r0
 800b60e:	d1c0      	bne.n	800b592 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800b610:	4d86      	ldr	r5, [pc, #536]	; (800b82c <start_pass+0x310>)
 800b612:	e07d      	b.n	800b710 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b614:	f640 4006 	movw	r0, #3078	; 0xc06
 800b618:	4283      	cmp	r3, r0
 800b61a:	f000 8093 	beq.w	800b744 <start_pass+0x228>
 800b61e:	dc21      	bgt.n	800b664 <start_pass+0x148>
 800b620:	f640 1009 	movw	r0, #2313	; 0x909
 800b624:	4283      	cmp	r3, r0
 800b626:	f000 808f 	beq.w	800b748 <start_pass+0x22c>
 800b62a:	dc0d      	bgt.n	800b648 <start_pass+0x12c>
 800b62c:	f640 0008 	movw	r0, #2056	; 0x808
 800b630:	4283      	cmp	r3, r0
 800b632:	d039      	beq.n	800b6a8 <start_pass+0x18c>
 800b634:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800b638:	f000 8088 	beq.w	800b74c <start_pass+0x230>
 800b63c:	f640 0004 	movw	r0, #2052	; 0x804
 800b640:	4283      	cmp	r3, r0
 800b642:	d1a6      	bne.n	800b592 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800b644:	4d7a      	ldr	r5, [pc, #488]	; (800b830 <start_pass+0x314>)
 800b646:	e063      	b.n	800b710 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b648:	f640 200a 	movw	r0, #2570	; 0xa0a
 800b64c:	4283      	cmp	r3, r0
 800b64e:	d07f      	beq.n	800b750 <start_pass+0x234>
 800b650:	f640 300b 	movw	r0, #2827	; 0xb0b
 800b654:	4283      	cmp	r3, r0
 800b656:	d07d      	beq.n	800b754 <start_pass+0x238>
 800b658:	f640 2005 	movw	r0, #2565	; 0xa05
 800b65c:	4283      	cmp	r3, r0
 800b65e:	d198      	bne.n	800b592 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800b660:	4d74      	ldr	r5, [pc, #464]	; (800b834 <start_pass+0x318>)
 800b662:	e055      	b.n	800b710 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b664:	f640 600e 	movw	r0, #3598	; 0xe0e
 800b668:	4283      	cmp	r3, r0
 800b66a:	d075      	beq.n	800b758 <start_pass+0x23c>
 800b66c:	dc0d      	bgt.n	800b68a <start_pass+0x16e>
 800b66e:	f640 500d 	movw	r0, #3341	; 0xd0d
 800b672:	4283      	cmp	r3, r0
 800b674:	d072      	beq.n	800b75c <start_pass+0x240>
 800b676:	f640 6007 	movw	r0, #3591	; 0xe07
 800b67a:	4283      	cmp	r3, r0
 800b67c:	d070      	beq.n	800b760 <start_pass+0x244>
 800b67e:	f640 400c 	movw	r0, #3084	; 0xc0c
 800b682:	4283      	cmp	r3, r0
 800b684:	d185      	bne.n	800b592 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800b686:	4d6c      	ldr	r5, [pc, #432]	; (800b838 <start_pass+0x31c>)
 800b688:	e042      	b.n	800b710 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b68a:	f241 0008 	movw	r0, #4104	; 0x1008
 800b68e:	4283      	cmp	r3, r0
 800b690:	d068      	beq.n	800b764 <start_pass+0x248>
 800b692:	f241 0010 	movw	r0, #4112	; 0x1010
 800b696:	4283      	cmp	r3, r0
 800b698:	d066      	beq.n	800b768 <start_pass+0x24c>
 800b69a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800b69e:	4283      	cmp	r3, r0
 800b6a0:	f47f af77 	bne.w	800b592 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800b6a4:	4d65      	ldr	r5, [pc, #404]	; (800b83c <start_pass+0x320>)
 800b6a6:	e033      	b.n	800b710 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800b6a8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d827      	bhi.n	800b700 <start_pass+0x1e4>
 800b6b0:	461c      	mov	r4, r3
 800b6b2:	4b63      	ldr	r3, [pc, #396]	; (800b840 <start_pass+0x324>)
 800b6b4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b6b8:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800b6bc:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b6c0:	b1cb      	cbz	r3, 800b6f6 <start_pass+0x1da>
 800b6c2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b6c6:	42a3      	cmp	r3, r4
 800b6c8:	d015      	beq.n	800b6f6 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800b6ca:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800b6ce:	b196      	cbz	r6, 800b6f6 <start_pass+0x1da>
    switch (method) {
 800b6d0:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800b6d2:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800b6d6:	d049      	beq.n	800b76c <start_pass+0x250>
 800b6d8:	2c02      	cmp	r4, #2
 800b6da:	d05a      	beq.n	800b792 <start_pass+0x276>
 800b6dc:	2c00      	cmp	r4, #0
 800b6de:	f040 8098 	bne.w	800b812 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800b6e2:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b6e6:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800b6e8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800b6ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d1f8      	bne.n	800b6e8 <start_pass+0x1cc>
       ci++, compptr++) {
 800b6f6:	f10b 0b01 	add.w	fp, fp, #1
 800b6fa:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800b6fe:	e71c      	b.n	800b53a <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2231      	movs	r2, #49	; 0x31
 800b704:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4638      	mov	r0, r7
 800b70a:	4798      	blx	r3
      break;
 800b70c:	e7d4      	b.n	800b6b8 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800b70e:	4d4d      	ldr	r5, [pc, #308]	; (800b844 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800b710:	2400      	movs	r4, #0
 800b712:	e7d1      	b.n	800b6b8 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800b714:	4d4c      	ldr	r5, [pc, #304]	; (800b848 <start_pass+0x32c>)
 800b716:	e7fb      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800b718:	4d4c      	ldr	r5, [pc, #304]	; (800b84c <start_pass+0x330>)
 800b71a:	e7f9      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800b71c:	4d4c      	ldr	r5, [pc, #304]	; (800b850 <start_pass+0x334>)
 800b71e:	e7f7      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800b720:	4d4c      	ldr	r5, [pc, #304]	; (800b854 <start_pass+0x338>)
 800b722:	e7f5      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800b724:	4d4c      	ldr	r5, [pc, #304]	; (800b858 <start_pass+0x33c>)
 800b726:	e7f3      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800b728:	4d4c      	ldr	r5, [pc, #304]	; (800b85c <start_pass+0x340>)
 800b72a:	e7f1      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800b72c:	4d4c      	ldr	r5, [pc, #304]	; (800b860 <start_pass+0x344>)
 800b72e:	e7ef      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800b730:	4d4c      	ldr	r5, [pc, #304]	; (800b864 <start_pass+0x348>)
 800b732:	e7ed      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800b734:	4d4c      	ldr	r5, [pc, #304]	; (800b868 <start_pass+0x34c>)
 800b736:	e7eb      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800b738:	4d4c      	ldr	r5, [pc, #304]	; (800b86c <start_pass+0x350>)
 800b73a:	e7e9      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800b73c:	4d4c      	ldr	r5, [pc, #304]	; (800b870 <start_pass+0x354>)
 800b73e:	e7e7      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800b740:	4d4c      	ldr	r5, [pc, #304]	; (800b874 <start_pass+0x358>)
 800b742:	e7e5      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800b744:	4d4c      	ldr	r5, [pc, #304]	; (800b878 <start_pass+0x35c>)
 800b746:	e7e3      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800b748:	4d4c      	ldr	r5, [pc, #304]	; (800b87c <start_pass+0x360>)
 800b74a:	e7e1      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800b74c:	4d4c      	ldr	r5, [pc, #304]	; (800b880 <start_pass+0x364>)
 800b74e:	e7df      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800b750:	4d4c      	ldr	r5, [pc, #304]	; (800b884 <start_pass+0x368>)
 800b752:	e7dd      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800b754:	4d4c      	ldr	r5, [pc, #304]	; (800b888 <start_pass+0x36c>)
 800b756:	e7db      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800b758:	4d4c      	ldr	r5, [pc, #304]	; (800b88c <start_pass+0x370>)
 800b75a:	e7d9      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800b75c:	4d4c      	ldr	r5, [pc, #304]	; (800b890 <start_pass+0x374>)
 800b75e:	e7d7      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800b760:	4d4c      	ldr	r5, [pc, #304]	; (800b894 <start_pass+0x378>)
 800b762:	e7d5      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800b764:	4d4c      	ldr	r5, [pc, #304]	; (800b898 <start_pass+0x37c>)
 800b766:	e7d3      	b.n	800b710 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800b768:	4d4c      	ldr	r5, [pc, #304]	; (800b89c <start_pass+0x380>)
 800b76a:	e7d1      	b.n	800b710 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800b76c:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b770:	2200      	movs	r2, #0
 800b772:	494b      	ldr	r1, [pc, #300]	; (800b8a0 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800b774:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800b778:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800b77c:	fb0c f303 	mul.w	r3, ip, r3
 800b780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b784:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800b786:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b78a:	3201      	adds	r2, #1
 800b78c:	2a40      	cmp	r2, #64	; 0x40
 800b78e:	d1f1      	bne.n	800b774 <start_pass+0x258>
 800b790:	e7b1      	b.n	800b6f6 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b792:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800b796:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	4b41      	ldr	r3, [pc, #260]	; (800b8a4 <start_pass+0x388>)
 800b79e:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	ecb3 7b02 	vldmia	r3!, {d7}
 800b7a6:	9303      	str	r3, [sp, #12]
 800b7a8:	eeb0 8a47 	vmov.f32	s16, s14
 800b7ac:	eef0 8a67 	vmov.f32	s17, s15
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b7b6:	9301      	str	r3, [sp, #4]
 800b7b8:	4b3a      	ldr	r3, [pc, #232]	; (800b8a4 <start_pass+0x388>)
 800b7ba:	9302      	str	r3, [sp, #8]
 800b7bc:	f106 0310 	add.w	r3, r6, #16
 800b7c0:	9305      	str	r3, [sp, #20]
 800b7c2:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b7c4:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b7c8:	ecb3 7b02 	vldmia	r3!, {d7}
 800b7cc:	eeb0 9a47 	vmov.f32	s18, s14
 800b7d0:	eef0 9a67 	vmov.f32	s19, s15
 800b7d4:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b7d6:	f7f4 fead 	bl	8000534 <__aeabi_ui2d>
 800b7da:	ec53 2b18 	vmov	r2, r3, d8
 800b7de:	f7f4 ff23 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b7e2:	ec53 2b19 	vmov	r2, r3, d9
 800b7e6:	f7f4 ff1f 	bl	8000628 <__aeabi_dmul>
 800b7ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f7f4 ff1a 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800b7f4:	f7f5 f92a 	bl	8000a4c <__aeabi_d2f>
 800b7f8:	9b01      	ldr	r3, [sp, #4]
 800b7fa:	f843 0b04 	str.w	r0, [r3], #4
 800b7fe:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800b800:	9b05      	ldr	r3, [sp, #20]
 800b802:	429e      	cmp	r6, r3
 800b804:	d1dd      	bne.n	800b7c2 <start_pass+0x2a6>
	    i++;
 800b806:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800b80a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800b80e:	d1c7      	bne.n	800b7a0 <start_pass+0x284>
 800b810:	e771      	b.n	800b6f6 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2231      	movs	r2, #49	; 0x31
 800b816:	4638      	mov	r0, r7
 800b818:	615a      	str	r2, [r3, #20]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4798      	blx	r3
      break;
 800b81e:	e76a      	b.n	800b6f6 <start_pass+0x1da>
 800b820:	080109d9 	.word	0x080109d9
 800b824:	080108e5 	.word	0x080108e5
 800b828:	08014855 	.word	0x08014855
 800b82c:	08010485 	.word	0x08010485
 800b830:	080137ad 	.word	0x080137ad
 800b834:	08013565 	.word	0x08013565
 800b838:	08011431 	.word	0x08011431
 800b83c:	08012105 	.word	0x08012105
 800b840:	0802edd4 	.word	0x0802edd4
 800b844:	08013fe9 	.word	0x08013fe9
 800b848:	080107b9 	.word	0x080107b9
 800b84c:	08014bbd 	.word	0x08014bbd
 800b850:	08013bcd 	.word	0x08013bcd
 800b854:	08010a51 	.word	0x08010a51
 800b858:	08014c95 	.word	0x08014c95
 800b85c:	08014a71 	.word	0x08014a71
 800b860:	08013afd 	.word	0x08013afd
 800b864:	080139a1 	.word	0x080139a1
 800b868:	08010635 	.word	0x08010635
 800b86c:	08014621 	.word	0x08014621
 800b870:	08014361 	.word	0x08014361
 800b874:	080101dd 	.word	0x080101dd
 800b878:	08013299 	.word	0x08013299
 800b87c:	08010a75 	.word	0x08010a75
 800b880:	08013c05 	.word	0x08013c05
 800b884:	08010d41 	.word	0x08010d41
 800b888:	08011039 	.word	0x08011039
 800b88c:	08011cb1 	.word	0x08011cb1
 800b890:	080117ed 	.word	0x080117ed
 800b894:	08012f19 	.word	0x08012f19
 800b898:	08012ad1 	.word	0x08012ad1
 800b89c:	08012599 	.word	0x08012599
 800b8a0:	0802ee20 	.word	0x0802ee20
 800b8a4:	0802ede0 	.word	0x0802ede0

0800b8a8 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8aa:	6843      	ldr	r3, [r0, #4]
{
 800b8ac:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8ae:	2254      	movs	r2, #84	; 0x54
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8b4:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8b6:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800b8b8:	4b0f      	ldr	r3, [pc, #60]	; (800b8f8 <jinit_inverse_dct+0x50>)
 800b8ba:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8bc:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800b8c0:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800b8c4:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8ca:	42b3      	cmp	r3, r6
 800b8cc:	dc00      	bgt.n	800b8d0 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800b8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8d0:	686b      	ldr	r3, [r5, #4]
 800b8d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	4628      	mov	r0, r5
 800b8da:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800b8dc:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8de:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800b8e4:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	f01f fdd6 	bl	802b498 <memset>
    idct->cur_method[ci] = -1;
 800b8ec:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800b8f0:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800b8f2:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800b8f6:	e7e7      	b.n	800b8c8 <jinit_inverse_dct+0x20>
 800b8f8:	0800b51d 	.word	0x0800b51d

0800b8fc <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800b8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800b900:	6905      	ldr	r5, [r0, #16]
{
 800b902:	4607      	mov	r7, r0
 800b904:	4688      	mov	r8, r1
 800b906:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b908:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800b90c:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800b90e:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b912:	f1bb 0f00 	cmp.w	fp, #0
 800b916:	d042      	beq.n	800b99e <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800b918:	454e      	cmp	r6, r9
 800b91a:	da42      	bge.n	800b9a2 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800b91c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	b95b      	cbnz	r3, 800b93c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	2278      	movs	r2, #120	; 0x78
 800b928:	f04f 31ff 	mov.w	r1, #4294967295
 800b92c:	4628      	mov	r0, r5
 800b92e:	615a      	str	r2, [r3, #20]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800b934:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b938:	2201      	movs	r2, #1
 800b93a:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800b93c:	f1c6 0619 	rsb	r6, r6, #25
 800b940:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800b944:	2619      	movs	r6, #25
 800b946:	e02c      	b.n	800b9a2 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800b948:	f1ba 0f00 	cmp.w	sl, #0
 800b94c:	d107      	bne.n	800b95e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b94e:	69ab      	ldr	r3, [r5, #24]
 800b950:	4628      	mov	r0, r5
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	4798      	blx	r3
 800b956:	b350      	cbz	r0, 800b9ae <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800b958:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b95a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800b95e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800b962:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800b966:	2aff      	cmp	r2, #255	; 0xff
 800b968:	d116      	bne.n	800b998 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800b96a:	f1ba 0f00 	cmp.w	sl, #0
 800b96e:	d109      	bne.n	800b984 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b970:	69ab      	ldr	r3, [r5, #24]
 800b972:	4628      	mov	r0, r5
 800b974:	9201      	str	r2, [sp, #4]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	4798      	blx	r3
 800b97a:	b1c0      	cbz	r0, 800b9ae <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800b97c:	69ab      	ldr	r3, [r5, #24]
 800b97e:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b980:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800b984:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800b988:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800b98c:	2bff      	cmp	r3, #255	; 0xff
 800b98e:	d0ec      	beq.n	800b96a <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800b990:	b113      	cbz	r3, 800b998 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800b992:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800b996:	e7bf      	b.n	800b918 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800b998:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800b99c:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800b99e:	2e18      	cmp	r6, #24
 800b9a0:	ddd2      	ble.n	800b948 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800b9a2:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800b9a6:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800b9aa:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	b003      	add	sp, #12
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b9b8 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	9d06      	ldr	r5, [sp, #24]
 800b9bc:	4606      	mov	r6, r0
 800b9be:	468c      	mov	ip, r1
 800b9c0:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800b9c2:	4295      	cmp	r5, r2
{
 800b9c4:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b9c6:	dd08      	ble.n	800b9da <jpeg_huff_decode+0x22>
 800b9c8:	462b      	mov	r3, r5
 800b9ca:	f7ff ff97 	bl	800b8fc <jpeg_fill_bit_buffer>
 800b9ce:	b910      	cbnz	r0, 800b9d6 <jpeg_huff_decode+0x1e>
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800b9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b9d6:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800b9da:	1b62      	subs	r2, r4, r5
 800b9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ba48 <jpeg_huff_decode+0x90>)
 800b9de:	fa4c f002 	asr.w	r0, ip, r2
 800b9e2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b9e6:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800b9e8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b9ec:	4283      	cmp	r3, r0
 800b9ee:	db0d      	blt.n	800ba0c <jpeg_huff_decode+0x54>
  if (l > 16) {
 800b9f0:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800b9f2:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800b9f6:	dd1e      	ble.n	800ba36 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800b9f8:	6930      	ldr	r0, [r6, #16]
 800b9fa:	2279      	movs	r2, #121	; 0x79
 800b9fc:	f04f 31ff 	mov.w	r1, #4294967295
 800ba00:	6803      	ldr	r3, [r0, #0]
 800ba02:	615a      	str	r2, [r3, #20]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e7e3      	b.n	800b9d4 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800ba0c:	2a00      	cmp	r2, #0
    code <<= 1;
 800ba0e:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800ba12:	dc08      	bgt.n	800ba26 <jpeg_huff_decode+0x6e>
 800ba14:	2301      	movs	r3, #1
 800ba16:	4661      	mov	r1, ip
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f7ff ff6f 	bl	800b8fc <jpeg_fill_bit_buffer>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d0d6      	beq.n	800b9d0 <jpeg_huff_decode+0x18>
 800ba22:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800ba26:	3a01      	subs	r2, #1
    l++;
 800ba28:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800ba2a:	fa4c f002 	asr.w	r0, ip, r2
 800ba2e:	f000 0001 	and.w	r0, r0, #1
 800ba32:	4320      	orrs	r0, r4
    l++;
 800ba34:	e7d8      	b.n	800b9e8 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800ba36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba3a:	3512      	adds	r5, #18
 800ba3c:	4418      	add	r0, r3
 800ba3e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800ba42:	4410      	add	r0, r2
 800ba44:	7c40      	ldrb	r0, [r0, #17]
 800ba46:	e7c5      	b.n	800b9d4 <jpeg_huff_decode+0x1c>
 800ba48:	0802eea0 	.word	0x0802eea0

0800ba4c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800ba4c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800ba4e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800ba52:	2600      	movs	r6, #0
{
 800ba54:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800ba56:	68eb      	ldr	r3, [r5, #12]
 800ba58:	6991      	ldr	r1, [r2, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bfb8      	it	lt
 800ba5e:	3307      	addlt	r3, #7
 800ba60:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800ba64:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800ba66:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800ba68:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800ba6a:	4798      	blx	r3
 800ba6c:	b190      	cbz	r0, 800ba94 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800ba6e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800ba72:	4631      	mov	r1, r6
 800ba74:	f105 0014 	add.w	r0, r5, #20
 800ba78:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800ba7c:	0092      	lsls	r2, r2, #2
 800ba7e:	f01f fd0b 	bl	802b498 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800ba82:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800ba86:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800ba88:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800ba8a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800ba8e:	b903      	cbnz	r3, 800ba92 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800ba90:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800ba92:	2001      	movs	r0, #1
}
 800ba94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba98 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800ba9c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800baa0:	b091      	sub	sp, #68	; 0x44
 800baa2:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800baa4:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800baa8:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800baaa:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800baae:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800bab0:	b933      	cbnz	r3, 800bac0 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bab2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bab4:	b17e      	cbz	r6, 800bad6 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800bab8:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800baba:	3b01      	subs	r3, #1
 800babc:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800babe:	e007      	b.n	800bad0 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800bac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1f5      	bne.n	800bab2 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800bac6:	f7ff ffc1 	bl	800ba4c <process_restart>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d1f1      	bne.n	800bab2 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800bace:	2000      	movs	r0, #0
}
 800bad0:	b011      	add	sp, #68	; 0x44
 800bad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bad6:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800bad8:	f104 0810 	add.w	r8, r4, #16
 800badc:	af0b      	add	r7, sp, #44	; 0x2c
 800bade:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	f104 0b10 	add.w	fp, r4, #16
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	9206      	str	r2, [sp, #24]
 800baec:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800baee:	f8df a118 	ldr.w	sl, [pc, #280]	; 800bc08 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800baf2:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800baf4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800baf8:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bafc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800bafe:	f8d8 3000 	ldr.w	r3, [r8]
 800bb02:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bb04:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800bb08:	42b3      	cmp	r3, r6
 800bb0a:	dc0d      	bgt.n	800bb28 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bb0c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bb0e:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bb10:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bb12:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	9a07      	ldr	r2, [sp, #28]
 800bb18:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bb1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bb1c:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bb20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb22:	6833      	ldr	r3, [r6, #0]
 800bb24:	602b      	str	r3, [r5, #0]
 800bb26:	e7c6      	b.n	800bab6 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800bb28:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bb2a:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800bb2e:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800bb32:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800bb36:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800bb38:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800bb3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb46:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bb4a:	dc0c      	bgt.n	800bb66 <decode_mcu_DC_first+0xce>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4662      	mov	r2, ip
 800bb50:	4671      	mov	r1, lr
 800bb52:	a806      	add	r0, sp, #24
 800bb54:	f7ff fed2 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d0b8      	beq.n	800bace <decode_mcu_DC_first+0x36>
 800bb5c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bb60:	f1bc 0f07 	cmp.w	ip, #7
 800bb64:	dd3e      	ble.n	800bbe4 <decode_mcu_DC_first+0x14c>
 800bb66:	f1ac 0308 	sub.w	r3, ip, #8
 800bb6a:	fa4e f303 	asr.w	r3, lr, r3
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bb74:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bb78:	2a00      	cmp	r2, #0
 800bb7a:	d042      	beq.n	800bc02 <decode_mcu_DC_first+0x16a>
 800bb7c:	4443      	add	r3, r8
 800bb7e:	ebac 0c02 	sub.w	ip, ip, r2
 800bb82:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800bb86:	f1b8 0f00 	cmp.w	r8, #0
 800bb8a:	d01b      	beq.n	800bbc4 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bb8c:	45e0      	cmp	r8, ip
 800bb8e:	dd09      	ble.n	800bba4 <decode_mcu_DC_first+0x10c>
 800bb90:	4643      	mov	r3, r8
 800bb92:	4662      	mov	r2, ip
 800bb94:	4671      	mov	r1, lr
 800bb96:	a806      	add	r0, sp, #24
 800bb98:	f7ff feb0 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d096      	beq.n	800bace <decode_mcu_DC_first+0x36>
 800bba0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800bba4:	ebac 0c08 	sub.w	ip, ip, r8
 800bba8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800bbac:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800bbb0:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800bbb4:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800bbb8:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	bfac      	ite	ge
 800bbbe:	eba3 0802 	subge.w	r8, r3, r2
 800bbc2:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800bbc4:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bbc6:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800bbc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800bbcc:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800bbce:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800bbd2:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800bbd4:	fa00 f803 	lsl.w	r8, r0, r3
 800bbd8:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800bbda:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800bbde:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bbe2:	e78f      	b.n	800bb04 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	4662      	mov	r2, ip
 800bbea:	4643      	mov	r3, r8
 800bbec:	4671      	mov	r1, lr
 800bbee:	a806      	add	r0, sp, #24
 800bbf0:	f7ff fee2 	bl	800b9b8 <jpeg_huff_decode>
 800bbf4:	f1b0 0800 	subs.w	r8, r0, #0
 800bbf8:	f6ff af69 	blt.w	800bace <decode_mcu_DC_first+0x36>
 800bbfc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bc00:	e7c1      	b.n	800bb86 <decode_mcu_DC_first+0xee>
 800bc02:	2309      	movs	r3, #9
 800bc04:	e7ef      	b.n	800bbe6 <decode_mcu_DC_first+0x14e>
 800bc06:	bf00      	nop
 800bc08:	0802eea0 	.word	0x0802eea0

0800bc0c <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bc0c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	4607      	mov	r7, r0
 800bc16:	b08d      	sub	sp, #52	; 0x34
 800bc18:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bc1a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bc1e:	b933      	cbnz	r3, 800bc2e <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bc20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc22:	b17b      	cbz	r3, 800bc44 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bc24:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bc26:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bc2c:	e007      	b.n	800bc3e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800bc2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1f5      	bne.n	800bc20 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800bc34:	f7ff ff0a 	bl	800ba4c <process_restart>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1f1      	bne.n	800bc20 <decode_mcu_AC_first+0x14>
	return FALSE;
 800bc3c:	2000      	movs	r0, #0
}
 800bc3e:	b00d      	add	sp, #52	; 0x34
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800bc44:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800bc46:	b116      	cbz	r6, 800bc4e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800bc48:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800bc4a:	612e      	str	r6, [r5, #16]
 800bc4c:	e7ea      	b.n	800bc24 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800bc4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800bc52:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800bc56:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800bc58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800bc5c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800bc60:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bc62:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bc64:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	9207      	str	r2, [sp, #28]
 800bc6e:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800bc70:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800bd68 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800bc74:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bc76:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800bc78:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bc7a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	4598      	cmp	r8, r3
 800bc82:	dc69      	bgt.n	800bd58 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800bc84:	2a07      	cmp	r2, #7
 800bc86:	dc09      	bgt.n	800bc9c <decode_mcu_AC_first+0x90>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	a807      	add	r0, sp, #28
 800bc8c:	f7ff fe36 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d0d3      	beq.n	800bc3c <decode_mcu_AC_first+0x30>
 800bc94:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800bc98:	2a07      	cmp	r2, #7
 800bc9a:	dd33      	ble.n	800bd04 <decode_mcu_AC_first+0xf8>
 800bc9c:	f1a2 0308 	sub.w	r3, r2, #8
 800bca0:	fa41 f303 	asr.w	r3, r1, r3
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bcaa:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800bcae:	b3a0      	cbz	r0, 800bd1a <decode_mcu_AC_first+0x10e>
 800bcb0:	444b      	add	r3, r9
 800bcb2:	1a12      	subs	r2, r2, r0
 800bcb4:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bcb8:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800bcbc:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bcc0:	d02d      	beq.n	800bd1e <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bcc2:	42a2      	cmp	r2, r4
	  k += r;
 800bcc4:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bcc6:	da07      	bge.n	800bcd8 <decode_mcu_AC_first+0xcc>
 800bcc8:	4623      	mov	r3, r4
 800bcca:	a807      	add	r0, sp, #28
 800bccc:	f7ff fe16 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d0b3      	beq.n	800bc3c <decode_mcu_AC_first+0x30>
 800bcd4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800bcd8:	1b12      	subs	r2, r2, r4
 800bcda:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800bcde:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800bce0:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800bce4:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800bce8:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800bcea:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bcec:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800bcee:	bfa8      	it	ge
 800bcf0:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bcf2:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800bcf6:	40a3      	lsls	r3, r4
 800bcf8:	9c05      	ldr	r4, [sp, #20]
 800bcfa:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bcfe:	f108 0801 	add.w	r8, r8, #1
 800bd02:	e7bc      	b.n	800bc7e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800bd04:	2301      	movs	r3, #1
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	a807      	add	r0, sp, #28
 800bd0a:	464b      	mov	r3, r9
 800bd0c:	f7ff fe54 	bl	800b9b8 <jpeg_huff_decode>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	db93      	blt.n	800bc3c <decode_mcu_AC_first+0x30>
 800bd14:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800bd18:	e7ce      	b.n	800bcb8 <decode_mcu_AC_first+0xac>
 800bd1a:	2309      	movs	r3, #9
 800bd1c:	e7f3      	b.n	800bd06 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800bd1e:	2b0f      	cmp	r3, #15
 800bd20:	d102      	bne.n	800bd28 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800bd22:	f108 080f 	add.w	r8, r8, #15
 800bd26:	e7ea      	b.n	800bcfe <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800bd28:	2601      	movs	r6, #1
 800bd2a:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800bd2c:	b19b      	cbz	r3, 800bd56 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	da09      	bge.n	800bd46 <decode_mcu_AC_first+0x13a>
 800bd32:	a807      	add	r0, sp, #28
 800bd34:	9303      	str	r3, [sp, #12]
 800bd36:	f7ff fde1 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f43f af7e 	beq.w	800bc3c <decode_mcu_AC_first+0x30>
 800bd40:	9b03      	ldr	r3, [sp, #12]
 800bd42:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800bd46:	1ad2      	subs	r2, r2, r3
 800bd48:	4807      	ldr	r0, [pc, #28]	; (800bd68 <decode_mcu_AC_first+0x15c>)
 800bd4a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bd4e:	fa41 f302 	asr.w	r3, r1, r2
 800bd52:	4003      	ands	r3, r0
	      EOBRUN += r;
 800bd54:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800bd56:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	9807      	ldr	r0, [sp, #28]
 800bd5c:	6018      	str	r0, [r3, #0]
 800bd5e:	9808      	ldr	r0, [sp, #32]
 800bd60:	6058      	str	r0, [r3, #4]
 800bd62:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800bd66:	e770      	b.n	800bc4a <decode_mcu_AC_first+0x3e>
 800bd68:	0802eea0 	.word	0x0802eea0

0800bd6c <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800bd6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bd70:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800bd74:	2701      	movs	r7, #1
{   
 800bd76:	b087      	sub	sp, #28
 800bd78:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bd7a:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bd7c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bd80:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bd82:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bd86:	b9c3      	cbnz	r3, 800bdba <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd88:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bd8a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd8c:	9405      	str	r4, [sp, #20]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	9201      	str	r2, [sp, #4]
 800bd94:	9302      	str	r3, [sp, #8]
 800bd96:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bd9a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800bd9e:	42b3      	cmp	r3, r6
 800bda0:	dc16      	bgt.n	800bdd0 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bda2:	69a3      	ldr	r3, [r4, #24]
 800bda4:	9801      	ldr	r0, [sp, #4]
 800bda6:	6018      	str	r0, [r3, #0]
 800bda8:	9802      	ldr	r0, [sp, #8]
 800bdaa:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800bdac:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bdae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bdb0:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdb2:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800bdb6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bdb8:	e007      	b.n	800bdca <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800bdba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e3      	bne.n	800bd88 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800bdc0:	f7ff fe44 	bl	800ba4c <process_restart>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d1df      	bne.n	800bd88 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800bdc8:	2000      	movs	r0, #0
}
 800bdca:	b007      	add	sp, #28
 800bdcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800bdd0:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800bdd2:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800bdd6:	dc07      	bgt.n	800bde8 <decode_mcu_DC_refine+0x7c>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	a801      	add	r0, sp, #4
 800bddc:	f7ff fd8e 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d0f1      	beq.n	800bdc8 <decode_mcu_DC_refine+0x5c>
 800bde4:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800bde8:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bdea:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800bdec:	fa41 f302 	asr.w	r3, r1, r2
 800bdf0:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800bdf2:	bf42      	ittt	mi
 800bdf4:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800bdf8:	433b      	orrmi	r3, r7
 800bdfa:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bdfe:	e7cc      	b.n	800bd9a <decode_mcu_DC_refine+0x2e>

0800be00 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800be00:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	4606      	mov	r6, r0
 800be0a:	b0d1      	sub	sp, #324	; 0x144
 800be0c:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800be0e:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800be12:	b95b      	cbnz	r3, 800be2c <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800be14:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800be18:	f1bb 0f00 	cmp.w	fp, #0
 800be1c:	d012      	beq.n	800be44 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800be1e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800be22:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800be24:	3b01      	subs	r3, #1
 800be26:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800be2a:	e008      	b.n	800be3e <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800be2c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1ef      	bne.n	800be14 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800be34:	f7ff fe0a 	bl	800ba4c <process_restart>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d1eb      	bne.n	800be14 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800be3c:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800be3e:	b051      	add	sp, #324	; 0x144
 800be40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800be44:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800be48:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be4a:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800be4c:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800be50:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800be52:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800be56:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800be5a:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be5c:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800be5e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800be60:	f04f 32ff 	mov.w	r2, #4294967295
 800be64:	fa02 f303 	lsl.w	r3, r2, r3
 800be68:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800be6a:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800be6e:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be70:	69b3      	ldr	r3, [r6, #24]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	602a      	str	r2, [r5, #0]
 800be78:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800be7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800be7e:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800be82:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800be84:	2b00      	cmp	r3, #0
 800be86:	f040 80bf 	bne.w	800c008 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800be8a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800be8e:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800be90:	9b06      	ldr	r3, [sp, #24]
 800be92:	429f      	cmp	r7, r3
 800be94:	dd0a      	ble.n	800beac <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800be96:	69b3      	ldr	r3, [r6, #24]
 800be98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be9a:	6019      	str	r1, [r3, #0]
 800be9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be9e:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800bea0:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bea2:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800bea6:	f8c8 3010 	str.w	r3, [r8, #16]
 800beaa:	e7b8      	b.n	800be1e <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800beac:	2a07      	cmp	r2, #7
 800beae:	dc0a      	bgt.n	800bec6 <decode_mcu_AC_refine+0xc6>
 800beb0:	2300      	movs	r3, #0
 800beb2:	4621      	mov	r1, r4
 800beb4:	4628      	mov	r0, r5
 800beb6:	f7ff fd21 	bl	800b8fc <jpeg_fill_bit_buffer>
 800beba:	2800      	cmp	r0, #0
 800bebc:	d06e      	beq.n	800bf9c <decode_mcu_AC_refine+0x19c>
 800bebe:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800bec2:	2a07      	cmp	r2, #7
 800bec4:	dd61      	ble.n	800bf8a <decode_mcu_AC_refine+0x18a>
 800bec6:	f1a2 0308 	sub.w	r3, r2, #8
 800beca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800becc:	fa44 f303 	asr.w	r3, r4, r3
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bed6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800beda:	2900      	cmp	r1, #0
 800bedc:	d06b      	beq.n	800bfb6 <decode_mcu_AC_refine+0x1b6>
 800bede:	4403      	add	r3, r0
 800bee0:	1a52      	subs	r2, r2, r1
 800bee2:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bee6:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800beea:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	d066      	beq.n	800bfc0 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d009      	beq.n	800bf0a <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800bef6:	6833      	ldr	r3, [r6, #0]
 800bef8:	2179      	movs	r1, #121	; 0x79
 800befa:	4630      	mov	r0, r6
 800befc:	9204      	str	r2, [sp, #16]
 800befe:	6159      	str	r1, [r3, #20]
 800bf00:	f04f 31ff 	mov.w	r1, #4294967295
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	4798      	blx	r3
 800bf08:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	dc08      	bgt.n	800bf20 <decode_mcu_AC_refine+0x120>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	4621      	mov	r1, r4
 800bf12:	4628      	mov	r0, r5
 800bf14:	f7ff fcf2 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d03f      	beq.n	800bf9c <decode_mcu_AC_refine+0x19c>
 800bf1c:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800bf20:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800bf22:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800bf24:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800bf28:	f013 0f01 	tst.w	r3, #1
 800bf2c:	9b03      	ldr	r3, [sp, #12]
 800bf2e:	bf08      	it	eq
 800bf30:	460b      	moveq	r3, r1
 800bf32:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800bf34:	9b08      	ldr	r3, [sp, #32]
 800bf36:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800bf3a:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800bf3c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d068      	beq.n	800c016 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	dc07      	bgt.n	800bf58 <decode_mcu_AC_refine+0x158>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f7ff fcd5 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bf52:	b318      	cbz	r0, 800bf9c <decode_mcu_AC_refine+0x19c>
 800bf54:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800bf58:	3a01      	subs	r2, #1
 800bf5a:	fa44 f302 	asr.w	r3, r4, r2
 800bf5e:	07d9      	lsls	r1, r3, #31
 800bf60:	d50e      	bpl.n	800bf80 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800bf68:	9b03      	ldr	r3, [sp, #12]
 800bf6a:	4219      	tst	r1, r3
 800bf6c:	d108      	bne.n	800bf80 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800bf6e:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800bf70:	b28b      	uxth	r3, r1
 800bf72:	bfac      	ite	ge
 800bf74:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800bf76:	9907      	ldrlt	r1, [sp, #28]
 800bf78:	440b      	add	r3, r1
 800bf7a:	9905      	ldr	r1, [sp, #20]
 800bf7c:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800bf80:	3701      	adds	r7, #1
	} while (k <= Se);
 800bf82:	9b06      	ldr	r3, [sp, #24]
 800bf84:	42bb      	cmp	r3, r7
 800bf86:	dad5      	bge.n	800bf34 <decode_mcu_AC_refine+0x134>
 800bf88:	e048      	b.n	800c01c <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	4621      	mov	r1, r4
 800bf90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf92:	4628      	mov	r0, r5
 800bf94:	f7ff fd10 	bl	800b9b8 <jpeg_huff_decode>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	da0e      	bge.n	800bfba <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800bf9c:	ab10      	add	r3, sp, #64	; 0x40
 800bf9e:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800bfa0:	f1bb 0f00 	cmp.w	fp, #0
 800bfa4:	f43f af4a 	beq.w	800be3c <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800bfa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bfac:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800bfb0:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800bfb4:	e7f4      	b.n	800bfa0 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800bfb6:	2309      	movs	r3, #9
 800bfb8:	e7e8      	b.n	800bf8c <decode_mcu_AC_refine+0x18c>
 800bfba:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800bfbe:	e792      	b.n	800bee6 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800bfc0:	f1ba 0f0f 	cmp.w	sl, #15
 800bfc4:	d0b6      	beq.n	800bf34 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	fa03 f30a 	lsl.w	r3, r3, sl
 800bfcc:	9302      	str	r3, [sp, #8]
	    if (r) {
 800bfce:	f1ba 0f00 	cmp.w	sl, #0
 800bfd2:	d015      	beq.n	800c000 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800bfd4:	4552      	cmp	r2, sl
 800bfd6:	da08      	bge.n	800bfea <decode_mcu_AC_refine+0x1ea>
 800bfd8:	4653      	mov	r3, sl
 800bfda:	4621      	mov	r1, r4
 800bfdc:	a80b      	add	r0, sp, #44	; 0x2c
 800bfde:	f7ff fc8d 	bl	800b8fc <jpeg_fill_bit_buffer>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d0da      	beq.n	800bf9c <decode_mcu_AC_refine+0x19c>
 800bfe6:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800bfea:	4b26      	ldr	r3, [pc, #152]	; (800c084 <decode_mcu_AC_refine+0x284>)
 800bfec:	eba2 020a 	sub.w	r2, r2, sl
 800bff0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800bff4:	fa44 f302 	asr.w	r3, r4, r2
 800bff8:	400b      	ands	r3, r1
	      EOBRUN += r;
 800bffa:	9902      	ldr	r1, [sp, #8]
 800bffc:	4419      	add	r1, r3
 800bffe:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800c000:	9b02      	ldr	r3, [sp, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	f43f af47 	beq.w	800be96 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800c008:	9b06      	ldr	r3, [sp, #24]
 800c00a:	429f      	cmp	r7, r3
 800c00c:	dd15      	ble.n	800c03a <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800c00e:	9b02      	ldr	r3, [sp, #8]
 800c010:	3b01      	subs	r3, #1
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	e73f      	b.n	800be96 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800c016:	f1ba 0a01 	subs.w	sl, sl, #1
 800c01a:	d2b1      	bcs.n	800bf80 <decode_mcu_AC_refine+0x180>
	if (s) {
 800c01c:	9b04      	ldr	r3, [sp, #16]
 800c01e:	b153      	cbz	r3, 800c036 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800c020:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800c022:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800c024:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800c028:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800c02c:	a910      	add	r1, sp, #64	; 0x40
 800c02e:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800c032:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800c036:	3701      	adds	r7, #1
 800c038:	e72a      	b.n	800be90 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800c040:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800c044:	b1e3      	cbz	r3, 800c080 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c046:	2a00      	cmp	r2, #0
 800c048:	dc08      	bgt.n	800c05c <decode_mcu_AC_refine+0x25c>
 800c04a:	2301      	movs	r3, #1
 800c04c:	4621      	mov	r1, r4
 800c04e:	a80b      	add	r0, sp, #44	; 0x2c
 800c050:	f7ff fc54 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c054:	2800      	cmp	r0, #0
 800c056:	d0a1      	beq.n	800bf9c <decode_mcu_AC_refine+0x19c>
 800c058:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800c05c:	3a01      	subs	r2, #1
 800c05e:	fa44 f302 	asr.w	r3, r4, r2
 800c062:	07db      	lsls	r3, r3, #31
 800c064:	d50c      	bpl.n	800c080 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800c066:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	4219      	tst	r1, r3
 800c06e:	d107      	bne.n	800c080 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800c070:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800c072:	b28b      	uxth	r3, r1
 800c074:	bfac      	ite	ge
 800c076:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800c078:	9907      	ldrlt	r1, [sp, #28]
 800c07a:	440b      	add	r3, r1
 800c07c:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800c080:	3701      	adds	r7, #1
 800c082:	e7c1      	b.n	800c008 <decode_mcu_AC_refine+0x208>
 800c084:	0802eea0 	.word	0x0802eea0

0800c088 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c08c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c090:	b093      	sub	sp, #76	; 0x4c
 800c092:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c094:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c098:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800c09a:	b933      	cbnz	r3, 800c0aa <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c09c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c09e:	b17f      	cbz	r7, 800c0c0 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c0a0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c0a2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c0a8:	e007      	b.n	800c0ba <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800c0aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1f5      	bne.n	800c09c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800c0b0:	f7ff fccc 	bl	800ba4c <process_restart>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d1f1      	bne.n	800c09c <decode_mcu_sub+0x14>
	return FALSE;
 800c0b8:	2000      	movs	r0, #0
}
 800c0ba:	b013      	add	sp, #76	; 0x4c
 800c0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800c0c0:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800c0c4:	f105 0810 	add.w	r8, r5, #16
 800c0c8:	ac0d      	add	r4, sp, #52	; 0x34
 800c0ca:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800c0ce:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800c0d0:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800c0d4:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800c374 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800c0d8:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c0da:	69b3      	ldr	r3, [r6, #24]
 800c0dc:	960c      	str	r6, [sp, #48]	; 0x30
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	9208      	str	r2, [sp, #32]
 800c0e4:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800c0e6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c0ea:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c0ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f4:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c0f6:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c0fa:	42bb      	cmp	r3, r7
 800c0fc:	dc0e      	bgt.n	800c11c <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c0fe:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c100:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c102:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800c104:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c10c:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c10e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c110:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c116:	6833      	ldr	r3, [r6, #0]
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	e7c1      	b.n	800c0a0 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c11c:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c11e:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c122:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c126:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c12a:	dc0c      	bgt.n	800c146 <decode_mcu_sub+0xbe>
 800c12c:	2300      	movs	r3, #0
 800c12e:	4662      	mov	r2, ip
 800c130:	4671      	mov	r1, lr
 800c132:	a808      	add	r0, sp, #32
 800c134:	f7ff fbe2 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d0bd      	beq.n	800c0b8 <decode_mcu_sub+0x30>
 800c13c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c140:	f1bc 0f07 	cmp.w	ip, #7
 800c144:	dd4a      	ble.n	800c1dc <decode_mcu_sub+0x154>
 800c146:	f1ac 0308 	sub.w	r3, ip, #8
 800c14a:	fa4e f303 	asr.w	r3, lr, r3
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c154:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c158:	2a00      	cmp	r2, #0
 800c15a:	d04d      	beq.n	800c1f8 <decode_mcu_sub+0x170>
 800c15c:	4423      	add	r3, r4
 800c15e:	ebac 0c02 	sub.w	ip, ip, r2
 800c162:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c166:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c16a:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c16e:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c170:	2b00      	cmp	r3, #0
 800c172:	f000 80a0 	beq.w	800c2b6 <decode_mcu_sub+0x22e>
	if (s) {
 800c176:	b1cc      	cbz	r4, 800c1ac <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c178:	45a4      	cmp	ip, r4
 800c17a:	da09      	bge.n	800c190 <decode_mcu_sub+0x108>
 800c17c:	4623      	mov	r3, r4
 800c17e:	4662      	mov	r2, ip
 800c180:	4671      	mov	r1, lr
 800c182:	a808      	add	r0, sp, #32
 800c184:	f7ff fbba 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d095      	beq.n	800c0b8 <decode_mcu_sub+0x30>
 800c18c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800c190:	ebac 0c04 	sub.w	ip, ip, r4
 800c194:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c198:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c19a:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c19e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c1a2:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c1a4:	4299      	cmp	r1, r3
 800c1a6:	bfac      	ite	ge
 800c1a8:	1a9c      	subge	r4, r3, r2
 800c1aa:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c1ac:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c1b0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c1b4:	ab12      	add	r3, sp, #72	; 0x48
 800c1b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c1ba:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c1be:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c1c0:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c1c4:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c1c8:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	429c      	cmp	r4, r3
 800c1ce:	db15      	blt.n	800c1fc <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800c1d0:	9b05      	ldr	r3, [sp, #20]
 800c1d2:	429c      	cmp	r4, r3
 800c1d4:	f340 8081 	ble.w	800c2da <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c1d8:	3701      	adds	r7, #1
 800c1da:	e78c      	b.n	800c0f6 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c1dc:	2301      	movs	r3, #1
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	4662      	mov	r2, ip
 800c1e2:	4623      	mov	r3, r4
 800c1e4:	4671      	mov	r1, lr
 800c1e6:	a808      	add	r0, sp, #32
 800c1e8:	f7ff fbe6 	bl	800b9b8 <jpeg_huff_decode>
 800c1ec:	1e04      	subs	r4, r0, #0
 800c1ee:	f6ff af63 	blt.w	800c0b8 <decode_mcu_sub+0x30>
 800c1f2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c1f6:	e7b6      	b.n	800c166 <decode_mcu_sub+0xde>
 800c1f8:	2309      	movs	r3, #9
 800c1fa:	e7f0      	b.n	800c1de <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c1fc:	f1bc 0f07 	cmp.w	ip, #7
 800c200:	dc0d      	bgt.n	800c21e <decode_mcu_sub+0x196>
 800c202:	2300      	movs	r3, #0
 800c204:	4662      	mov	r2, ip
 800c206:	4671      	mov	r1, lr
 800c208:	a808      	add	r0, sp, #32
 800c20a:	f7ff fb77 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c20e:	2800      	cmp	r0, #0
 800c210:	f43f af52 	beq.w	800c0b8 <decode_mcu_sub+0x30>
 800c214:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c218:	f1bc 0f07 	cmp.w	ip, #7
 800c21c:	dd37      	ble.n	800c28e <decode_mcu_sub+0x206>
 800c21e:	f1ac 0308 	sub.w	r3, ip, #8
 800c222:	fa4e f303 	asr.w	r3, lr, r3
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c22c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c230:	2a00      	cmp	r2, #0
 800c232:	d03a      	beq.n	800c2aa <decode_mcu_sub+0x222>
 800c234:	4443      	add	r3, r8
 800c236:	ebac 0c02 	sub.w	ip, ip, r2
 800c23a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c23e:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c242:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c246:	d032      	beq.n	800c2ae <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c248:	459c      	cmp	ip, r3
	    k += r;
 800c24a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c24c:	da0b      	bge.n	800c266 <decode_mcu_sub+0x1de>
 800c24e:	4662      	mov	r2, ip
 800c250:	4671      	mov	r1, lr
 800c252:	a808      	add	r0, sp, #32
 800c254:	9307      	str	r3, [sp, #28]
 800c256:	f7ff fb51 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f af2c 	beq.w	800c0b8 <decode_mcu_sub+0x30>
 800c260:	9b07      	ldr	r3, [sp, #28]
 800c262:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800c266:	ebac 0c03 	sub.w	ip, ip, r3
 800c26a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c26e:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c270:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c274:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c278:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c27a:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c27c:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800c27e:	bfa8      	it	ge
 800c280:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c282:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c286:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c28a:	3401      	adds	r4, #1
 800c28c:	e79d      	b.n	800c1ca <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c28e:	2301      	movs	r3, #1
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	4662      	mov	r2, ip
 800c294:	4643      	mov	r3, r8
 800c296:	4671      	mov	r1, lr
 800c298:	a808      	add	r0, sp, #32
 800c29a:	f7ff fb8d 	bl	800b9b8 <jpeg_huff_decode>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f6ff af0a 	blt.w	800c0b8 <decode_mcu_sub+0x30>
 800c2a4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c2a8:	e7c9      	b.n	800c23e <decode_mcu_sub+0x1b6>
 800c2aa:	2309      	movs	r3, #9
 800c2ac:	e7f0      	b.n	800c290 <decode_mcu_sub+0x208>
	    if (r != 15)
 800c2ae:	2a0f      	cmp	r2, #15
 800c2b0:	d192      	bne.n	800c1d8 <decode_mcu_sub+0x150>
	    k += 15;
 800c2b2:	340f      	adds	r4, #15
 800c2b4:	e7e9      	b.n	800c28a <decode_mcu_sub+0x202>
	if (s) {
 800c2b6:	b174      	cbz	r4, 800c2d6 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c2b8:	45a4      	cmp	ip, r4
 800c2ba:	da0a      	bge.n	800c2d2 <decode_mcu_sub+0x24a>
 800c2bc:	4623      	mov	r3, r4
 800c2be:	4662      	mov	r2, ip
 800c2c0:	4671      	mov	r1, lr
 800c2c2:	a808      	add	r0, sp, #32
 800c2c4:	f7ff fb1a 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	f43f aef5 	beq.w	800c0b8 <decode_mcu_sub+0x30>
 800c2ce:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c2d2:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c2d6:	2401      	movs	r4, #1
 800c2d8:	e77a      	b.n	800c1d0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c2da:	f1bc 0f07 	cmp.w	ip, #7
 800c2de:	dc0d      	bgt.n	800c2fc <decode_mcu_sub+0x274>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	4662      	mov	r2, ip
 800c2e4:	4671      	mov	r1, lr
 800c2e6:	a808      	add	r0, sp, #32
 800c2e8:	f7ff fb08 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	f43f aee3 	beq.w	800c0b8 <decode_mcu_sub+0x30>
 800c2f2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c2f6:	f1bc 0f07 	cmp.w	ip, #7
 800c2fa:	dd25      	ble.n	800c348 <decode_mcu_sub+0x2c0>
 800c2fc:	f1ac 0308 	sub.w	r3, ip, #8
 800c300:	fa4e f303 	asr.w	r3, lr, r3
 800c304:	b2db      	uxtb	r3, r3
 800c306:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c30a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c30e:	b34a      	cbz	r2, 800c364 <decode_mcu_sub+0x2dc>
 800c310:	4443      	add	r3, r8
 800c312:	ebac 0c02 	sub.w	ip, ip, r2
 800c316:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c31a:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c31e:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c322:	d021      	beq.n	800c368 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c324:	45dc      	cmp	ip, fp
	  k += r;
 800c326:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c328:	da0a      	bge.n	800c340 <decode_mcu_sub+0x2b8>
 800c32a:	465b      	mov	r3, fp
 800c32c:	4662      	mov	r2, ip
 800c32e:	4671      	mov	r1, lr
 800c330:	a808      	add	r0, sp, #32
 800c332:	f7ff fae3 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f aebe 	beq.w	800c0b8 <decode_mcu_sub+0x30>
 800c33c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c340:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800c344:	3401      	adds	r4, #1
 800c346:	e743      	b.n	800c1d0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c348:	2301      	movs	r3, #1
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	4662      	mov	r2, ip
 800c34e:	4643      	mov	r3, r8
 800c350:	4671      	mov	r1, lr
 800c352:	a808      	add	r0, sp, #32
 800c354:	f7ff fb30 	bl	800b9b8 <jpeg_huff_decode>
 800c358:	2800      	cmp	r0, #0
 800c35a:	f6ff aead 	blt.w	800c0b8 <decode_mcu_sub+0x30>
 800c35e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c362:	e7da      	b.n	800c31a <decode_mcu_sub+0x292>
 800c364:	2309      	movs	r3, #9
 800c366:	e7f0      	b.n	800c34a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800c368:	2b0f      	cmp	r3, #15
 800c36a:	f47f af35 	bne.w	800c1d8 <decode_mcu_sub+0x150>
	  k += 15;
 800c36e:	340f      	adds	r4, #15
 800c370:	e7e8      	b.n	800c344 <decode_mcu_sub+0x2bc>
 800c372:	bf00      	nop
 800c374:	0802eea0 	.word	0x0802eea0

0800c378 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c37c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c380:	b091      	sub	sp, #68	; 0x44
 800c382:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c384:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c388:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800c38a:	b933      	cbnz	r3, 800c39a <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c38c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c38e:	b17f      	cbz	r7, 800c3b0 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c390:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c392:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c394:	3b01      	subs	r3, #1
 800c396:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c398:	e007      	b.n	800c3aa <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800c39a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1f5      	bne.n	800c38c <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800c3a0:	f7ff fb54 	bl	800ba4c <process_restart>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d1f1      	bne.n	800c38c <decode_mcu+0x14>
	return FALSE;
 800c3a8:	2000      	movs	r0, #0
}
 800c3aa:	b011      	add	sp, #68	; 0x44
 800c3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3b0:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c3b2:	f105 0810 	add.w	r8, r5, #16
 800c3b6:	ac0b      	add	r4, sp, #44	; 0x2c
 800c3b8:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	9206      	str	r2, [sp, #24]
 800c3c2:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800c3c4:	f8df a290 	ldr.w	sl, [pc, #656]	; 800c658 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3c8:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c3ca:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3ce:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c3d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d8:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c3da:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c3de:	42bb      	cmp	r3, r7
 800c3e0:	dc0e      	bgt.n	800c400 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3e2:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c3e4:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3e6:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c3e8:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	9a07      	ldr	r2, [sp, #28]
 800c3f0:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c3f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3f4:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c3f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3fa:	6833      	ldr	r3, [r6, #0]
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	e7c7      	b.n	800c390 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c400:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c402:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c406:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c40a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c40e:	dc0c      	bgt.n	800c42a <decode_mcu+0xb2>
 800c410:	2300      	movs	r3, #0
 800c412:	4662      	mov	r2, ip
 800c414:	4671      	mov	r1, lr
 800c416:	a806      	add	r0, sp, #24
 800c418:	f7ff fa70 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d0c3      	beq.n	800c3a8 <decode_mcu+0x30>
 800c420:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c424:	f1bc 0f07 	cmp.w	ip, #7
 800c428:	dd49      	ble.n	800c4be <decode_mcu+0x146>
 800c42a:	f1ac 0308 	sub.w	r3, ip, #8
 800c42e:	fa4e f303 	asr.w	r3, lr, r3
 800c432:	b2db      	uxtb	r3, r3
 800c434:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c438:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c43c:	2a00      	cmp	r2, #0
 800c43e:	d04c      	beq.n	800c4da <decode_mcu+0x162>
 800c440:	4423      	add	r3, r4
 800c442:	ebac 0c02 	sub.w	ip, ip, r2
 800c446:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c44a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c44e:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c452:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 809f 	beq.w	800c598 <decode_mcu+0x220>
	if (s) {
 800c45a:	b1cc      	cbz	r4, 800c490 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c45c:	45a4      	cmp	ip, r4
 800c45e:	da09      	bge.n	800c474 <decode_mcu+0xfc>
 800c460:	4623      	mov	r3, r4
 800c462:	4662      	mov	r2, ip
 800c464:	4671      	mov	r1, lr
 800c466:	a806      	add	r0, sp, #24
 800c468:	f7ff fa48 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d09b      	beq.n	800c3a8 <decode_mcu+0x30>
 800c470:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800c474:	ebac 0c04 	sub.w	ip, ip, r4
 800c478:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c47c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c47e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c482:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c486:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c488:	4299      	cmp	r1, r3
 800c48a:	bfac      	ite	ge
 800c48c:	1a9c      	subge	r4, r3, r2
 800c48e:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c490:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c494:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c498:	ab10      	add	r3, sp, #64	; 0x40
 800c49a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c49e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c4a2:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c4a4:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c4a8:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c4ac:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	429c      	cmp	r4, r3
 800c4b2:	db14      	blt.n	800c4de <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800c4b4:	2c3f      	cmp	r4, #63	; 0x3f
 800c4b6:	f340 8081 	ble.w	800c5bc <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c4ba:	3701      	adds	r7, #1
 800c4bc:	e78d      	b.n	800c3da <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c4be:	2301      	movs	r3, #1
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	4662      	mov	r2, ip
 800c4c4:	4623      	mov	r3, r4
 800c4c6:	4671      	mov	r1, lr
 800c4c8:	a806      	add	r0, sp, #24
 800c4ca:	f7ff fa75 	bl	800b9b8 <jpeg_huff_decode>
 800c4ce:	1e04      	subs	r4, r0, #0
 800c4d0:	f6ff af6a 	blt.w	800c3a8 <decode_mcu+0x30>
 800c4d4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c4d8:	e7b7      	b.n	800c44a <decode_mcu+0xd2>
 800c4da:	2309      	movs	r3, #9
 800c4dc:	e7f0      	b.n	800c4c0 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c4de:	f1bc 0f07 	cmp.w	ip, #7
 800c4e2:	dc0d      	bgt.n	800c500 <decode_mcu+0x188>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4662      	mov	r2, ip
 800c4e8:	4671      	mov	r1, lr
 800c4ea:	a806      	add	r0, sp, #24
 800c4ec:	f7ff fa06 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	f43f af59 	beq.w	800c3a8 <decode_mcu+0x30>
 800c4f6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c4fa:	f1bc 0f07 	cmp.w	ip, #7
 800c4fe:	dd37      	ble.n	800c570 <decode_mcu+0x1f8>
 800c500:	f1ac 0308 	sub.w	r3, ip, #8
 800c504:	fa4e f303 	asr.w	r3, lr, r3
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c50e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c512:	2a00      	cmp	r2, #0
 800c514:	d03a      	beq.n	800c58c <decode_mcu+0x214>
 800c516:	4443      	add	r3, r8
 800c518:	ebac 0c02 	sub.w	ip, ip, r2
 800c51c:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c520:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c524:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c528:	d032      	beq.n	800c590 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c52a:	459c      	cmp	ip, r3
	    k += r;
 800c52c:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c52e:	da0b      	bge.n	800c548 <decode_mcu+0x1d0>
 800c530:	4662      	mov	r2, ip
 800c532:	4671      	mov	r1, lr
 800c534:	a806      	add	r0, sp, #24
 800c536:	9305      	str	r3, [sp, #20]
 800c538:	f7ff f9e0 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f43f af33 	beq.w	800c3a8 <decode_mcu+0x30>
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800c548:	ebac 0c03 	sub.w	ip, ip, r3
 800c54c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c550:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c552:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c556:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c55a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c55c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c55e:	4b3d      	ldr	r3, [pc, #244]	; (800c654 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800c560:	bfa8      	it	ge
 800c562:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c564:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c568:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c56c:	3401      	adds	r4, #1
 800c56e:	e79e      	b.n	800c4ae <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c570:	2301      	movs	r3, #1
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4662      	mov	r2, ip
 800c576:	4643      	mov	r3, r8
 800c578:	4671      	mov	r1, lr
 800c57a:	a806      	add	r0, sp, #24
 800c57c:	f7ff fa1c 	bl	800b9b8 <jpeg_huff_decode>
 800c580:	2800      	cmp	r0, #0
 800c582:	f6ff af11 	blt.w	800c3a8 <decode_mcu+0x30>
 800c586:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c58a:	e7c9      	b.n	800c520 <decode_mcu+0x1a8>
 800c58c:	2309      	movs	r3, #9
 800c58e:	e7f0      	b.n	800c572 <decode_mcu+0x1fa>
	    if (r != 15)
 800c590:	2a0f      	cmp	r2, #15
 800c592:	d192      	bne.n	800c4ba <decode_mcu+0x142>
	    k += 15;
 800c594:	340f      	adds	r4, #15
 800c596:	e7e9      	b.n	800c56c <decode_mcu+0x1f4>
	if (s) {
 800c598:	b174      	cbz	r4, 800c5b8 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c59a:	45a4      	cmp	ip, r4
 800c59c:	da0a      	bge.n	800c5b4 <decode_mcu+0x23c>
 800c59e:	4623      	mov	r3, r4
 800c5a0:	4662      	mov	r2, ip
 800c5a2:	4671      	mov	r1, lr
 800c5a4:	a806      	add	r0, sp, #24
 800c5a6:	f7ff f9a9 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f43f aefc 	beq.w	800c3a8 <decode_mcu+0x30>
 800c5b0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c5b4:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c5b8:	2401      	movs	r4, #1
 800c5ba:	e77b      	b.n	800c4b4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c5bc:	f1bc 0f07 	cmp.w	ip, #7
 800c5c0:	dc0d      	bgt.n	800c5de <decode_mcu+0x266>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4662      	mov	r2, ip
 800c5c6:	4671      	mov	r1, lr
 800c5c8:	a806      	add	r0, sp, #24
 800c5ca:	f7ff f997 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f43f aeea 	beq.w	800c3a8 <decode_mcu+0x30>
 800c5d4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c5d8:	f1bc 0f07 	cmp.w	ip, #7
 800c5dc:	dd25      	ble.n	800c62a <decode_mcu+0x2b2>
 800c5de:	f1ac 0308 	sub.w	r3, ip, #8
 800c5e2:	fa4e f303 	asr.w	r3, lr, r3
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c5ec:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c5f0:	b34a      	cbz	r2, 800c646 <decode_mcu+0x2ce>
 800c5f2:	4443      	add	r3, r8
 800c5f4:	ebac 0c02 	sub.w	ip, ip, r2
 800c5f8:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c5fc:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c600:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c604:	d021      	beq.n	800c64a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c606:	45dc      	cmp	ip, fp
	  k += r;
 800c608:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c60a:	da0a      	bge.n	800c622 <decode_mcu+0x2aa>
 800c60c:	465b      	mov	r3, fp
 800c60e:	4662      	mov	r2, ip
 800c610:	4671      	mov	r1, lr
 800c612:	a806      	add	r0, sp, #24
 800c614:	f7ff f972 	bl	800b8fc <jpeg_fill_bit_buffer>
 800c618:	2800      	cmp	r0, #0
 800c61a:	f43f aec5 	beq.w	800c3a8 <decode_mcu+0x30>
 800c61e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c622:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800c626:	3401      	adds	r4, #1
 800c628:	e744      	b.n	800c4b4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c62a:	2301      	movs	r3, #1
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	4662      	mov	r2, ip
 800c630:	4643      	mov	r3, r8
 800c632:	4671      	mov	r1, lr
 800c634:	a806      	add	r0, sp, #24
 800c636:	f7ff f9bf 	bl	800b9b8 <jpeg_huff_decode>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f6ff aeb4 	blt.w	800c3a8 <decode_mcu+0x30>
 800c640:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c644:	e7da      	b.n	800c5fc <decode_mcu+0x284>
 800c646:	2309      	movs	r3, #9
 800c648:	e7f0      	b.n	800c62c <decode_mcu+0x2b4>
	  if (r != 15)
 800c64a:	2b0f      	cmp	r3, #15
 800c64c:	f47f af35 	bne.w	800c4ba <decode_mcu+0x142>
	  k += 15;
 800c650:	340f      	adds	r4, #15
 800c652:	e7e8      	b.n	800c626 <decode_mcu+0x2ae>
 800c654:	08030778 	.word	0x08030778
 800c658:	0802eea0 	.word	0x0802eea0

0800c65c <jpeg_make_d_derived_tbl>:
{
 800c65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c660:	2a03      	cmp	r2, #3
{
 800c662:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800c666:	4604      	mov	r4, r0
 800c668:	4616      	mov	r6, r2
 800c66a:	461f      	mov	r7, r3
 800c66c:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c66e:	d905      	bls.n	800c67c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c670:	6803      	ldr	r3, [r0, #0]
 800c672:	2234      	movs	r2, #52	; 0x34
 800c674:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c67c:	9b03      	ldr	r3, [sp, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d044      	beq.n	800c70c <jpeg_make_d_derived_tbl+0xb0>
 800c682:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c686:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800c68a:	b935      	cbnz	r5, 800c69a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c68c:	6823      	ldr	r3, [r4, #0]
 800c68e:	2234      	movs	r2, #52	; 0x34
 800c690:	4620      	mov	r0, r4
 800c692:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4798      	blx	r3
  if (*pdtbl == NULL)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	b93b      	cbnz	r3, 800c6ae <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c69e:	6863      	ldr	r3, [r4, #4]
 800c6a0:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800c6ac:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800c6ae:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800c6b2:	2601      	movs	r6, #1
  p = 0;
 800c6b4:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c6b6:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800c6ba:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800c6be:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800c6c2:	46ba      	mov	sl, r7
 800c6c4:	444f      	add	r7, r9
 800c6c6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800c6ca:	dd05      	ble.n	800c6d8 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f8c3 b014 	str.w	fp, [r3, #20]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4798      	blx	r3
 800c6d8:	f10a 0318 	add.w	r3, sl, #24
 800c6dc:	446b      	add	r3, sp
    while (i--)
 800c6de:	f1b9 0901 	subs.w	r9, r9, #1
 800c6e2:	d218      	bcs.n	800c716 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800c6e4:	3601      	adds	r6, #1
 800c6e6:	2e11      	cmp	r6, #17
 800c6e8:	d1e9      	bne.n	800c6be <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800c6ee:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800c6f2:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800c6f6:	55da      	strb	r2, [r3, r7]
  p = 0;
 800c6f8:	4691      	mov	r9, r2
  si = huffsize[0];
 800c6fa:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800c6fe:	ab06      	add	r3, sp, #24
 800c700:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c704:	b313      	cbz	r3, 800c74c <jpeg_make_d_derived_tbl+0xf0>
 800c706:	4649      	mov	r1, r9
 800c708:	1a52      	subs	r2, r2, r1
 800c70a:	e00a      	b.n	800c722 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c70c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c710:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800c714:	e7b9      	b.n	800c68a <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800c716:	f803 6b01 	strb.w	r6, [r3], #1
 800c71a:	e7e0      	b.n	800c6de <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800c71c:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800c720:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800c722:	a806      	add	r0, sp, #24
 800c724:	1853      	adds	r3, r2, r1
 800c726:	4689      	mov	r9, r1
 800c728:	5c40      	ldrb	r0, [r0, r1]
 800c72a:	42b0      	cmp	r0, r6
 800c72c:	d0f6      	beq.n	800c71c <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800c72e:	fa0b f206 	lsl.w	r2, fp, r6
 800c732:	429a      	cmp	r2, r3
 800c734:	dc07      	bgt.n	800c746 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c736:	6822      	ldr	r2, [r4, #0]
 800c738:	2109      	movs	r1, #9
 800c73a:	4620      	mov	r0, r4
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	6151      	str	r1, [r2, #20]
 800c740:	6812      	ldr	r2, [r2, #0]
 800c742:	4790      	blx	r2
 800c744:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800c746:	005a      	lsls	r2, r3, #1
    si++;
 800c748:	3601      	adds	r6, #1
 800c74a:	e7d8      	b.n	800c6fe <jpeg_make_d_derived_tbl+0xa2>
 800c74c:	1c68      	adds	r0, r5, #1
 800c74e:	f108 0204 	add.w	r2, r8, #4
 800c752:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c756:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c75a:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800c75c:	f810 9b01 	ldrb.w	r9, [r0], #1
 800c760:	f1b9 0f00 	cmp.w	r9, #0
 800c764:	d029      	beq.n	800c7ba <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c766:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c76a:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800c76c:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c76e:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800c770:	1e59      	subs	r1, r3, #1
 800c772:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c776:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800c778:	3204      	adds	r2, #4
 800c77a:	4594      	cmp	ip, r2
 800c77c:	d1ee      	bne.n	800c75c <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c77e:	4b2d      	ldr	r3, [pc, #180]	; (800c834 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c784:	2100      	movs	r1, #0
 800c786:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c78a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c78e:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c790:	f01e fe82 	bl	802b498 <memset>
  p = 0;
 800c794:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c798:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c79a:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c79c:	2101      	movs	r1, #1
 800c79e:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c7a0:	9201      	str	r2, [sp, #4]
 800c7a2:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c7a6:	fa01 fb02 	lsl.w	fp, r1, r2
 800c7aa:	9202      	str	r2, [sp, #8]
 800c7ac:	9a01      	ldr	r2, [sp, #4]
 800c7ae:	4452      	add	r2, sl
 800c7b0:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c7b2:	f105 0211 	add.w	r2, r5, #17
 800c7b6:	9205      	str	r2, [sp, #20]
 800c7b8:	e020      	b.n	800c7fc <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c7ba:	f8c2 e000 	str.w	lr, [r2]
 800c7be:	e7db      	b.n	800c778 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c7c0:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c7c2:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c7c4:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800c7c8:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c7ca:	9a05      	ldr	r2, [sp, #20]
 800c7cc:	f812 1009 	ldrb.w	r1, [r2, r9]
 800c7d0:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800c7d4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c7d8:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800c7dc:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c7e0:	d1fa      	bne.n	800c7d8 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c7e2:	f1bb 0f00 	cmp.w	fp, #0
 800c7e6:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c7ea:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c7ee:	bfcc      	ite	gt
 800c7f0:	465a      	movgt	r2, fp
 800c7f2:	2201      	movle	r2, #1
 800c7f4:	4440      	add	r0, r8
 800c7f6:	f01e fe4f 	bl	802b498 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c7fa:	ab47      	add	r3, sp, #284	; 0x11c
 800c7fc:	9a04      	ldr	r2, [sp, #16]
 800c7fe:	4591      	cmp	r9, r2
 800c800:	d1de      	bne.n	800c7c0 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c802:	3601      	adds	r6, #1
 800c804:	9a01      	ldr	r2, [sp, #4]
 800c806:	2e09      	cmp	r6, #9
 800c808:	4492      	add	sl, r2
 800c80a:	d1c6      	bne.n	800c79a <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	b11b      	cbz	r3, 800c818 <jpeg_make_d_derived_tbl+0x1bc>
 800c810:	3511      	adds	r5, #17
 800c812:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800c814:	42af      	cmp	r7, r5
 800c816:	d103      	bne.n	800c820 <jpeg_make_d_derived_tbl+0x1c4>
}
 800c818:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800c820:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800c824:	2b0f      	cmp	r3, #15
 800c826:	d9f5      	bls.n	800c814 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	4620      	mov	r0, r4
 800c82c:	615e      	str	r6, [r3, #20]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800c832:	e7ef      	b.n	800c814 <jpeg_make_d_derived_tbl+0x1b8>
 800c834:	000fffff 	.word	0x000fffff

0800c838 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800c838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800c83c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800c840:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c842:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800c846:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800c84a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800c84e:	2d00      	cmp	r5, #0
 800c850:	f000 80b1 	beq.w	800c9b6 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800c854:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800c858:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800c85c:	b962      	cbnz	r2, 800c878 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800c85e:	b1a9      	cbz	r1, 800c88c <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c860:	f8da 3000 	ldr.w	r3, [sl]
 800c864:	2711      	movs	r7, #17
 800c866:	4650      	mov	r0, sl
 800c868:	625d      	str	r5, [r3, #36]	; 0x24
 800c86a:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800c86e:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4798      	blx	r3
 800c876:	e00f      	b.n	800c898 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800c878:	428a      	cmp	r2, r1
 800c87a:	dcf1      	bgt.n	800c860 <start_pass_huff_decoder+0x28>
 800c87c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800c880:	428b      	cmp	r3, r1
 800c882:	dbed      	blt.n	800c860 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800c884:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d1e9      	bne.n	800c860 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800c88c:	b116      	cbz	r6, 800c894 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800c88e:	1e73      	subs	r3, r6, #1
 800c890:	42ab      	cmp	r3, r5
 800c892:	d1e5      	bne.n	800c860 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800c894:	2d0d      	cmp	r5, #13
 800c896:	dce3      	bgt.n	800c860 <start_pass_huff_decoder+0x28>
{
 800c898:	46a1      	mov	r9, r4
 800c89a:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c89c:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c8a0:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c8a4:	42ba      	cmp	r2, r7
 800c8a6:	dc1e      	bgt.n	800c8e6 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800c8a8:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c8ac:	2a00      	cmp	r2, #0
 800c8ae:	d158      	bne.n	800c962 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d154      	bne.n	800c95e <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800c8b4:	4bbb      	ldr	r3, [pc, #748]	; (800cba4 <start_pass_huff_decoder+0x36c>)
{
 800c8b6:	2600      	movs	r6, #0
 800c8b8:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c8bc:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c8c0:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c8c2:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c8c6:	42b3      	cmp	r3, r6
 800c8c8:	dc50      	bgt.n	800c96c <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800c8d0:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800c8d2:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800c8d6:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800c8da:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800c8de:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800c8e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800c8e6:	f859 2b04 	ldr.w	r2, [r9], #4
 800c8ea:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800c8ee:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800c8f2:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800c8f6:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c8fa:	b173      	cbz	r3, 800c91a <start_pass_huff_decoder+0xe2>
 800c8fc:	5853      	ldr	r3, [r2, r1]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	da0b      	bge.n	800c91a <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800c902:	f8da 3000 	ldr.w	r3, [sl]
 800c906:	2276      	movs	r2, #118	; 0x76
 800c908:	f04f 31ff 	mov.w	r1, #4294967295
 800c90c:	4650      	mov	r0, sl
 800c90e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c912:	2200      	movs	r2, #0
 800c914:	61da      	str	r2, [r3, #28]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c91a:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800c91e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800c922:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800c926:	42ab      	cmp	r3, r5
 800c928:	da01      	bge.n	800c92e <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c92a:	3701      	adds	r7, #1
 800c92c:	e7b6      	b.n	800c89c <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c92e:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800c930:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c934:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800c938:	429a      	cmp	r2, r3
 800c93a:	d00a      	beq.n	800c952 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800c93c:	f8da 3000 	ldr.w	r3, [sl]
 800c940:	2276      	movs	r2, #118	; 0x76
 800c942:	f04f 31ff 	mov.w	r1, #4294967295
 800c946:	4650      	mov	r0, sl
 800c948:	61dd      	str	r5, [r3, #28]
 800c94a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800c952:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c956:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800c958:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c95c:	e7e1      	b.n	800c922 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800c95e:	4b92      	ldr	r3, [pc, #584]	; (800cba8 <start_pass_huff_decoder+0x370>)
 800c960:	e7a9      	b.n	800c8b6 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800c962:	b90b      	cbnz	r3, 800c968 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c964:	4b91      	ldr	r3, [pc, #580]	; (800cbac <start_pass_huff_decoder+0x374>)
 800c966:	e7a6      	b.n	800c8b6 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800c968:	4b91      	ldr	r3, [pc, #580]	; (800cbb0 <start_pass_huff_decoder+0x378>)
 800c96a:	e7a4      	b.n	800c8b6 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800c96c:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800c970:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800c974:	b97a      	cbnz	r2, 800c996 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800c976:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c97a:	b942      	cbnz	r2, 800c98e <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800c97c:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c97e:	2101      	movs	r1, #1
 800c980:	4650      	mov	r0, sl
 800c982:	f102 030b 	add.w	r3, r2, #11
 800c986:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c98a:	f7ff fe67 	bl	800c65c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c98e:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c990:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c994:	e795      	b.n	800c8c2 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800c996:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c998:	2100      	movs	r1, #0
 800c99a:	4650      	mov	r0, sl
 800c99c:	f105 030b 	add.w	r3, r5, #11
 800c9a0:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c9a2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c9a6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c9aa:	f7ff fe57 	bl	800c65c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c9ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c9b0:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800c9b4:	e7eb      	b.n	800c98e <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c9b6:	b982      	cbnz	r2, 800c9da <start_pass_huff_decoder+0x1a2>
 800c9b8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800c9bc:	b96b      	cbnz	r3, 800c9da <start_pass_huff_decoder+0x1a2>
 800c9be:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c9c2:	b953      	cbnz	r3, 800c9da <start_pass_huff_decoder+0x1a2>
 800c9c4:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800c9c8:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c9cc:	b90a      	cbnz	r2, 800c9d2 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800c9ce:	2b3f      	cmp	r3, #63	; 0x3f
 800c9d0:	dc0c      	bgt.n	800c9ec <start_pass_huff_decoder+0x1b4>
 800c9d2:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d008      	beq.n	800c9ec <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800c9da:	f8da 3000 	ldr.w	r3, [sl]
 800c9de:	227d      	movs	r2, #125	; 0x7d
 800c9e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c9e4:	4650      	mov	r0, sl
 800c9e6:	615a      	str	r2, [r3, #20]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800c9ec:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800c9f0:	2600      	movs	r6, #0
 800c9f2:	4b70      	ldr	r3, [pc, #448]	; (800cbb4 <start_pass_huff_decoder+0x37c>)
 800c9f4:	f10b 0714 	add.w	r7, fp, #20
 800c9f8:	4a6f      	ldr	r2, [pc, #444]	; (800cbb8 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c9fa:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800c9fc:	293f      	cmp	r1, #63	; 0x3f
 800c9fe:	bf08      	it	eq
 800ca00:	4613      	moveq	r3, r2
 800ca02:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ca06:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800ca0a:	42b3      	cmp	r3, r6
 800ca0c:	dc3c      	bgt.n	800ca88 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ca0e:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800ca12:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800ca16:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800ca1a:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800ca1e:	4f67      	ldr	r7, [pc, #412]	; (800cbbc <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800ca20:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ca24:	42a8      	cmp	r0, r5
 800ca26:	f77f af53 	ble.w	800c8d0 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800ca2a:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800ca2e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800ca32:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800ca36:	6953      	ldr	r3, [r2, #20]
 800ca38:	3310      	adds	r3, #16
 800ca3a:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800ca3e:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800ca42:	6993      	ldr	r3, [r2, #24]
 800ca44:	3314      	adds	r3, #20
 800ca46:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800ca4a:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800ca4c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d052      	beq.n	800caf8 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800ca52:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800ca56:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800ca58:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800ca5c:	d075      	beq.n	800cb4a <start_pass_huff_decoder+0x312>
 800ca5e:	dc30      	bgt.n	800cac2 <start_pass_huff_decoder+0x28a>
 800ca60:	2c03      	cmp	r4, #3
 800ca62:	d04f      	beq.n	800cb04 <start_pass_huff_decoder+0x2cc>
 800ca64:	2c08      	cmp	r4, #8
 800ca66:	d05d      	beq.n	800cb24 <start_pass_huff_decoder+0x2ec>
 800ca68:	2c00      	cmp	r4, #0
 800ca6a:	d047      	beq.n	800cafc <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800ca6c:	1e5c      	subs	r4, r3, #1
 800ca6e:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800ca70:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800ca74:	bf28      	it	cs
 800ca76:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800ca78:	2c08      	cmp	r4, #8
 800ca7a:	bf28      	it	cs
 800ca7c:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800ca7e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ca82:	4b4f      	ldr	r3, [pc, #316]	; (800cbc0 <start_pass_huff_decoder+0x388>)
 800ca84:	3a09      	subs	r2, #9
 800ca86:	e04a      	b.n	800cb1e <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800ca88:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800ca90:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800ca94:	f102 0310 	add.w	r3, r2, #16
 800ca98:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800ca9c:	f7ff fdde 	bl	800c65c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800caa0:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800caa4:	b14b      	cbz	r3, 800caba <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800caa6:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800caaa:	2100      	movs	r1, #0
 800caac:	4650      	mov	r0, sl
 800caae:	f102 0314 	add.w	r3, r2, #20
 800cab2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cab6:	f7ff fdd1 	bl	800c65c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800caba:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cabc:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cac0:	e7a1      	b.n	800ca06 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800cac2:	2c23      	cmp	r4, #35	; 0x23
 800cac4:	f103 3eff 	add.w	lr, r3, #4294967295
 800cac8:	f102 39ff 	add.w	r9, r2, #4294967295
 800cacc:	d04b      	beq.n	800cb66 <start_pass_huff_decoder+0x32e>
 800cace:	2c30      	cmp	r4, #48	; 0x30
 800cad0:	d057      	beq.n	800cb82 <start_pass_huff_decoder+0x34a>
 800cad2:	2c18      	cmp	r4, #24
 800cad4:	d1ca      	bne.n	800ca6c <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800cad6:	f1be 0f05 	cmp.w	lr, #5
 800cada:	bf28      	it	cs
 800cadc:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800cade:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cae2:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800cae6:	bf28      	it	cs
 800cae8:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800caea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800caee:	3a01      	subs	r2, #1
 800caf0:	4413      	add	r3, r2
 800caf2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800caf6:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800caf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cafa:	e001      	b.n	800cb00 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800cafc:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cb00:	3501      	adds	r5, #1
 800cb02:	e78f      	b.n	800ca24 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800cb04:	1e5c      	subs	r4, r3, #1
 800cb06:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800cb08:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800cb0c:	bf28      	it	cs
 800cb0e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800cb10:	2c02      	cmp	r4, #2
 800cb12:	bf28      	it	cs
 800cb14:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800cb16:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800cb1a:	4b2a      	ldr	r3, [pc, #168]	; (800cbc4 <start_pass_huff_decoder+0x38c>)
 800cb1c:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb22:	e7e8      	b.n	800caf6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800cb24:	1e5c      	subs	r4, r3, #1
 800cb26:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800cb28:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800cb2c:	bf28      	it	cs
 800cb2e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800cb30:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cb32:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800cb36:	bf28      	it	cs
 800cb38:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cb3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb3e:	3a01      	subs	r2, #1
 800cb40:	4413      	add	r3, r2
 800cb42:	4a21      	ldr	r2, [pc, #132]	; (800cbc8 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb48:	e7d5      	b.n	800caf6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800cb4a:	1e5c      	subs	r4, r3, #1
 800cb4c:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800cb4e:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800cb52:	bf28      	it	cs
 800cb54:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800cb56:	2c04      	cmp	r4, #4
 800cb58:	bf28      	it	cs
 800cb5a:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800cb5c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cb60:	4b1a      	ldr	r3, [pc, #104]	; (800cbcc <start_pass_huff_decoder+0x394>)
 800cb62:	3a05      	subs	r2, #5
 800cb64:	e7db      	b.n	800cb1e <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800cb66:	f1be 0f06 	cmp.w	lr, #6
 800cb6a:	bf28      	it	cs
 800cb6c:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800cb6e:	f1b9 0f06 	cmp.w	r9, #6
 800cb72:	bf28      	it	cs
 800cb74:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800cb76:	3b01      	subs	r3, #1
 800cb78:	3a01      	subs	r2, #1
 800cb7a:	fb0c 2303 	mla	r3, ip, r3, r2
 800cb7e:	4a14      	ldr	r2, [pc, #80]	; (800cbd0 <start_pass_huff_decoder+0x398>)
 800cb80:	e7e0      	b.n	800cb44 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800cb82:	f1be 0f07 	cmp.w	lr, #7
 800cb86:	bf28      	it	cs
 800cb88:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800cb8a:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cb8e:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800cb92:	bf28      	it	cs
 800cb94:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cb96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cb9a:	3a01      	subs	r2, #1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	4a0d      	ldr	r2, [pc, #52]	; (800cbd4 <start_pass_huff_decoder+0x39c>)
 800cba0:	e7d0      	b.n	800cb44 <start_pass_huff_decoder+0x30c>
 800cba2:	bf00      	nop
 800cba4:	0800ba99 	.word	0x0800ba99
 800cba8:	0800bc0d 	.word	0x0800bc0d
 800cbac:	0800bd6d 	.word	0x0800bd6d
 800cbb0:	0800be01 	.word	0x0800be01
 800cbb4:	0800c089 	.word	0x0800c089
 800cbb8:	0800c379 	.word	0x0800c379
 800cbbc:	0802f054 	.word	0x0802f054
 800cbc0:	0802eee0 	.word	0x0802eee0
 800cbc4:	0802efe0 	.word	0x0802efe0
 800cbc8:	0802eff0 	.word	0x0802eff0
 800cbcc:	0802f014 	.word	0x0802f014
 800cbd0:	0802f0b8 	.word	0x0802f0b8
 800cbd4:	0802f148 	.word	0x0802f148

0800cbd8 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cbda:	6843      	ldr	r3, [r0, #4]
 800cbdc:	22d8      	movs	r2, #216	; 0xd8
 800cbde:	2101      	movs	r1, #1
{
 800cbe0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800cbe6:	4b17      	ldr	r3, [pc, #92]	; (800cc44 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800cbe8:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cbec:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800cbee:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800cbf0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800cbf4:	b943      	cbnz	r3, 800cc08 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800cbf6:	6503      	str	r3, [r0, #80]	; 0x50
 800cbf8:	6403      	str	r3, [r0, #64]	; 0x40
 800cbfa:	6543      	str	r3, [r0, #84]	; 0x54
 800cbfc:	6443      	str	r3, [r0, #68]	; 0x44
 800cbfe:	6583      	str	r3, [r0, #88]	; 0x58
 800cc00:	6483      	str	r3, [r0, #72]	; 0x48
 800cc02:	65c3      	str	r3, [r0, #92]	; 0x5c
 800cc04:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800cc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc08:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	686b      	ldr	r3, [r5, #4]
 800cc0e:	4628      	mov	r0, r5
 800cc10:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cc12:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4798      	blx	r3
 800cc18:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800cc1a:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cc1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc20:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800cc24:	42b3      	cmp	r3, r6
 800cc26:	dc05      	bgt.n	800cc34 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800cc2e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800cc32:	e7e8      	b.n	800cc06 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800cc34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc38:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cc3a:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800cc3c:	f01e fc2c 	bl	802b498 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cc40:	e7ed      	b.n	800cc1e <jinit_huff_decoder+0x46>
 800cc42:	bf00      	nop
 800cc44:	0800c839 	.word	0x0800c839

0800cc48 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800cc48:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800cc4c:	4a01      	ldr	r2, [pc, #4]	; (800cc54 <finish_input_pass+0xc>)
 800cc4e:	601a      	str	r2, [r3, #0]
}
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	0800ce11 	.word	0x0800ce11

0800cc58 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800cc58:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800cc5a:	4a0a      	ldr	r2, [pc, #40]	; (800cc84 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800cc5c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800cc5e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800cc62:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800cc64:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800cc66:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800cc68:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800cc6c:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800cc6e:	6803      	ldr	r3, [r0, #0]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800cc74:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cc78:	4620      	mov	r0, r4
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800cc7e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	0800ce11 	.word	0x0800ce11

0800cc88 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800cc88:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800cc8c:	2a01      	cmp	r2, #1
{
 800cc8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc92:	4604      	mov	r4, r0
 800cc94:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800cc98:	d135      	bne.n	800cd06 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800cc9a:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800cc9e:	69d9      	ldr	r1, [r3, #28]
 800cca0:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800cca4:	6a19      	ldr	r1, [r3, #32]
 800cca6:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800ccaa:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800ccac:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800ccae:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800ccb2:	68d8      	ldr	r0, [r3, #12]
 800ccb4:	fbb1 f5f0 	udiv	r5, r1, r0
 800ccb8:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800ccbc:	2900      	cmp	r1, #0
 800ccbe:	bf08      	it	eq
 800ccc0:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800ccc2:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800ccc6:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800ccc8:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800ccca:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800ccce:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800ccd2:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ccd4:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800ccd6:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ccda:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ccde:	429f      	cmp	r7, r3
 800cce0:	db71      	blt.n	800cdc6 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800cce2:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800cce6:	4620      	mov	r0, r4
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800ccec:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800ccf6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800ccfa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ccfe:	6852      	ldr	r2, [r2, #4]
 800cd00:	601a      	str	r2, [r3, #0]
}
 800cd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800cd06:	1e53      	subs	r3, r2, #1
 800cd08:	2b03      	cmp	r3, #3
 800cd0a:	d907      	bls.n	800cd1c <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800cd0c:	6803      	ldr	r3, [r0, #0]
 800cd0e:	211b      	movs	r1, #27
 800cd10:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cd14:	2204      	movs	r2, #4
 800cd16:	61da      	str	r2, [r3, #28]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cd1c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800cd20:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cd22:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cd26:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800cd28:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800cd2a:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800cd2e:	4359      	muls	r1, r3
 800cd30:	f009 fdd4 	bl	80168dc <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cd34:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800cd38:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800cd3c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800cd40:	4359      	muls	r1, r3
 800cd42:	6a20      	ldr	r0, [r4, #32]
 800cd44:	f009 fdca 	bl	80168dc <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800cd48:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800cd4c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd50:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cd54:	429d      	cmp	r5, r3
 800cd56:	dabc      	bge.n	800ccd2 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800cd58:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800cd5c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cd5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800cd60:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cd62:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800cd64:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cd68:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800cd6a:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800cd6c:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800cd6e:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800cd70:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800cd72:	fbb2 fcf1 	udiv	ip, r2, r1
 800cd76:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	bf08      	it	eq
 800cd7e:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800cd80:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800cd82:	6a1a      	ldr	r2, [r3, #32]
 800cd84:	fbb2 f1f0 	udiv	r1, r2, r0
 800cd88:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	bf08      	it	eq
 800cd90:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800cd92:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800cd94:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800cd98:	443b      	add	r3, r7
 800cd9a:	2b0a      	cmp	r3, #10
 800cd9c:	dd05      	ble.n	800cdaa <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	4620      	mov	r0, r4
 800cda2:	f8c3 9014 	str.w	r9, [r3, #20]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4798      	blx	r3
      while (mcublks-- > 0) {
 800cdaa:	2f00      	cmp	r7, #0
 800cdac:	dc01      	bgt.n	800cdb2 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cdae:	3501      	adds	r5, #1
 800cdb0:	e7ce      	b.n	800cd50 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800cdb2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800cdb6:	3f01      	subs	r7, #1
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	335c      	adds	r3, #92	; 0x5c
 800cdbc:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800cdc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800cdc4:	e7f1      	b.n	800cdaa <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800cdc6:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800cdca:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cdcc:	b9eb      	cbnz	r3, 800ce0a <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800cdce:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800cdd0:	2a03      	cmp	r2, #3
 800cdd2:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800cdd6:	d803      	bhi.n	800cde0 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800cdd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	b92b      	cbnz	r3, 800cdec <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800cde0:	6823      	ldr	r3, [r4, #0]
 800cde2:	4620      	mov	r0, r4
 800cde4:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cdec:	6863      	ldr	r3, [r4, #4]
 800cdee:	2284      	movs	r2, #132	; 0x84
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800cdf6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cdfa:	4798      	blx	r3
 800cdfc:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800cdfe:	2284      	movs	r2, #132	; 0x84
 800ce00:	6869      	ldr	r1, [r5, #4]
 800ce02:	f01e fb3b 	bl	802b47c <memcpy>
    compptr->quant_table = qtbl;
 800ce06:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ce0a:	3701      	adds	r7, #1
 800ce0c:	e765      	b.n	800ccda <start_input_pass+0x52>
	...

0800ce10 <consume_markers>:
{
 800ce10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800ce14:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800ce18:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800ce1a:	6973      	ldr	r3, [r6, #20]
 800ce1c:	b9eb      	cbnz	r3, 800ce5a <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800ce1e:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800ce22:	4db0      	ldr	r5, [pc, #704]	; (800d0e4 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800ce24:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ce28:	4620      	mov	r0, r4
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	4798      	blx	r3
    switch (val) {
 800ce2e:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800ce30:	4607      	mov	r7, r0
    switch (val) {
 800ce32:	d016      	beq.n	800ce62 <consume_markers+0x52>
 800ce34:	2802      	cmp	r0, #2
 800ce36:	d111      	bne.n	800ce5c <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800ce3c:	69b3      	ldr	r3, [r6, #24]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 8174 	beq.w	800d12c <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800ce44:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	b133      	cbz	r3, 800ce5a <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	223d      	movs	r2, #61	; 0x3d
 800ce50:	4620      	mov	r0, r4
 800ce52:	615a      	str	r2, [r3, #20]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4798      	blx	r3
 800ce58:	e000      	b.n	800ce5c <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800ce5a:	2702      	movs	r7, #2
}
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800ce62:	69b3      	ldr	r3, [r6, #24]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f000 8150 	beq.w	800d10a <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	f040 80d8 	bne.w	800d020 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800ce70:	6a22      	ldr	r2, [r4, #32]
 800ce72:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800ce76:	429a      	cmp	r2, r3
 800ce78:	dc02      	bgt.n	800ce80 <consume_markers+0x70>
 800ce7a:	69e2      	ldr	r2, [r4, #28]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	dd08      	ble.n	800ce92 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	212a      	movs	r1, #42	; 0x2a
 800ce84:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800ce88:	4620      	mov	r0, r4
 800ce8a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800ce92:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800ce96:	2a08      	cmp	r2, #8
 800ce98:	d006      	beq.n	800cea8 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	2110      	movs	r1, #16
 800ce9e:	4620      	mov	r0, r4
 800cea0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800cea8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ceaa:	2a0a      	cmp	r2, #10
 800ceac:	dd08      	ble.n	800cec0 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	211b      	movs	r1, #27
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ceb8:	220a      	movs	r2, #10
 800ceba:	61da      	str	r2, [r3, #28]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cec0:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800cec4:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800cec8:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800cecc:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ced0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced2:	459a      	cmp	sl, r3
 800ced4:	db0d      	blt.n	800cef2 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800ced6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800ceda:	b92b      	cbnz	r3, 800cee8 <consume_markers+0xd8>
 800cedc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cee0:	b383      	cbz	r3, 800cf44 <consume_markers+0x134>
 800cee2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cee6:	b36b      	cbz	r3, 800cf44 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800cee8:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800ceea:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800ceee:	233f      	movs	r3, #63	; 0x3f
 800cef0:	e071      	b.n	800cfd6 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800cef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	2b03      	cmp	r3, #3
 800cefa:	d804      	bhi.n	800cf06 <consume_markers+0xf6>
 800cefc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf00:	3b01      	subs	r3, #1
 800cf02:	2b03      	cmp	r3, #3
 800cf04:	d905      	bls.n	800cf12 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f8c3 b014 	str.w	fp, [r3, #20]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cf12:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800cf16:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cf1a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800cf1e:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cf22:	429a      	cmp	r2, r3
 800cf24:	bfac      	ite	ge
 800cf26:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800cf2a:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800cf2e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800cf32:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	bfac      	ite	ge
 800cf3a:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800cf3e:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800cf42:	e7c5      	b.n	800ced0 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800cf44:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800cf48:	2b50      	cmp	r3, #80	; 0x50
 800cf4a:	f000 808a 	beq.w	800d062 <consume_markers+0x252>
 800cf4e:	dc2b      	bgt.n	800cfa8 <consume_markers+0x198>
 800cf50:	2b18      	cmp	r3, #24
 800cf52:	d078      	beq.n	800d046 <consume_markers+0x236>
 800cf54:	dc1d      	bgt.n	800cf92 <consume_markers+0x182>
 800cf56:	2b08      	cmp	r3, #8
 800cf58:	d070      	beq.n	800d03c <consume_markers+0x22c>
 800cf5a:	dc13      	bgt.n	800cf84 <consume_markers+0x174>
 800cf5c:	b3bb      	cbz	r3, 800cfce <consume_markers+0x1be>
 800cf5e:	2b03      	cmp	r3, #3
 800cf60:	d065      	beq.n	800d02e <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	2111      	movs	r1, #17
 800cf66:	4620      	mov	r0, r4
 800cf68:	6151      	str	r1, [r2, #20]
 800cf6a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800cf6e:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800cf72:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800cf76:	6213      	str	r3, [r2, #32]
 800cf78:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800cf7c:	6253      	str	r3, [r2, #36]	; 0x24
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	4798      	blx	r3
      break;
 800cf82:	e02a      	b.n	800cfda <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800cf84:	2b0f      	cmp	r3, #15
 800cf86:	d1ec      	bne.n	800cf62 <consume_markers+0x152>
      cinfo->block_size = 4;
 800cf88:	2204      	movs	r2, #4
 800cf8a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800cf8e:	4a56      	ldr	r2, [pc, #344]	; (800d0e8 <consume_markers+0x2d8>)
 800cf90:	e051      	b.n	800d036 <consume_markers+0x226>
    switch (cinfo->Se) {
 800cf92:	2b30      	cmp	r3, #48	; 0x30
 800cf94:	d05c      	beq.n	800d050 <consume_markers+0x240>
 800cf96:	2b3f      	cmp	r3, #63	; 0x3f
 800cf98:	d05f      	beq.n	800d05a <consume_markers+0x24a>
 800cf9a:	2b23      	cmp	r3, #35	; 0x23
 800cf9c:	d1e1      	bne.n	800cf62 <consume_markers+0x152>
      cinfo->block_size = 6;
 800cf9e:	2206      	movs	r2, #6
 800cfa0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800cfa4:	4a51      	ldr	r2, [pc, #324]	; (800d0ec <consume_markers+0x2dc>)
 800cfa6:	e046      	b.n	800d036 <consume_markers+0x226>
    switch (cinfo->Se) {
 800cfa8:	2ba8      	cmp	r3, #168	; 0xa8
 800cfaa:	d060      	beq.n	800d06e <consume_markers+0x25e>
 800cfac:	dc07      	bgt.n	800cfbe <consume_markers+0x1ae>
 800cfae:	2b78      	cmp	r3, #120	; 0x78
 800cfb0:	d059      	beq.n	800d066 <consume_markers+0x256>
 800cfb2:	2b8f      	cmp	r3, #143	; 0x8f
 800cfb4:	d059      	beq.n	800d06a <consume_markers+0x25a>
 800cfb6:	2b63      	cmp	r3, #99	; 0x63
 800cfb8:	d1d3      	bne.n	800cf62 <consume_markers+0x152>
      cinfo->block_size = 10;
 800cfba:	230a      	movs	r3, #10
 800cfbc:	e795      	b.n	800ceea <consume_markers+0xda>
    switch (cinfo->Se) {
 800cfbe:	2be0      	cmp	r3, #224	; 0xe0
 800cfc0:	d057      	beq.n	800d072 <consume_markers+0x262>
 800cfc2:	2bff      	cmp	r3, #255	; 0xff
 800cfc4:	d057      	beq.n	800d076 <consume_markers+0x266>
 800cfc6:	2bc3      	cmp	r3, #195	; 0xc3
 800cfc8:	d1cb      	bne.n	800cf62 <consume_markers+0x152>
      cinfo->block_size = 14;
 800cfca:	230e      	movs	r3, #14
 800cfcc:	e78d      	b.n	800ceea <consume_markers+0xda>
      cinfo->block_size = 1;
 800cfce:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800cfd2:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800cfd6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfda:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800cfde:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfe2:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800cfe6:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800cfe8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800cfee:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cff2:	459a      	cmp	sl, r3
 800cff4:	db41      	blt.n	800d07a <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cff6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800cffa:	6a20      	ldr	r0, [r4, #32]
 800cffc:	4359      	muls	r1, r3
 800cffe:	f009 fc6d 	bl	80168dc <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d004:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800d008:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d00c:	429a      	cmp	r2, r3
 800d00e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d012:	db03      	blt.n	800d01c <consume_markers+0x20c>
 800d014:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800d018:	2a00      	cmp	r2, #0
 800d01a:	d071      	beq.n	800d100 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800d01c:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800d020:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d024:	2b00      	cmp	r3, #0
 800d026:	d16d      	bne.n	800d104 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800d028:	2302      	movs	r3, #2
 800d02a:	61b3      	str	r3, [r6, #24]
	  break;
 800d02c:	e6fa      	b.n	800ce24 <consume_markers+0x14>
      cinfo->block_size = 2;
 800d02e:	2202      	movs	r2, #2
 800d030:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800d034:	4a2e      	ldr	r2, [pc, #184]	; (800d0f0 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800d036:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d03a:	e7cc      	b.n	800cfd6 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800d03c:	2203      	movs	r2, #3
 800d03e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800d042:	4a2c      	ldr	r2, [pc, #176]	; (800d0f4 <consume_markers+0x2e4>)
 800d044:	e7f7      	b.n	800d036 <consume_markers+0x226>
      cinfo->block_size = 5;
 800d046:	2205      	movs	r2, #5
 800d048:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800d04c:	4a2a      	ldr	r2, [pc, #168]	; (800d0f8 <consume_markers+0x2e8>)
 800d04e:	e7f2      	b.n	800d036 <consume_markers+0x226>
      cinfo->block_size = 7;
 800d050:	2207      	movs	r2, #7
 800d052:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800d056:	4a29      	ldr	r2, [pc, #164]	; (800d0fc <consume_markers+0x2ec>)
 800d058:	e7ed      	b.n	800d036 <consume_markers+0x226>
      cinfo->block_size = 8;
 800d05a:	2208      	movs	r2, #8
 800d05c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800d060:	e7b7      	b.n	800cfd2 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800d062:	2309      	movs	r3, #9
 800d064:	e741      	b.n	800ceea <consume_markers+0xda>
      cinfo->block_size = 11;
 800d066:	230b      	movs	r3, #11
 800d068:	e73f      	b.n	800ceea <consume_markers+0xda>
      cinfo->block_size = 12;
 800d06a:	230c      	movs	r3, #12
 800d06c:	e73d      	b.n	800ceea <consume_markers+0xda>
      cinfo->block_size = 13;
 800d06e:	230d      	movs	r3, #13
 800d070:	e73b      	b.n	800ceea <consume_markers+0xda>
      cinfo->block_size = 15;
 800d072:	230f      	movs	r3, #15
 800d074:	e739      	b.n	800ceea <consume_markers+0xda>
      cinfo->block_size = 16;
 800d076:	2310      	movs	r3, #16
 800d078:	e737      	b.n	800ceea <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800d07a:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d07e:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800d082:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d086:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d08a:	69e3      	ldr	r3, [r4, #28]
 800d08c:	4351      	muls	r1, r2
 800d08e:	4358      	muls	r0, r3
 800d090:	f009 fc24 	bl	80168dc <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800d094:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d098:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d09c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d0a0:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d0a2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d0a6:	4358      	muls	r0, r3
 800d0a8:	4351      	muls	r1, r2
 800d0aa:	f009 fc17 	bl	80168dc <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800d0ae:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d0b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800d0b6:	69e3      	ldr	r3, [r4, #28]
 800d0b8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800d0bc:	4358      	muls	r0, r3
 800d0be:	f009 fc0d 	bl	80168dc <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800d0c2:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d0c6:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d0ca:	6a23      	ldr	r3, [r4, #32]
 800d0cc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800d0d0:	4358      	muls	r0, r3
 800d0d2:	f009 fc03 	bl	80168dc <jdiv_round_up>
    compptr->quant_table = NULL;
 800d0d6:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800d0da:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800d0de:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d0e2:	e783      	b.n	800cfec <consume_markers+0x1dc>
 800d0e4:	08030778 	.word	0x08030778
 800d0e8:	0803096c 	.word	0x0803096c
 800d0ec:	08030a90 	.word	0x08030a90
 800d0f0:	080308b8 	.word	0x080308b8
 800d0f4:	08030908 	.word	0x08030908
 800d0f8:	080309ec 	.word	0x080309ec
 800d0fc:	08030b60 	.word	0x08030b60
    cinfo->inputctl->has_multiple_scans = FALSE;
 800d100:	611a      	str	r2, [r3, #16]
 800d102:	e78d      	b.n	800d020 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	61b3      	str	r3, [r6, #24]
 800d108:	e6a8      	b.n	800ce5c <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800d10a:	6933      	ldr	r3, [r6, #16]
 800d10c:	b92b      	cbnz	r3, 800d11a <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	2224      	movs	r2, #36	; 0x24
 800d112:	4620      	mov	r0, r4
 800d114:	615a      	str	r2, [r3, #20]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800d11a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f43f ae80 	beq.w	800ce24 <consume_markers+0x14>
	start_input_pass(cinfo);
 800d124:	4620      	mov	r0, r4
 800d126:	f7ff fdaf 	bl	800cc88 <start_input_pass>
 800d12a:	e697      	b.n	800ce5c <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800d12c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d130:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800d134:	429a      	cmp	r2, r3
 800d136:	f77f ae90 	ble.w	800ce5a <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800d13a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800d13e:	e68d      	b.n	800ce5c <consume_markers+0x4c>

0800d140 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d140:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800d144:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d146:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d148:	434a      	muls	r2, r1
 800d14a:	429a      	cmp	r2, r3
{
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d150:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d152:	d80c      	bhi.n	800d16e <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d154:	f009 fbc2 	bl	80168dc <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d158:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800d15c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d15e:	6a20      	ldr	r0, [r4, #32]
 800d160:	f009 fbbc 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800d164:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800d166:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800d168:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800d16c:	e059      	b.n	800d222 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800d16e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d176:	d80c      	bhi.n	800d192 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800d178:	0040      	lsls	r0, r0, #1
 800d17a:	f009 fbaf 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d17e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800d180:	6a20      	ldr	r0, [r4, #32]
 800d182:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d186:	0040      	lsls	r0, r0, #1
 800d188:	f009 fba8 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800d18c:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800d18e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800d190:	e7ea      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800d192:	441d      	add	r5, r3
 800d194:	42aa      	cmp	r2, r5
 800d196:	d80e      	bhi.n	800d1b6 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800d198:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d19c:	f009 fb9e 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d1a0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800d1a2:	6a20      	ldr	r0, [r4, #32]
 800d1a4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d1a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d1ac:	f009 fb96 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800d1b0:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800d1b2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800d1b4:	e7d8      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800d1b6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800d1ba:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800d1be:	d80c      	bhi.n	800d1da <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800d1c0:	0080      	lsls	r0, r0, #2
 800d1c2:	f009 fb8b 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d1c6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800d1c8:	6a20      	ldr	r0, [r4, #32]
 800d1ca:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d1ce:	0080      	lsls	r0, r0, #2
 800d1d0:	f009 fb84 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800d1d4:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800d1d6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800d1d8:	e7c6      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800d1da:	441d      	add	r5, r3
 800d1dc:	42aa      	cmp	r2, r5
 800d1de:	d80e      	bhi.n	800d1fe <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800d1e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d1e4:	f009 fb7a 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d1e8:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800d1ea:	6a20      	ldr	r0, [r4, #32]
 800d1ec:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d1f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d1f4:	f009 fb72 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800d1f8:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800d1fa:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800d1fc:	e7b4      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800d1fe:	2506      	movs	r5, #6
 800d200:	fb05 f603 	mul.w	r6, r5, r3
 800d204:	42b2      	cmp	r2, r6
 800d206:	d813      	bhi.n	800d230 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800d208:	4368      	muls	r0, r5
 800d20a:	f009 fb67 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d20e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800d210:	6a20      	ldr	r0, [r4, #32]
 800d212:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d216:	4368      	muls	r0, r5
 800d218:	f009 fb60 	bl	80168dc <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800d21c:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800d21e:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d222:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d226:	2200      	movs	r2, #0
 800d228:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d22a:	4291      	cmp	r1, r2
 800d22c:	dc6f      	bgt.n	800d30e <jpeg_core_output_dimensions+0x1ce>
}
 800d22e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800d230:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d234:	00dd      	lsls	r5, r3, #3
 800d236:	42b2      	cmp	r2, r6
 800d238:	d80e      	bhi.n	800d258 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800d23a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d23e:	f009 fb4d 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d242:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800d244:	6a20      	ldr	r0, [r4, #32]
 800d246:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d24a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d24e:	f009 fb45 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800d252:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800d254:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800d256:	e787      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800d258:	42aa      	cmp	r2, r5
 800d25a:	d80c      	bhi.n	800d276 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800d25c:	00c0      	lsls	r0, r0, #3
 800d25e:	f009 fb3d 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d262:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800d264:	6a20      	ldr	r0, [r4, #32]
 800d266:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d26a:	00c0      	lsls	r0, r0, #3
 800d26c:	f009 fb36 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800d270:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800d272:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800d274:	e778      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800d276:	441d      	add	r5, r3
 800d278:	42aa      	cmp	r2, r5
 800d27a:	d80e      	bhi.n	800d29a <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800d27c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d280:	f009 fb2c 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d284:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800d286:	6a20      	ldr	r0, [r4, #32]
 800d288:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d28c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d290:	f009 fb24 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800d294:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800d296:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800d298:	e766      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800d29a:	250a      	movs	r5, #10
 800d29c:	fb05 f603 	mul.w	r6, r5, r3
 800d2a0:	42b2      	cmp	r2, r6
 800d2a2:	d9b1      	bls.n	800d208 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800d2a4:	250b      	movs	r5, #11
 800d2a6:	fb05 f603 	mul.w	r6, r5, r3
 800d2aa:	42b2      	cmp	r2, r6
 800d2ac:	d9ac      	bls.n	800d208 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800d2ae:	250c      	movs	r5, #12
 800d2b0:	fb05 f603 	mul.w	r6, r5, r3
 800d2b4:	42b2      	cmp	r2, r6
 800d2b6:	d9a7      	bls.n	800d208 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800d2b8:	250d      	movs	r5, #13
 800d2ba:	fb05 f603 	mul.w	r6, r5, r3
 800d2be:	42b2      	cmp	r2, r6
 800d2c0:	d9a2      	bls.n	800d208 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800d2c2:	250e      	movs	r5, #14
 800d2c4:	fb05 f603 	mul.w	r6, r5, r3
 800d2c8:	42b2      	cmp	r2, r6
 800d2ca:	d99d      	bls.n	800d208 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800d2cc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800d2d6:	d80d      	bhi.n	800d2f4 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800d2d8:	1a18      	subs	r0, r3, r0
 800d2da:	f009 faff 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d2de:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800d2e0:	6a20      	ldr	r0, [r4, #32]
 800d2e2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d2e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800d2ea:	f009 faf7 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800d2ee:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800d2f0:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800d2f2:	e739      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f009 faf1 	bl	80168dc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d2fa:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800d2fc:	6a20      	ldr	r0, [r4, #32]
 800d2fe:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d302:	0100      	lsls	r0, r0, #4
 800d304:	f009 faea 	bl	80168dc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800d308:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800d30a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800d30c:	e72c      	b.n	800d168 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d30e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800d312:	3201      	adds	r2, #1
 800d314:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d316:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800d31a:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800d31e:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800d322:	e782      	b.n	800d22a <jpeg_core_output_dimensions+0xea>

0800d324 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d324:	6843      	ldr	r3, [r0, #4]
 800d326:	221c      	movs	r2, #28
 800d328:	2100      	movs	r1, #0
 800d32a:	681b      	ldr	r3, [r3, #0]
{
 800d32c:	b510      	push	{r4, lr}
 800d32e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d330:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800d332:	4b08      	ldr	r3, [pc, #32]	; (800d354 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800d334:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800d338:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800d33a:	4b07      	ldr	r3, [pc, #28]	; (800d358 <jinit_input_controller+0x34>)
 800d33c:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800d33e:	4b07      	ldr	r3, [pc, #28]	; (800d35c <jinit_input_controller+0x38>)
 800d340:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800d342:	4b07      	ldr	r3, [pc, #28]	; (800d360 <jinit_input_controller+0x3c>)
 800d344:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d346:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800d348:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800d34c:	2301      	movs	r3, #1
 800d34e:	6183      	str	r3, [r0, #24]
}
 800d350:	bd10      	pop	{r4, pc}
 800d352:	bf00      	nop
 800d354:	0800ce11 	.word	0x0800ce11
 800d358:	0800cc59 	.word	0x0800cc59
 800d35c:	0800cc89 	.word	0x0800cc89
 800d360:	0800cc49 	.word	0x0800cc49

0800d364 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800d364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d368:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800d36c:	4602      	mov	r2, r0

  switch (pass_mode) {
 800d36e:	b149      	cbz	r1, 800d384 <start_pass_main+0x20>
 800d370:	2902      	cmp	r1, #2
 800d372:	d070      	beq.n	800d456 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d374:	6803      	ldr	r3, [r0, #0]
 800d376:	2203      	movs	r2, #3
 800d378:	615a      	str	r2, [r3, #20]
 800d37a:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800d37c:	b003      	add	sp, #12
 800d37e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d382:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800d384:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800d388:	6880      	ldr	r0, [r0, #8]
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d060      	beq.n	800d450 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800d38e:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800d392:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d396:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800d39a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800d39c:	482f      	ldr	r0, [pc, #188]	; (800d45c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d39e:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d3a0:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800d3a2:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d3a4:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3a6:	9a00      	ldr	r2, [sp, #0]
 800d3a8:	4291      	cmp	r1, r2
 800d3aa:	db09      	blt.n	800d3c0 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d3ac:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d3ae:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800d3b2:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d3b4:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800d3b6:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800d3ba:	b003      	add	sp, #12
 800d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d3c0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800d3c2:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d3c4:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d3c6:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d3c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800d3ca:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800d3ce:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d3d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d3d4:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800d3d8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d3dc:	fb02 f905 	mul.w	r9, r2, r5
 800d3e0:	2500      	movs	r5, #0
 800d3e2:	454d      	cmp	r5, r9
 800d3e4:	db1c      	blt.n	800d420 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d3e6:	fb02 fb07 	mul.w	fp, r2, r7
 800d3ea:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800d3ee:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d3f2:	fb05 b502 	mla	r5, r5, r2, fp
 800d3f6:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800d3fa:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800d3fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d402:	2400      	movs	r4, #0
 800d404:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d408:	4554      	cmp	r4, sl
 800d40a:	db11      	blt.n	800d430 <start_pass_main+0xcc>
 800d40c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800d410:	2400      	movs	r4, #0
 800d412:	fb00 c502 	mla	r5, r0, r2, ip
 800d416:	42a2      	cmp	r2, r4
 800d418:	dc14      	bgt.n	800d444 <start_pass_main+0xe0>
       ci++, compptr++) {
 800d41a:	3101      	adds	r1, #1
 800d41c:	3658      	adds	r6, #88	; 0x58
 800d41e:	e7c2      	b.n	800d3a6 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800d420:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800d424:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800d428:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d42c:	3501      	adds	r5, #1
 800d42e:	e7d8      	b.n	800d3e2 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d430:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d434:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d436:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800d43a:	f855 bb04 	ldr.w	fp, [r5], #4
 800d43e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d442:	e7e1      	b.n	800d408 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800d444:	f8dc 0000 	ldr.w	r0, [ip]
 800d448:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d44c:	3401      	adds	r4, #1
 800d44e:	e7e2      	b.n	800d416 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800d450:	4a03      	ldr	r2, [pc, #12]	; (800d460 <start_pass_main+0xfc>)
 800d452:	605a      	str	r2, [r3, #4]
 800d454:	e7ae      	b.n	800d3b4 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800d456:	4a03      	ldr	r2, [pc, #12]	; (800d464 <start_pass_main+0x100>)
 800d458:	605a      	str	r2, [r3, #4]
    break;
 800d45a:	e7ae      	b.n	800d3ba <start_pass_main+0x56>
 800d45c:	0800d4c1 	.word	0x0800d4c1
 800d460:	0800d469 	.word	0x0800d469
 800d464:	0800d6b5 	.word	0x0800d6b5

0800d468 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d46c:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d470:	4698      	mov	r8, r3
 800d472:	460e      	mov	r6, r1
 800d474:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d476:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d478:	4605      	mov	r5, r0
 800d47a:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d47c:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800d480:	b943      	cbnz	r3, 800d494 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d482:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800d486:	9105      	str	r1, [sp, #20]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	4798      	blx	r3
 800d48c:	b1a8      	cbz	r0, 800d4ba <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d48e:	2301      	movs	r3, #1
 800d490:	9905      	ldr	r1, [sp, #20]
 800d492:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d494:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d498:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d49c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	9600      	str	r6, [sp, #0]
 800d4a4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d4a8:	685e      	ldr	r6, [r3, #4]
 800d4aa:	464b      	mov	r3, r9
 800d4ac:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d4ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4b0:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800d4b2:	bf24      	itt	cs
 800d4b4:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800d4b6:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800d4ba:	b007      	add	sp, #28
 800d4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d4c0 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d4c4:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d4c8:	4698      	mov	r8, r3
 800d4ca:	b08b      	sub	sp, #44	; 0x2c
 800d4cc:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d4ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d4d0:	4689      	mov	r9, r1
 800d4d2:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800d4d4:	b973      	cbnz	r3, 800d4f4 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d4d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4d8:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800d4dc:	330e      	adds	r3, #14
 800d4de:	68d2      	ldr	r2, [r2, #12]
 800d4e0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d4e4:	4790      	blx	r2
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d05a      	beq.n	800d5a0 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d4ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d4f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d011      	beq.n	800d51e <process_data_context_main+0x5e>
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d036      	beq.n	800d56c <process_data_context_main+0xac>
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d14e      	bne.n	800d5a0 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d502:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800d506:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d508:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d50a:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800d50e:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d510:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d512:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d516:	429a      	cmp	r2, r3
 800d518:	d045      	beq.n	800d5a6 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800d51a:	2301      	movs	r3, #1
 800d51c:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d51e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d520:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d524:	4628      	mov	r0, r5
 800d526:	f103 010e 	add.w	r1, r3, #14
 800d52a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d52e:	f8cd 9000 	str.w	r9, [sp]
 800d532:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d536:	685e      	ldr	r6, [r3, #4]
 800d538:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d53c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d53e:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d540:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d542:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d544:	429a      	cmp	r2, r3
 800d546:	d32b      	bcc.n	800d5a0 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d548:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800d54a:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d063      	beq.n	800d61a <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d554:	f083 0301 	eor.w	r3, r3, #1
 800d558:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800d55a:	2300      	movs	r3, #0
 800d55c:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d55e:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d560:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d562:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800d564:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d566:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d568:	6463      	str	r3, [r4, #68]	; 0x44
 800d56a:	e019      	b.n	800d5a0 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d56c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d56e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d572:	4628      	mov	r0, r5
 800d574:	f103 010e 	add.w	r1, r3, #14
 800d578:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d57c:	f8cd 9000 	str.w	r9, [sp]
 800d580:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d584:	685e      	ldr	r6, [r3, #4]
 800d586:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d58a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d58c:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d58e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d590:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d592:	429a      	cmp	r2, r3
 800d594:	d304      	bcc.n	800d5a0 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d596:	2300      	movs	r3, #0
 800d598:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	4543      	cmp	r3, r8
 800d59e:	d3b0      	bcc.n	800d502 <process_data_context_main+0x42>
  }
}
 800d5a0:	b00b      	add	sp, #44	; 0x2c
 800d5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d5a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d5a8:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d5ac:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d5b0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800d5b4:	9206      	str	r2, [sp, #24]
 800d5b6:	9a06      	ldr	r2, [sp, #24]
 800d5b8:	4296      	cmp	r6, r2
 800d5ba:	daae      	bge.n	800d51a <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800d5bc:	68d8      	ldr	r0, [r3, #12]
 800d5be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5c0:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800d5c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d5c4:	fbb0 fbf2 	udiv	fp, r0, r2
 800d5c8:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800d5cc:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	bf08      	it	eq
 800d5d4:	4610      	moveq	r0, r2
    if (ci == 0) {
 800d5d6:	b926      	cbnz	r6, 800d5e2 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800d5d8:	1e42      	subs	r2, r0, #1
 800d5da:	fb92 f2fa 	sdiv	r2, r2, sl
 800d5de:	3201      	adds	r2, #1
 800d5e0:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800d5e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d5e4:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800d5e6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800d5ea:	320e      	adds	r2, #14
 800d5ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d5f0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d5f4:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	4658      	mov	r0, fp
 800d5fc:	3004      	adds	r0, #4
 800d5fe:	9205      	str	r2, [sp, #20]
 800d600:	9a05      	ldr	r2, [sp, #20]
 800d602:	4552      	cmp	r2, sl
 800d604:	db02      	blt.n	800d60c <process_data_context_main+0x14c>
       ci++, compptr++) {
 800d606:	3601      	adds	r6, #1
 800d608:	3358      	adds	r3, #88	; 0x58
 800d60a:	e7d4      	b.n	800d5b6 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d60c:	f8db 2000 	ldr.w	r2, [fp]
 800d610:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d614:	9a05      	ldr	r2, [sp, #20]
 800d616:	3201      	adds	r2, #1
 800d618:	e7f1      	b.n	800d5fe <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d61a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d61e:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d622:	9305      	str	r3, [sp, #20]
 800d624:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d626:	2500      	movs	r5, #0
 800d628:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d62e:	9b08      	ldr	r3, [sp, #32]
 800d630:	429d      	cmp	r5, r3
 800d632:	da8e      	bge.n	800d552 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d634:	9b05      	ldr	r3, [sp, #20]
 800d636:	68da      	ldr	r2, [r3, #12]
 800d638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63a:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800d63c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d640:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d644:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d648:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800d64c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d650:	9b07      	ldr	r3, [sp, #28]
 800d652:	4353      	muls	r3, r2
 800d654:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800d658:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d65c:	4413      	add	r3, r2
 800d65e:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800d660:	2100      	movs	r1, #0
 800d662:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800d666:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d66a:	461e      	mov	r6, r3
 800d66c:	f06f 0303 	mvn.w	r3, #3
 800d670:	fb03 fe02 	mul.w	lr, r3, r2
 800d674:	eb07 030e 	add.w	r3, r7, lr
 800d678:	44e6      	add	lr, ip
 800d67a:	9309      	str	r3, [sp, #36]	; 0x24
 800d67c:	428a      	cmp	r2, r1
 800d67e:	dc04      	bgt.n	800d68a <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800d680:	9b05      	ldr	r3, [sp, #20]
 800d682:	3501      	adds	r5, #1
 800d684:	3358      	adds	r3, #88	; 0x58
 800d686:	9305      	str	r3, [sp, #20]
 800d688:	e7d1      	b.n	800d62e <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d68a:	9b06      	ldr	r3, [sp, #24]
 800d68c:	f853 bb04 	ldr.w	fp, [r3], #4
 800d690:	9306      	str	r3, [sp, #24]
 800d692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d694:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800d698:	f85a bb04 	ldr.w	fp, [sl], #4
 800d69c:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d6a0:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800d6a4:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d6a8:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d6ac:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d6ae:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800d6b2:	e7e3      	b.n	800d67c <process_data_context_main+0x1bc>

0800d6b4 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800d6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800d6b6:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800d6ba:	9100      	str	r1, [sp, #0]
 800d6bc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	6864      	ldr	r4, [r4, #4]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800d6ca:	b004      	add	sp, #16
 800d6cc:	bd10      	pop	{r4, pc}
	...

0800d6d0 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800d6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6d4:	6843      	ldr	r3, [r0, #4]
{
 800d6d6:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6d8:	2250      	movs	r2, #80	; 0x50
 800d6da:	2101      	movs	r1, #1
 800d6dc:	681b      	ldr	r3, [r3, #0]
{
 800d6de:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6e0:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800d6e2:	4b3a      	ldr	r3, [pc, #232]	; (800d7cc <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800d6e4:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6e8:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800d6ea:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800d6ec:	b12d      	cbz	r5, 800d6fa <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	2203      	movs	r2, #3
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	615a      	str	r2, [r3, #20]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800d6fa:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d6fe:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	b31b      	cbz	r3, 800d74e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d706:	2d01      	cmp	r5, #1
 800d708:	dc05      	bgt.n	800d716 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	2230      	movs	r2, #48	; 0x30
 800d70e:	4620      	mov	r0, r4
 800d710:	615a      	str	r2, [r3, #20]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d716:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d718:	2101      	movs	r1, #1
 800d71a:	6863      	ldr	r3, [r4, #4]
 800d71c:	4620      	mov	r0, r4
 800d71e:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d720:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d724:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d726:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800d72a:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d72e:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d730:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800d732:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d734:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d738:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d73c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d740:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d742:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800d744:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d748:	4598      	cmp	r8, r3
 800d74a:	db0a      	blt.n	800d762 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800d74c:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d74e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d752:	3608      	adds	r6, #8
 800d754:	f04f 0800 	mov.w	r8, #0
 800d758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d75a:	4543      	cmp	r3, r8
 800d75c:	dc1d      	bgt.n	800d79a <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800d75e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d762:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d764:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d766:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800d768:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d76a:	4353      	muls	r3, r2
 800d76c:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d770:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d772:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d776:	4620      	mov	r0, r4
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d77e:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800d782:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800d786:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800d78a:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800d78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d790:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800d794:	f108 0801 	add.w	r8, r8, #1
 800d798:	e7d3      	b.n	800d742 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800d79c:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d7a0:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800d7a2:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d7a4:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d7a8:	4353      	muls	r3, r2
 800d7aa:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d7ae:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d7b0:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d7b4:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800d7b8:	436b      	muls	r3, r5
 800d7ba:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	434a      	muls	r2, r1
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	47c8      	blx	r9
 800d7c6:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800d7ca:	e7c5      	b.n	800d758 <jinit_d_main_controller+0x88>
 800d7cc:	0800d365 	.word	0x0800d365

0800d7d0 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800d7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800d7d4:	6986      	ldr	r6, [r0, #24]
{
 800d7d6:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800d7d8:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800d7dc:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800d7e0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d7e4:	b93d      	cbnz	r5, 800d7f6 <get_sof+0x26>
 800d7e6:	68f3      	ldr	r3, [r6, #12]
 800d7e8:	4798      	blx	r3
 800d7ea:	b910      	cbnz	r0, 800d7f2 <get_sof+0x22>
 800d7ec:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d7f2:	e9d6 c500 	ldrd	ip, r5, [r6]
 800d7f6:	1e6b      	subs	r3, r5, #1
 800d7f8:	f89c 7000 	ldrb.w	r7, [ip]
 800d7fc:	f000 8088 	beq.w	800d910 <get_sof+0x140>
 800d800:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d804:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d806:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d80a:	f000 808a 	beq.w	800d922 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d80e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d810:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d812:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d814:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d818:	f000 808c 	beq.w	800d934 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d81c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d81e:	782a      	ldrb	r2, [r5, #0]
 800d820:	3b01      	subs	r3, #1
 800d822:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d826:	6222      	str	r2, [r4, #32]
 800d828:	f000 808d 	beq.w	800d946 <get_sof+0x176>
 800d82c:	3501      	adds	r5, #1
 800d82e:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d830:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d832:	6a22      	ldr	r2, [r4, #32]
 800d834:	440a      	add	r2, r1
 800d836:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d838:	f000 808e 	beq.w	800d958 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d83c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d83e:	782a      	ldrb	r2, [r5, #0]
 800d840:	3b01      	subs	r3, #1
 800d842:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d846:	61e2      	str	r2, [r4, #28]
 800d848:	f000 808f 	beq.w	800d96a <get_sof+0x19a>
 800d84c:	3501      	adds	r5, #1
 800d84e:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d850:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d852:	69e2      	ldr	r2, [r4, #28]
 800d854:	440a      	add	r2, r1
 800d856:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d858:	f000 8090 	beq.w	800d97c <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d85c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d85e:	f103 39ff 	add.w	r9, r3, #4294967295
 800d862:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d866:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800d86a:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d86c:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d86e:	4620      	mov	r0, r4
 800d870:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d872:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d876:	619a      	str	r2, [r3, #24]
  length -= 8;
 800d878:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d87c:	69e2      	ldr	r2, [r4, #28]
 800d87e:	61da      	str	r2, [r3, #28]
 800d880:	6a22      	ldr	r2, [r4, #32]
 800d882:	621a      	str	r2, [r3, #32]
 800d884:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d886:	625a      	str	r2, [r3, #36]	; 0x24
 800d888:	2266      	movs	r2, #102	; 0x66
 800d88a:	615a      	str	r2, [r3, #20]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800d890:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	b12b      	cbz	r3, 800d8a4 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	223c      	movs	r2, #60	; 0x3c
 800d89c:	4620      	mov	r0, r4
 800d89e:	615a      	str	r2, [r3, #20]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800d8a4:	6a23      	ldr	r3, [r4, #32]
 800d8a6:	b123      	cbz	r3, 800d8b2 <get_sof+0xe2>
 800d8a8:	69e3      	ldr	r3, [r4, #28]
 800d8aa:	b113      	cbz	r3, 800d8b2 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800d8ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	dc05      	bgt.n	800d8be <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	2221      	movs	r2, #33	; 0x21
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	615a      	str	r2, [r3, #20]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800d8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8c4:	4543      	cmp	r3, r8
 800d8c6:	d005      	beq.n	800d8d4 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d8c8:	6823      	ldr	r3, [r4, #0]
 800d8ca:	220c      	movs	r2, #12
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	615a      	str	r2, [r3, #20]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800d8d4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d8d8:	b94b      	cbnz	r3, 800d8ee <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800d8da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d8dc:	2158      	movs	r1, #88	; 0x58
 800d8de:	6863      	ldr	r3, [r4, #4]
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	434a      	muls	r2, r1
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4798      	blx	r3
 800d8ea:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8ee:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d8f2:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d8f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d8fa:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8fe:	4543      	cmp	r3, r8
 800d900:	dc45      	bgt.n	800d98e <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800d902:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d906:	2001      	movs	r0, #1
 800d908:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800d90a:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800d90e:	e76e      	b.n	800d7ee <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d910:	68f3      	ldr	r3, [r6, #12]
 800d912:	4620      	mov	r0, r4
 800d914:	4798      	blx	r3
 800d916:	2800      	cmp	r0, #0
 800d918:	f43f af68 	beq.w	800d7ec <get_sof+0x1c>
 800d91c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d920:	e770      	b.n	800d804 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d922:	68f3      	ldr	r3, [r6, #12]
 800d924:	4620      	mov	r0, r4
 800d926:	4798      	blx	r3
 800d928:	2800      	cmp	r0, #0
 800d92a:	f43f af5f 	beq.w	800d7ec <get_sof+0x1c>
 800d92e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d932:	e76d      	b.n	800d810 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d934:	68f3      	ldr	r3, [r6, #12]
 800d936:	4620      	mov	r0, r4
 800d938:	4798      	blx	r3
 800d93a:	2800      	cmp	r0, #0
 800d93c:	f43f af56 	beq.w	800d7ec <get_sof+0x1c>
 800d940:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d944:	e76b      	b.n	800d81e <get_sof+0x4e>
 800d946:	68f3      	ldr	r3, [r6, #12]
 800d948:	4620      	mov	r0, r4
 800d94a:	4798      	blx	r3
 800d94c:	2800      	cmp	r0, #0
 800d94e:	f43f af4d 	beq.w	800d7ec <get_sof+0x1c>
 800d952:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d956:	e76a      	b.n	800d82e <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d958:	68f3      	ldr	r3, [r6, #12]
 800d95a:	4620      	mov	r0, r4
 800d95c:	4798      	blx	r3
 800d95e:	2800      	cmp	r0, #0
 800d960:	f43f af44 	beq.w	800d7ec <get_sof+0x1c>
 800d964:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d968:	e769      	b.n	800d83e <get_sof+0x6e>
 800d96a:	68f3      	ldr	r3, [r6, #12]
 800d96c:	4620      	mov	r0, r4
 800d96e:	4798      	blx	r3
 800d970:	2800      	cmp	r0, #0
 800d972:	f43f af3b 	beq.w	800d7ec <get_sof+0x1c>
 800d976:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d97a:	e768      	b.n	800d84e <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d97c:	68f3      	ldr	r3, [r6, #12]
 800d97e:	4620      	mov	r0, r4
 800d980:	4798      	blx	r3
 800d982:	2800      	cmp	r0, #0
 800d984:	f43f af32 	beq.w	800d7ec <get_sof+0x1c>
 800d988:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d98c:	e767      	b.n	800d85e <get_sof+0x8e>
    compptr->component_index = ci;
 800d98e:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d992:	f1b9 0f00 	cmp.w	r9, #0
 800d996:	d107      	bne.n	800d9a8 <get_sof+0x1d8>
 800d998:	68f3      	ldr	r3, [r6, #12]
 800d99a:	4620      	mov	r0, r4
 800d99c:	4798      	blx	r3
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	f43f af24 	beq.w	800d7ec <get_sof+0x1c>
 800d9a4:	e9d6 5900 	ldrd	r5, r9, [r6]
 800d9a8:	782b      	ldrb	r3, [r5, #0]
 800d9aa:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d9ae:	f1b9 0301 	subs.w	r3, r9, #1
 800d9b2:	d029      	beq.n	800da08 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d9b4:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800d9b6:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d9b8:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800d9ba:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800d9be:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800d9c2:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800d9c6:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d9ca:	d026      	beq.n	800da1a <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d9cc:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d9ce:	f103 39ff 	add.w	r9, r3, #4294967295
 800d9d2:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d9d6:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800d9da:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d9dc:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800d9e4:	f108 0801 	add.w	r8, r8, #1
 800d9e8:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d9ea:	619a      	str	r2, [r3, #24]
 800d9ec:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800d9f0:	61da      	str	r2, [r3, #28]
 800d9f2:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800d9f6:	621a      	str	r2, [r3, #32]
 800d9f8:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800d9fc:	f8c3 a014 	str.w	sl, [r3, #20]
 800da00:	625a      	str	r2, [r3, #36]	; 0x24
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	4798      	blx	r3
       ci++, compptr++) {
 800da06:	e779      	b.n	800d8fc <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800da08:	68f3      	ldr	r3, [r6, #12]
 800da0a:	4620      	mov	r0, r4
 800da0c:	4798      	blx	r3
 800da0e:	2800      	cmp	r0, #0
 800da10:	f43f aeec 	beq.w	800d7ec <get_sof+0x1c>
 800da14:	e9d6 5300 	ldrd	r5, r3, [r6]
 800da18:	e7cd      	b.n	800d9b6 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800da1a:	68f3      	ldr	r3, [r6, #12]
 800da1c:	4620      	mov	r0, r4
 800da1e:	4798      	blx	r3
 800da20:	2800      	cmp	r0, #0
 800da22:	f43f aee3 	beq.w	800d7ec <get_sof+0x1c>
 800da26:	e9d6 5300 	ldrd	r5, r3, [r6]
 800da2a:	e7d0      	b.n	800d9ce <get_sof+0x1fe>

0800da2c <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800da30:	2a0d      	cmp	r2, #13
{
 800da32:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800da34:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800da36:	eb02 0603 	add.w	r6, r2, r3
{
 800da3a:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800da3c:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800da3e:	d96d      	bls.n	800db1c <examine_app0+0xf0>
 800da40:	7822      	ldrb	r2, [r4, #0]
 800da42:	2a4a      	cmp	r2, #74	; 0x4a
 800da44:	f040 808f 	bne.w	800db66 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800da48:	7862      	ldrb	r2, [r4, #1]
 800da4a:	2a46      	cmp	r2, #70	; 0x46
 800da4c:	f040 808b 	bne.w	800db66 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800da50:	78a2      	ldrb	r2, [r4, #2]
 800da52:	2a49      	cmp	r2, #73	; 0x49
 800da54:	d16a      	bne.n	800db2c <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800da56:	78e2      	ldrb	r2, [r4, #3]
 800da58:	2a46      	cmp	r2, #70	; 0x46
 800da5a:	d167      	bne.n	800db2c <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800da5c:	7922      	ldrb	r2, [r4, #4]
 800da5e:	2a00      	cmp	r2, #0
 800da60:	d164      	bne.n	800db2c <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800da62:	2201      	movs	r2, #1
 800da64:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800da68:	7962      	ldrb	r2, [r4, #5]
 800da6a:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800da6e:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800da70:	f894 c006 	ldrb.w	ip, [r4, #6]
 800da74:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800da78:	79e7      	ldrb	r7, [r4, #7]
 800da7a:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800da7e:	f894 e008 	ldrb.w	lr, [r4, #8]
 800da82:	7a67      	ldrb	r7, [r4, #9]
 800da84:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800da88:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800da8c:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800da90:	7ae7      	ldrb	r7, [r4, #11]
 800da92:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800da96:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800da9a:	d007      	beq.n	800daac <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800da9c:	277a      	movs	r7, #122	; 0x7a
 800da9e:	f8c1 c01c 	str.w	ip, [r1, #28]
 800daa2:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800daa6:	f04f 31ff 	mov.w	r1, #4294967295
 800daaa:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	2101      	movs	r1, #1
 800dab0:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800dab4:	4628      	mov	r0, r5
 800dab6:	619a      	str	r2, [r3, #24]
 800dab8:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800dabc:	61da      	str	r2, [r3, #28]
 800dabe:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800dac2:	621a      	str	r2, [r3, #32]
 800dac4:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800dac8:	625a      	str	r2, [r3, #36]	; 0x24
 800daca:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800dace:	629a      	str	r2, [r3, #40]	; 0x28
 800dad0:	2259      	movs	r2, #89	; 0x59
 800dad2:	615a      	str	r2, [r3, #20]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800dad8:	7b22      	ldrb	r2, [r4, #12]
 800dada:	7b63      	ldrb	r3, [r4, #13]
 800dadc:	4313      	orrs	r3, r2
 800dade:	d00a      	beq.n	800daf6 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	225c      	movs	r2, #92	; 0x5c
 800dae4:	2101      	movs	r1, #1
 800dae6:	4628      	mov	r0, r5
 800dae8:	615a      	str	r2, [r3, #20]
 800daea:	7b22      	ldrb	r2, [r4, #12]
 800daec:	619a      	str	r2, [r3, #24]
 800daee:	7b62      	ldrb	r2, [r4, #13]
 800daf0:	61da      	str	r2, [r3, #28]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800daf6:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800daf8:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800dafa:	7b63      	ldrb	r3, [r4, #13]
 800dafc:	fb12 f203 	smulbb	r2, r2, r3
 800db00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800db04:	42b2      	cmp	r2, r6
 800db06:	d030      	beq.n	800db6a <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800db08:	682a      	ldr	r2, [r5, #0]
 800db0a:	235a      	movs	r3, #90	; 0x5a
 800db0c:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800db10:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800db12:	4628      	mov	r0, r5
 800db14:	2101      	movs	r1, #1
  }
}
 800db16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800db1a:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800db1c:	2a05      	cmp	r2, #5
 800db1e:	d922      	bls.n	800db66 <examine_app0+0x13a>
 800db20:	7822      	ldrb	r2, [r4, #0]
 800db22:	2a4a      	cmp	r2, #74	; 0x4a
 800db24:	d11f      	bne.n	800db66 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800db26:	7862      	ldrb	r2, [r4, #1]
 800db28:	2a46      	cmp	r2, #70	; 0x46
 800db2a:	d11c      	bne.n	800db66 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800db2c:	78a2      	ldrb	r2, [r4, #2]
 800db2e:	2a58      	cmp	r2, #88	; 0x58
 800db30:	d119      	bne.n	800db66 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800db32:	78e2      	ldrb	r2, [r4, #3]
 800db34:	2a58      	cmp	r2, #88	; 0x58
 800db36:	d116      	bne.n	800db66 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800db38:	7922      	ldrb	r2, [r4, #4]
 800db3a:	b9a2      	cbnz	r2, 800db66 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800db3c:	7962      	ldrb	r2, [r4, #5]
 800db3e:	2a11      	cmp	r2, #17
 800db40:	d007      	beq.n	800db52 <examine_app0+0x126>
 800db42:	2a13      	cmp	r2, #19
 800db44:	d007      	beq.n	800db56 <examine_app0+0x12a>
 800db46:	2a10      	cmp	r2, #16
 800db48:	d107      	bne.n	800db5a <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800db4a:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800db4c:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800db50:	e7df      	b.n	800db12 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800db52:	226f      	movs	r2, #111	; 0x6f
 800db54:	e7fa      	b.n	800db4c <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800db56:	2270      	movs	r2, #112	; 0x70
 800db58:	e7f8      	b.n	800db4c <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800db5a:	225b      	movs	r2, #91	; 0x5b
 800db5c:	614a      	str	r2, [r1, #20]
 800db5e:	7962      	ldrb	r2, [r4, #5]
 800db60:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800db64:	e7d5      	b.n	800db12 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800db66:	224f      	movs	r2, #79	; 0x4f
 800db68:	e7f0      	b.n	800db4c <examine_app0+0x120>
}
 800db6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db6e <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800db6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800db72:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800db74:	6804      	ldr	r4, [r0, #0]
{
 800db76:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800db78:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800db7a:	d92b      	bls.n	800dbd4 <examine_app14+0x66>
 800db7c:	780f      	ldrb	r7, [r1, #0]
 800db7e:	2f41      	cmp	r7, #65	; 0x41
 800db80:	d128      	bne.n	800dbd4 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800db82:	784f      	ldrb	r7, [r1, #1]
 800db84:	2f64      	cmp	r7, #100	; 0x64
 800db86:	d125      	bne.n	800dbd4 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800db88:	788f      	ldrb	r7, [r1, #2]
 800db8a:	2f6f      	cmp	r7, #111	; 0x6f
 800db8c:	d122      	bne.n	800dbd4 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800db8e:	78cf      	ldrb	r7, [r1, #3]
 800db90:	2f62      	cmp	r7, #98	; 0x62
 800db92:	d11f      	bne.n	800dbd4 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800db94:	790f      	ldrb	r7, [r1, #4]
 800db96:	2f65      	cmp	r7, #101	; 0x65
 800db98:	d11c      	bne.n	800dbd4 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800db9a:	79cb      	ldrb	r3, [r1, #7]
 800db9c:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800db9e:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800dba0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dba4:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dba6:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dbaa:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800dbae:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dbb0:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dbb2:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dbb6:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dbba:	234e      	movs	r3, #78	; 0x4e
 800dbbc:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800dbc0:	6163      	str	r3, [r4, #20]
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800dbc6:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800dbc8:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800dbcc:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800dbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800dbd4:	2150      	movs	r1, #80	; 0x50
 800dbd6:	4413      	add	r3, r2
 800dbd8:	4628      	mov	r0, r5
 800dbda:	6161      	str	r1, [r4, #20]
 800dbdc:	2101      	movs	r1, #1
 800dbde:	61a3      	str	r3, [r4, #24]
 800dbe0:	4633      	mov	r3, r6
}
 800dbe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800dbe6:	4718      	bx	r3

0800dbe8 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800dbe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800dbec:	6986      	ldr	r6, [r0, #24]
{
 800dbee:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800dbf0:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbf2:	b39f      	cbz	r7, 800dc5c <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800dbf4:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbf6:	7825      	ldrb	r5, [r4, #0]
 800dbf8:	3f01      	subs	r7, #1
 800dbfa:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800dbfe:	d037      	beq.n	800dc70 <get_interesting_appn+0x88>
 800dc00:	3401      	adds	r4, #1
 800dc02:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dc06:	3f01      	subs	r7, #1
 800dc08:	444d      	add	r5, r9
  length -= 2;
 800dc0a:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800dc0c:	2d0d      	cmp	r5, #13
 800dc0e:	dc37      	bgt.n	800dc80 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800dc10:	2d00      	cmp	r5, #0
 800dc12:	dd38      	ble.n	800dc86 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800dc14:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800dc16:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800dc1a:	b92f      	cbnz	r7, 800dc28 <get_interesting_appn+0x40>
 800dc1c:	68f3      	ldr	r3, [r6, #12]
 800dc1e:	4640      	mov	r0, r8
 800dc20:	4798      	blx	r3
 800dc22:	b1f0      	cbz	r0, 800dc62 <get_interesting_appn+0x7a>
 800dc24:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dc28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc2c:	3f01      	subs	r7, #1
 800dc2e:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800dc32:	f10a 0a01 	add.w	sl, sl, #1
 800dc36:	45d1      	cmp	r9, sl
 800dc38:	d1ef      	bne.n	800dc1a <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800dc3a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800dc3e:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800dc42:	2ae0      	cmp	r2, #224	; 0xe0
 800dc44:	d022      	beq.n	800dc8c <get_interesting_appn+0xa4>
 800dc46:	2aee      	cmp	r2, #238	; 0xee
 800dc48:	d032      	beq.n	800dcb0 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800dc4a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc4e:	2146      	movs	r1, #70	; 0x46
 800dc50:	4640      	mov	r0, r8
 800dc52:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4798      	blx	r3
    break;
 800dc5a:	e01d      	b.n	800dc98 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc5c:	68f3      	ldr	r3, [r6, #12]
 800dc5e:	4798      	blx	r3
 800dc60:	b918      	cbnz	r0, 800dc6a <get_interesting_appn+0x82>
 800dc62:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800dc64:	b004      	add	sp, #16
 800dc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc6a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dc6e:	e7c2      	b.n	800dbf6 <get_interesting_appn+0xe>
 800dc70:	68f3      	ldr	r3, [r6, #12]
 800dc72:	4640      	mov	r0, r8
 800dc74:	4798      	blx	r3
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d0f3      	beq.n	800dc62 <get_interesting_appn+0x7a>
 800dc7a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dc7e:	e7c0      	b.n	800dc02 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800dc80:	f04f 090e 	mov.w	r9, #14
 800dc84:	e7c7      	b.n	800dc16 <get_interesting_appn+0x2e>
    numtoread = 0;
 800dc86:	f04f 0900 	mov.w	r9, #0
 800dc8a:	e7d6      	b.n	800dc3a <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	464a      	mov	r2, r9
 800dc90:	4669      	mov	r1, sp
 800dc92:	4640      	mov	r0, r8
 800dc94:	f7ff feca 	bl	800da2c <examine_app0>
  if (length > 0)
 800dc98:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800dc9a:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800dc9e:	dd05      	ble.n	800dcac <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800dca0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dca4:	4629      	mov	r1, r5
 800dca6:	4640      	mov	r0, r8
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	4798      	blx	r3
  return TRUE;
 800dcac:	2001      	movs	r0, #1
 800dcae:	e7d9      	b.n	800dc64 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800dcb0:	462b      	mov	r3, r5
 800dcb2:	464a      	mov	r2, r9
 800dcb4:	4669      	mov	r1, sp
 800dcb6:	4640      	mov	r0, r8
 800dcb8:	f7ff ff59 	bl	800db6e <examine_app14>
    break;
 800dcbc:	e7ec      	b.n	800dc98 <get_interesting_appn+0xb0>

0800dcbe <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800dcbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800dcc2:	6984      	ldr	r4, [r0, #24]
{
 800dcc4:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800dcc6:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800dcc8:	b31b      	cbz	r3, 800dd12 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800dcca:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dccc:	782e      	ldrb	r6, [r5, #0]
 800dcce:	f1b3 0801 	subs.w	r8, r3, #1
 800dcd2:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800dcd6:	d025      	beq.n	800dd24 <skip_variable+0x66>
 800dcd8:	3501      	adds	r5, #1
 800dcda:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800dcde:	235d      	movs	r3, #93	; 0x5d
 800dce0:	683a      	ldr	r2, [r7, #0]
 800dce2:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dce4:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800dce6:	4638      	mov	r0, r7
 800dce8:	6153      	str	r3, [r2, #20]
  length -= 2;
 800dcea:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800dcec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800dcf0:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800dcf4:	6853      	ldr	r3, [r2, #4]
 800dcf6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dcf8:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800dcfc:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800dcfe:	6025      	str	r5, [r4, #0]
 800dd00:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800dd02:	dd04      	ble.n	800dd0e <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	4631      	mov	r1, r6
 800dd08:	4638      	mov	r0, r7
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	4798      	blx	r3

  return TRUE;
 800dd0e:	2001      	movs	r0, #1
 800dd10:	e003      	b.n	800dd1a <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dd12:	68e3      	ldr	r3, [r4, #12]
 800dd14:	4798      	blx	r3
 800dd16:	b910      	cbnz	r0, 800dd1e <skip_variable+0x60>
 800dd18:	2000      	movs	r0, #0
}
 800dd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dd1e:	e9d4 5300 	ldrd	r5, r3, [r4]
 800dd22:	e7d3      	b.n	800dccc <skip_variable+0xe>
 800dd24:	68e3      	ldr	r3, [r4, #12]
 800dd26:	4638      	mov	r0, r7
 800dd28:	4798      	blx	r3
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d0f4      	beq.n	800dd18 <skip_variable+0x5a>
 800dd2e:	e9d4 5800 	ldrd	r5, r8, [r4]
 800dd32:	e7d2      	b.n	800dcda <skip_variable+0x1c>

0800dd34 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800dd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800dd38:	6986      	ldr	r6, [r0, #24]
{
 800dd3a:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800dd3c:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd40:	b987      	cbnz	r7, 800dd64 <next_marker+0x30>
 800dd42:	68f3      	ldr	r3, [r6, #12]
 800dd44:	4640      	mov	r0, r8
 800dd46:	4798      	blx	r3
 800dd48:	b950      	cbnz	r0, 800dd60 <next_marker+0x2c>
 800dd4a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800dd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800dd50:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800dd54:	6993      	ldr	r3, [r2, #24]
 800dd56:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800dd58:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800dd5a:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd5e:	e7ef      	b.n	800dd40 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800dd60:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dd64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd68:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800dd6a:	2bff      	cmp	r3, #255	; 0xff
 800dd6c:	d1f0      	bne.n	800dd50 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800dd6e:	b937      	cbnz	r7, 800dd7e <next_marker+0x4a>
 800dd70:	68f3      	ldr	r3, [r6, #12]
 800dd72:	4640      	mov	r0, r8
 800dd74:	4798      	blx	r3
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d0e7      	beq.n	800dd4a <next_marker+0x16>
 800dd7a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dd7e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dd82:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800dd84:	2dff      	cmp	r5, #255	; 0xff
 800dd86:	d0f2      	beq.n	800dd6e <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800dd88:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800dd8c:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800dd8e:	b90d      	cbnz	r5, 800dd94 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800dd90:	3302      	adds	r3, #2
 800dd92:	e7e1      	b.n	800dd58 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800dd94:	b173      	cbz	r3, 800ddb4 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800dd96:	f8d8 2000 	ldr.w	r2, [r8]
 800dd9a:	2177      	movs	r1, #119	; 0x77
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	61d5      	str	r5, [r2, #28]
 800dda0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800dda4:	6853      	ldr	r3, [r2, #4]
 800dda6:	f04f 31ff 	mov.w	r1, #4294967295
 800ddaa:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800ddac:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800ddb4:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800ddb8:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800ddba:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800ddbe:	e7c5      	b.n	800dd4c <next_marker+0x18>

0800ddc0 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800ddc0:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800ddc4:	b510      	push	{r4, lr}
 800ddc6:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800ddc8:	b1e3      	cbz	r3, 800de04 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800ddca:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800ddce:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800ddd2:	6959      	ldr	r1, [r3, #20]
 800ddd4:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d119      	bne.n	800de10 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	2264      	movs	r2, #100	; 0x64
 800dde0:	4620      	mov	r0, r4
 800dde2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	2103      	movs	r1, #3
 800ddea:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800ddec:	2300      	movs	r3, #0
 800ddee:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800ddf2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800ddf6:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800ddf8:	6953      	ldr	r3, [r2, #20]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	f003 0307 	and.w	r3, r3, #7
 800de00:	6153      	str	r3, [r2, #20]
  return TRUE;
 800de02:	e004      	b.n	800de0e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800de04:	f7ff ff96 	bl	800dd34 <next_marker>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d1de      	bne.n	800ddca <read_restart_marker+0xa>
      return FALSE;
 800de0c:	2000      	movs	r0, #0
}
 800de0e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800de10:	69a3      	ldr	r3, [r4, #24]
 800de12:	4620      	mov	r0, r4
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	4798      	blx	r3
 800de18:	2800      	cmp	r0, #0
 800de1a:	d1ea      	bne.n	800ddf2 <read_restart_marker+0x32>
 800de1c:	e7f6      	b.n	800de0c <read_restart_marker+0x4c>

0800de1e <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800de1e:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800de20:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800de24:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800de28:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800de2c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800de30:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800de32:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800de36:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800de3a:	4770      	bx	lr

0800de3c <get_dht>:
{
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800de40:	6987      	ldr	r7, [r0, #24]
{
 800de42:	b0c9      	sub	sp, #292	; 0x124
 800de44:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800de46:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de48:	b1fe      	cbz	r6, 800de8a <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800de4a:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de4c:	f894 9000 	ldrb.w	r9, [r4]
 800de50:	3e01      	subs	r6, #1
 800de52:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800de56:	d022      	beq.n	800de9e <get_dht+0x62>
 800de58:	3401      	adds	r4, #1
 800de5a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800de5e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800de60:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de64:	44c1      	add	r9, r8
  length -= 2;
 800de66:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800de6a:	f1b9 0f10 	cmp.w	r9, #16
 800de6e:	dc1e      	bgt.n	800deae <get_dht+0x72>
  if (length != 0)
 800de70:	f1b9 0f00 	cmp.w	r9, #0
 800de74:	d005      	beq.n	800de82 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800de76:	682b      	ldr	r3, [r5, #0]
 800de78:	220c      	movs	r2, #12
 800de7a:	4628      	mov	r0, r5
 800de7c:	615a      	str	r2, [r3, #20]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4798      	blx	r3
  return TRUE;
 800de82:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800de84:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800de88:	e003      	b.n	800de92 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	4798      	blx	r3
 800de8e:	b918      	cbnz	r0, 800de98 <get_dht+0x5c>
 800de90:	2000      	movs	r0, #0
}
 800de92:	b049      	add	sp, #292	; 0x124
 800de94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de98:	e9d7 4600 	ldrd	r4, r6, [r7]
 800de9c:	e7d6      	b.n	800de4c <get_dht+0x10>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	4628      	mov	r0, r5
 800dea2:	4798      	blx	r3
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d0f3      	beq.n	800de90 <get_dht+0x54>
 800dea8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800deac:	e7d5      	b.n	800de5a <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800deae:	b936      	cbnz	r6, 800debe <get_dht+0x82>
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	4628      	mov	r0, r5
 800deb4:	4790      	blx	r2
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d0ea      	beq.n	800de90 <get_dht+0x54>
 800deba:	e9d7 4600 	ldrd	r4, r6, [r7]
 800debe:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800dec2:	2152      	movs	r1, #82	; 0x52
 800dec4:	682a      	ldr	r2, [r5, #0]
 800dec6:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800dec8:	f8cd 8000 	str.w	r8, [sp]
 800decc:	3e01      	subs	r6, #1
    count = 0;
 800dece:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800ded2:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800ded6:	6852      	ldr	r2, [r2, #4]
 800ded8:	2101      	movs	r1, #1
 800deda:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800dedc:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800dede:	b946      	cbnz	r6, 800def2 <get_dht+0xb6>
 800dee0:	68f9      	ldr	r1, [r7, #12]
 800dee2:	4628      	mov	r0, r5
 800dee4:	9201      	str	r2, [sp, #4]
 800dee6:	4788      	blx	r1
 800dee8:	2800      	cmp	r0, #0
 800deea:	d0d1      	beq.n	800de90 <get_dht+0x54>
 800deec:	9a01      	ldr	r2, [sp, #4]
 800deee:	e9d7 4600 	ldrd	r4, r6, [r7]
 800def2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def6:	3e01      	subs	r6, #1
 800def8:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800defc:	3201      	adds	r2, #1
      count += bits[i];
 800defe:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800df00:	2a11      	cmp	r2, #17
 800df02:	d1ec      	bne.n	800dede <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800df04:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800df06:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800df0a:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800df0e:	f04f 0958 	mov.w	r9, #88	; 0x58
 800df12:	4628      	mov	r0, r5
    length -= 1 + 16;
 800df14:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800df16:	6191      	str	r1, [r2, #24]
 800df18:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800df1c:	f8c2 9014 	str.w	r9, [r2, #20]
 800df20:	61d1      	str	r1, [r2, #28]
 800df22:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800df26:	6211      	str	r1, [r2, #32]
 800df28:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800df2c:	6251      	str	r1, [r2, #36]	; 0x24
 800df2e:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800df32:	6291      	str	r1, [r2, #40]	; 0x28
 800df34:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800df38:	62d1      	str	r1, [r2, #44]	; 0x2c
 800df3a:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800df3e:	6311      	str	r1, [r2, #48]	; 0x30
 800df40:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800df44:	6351      	str	r1, [r2, #52]	; 0x34
 800df46:	2102      	movs	r1, #2
 800df48:	6852      	ldr	r2, [r2, #4]
 800df4a:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800df4c:	682a      	ldr	r2, [r5, #0]
 800df4e:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800df52:	4628      	mov	r0, r5
 800df54:	f8c2 9014 	str.w	r9, [r2, #20]
 800df58:	6191      	str	r1, [r2, #24]
 800df5a:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800df5e:	61d1      	str	r1, [r2, #28]
 800df60:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800df64:	6211      	str	r1, [r2, #32]
 800df66:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800df6a:	6251      	str	r1, [r2, #36]	; 0x24
 800df6c:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800df70:	6291      	str	r1, [r2, #40]	; 0x28
 800df72:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800df76:	62d1      	str	r1, [r2, #44]	; 0x2c
 800df78:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800df7c:	6311      	str	r1, [r2, #48]	; 0x30
 800df7e:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800df82:	6351      	str	r1, [r2, #52]	; 0x34
 800df84:	2102      	movs	r1, #2
 800df86:	6852      	ldr	r2, [r2, #4]
 800df88:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800df8a:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800df8e:	dc02      	bgt.n	800df96 <get_dht+0x15a>
 800df90:	9b01      	ldr	r3, [sp, #4]
 800df92:	4553      	cmp	r3, sl
 800df94:	da05      	bge.n	800dfa2 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800df96:	682a      	ldr	r2, [r5, #0]
 800df98:	2109      	movs	r1, #9
 800df9a:	4628      	mov	r0, r5
 800df9c:	6151      	str	r1, [r2, #20]
 800df9e:	6812      	ldr	r2, [r2, #0]
 800dfa0:	4790      	blx	r2
 800dfa2:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800dfa6:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800dfa8:	45d1      	cmp	r9, sl
 800dfaa:	d13f      	bne.n	800e02c <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800dfac:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800dfb0:	9b01      	ldr	r3, [sp, #4]
 800dfb2:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800dfb6:	bf17      	itett	ne
 800dfb8:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800dfbc:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800dfc0:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800dfc4:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800dfc6:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800dfc8:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	d906      	bls.n	800dfde <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800dfd0:	682a      	ldr	r2, [r5, #0]
 800dfd2:	211f      	movs	r1, #31
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800dfda:	6812      	ldr	r2, [r2, #0]
 800dfdc:	4790      	blx	r2
    if (*htblptr == NULL)
 800dfde:	f8d8 2000 	ldr.w	r2, [r8]
 800dfe2:	b922      	cbnz	r2, 800dfee <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7fb fb8b 	bl	8009700 <jpeg_alloc_huff_table>
 800dfea:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800dfee:	2200      	movs	r2, #0
 800dff0:	46de      	mov	lr, fp
 800dff2:	f10d 0a1c 	add.w	sl, sp, #28
 800dff6:	f88b 2000 	strb.w	r2, [fp]
 800dffa:	f8d8 2000 	ldr.w	r2, [r8]
 800dffe:	46f4      	mov	ip, lr
 800e000:	3208      	adds	r2, #8
 800e002:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800e006:	45d4      	cmp	ip, sl
 800e008:	f842 0c08 	str.w	r0, [r2, #-8]
 800e00c:	f842 1c04 	str.w	r1, [r2, #-4]
 800e010:	46e6      	mov	lr, ip
 800e012:	d1f4      	bne.n	800dffe <get_dht+0x1c2>
 800e014:	f89c 1000 	ldrb.w	r1, [ip]
 800e018:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800e01a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e01e:	f8d8 0000 	ldr.w	r0, [r8]
 800e022:	a908      	add	r1, sp, #32
 800e024:	3011      	adds	r0, #17
 800e026:	f01d fa29 	bl	802b47c <memcpy>
 800e02a:	e71e      	b.n	800de6a <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e02c:	b946      	cbnz	r6, 800e040 <get_dht+0x204>
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	4628      	mov	r0, r5
 800e032:	4790      	blx	r2
 800e034:	2800      	cmp	r0, #0
 800e036:	f43f af2b 	beq.w	800de90 <get_dht+0x54>
 800e03a:	a908      	add	r1, sp, #32
 800e03c:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e040:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e044:	3e01      	subs	r6, #1
 800e046:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800e04a:	f109 0901 	add.w	r9, r9, #1
 800e04e:	e7ab      	b.n	800dfa8 <get_dht+0x16c>

0800e050 <read_markers>:
{
 800e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e054:	4604      	mov	r4, r0
 800e056:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800e058:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e05c:	bb2b      	cbnz	r3, 800e0aa <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800e05e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d17c      	bne.n	800e162 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800e068:	69a7      	ldr	r7, [r4, #24]
 800e06a:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d06a      	beq.n	800e146 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800e070:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e072:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e074:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e078:	d06c      	beq.n	800e154 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e07a:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e07c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e080:	f103 36ff 	add.w	r6, r3, #4294967295
 800e084:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e088:	d102      	bne.n	800e090 <read_markers+0x40>
 800e08a:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800e08e:	d008      	beq.n	800e0a2 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	2237      	movs	r2, #55	; 0x37
 800e094:	4620      	mov	r0, r4
 800e096:	f8c3 901c 	str.w	r9, [r3, #28]
 800e09a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800e0a2:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800e0a6:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800e0aa:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	f000 83c3 	beq.w	800e83a <read_markers+0x7ea>
 800e0b4:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800e0b8:	2a3e      	cmp	r2, #62	; 0x3e
 800e0ba:	f200 83cb 	bhi.w	800e854 <read_markers+0x804>
 800e0be:	2a3e      	cmp	r2, #62	; 0x3e
 800e0c0:	f200 83c8 	bhi.w	800e854 <read_markers+0x804>
 800e0c4:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e0c8:	009b0092 	.word	0x009b0092
 800e0cc:	00a7009e 	.word	0x00a7009e
 800e0d0:	00a70239 	.word	0x00a70239
 800e0d4:	00a700a7 	.word	0x00a700a7
 800e0d8:	00a200a7 	.word	0x00a200a7
 800e0dc:	00a700a4 	.word	0x00a700a4
 800e0e0:	00a701bf 	.word	0x00a701bf
 800e0e4:	00a700a7 	.word	0x00a700a7
 800e0e8:	03b903b9 	.word	0x03b903b9
 800e0ec:	03b903b9 	.word	0x03b903b9
 800e0f0:	03b903b9 	.word	0x03b903b9
 800e0f4:	03b903b9 	.word	0x03b903b9
 800e0f8:	01b30054 	.word	0x01b30054
 800e0fc:	023d00af 	.word	0x023d00af
 800e100:	035b03c2 	.word	0x035b03c2
 800e104:	03c603c6 	.word	0x03c603c6
 800e108:	03ad03ad 	.word	0x03ad03ad
 800e10c:	03ad03ad 	.word	0x03ad03ad
 800e110:	03ad03ad 	.word	0x03ad03ad
 800e114:	03ad03ad 	.word	0x03ad03ad
 800e118:	03ad03ad 	.word	0x03ad03ad
 800e11c:	03ad03ad 	.word	0x03ad03ad
 800e120:	03ad03ad 	.word	0x03ad03ad
 800e124:	03ad03ad 	.word	0x03ad03ad
 800e128:	03c603c6 	.word	0x03c603c6
 800e12c:	03c603c6 	.word	0x03c603c6
 800e130:	03c603c6 	.word	0x03c603c6
 800e134:	03c603c6 	.word	0x03c603c6
 800e138:	03c603c6 	.word	0x03c603c6
 800e13c:	03c603c6 	.word	0x03c603c6
 800e140:	03c603c6 	.word	0x03c603c6
 800e144:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	4620      	mov	r0, r4
 800e14a:	4798      	blx	r3
 800e14c:	b170      	cbz	r0, 800e16c <read_markers+0x11c>
 800e14e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e152:	e78e      	b.n	800e072 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	4620      	mov	r0, r4
 800e158:	4798      	blx	r3
 800e15a:	b138      	cbz	r0, 800e16c <read_markers+0x11c>
 800e15c:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e160:	e78c      	b.n	800e07c <read_markers+0x2c>
	if (! next_marker(cinfo))
 800e162:	4620      	mov	r0, r4
 800e164:	f7ff fde6 	bl	800dd34 <next_marker>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d19e      	bne.n	800e0aa <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800e16c:	2000      	movs	r0, #0
 800e16e:	e0e9      	b.n	800e344 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	2268      	movs	r2, #104	; 0x68
 800e174:	2101      	movs	r1, #1
 800e176:	4620      	mov	r0, r4
 800e178:	615a      	str	r2, [r3, #20]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800e17e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	b12b      	cbz	r3, 800e192 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	223f      	movs	r2, #63	; 0x3f
 800e18a:	4620      	mov	r0, r4
 800e18c:	615a      	str	r2, [r3, #20]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800e192:	2210      	movs	r2, #16
 800e194:	2100      	movs	r1, #0
 800e196:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e19a:	f01d f97d 	bl	802b498 <memset>
    cinfo->arith_dc_U[i] = 1;
 800e19e:	2210      	movs	r2, #16
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800e1a6:	f01d f977 	bl	802b498 <memset>
    cinfo->arith_ac_K[i] = 5;
 800e1aa:	2210      	movs	r2, #16
 800e1ac:	2105      	movs	r1, #5
 800e1ae:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800e1b2:	f01d f971 	bl	802b498 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e1b6:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e1ba:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e1bc:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800e1c0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e1c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800e1c8:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800e1cc:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800e1d0:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800e1d4:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800e1d8:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e1e2:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800e1ea:	e735      	b.n	800e058 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f7ff faec 	bl	800d7d0 <get_sof>
      if (! skip_variable(cinfo))
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d1f3      	bne.n	800e1e4 <read_markers+0x194>
 800e1fc:	e7b6      	b.n	800e16c <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800e1fe:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e200:	2200      	movs	r2, #0
 800e202:	e001      	b.n	800e208 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800e204:	2300      	movs	r3, #0
 800e206:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e208:	2100      	movs	r1, #0
 800e20a:	e7f2      	b.n	800e1f2 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e20c:	2301      	movs	r3, #1
 800e20e:	e7f7      	b.n	800e200 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e210:	2301      	movs	r3, #1
 800e212:	461a      	mov	r2, r3
 800e214:	e7f8      	b.n	800e208 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800e216:	6822      	ldr	r2, [r4, #0]
 800e218:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e21a:	4620      	mov	r0, r4
 800e21c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e220:	6813      	ldr	r3, [r2, #0]
 800e222:	4798      	blx	r3
      break;
 800e224:	e7de      	b.n	800e1e4 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800e226:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800e22a:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800e22c:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800e22e:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800e232:	b92b      	cbnz	r3, 800e240 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800e234:	6823      	ldr	r3, [r4, #0]
 800e236:	2240      	movs	r2, #64	; 0x40
 800e238:	4620      	mov	r0, r4
 800e23a:	615a      	str	r2, [r3, #20]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e240:	b936      	cbnz	r6, 800e250 <read_markers+0x200>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	4620      	mov	r0, r4
 800e246:	4798      	blx	r3
 800e248:	2800      	cmp	r0, #0
 800e24a:	d08f      	beq.n	800e16c <read_markers+0x11c>
 800e24c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e250:	f895 8000 	ldrb.w	r8, [r5]
 800e254:	3e01      	subs	r6, #1
 800e256:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e25a:	d076      	beq.n	800e34a <read_markers+0x2fa>
 800e25c:	3501      	adds	r5, #1
 800e25e:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e260:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e262:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e264:	d07a      	beq.n	800e35c <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e266:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e268:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e26c:	2269      	movs	r2, #105	; 0x69
 800e26e:	6823      	ldr	r3, [r4, #0]
 800e270:	2101      	movs	r1, #1
 800e272:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e274:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e276:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800e27e:	f109 0303 	add.w	r3, r9, #3
 800e282:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800e286:	d108      	bne.n	800e29a <read_markers+0x24a>
 800e288:	f1b9 0f04 	cmp.w	r9, #4
 800e28c:	dc05      	bgt.n	800e29a <read_markers+0x24a>
 800e28e:	f1b9 0f00 	cmp.w	r9, #0
 800e292:	d108      	bne.n	800e2a6 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800e294:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e298:	b92b      	cbnz	r3, 800e2a6 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e29a:	6823      	ldr	r3, [r4, #0]
 800e29c:	220c      	movs	r2, #12
 800e29e:	4620      	mov	r0, r4
 800e2a0:	615a      	str	r2, [r3, #20]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800e2a6:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800e2aa:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800e2ae:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800e2b2:	9301      	str	r3, [sp, #4]
 800e2b4:	45d1      	cmp	r9, sl
 800e2b6:	dc5a      	bgt.n	800e36e <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2b8:	b93e      	cbnz	r6, 800e2ca <read_markers+0x27a>
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4798      	blx	r3
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	f43f af53 	beq.w	800e16c <read_markers+0x11c>
 800e2c6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e2ca:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2cc:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2ce:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2d2:	f000 809a 	beq.w	800e40a <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2d6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2d8:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2da:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2dc:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2e0:	f000 809c 	beq.w	800e41c <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2e4:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2e6:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e2ea:	2101      	movs	r1, #1
 800e2ec:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800e2ee:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800e2f0:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800e2f2:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800e2f6:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800e2fa:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e2fe:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800e302:	6823      	ldr	r3, [r4, #0]
 800e304:	619a      	str	r2, [r3, #24]
 800e306:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800e30a:	61da      	str	r2, [r3, #28]
 800e30c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800e310:	621a      	str	r2, [r3, #32]
 800e312:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800e316:	625a      	str	r2, [r3, #36]	; 0x24
 800e318:	226b      	movs	r2, #107	; 0x6b
 800e31a:	615a      	str	r2, [r3, #20]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800e320:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e324:	2200      	movs	r2, #0
 800e326:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800e328:	f1b9 0f00 	cmp.w	r9, #0
 800e32c:	d004      	beq.n	800e338 <read_markers+0x2e8>
 800e32e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e332:	3301      	adds	r3, #1
 800e334:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800e338:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800e33a:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e33c:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800e340:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800e344:	b005      	add	sp, #20
 800e346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	4620      	mov	r0, r4
 800e34e:	4798      	blx	r3
 800e350:	2800      	cmp	r0, #0
 800e352:	f43f af0b 	beq.w	800e16c <read_markers+0x11c>
 800e356:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e35a:	e780      	b.n	800e25e <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	4620      	mov	r0, r4
 800e360:	4798      	blx	r3
 800e362:	2800      	cmp	r0, #0
 800e364:	f43f af02 	beq.w	800e16c <read_markers+0x11c>
 800e368:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e36c:	e77c      	b.n	800e268 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e36e:	b93e      	cbnz	r6, 800e380 <read_markers+0x330>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	4620      	mov	r0, r4
 800e374:	4798      	blx	r3
 800e376:	2800      	cmp	r0, #0
 800e378:	f43f aef8 	beq.w	800e16c <read_markers+0x11c>
 800e37c:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e380:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e382:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e386:	d02f      	beq.n	800e3e8 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e388:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e38a:	3e01      	subs	r6, #1
 800e38c:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e390:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e394:	2000      	movs	r0, #0
 800e396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e398:	4290      	cmp	r0, r2
 800e39a:	db2e      	blt.n	800e3fa <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800e39c:	6821      	ldr	r1, [r4, #0]
 800e39e:	4620      	mov	r0, r4
 800e3a0:	9302      	str	r3, [sp, #8]
 800e3a2:	2304      	movs	r3, #4
 800e3a4:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800e3a8:	6809      	ldr	r1, [r1, #0]
 800e3aa:	4788      	blx	r1
 800e3ac:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800e3ae:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e3b0:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800e3b2:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e3b6:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800e3b8:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800e3bc:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e3c0:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e3c4:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800e3c6:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e3ca:	f8c1 b018 	str.w	fp, [r1, #24]
 800e3ce:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800e3d2:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e3d4:	61cb      	str	r3, [r1, #28]
 800e3d6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e3da:	620b      	str	r3, [r1, #32]
 800e3dc:	236a      	movs	r3, #106	; 0x6a
 800e3de:	614b      	str	r3, [r1, #20]
 800e3e0:	684b      	ldr	r3, [r1, #4]
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800e3e6:	e765      	b.n	800e2b4 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	4798      	blx	r3
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	f43f aebc 	beq.w	800e16c <read_markers+0x11c>
 800e3f4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e3f8:	e7c7      	b.n	800e38a <read_markers+0x33a>
      if (cc == compptr->component_id)
 800e3fa:	f8d8 1000 	ldr.w	r1, [r8]
 800e3fe:	458b      	cmp	fp, r1
 800e400:	d0d5      	beq.n	800e3ae <read_markers+0x35e>
	 ci++, compptr++) {
 800e402:	3001      	adds	r0, #1
 800e404:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e408:	e7c6      	b.n	800e398 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	4620      	mov	r0, r4
 800e40e:	4798      	blx	r3
 800e410:	2800      	cmp	r0, #0
 800e412:	f43f aeab 	beq.w	800e16c <read_markers+0x11c>
 800e416:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e41a:	e75d      	b.n	800e2d8 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	4620      	mov	r0, r4
 800e420:	4798      	blx	r3
 800e422:	2800      	cmp	r0, #0
 800e424:	f43f aea2 	beq.w	800e16c <read_markers+0x11c>
 800e428:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e42c:	e75b      	b.n	800e2e6 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	2257      	movs	r2, #87	; 0x57
 800e432:	4620      	mov	r0, r4
 800e434:	2101      	movs	r1, #1
 800e436:	615a      	str	r2, [r3, #20]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800e43c:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800e43e:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800e440:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800e444:	e77e      	b.n	800e344 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800e446:	69a7      	ldr	r7, [r4, #24]
 800e448:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e44a:	b1e6      	cbz	r6, 800e486 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800e44c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e44e:	f895 9000 	ldrb.w	r9, [r5]
 800e452:	3e01      	subs	r6, #1
 800e454:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e458:	d01e      	beq.n	800e498 <read_markers+0x448>
 800e45a:	3501      	adds	r5, #1
 800e45c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e460:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e462:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e466:	4499      	add	r9, r3
  length -= 2;
 800e468:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800e46c:	f1b9 0f00 	cmp.w	r9, #0
 800e470:	dc1b      	bgt.n	800e4aa <read_markers+0x45a>
  if (length != 0)
 800e472:	d005      	beq.n	800e480 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	220c      	movs	r2, #12
 800e478:	4620      	mov	r0, r4
 800e47a:	615a      	str	r2, [r3, #20]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800e480:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800e482:	607e      	str	r6, [r7, #4]
  return TRUE;
 800e484:	e6ae      	b.n	800e1e4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	4620      	mov	r0, r4
 800e48a:	4798      	blx	r3
 800e48c:	2800      	cmp	r0, #0
 800e48e:	f43f ae6d 	beq.w	800e16c <read_markers+0x11c>
 800e492:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e496:	e7da      	b.n	800e44e <read_markers+0x3fe>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	4620      	mov	r0, r4
 800e49c:	4798      	blx	r3
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	f43f ae64 	beq.w	800e16c <read_markers+0x11c>
 800e4a4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e4a8:	e7d8      	b.n	800e45c <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e4aa:	b93e      	cbnz	r6, 800e4bc <read_markers+0x46c>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	4798      	blx	r3
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	f43f ae5a 	beq.w	800e16c <read_markers+0x11c>
 800e4b8:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e4bc:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800e4be:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e4c2:	d01f      	beq.n	800e504 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e4c4:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e4c6:	6822      	ldr	r2, [r4, #0]
 800e4c8:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800e4ca:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e4ce:	2101      	movs	r1, #1
 800e4d0:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800e4d2:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e4d4:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800e4d8:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e4dc:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800e4e0:	6852      	ldr	r2, [r2, #4]
 800e4e2:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800e4e4:	f1b8 0f1f 	cmp.w	r8, #31
 800e4e8:	d905      	bls.n	800e4f6 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e4ea:	6822      	ldr	r2, [r4, #0]
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800e4f2:	6812      	ldr	r2, [r2, #0]
 800e4f4:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800e4f6:	f1b8 0f0f 	cmp.w	r8, #15
 800e4fa:	44a0      	add	r8, r4
 800e4fc:	dd0b      	ble.n	800e516 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800e4fe:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800e502:	e7b3      	b.n	800e46c <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	4620      	mov	r0, r4
 800e508:	4798      	blx	r3
 800e50a:	2800      	cmp	r0, #0
 800e50c:	f43f ae2e 	beq.w	800e16c <read_markers+0x11c>
 800e510:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e514:	e7d7      	b.n	800e4c6 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e516:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e51a:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e51e:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e520:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e524:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e528:	d9a0      	bls.n	800e46c <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800e52a:	6822      	ldr	r2, [r4, #0]
 800e52c:	211e      	movs	r1, #30
 800e52e:	4620      	mov	r0, r4
 800e530:	6813      	ldr	r3, [r2, #0]
 800e532:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800e536:	4798      	blx	r3
 800e538:	e798      	b.n	800e46c <read_markers+0x41c>
      if (! get_dht(cinfo))
 800e53a:	4620      	mov	r0, r4
 800e53c:	f7ff fc7e 	bl	800de3c <get_dht>
 800e540:	e65a      	b.n	800e1f8 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800e542:	69a6      	ldr	r6, [r4, #24]
 800e544:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e546:	b1db      	cbz	r3, 800e580 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800e548:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e54a:	f895 8000 	ldrb.w	r8, [r5]
 800e54e:	3b01      	subs	r3, #1
 800e550:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800e554:	d01d      	beq.n	800e592 <read_markers+0x542>
 800e556:	3501      	adds	r5, #1
 800e558:	f815 8b01 	ldrb.w	r8, [r5], #1
 800e55c:	f103 3aff 	add.w	sl, r3, #4294967295
 800e560:	44b8      	add	r8, r7
  length -= 2;
 800e562:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800e566:	f1b8 0f00 	cmp.w	r8, #0
 800e56a:	dc1b      	bgt.n	800e5a4 <read_markers+0x554>
  if (length != 0)
 800e56c:	d005      	beq.n	800e57a <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e56e:	6822      	ldr	r2, [r4, #0]
 800e570:	210c      	movs	r1, #12
 800e572:	4620      	mov	r0, r4
 800e574:	6151      	str	r1, [r2, #20]
 800e576:	6812      	ldr	r2, [r2, #0]
 800e578:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800e57a:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800e57e:	e631      	b.n	800e1e4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e580:	68f3      	ldr	r3, [r6, #12]
 800e582:	4620      	mov	r0, r4
 800e584:	4798      	blx	r3
 800e586:	2800      	cmp	r0, #0
 800e588:	f43f adf0 	beq.w	800e16c <read_markers+0x11c>
 800e58c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e590:	e7db      	b.n	800e54a <read_markers+0x4fa>
 800e592:	68f3      	ldr	r3, [r6, #12]
 800e594:	4620      	mov	r0, r4
 800e596:	4798      	blx	r3
 800e598:	2800      	cmp	r0, #0
 800e59a:	f43f ade7 	beq.w	800e16c <read_markers+0x11c>
 800e59e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e5a2:	e7d9      	b.n	800e558 <read_markers+0x508>
    length--;
 800e5a4:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800e5a8:	f1ba 0f00 	cmp.w	sl, #0
 800e5ac:	d107      	bne.n	800e5be <read_markers+0x56e>
 800e5ae:	68f3      	ldr	r3, [r6, #12]
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	4798      	blx	r3
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f43f add9 	beq.w	800e16c <read_markers+0x11c>
 800e5ba:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e5be:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e5c2:	2153      	movs	r1, #83	; 0x53
 800e5c4:	6822      	ldr	r2, [r4, #0]
 800e5c6:	4620      	mov	r0, r4
    prec = n >> 4;
 800e5c8:	ea4f 1329 	mov.w	r3, r9, asr #4
 800e5cc:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800e5d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e5d4:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800e5d6:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e5d8:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e5dc:	6852      	ldr	r2, [r2, #4]
 800e5de:	2101      	movs	r1, #1
 800e5e0:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800e5e2:	f019 0f0c 	tst.w	r9, #12
 800e5e6:	d006      	beq.n	800e5f6 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800e5e8:	6822      	ldr	r2, [r4, #0]
 800e5ea:	2120      	movs	r1, #32
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e5f2:	6812      	ldr	r2, [r2, #0]
 800e5f4:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800e5f6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e5fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e5fe:	b922      	cbnz	r2, 800e60a <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800e600:	4620      	mov	r0, r4
 800e602:	f7fb f873 	bl	80096ec <jpeg_alloc_quant_table>
 800e606:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800e60a:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800e60c:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800e610:	2b00      	cmp	r3, #0
 800e612:	d057      	beq.n	800e6c4 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800e614:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800e618:	dc6c      	bgt.n	800e6f4 <read_markers+0x6a4>
 800e61a:	f1ab 0202 	sub.w	r2, fp, #2
 800e61e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e622:	2001      	movs	r0, #1
 800e624:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e628:	4291      	cmp	r1, r2
 800e62a:	d1fb      	bne.n	800e624 <read_markers+0x5d4>
	count = length >> 1;
 800e62c:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800e630:	f1b9 0f19 	cmp.w	r9, #25
 800e634:	d062      	beq.n	800e6fc <read_markers+0x6ac>
 800e636:	dc53      	bgt.n	800e6e0 <read_markers+0x690>
 800e638:	f1b9 0f09 	cmp.w	r9, #9
 800e63c:	d060      	beq.n	800e700 <read_markers+0x6b0>
 800e63e:	f1b9 0f10 	cmp.w	r9, #16
 800e642:	d05f      	beq.n	800e704 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800e644:	4f85      	ldr	r7, [pc, #532]	; (800e85c <read_markers+0x80c>)
 800e646:	4a86      	ldr	r2, [pc, #536]	; (800e860 <read_markers+0x810>)
 800e648:	f1b9 0f04 	cmp.w	r9, #4
 800e64c:	bf18      	it	ne
 800e64e:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800e650:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800e654:	9302      	str	r3, [sp, #8]
 800e656:	9b02      	ldr	r3, [sp, #8]
 800e658:	42bb      	cmp	r3, r7
 800e65a:	d157      	bne.n	800e70c <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800e65c:	6822      	ldr	r2, [r4, #0]
 800e65e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e660:	2a01      	cmp	r2, #1
 800e662:	dd26      	ble.n	800e6b2 <read_markers+0x662>
 800e664:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e668:	275f      	movs	r7, #95	; 0x5f
 800e66a:	f8bb 1000 	ldrh.w	r1, [fp]
 800e66e:	4620      	mov	r0, r4
 800e670:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e672:	f10b 0b10 	add.w	fp, fp, #16
 800e676:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e678:	6191      	str	r1, [r2, #24]
 800e67a:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800e67e:	61d1      	str	r1, [r2, #28]
 800e680:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800e684:	6211      	str	r1, [r2, #32]
 800e686:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800e68a:	6251      	str	r1, [r2, #36]	; 0x24
 800e68c:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800e690:	6291      	str	r1, [r2, #40]	; 0x28
 800e692:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800e696:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e698:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800e69c:	6311      	str	r1, [r2, #48]	; 0x30
 800e69e:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800e6a2:	6157      	str	r7, [r2, #20]
 800e6a4:	6351      	str	r1, [r2, #52]	; 0x34
 800e6a6:	2102      	movs	r1, #2
 800e6a8:	6852      	ldr	r2, [r2, #4]
 800e6aa:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e6ac:	9b02      	ldr	r3, [sp, #8]
 800e6ae:	459b      	cmp	fp, r3
 800e6b0:	d1db      	bne.n	800e66a <read_markers+0x61a>
    if (prec) length -= count;
 800e6b2:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800e6b4:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f43f af54 	beq.w	800e566 <read_markers+0x516>
 800e6be:	eba8 0809 	sub.w	r8, r8, r9
 800e6c2:	e750      	b.n	800e566 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800e6c4:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800e6c8:	dc14      	bgt.n	800e6f4 <read_markers+0x6a4>
 800e6ca:	f1ab 0202 	sub.w	r2, fp, #2
 800e6ce:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e6d2:	2001      	movs	r0, #1
 800e6d4:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e6d8:	4291      	cmp	r1, r2
 800e6da:	d1fb      	bne.n	800e6d4 <read_markers+0x684>
 800e6dc:	46c1      	mov	r9, r8
 800e6de:	e7a7      	b.n	800e630 <read_markers+0x5e0>
    switch (count) {
 800e6e0:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800e6e4:	d010      	beq.n	800e708 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800e6e6:	4f5e      	ldr	r7, [pc, #376]	; (800e860 <read_markers+0x810>)
 800e6e8:	4b5e      	ldr	r3, [pc, #376]	; (800e864 <read_markers+0x814>)
 800e6ea:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800e6ee:	bf08      	it	eq
 800e6f0:	461f      	moveq	r7, r3
 800e6f2:	e7ad      	b.n	800e650 <read_markers+0x600>
	count = DCTSIZE2;
 800e6f4:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800e6f8:	4f59      	ldr	r7, [pc, #356]	; (800e860 <read_markers+0x810>)
 800e6fa:	e7a9      	b.n	800e650 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800e6fc:	4f5a      	ldr	r7, [pc, #360]	; (800e868 <read_markers+0x818>)
 800e6fe:	e7a7      	b.n	800e650 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800e700:	4f5a      	ldr	r7, [pc, #360]	; (800e86c <read_markers+0x81c>)
 800e702:	e7a5      	b.n	800e650 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800e704:	4f5a      	ldr	r7, [pc, #360]	; (800e870 <read_markers+0x820>)
 800e706:	e7a3      	b.n	800e650 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800e708:	4f5a      	ldr	r7, [pc, #360]	; (800e874 <read_markers+0x824>)
 800e70a:	e7a1      	b.n	800e650 <read_markers+0x600>
      if (prec)
 800e70c:	9b01      	ldr	r3, [sp, #4]
 800e70e:	b333      	cbz	r3, 800e75e <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e710:	f1ba 0f00 	cmp.w	sl, #0
 800e714:	d107      	bne.n	800e726 <read_markers+0x6d6>
 800e716:	68f3      	ldr	r3, [r6, #12]
 800e718:	4620      	mov	r0, r4
 800e71a:	4798      	blx	r3
 800e71c:	2800      	cmp	r0, #0
 800e71e:	f43f ad25 	beq.w	800e16c <read_markers+0x11c>
 800e722:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e726:	782a      	ldrb	r2, [r5, #0]
 800e728:	f1ba 0301 	subs.w	r3, sl, #1
 800e72c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e730:	d00a      	beq.n	800e748 <read_markers+0x6f8>
 800e732:	3501      	adds	r5, #1
 800e734:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e738:	f103 3aff 	add.w	sl, r3, #4294967295
 800e73c:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800e73e:	f857 1b04 	ldr.w	r1, [r7], #4
 800e742:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800e746:	e786      	b.n	800e656 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e748:	68f3      	ldr	r3, [r6, #12]
 800e74a:	4620      	mov	r0, r4
 800e74c:	9203      	str	r2, [sp, #12]
 800e74e:	4798      	blx	r3
 800e750:	2800      	cmp	r0, #0
 800e752:	f43f ad0b 	beq.w	800e16c <read_markers+0x11c>
 800e756:	9a03      	ldr	r2, [sp, #12]
 800e758:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e75c:	e7ea      	b.n	800e734 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800e75e:	f1ba 0f00 	cmp.w	sl, #0
 800e762:	d107      	bne.n	800e774 <read_markers+0x724>
 800e764:	68f3      	ldr	r3, [r6, #12]
 800e766:	4620      	mov	r0, r4
 800e768:	4798      	blx	r3
 800e76a:	2800      	cmp	r0, #0
 800e76c:	f43f acfe 	beq.w	800e16c <read_markers+0x11c>
 800e770:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e774:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e778:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e77c:	e7df      	b.n	800e73e <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800e77e:	69a7      	ldr	r7, [r4, #24]
 800e780:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e782:	b353      	cbz	r3, 800e7da <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800e784:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e786:	782a      	ldrb	r2, [r5, #0]
 800e788:	3b01      	subs	r3, #1
 800e78a:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800e78e:	d02d      	beq.n	800e7ec <read_markers+0x79c>
 800e790:	3501      	adds	r5, #1
 800e792:	782a      	ldrb	r2, [r5, #0]
 800e794:	1e5e      	subs	r6, r3, #1
 800e796:	4442      	add	r2, r8
  if (length != 4)
 800e798:	2a04      	cmp	r2, #4
 800e79a:	d005      	beq.n	800e7a8 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	220c      	movs	r2, #12
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	615a      	str	r2, [r3, #20]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e7a8:	b34e      	cbz	r6, 800e7fe <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e7aa:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e7ac:	f895 8000 	ldrb.w	r8, [r5]
 800e7b0:	3e01      	subs	r6, #1
 800e7b2:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800e7b6:	d02b      	beq.n	800e810 <read_markers+0x7c0>
 800e7b8:	3501      	adds	r5, #1
 800e7ba:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e7be:	2254      	movs	r2, #84	; 0x54
 800e7c0:	6823      	ldr	r3, [r4, #0]
 800e7c2:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e7c4:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e7c6:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e7c8:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e7ca:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800e7d2:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800e7d6:	603d      	str	r5, [r7, #0]
 800e7d8:	e653      	b.n	800e482 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4798      	blx	r3
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	f43f acc3 	beq.w	800e16c <read_markers+0x11c>
 800e7e6:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e7ea:	e7cc      	b.n	800e786 <read_markers+0x736>
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	4798      	blx	r3
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	f43f acba 	beq.w	800e16c <read_markers+0x11c>
 800e7f8:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e7fc:	e7c9      	b.n	800e792 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	4620      	mov	r0, r4
 800e802:	4798      	blx	r3
 800e804:	2800      	cmp	r0, #0
 800e806:	f43f acb1 	beq.w	800e16c <read_markers+0x11c>
 800e80a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e80e:	e7cd      	b.n	800e7ac <read_markers+0x75c>
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	4620      	mov	r0, r4
 800e814:	4798      	blx	r3
 800e816:	2800      	cmp	r0, #0
 800e818:	f43f aca8 	beq.w	800e16c <read_markers+0x11c>
 800e81c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e820:	e7cb      	b.n	800e7ba <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800e822:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800e826:	3bd8      	subs	r3, #216	; 0xd8
 800e828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e82c:	4620      	mov	r0, r4
 800e82e:	4798      	blx	r3
 800e830:	e4e2      	b.n	800e1f8 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800e832:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e836:	69db      	ldr	r3, [r3, #28]
 800e838:	e7f8      	b.n	800e82c <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800e83a:	6822      	ldr	r2, [r4, #0]
 800e83c:	215e      	movs	r1, #94	; 0x5e
 800e83e:	4620      	mov	r0, r4
 800e840:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e844:	6853      	ldr	r3, [r2, #4]
 800e846:	2101      	movs	r1, #1
 800e848:	4798      	blx	r3
      break;
 800e84a:	e4cb      	b.n	800e1e4 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800e84c:	4620      	mov	r0, r4
 800e84e:	f7ff fa36 	bl	800dcbe <skip_variable>
 800e852:	e4d1      	b.n	800e1f8 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e854:	6822      	ldr	r2, [r4, #0]
 800e856:	2146      	movs	r1, #70	; 0x46
 800e858:	e4df      	b.n	800e21a <read_markers+0x1ca>
 800e85a:	bf00      	nop
 800e85c:	080308b8 	.word	0x080308b8
 800e860:	08030778 	.word	0x08030778
 800e864:	08030b60 	.word	0x08030b60
 800e868:	080309ec 	.word	0x080309ec
 800e86c:	08030908 	.word	0x08030908
 800e870:	0803096c 	.word	0x0803096c
 800e874:	08030a90 	.word	0x08030a90

0800e878 <jpeg_resync_to_restart>:
{
 800e878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e87c:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e87e:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800e880:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e884:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e886:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e88a:	61d9      	str	r1, [r3, #28]
 800e88c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800e890:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e892:	f008 0807 	and.w	r8, r8, #7
 800e896:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e89a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800e8a2:	2dbf      	cmp	r5, #191	; 0xbf
 800e8a4:	dd2e      	ble.n	800e904 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800e8a6:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800e8aa:	2b07      	cmp	r3, #7
 800e8ac:	d828      	bhi.n	800e900 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e8ae:	4545      	cmp	r5, r8
 800e8b0:	d026      	beq.n	800e900 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800e8b2:	1cbb      	adds	r3, r7, #2
 800e8b4:	f003 0307 	and.w	r3, r3, #7
 800e8b8:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e8ba:	429d      	cmp	r5, r3
 800e8bc:	d020      	beq.n	800e900 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800e8be:	1e7b      	subs	r3, r7, #1
 800e8c0:	f003 0307 	and.w	r3, r3, #7
 800e8c4:	33d0      	adds	r3, #208	; 0xd0
 800e8c6:	429d      	cmp	r5, r3
 800e8c8:	d01c      	beq.n	800e904 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800e8ca:	1ebc      	subs	r4, r7, #2
 800e8cc:	f004 0407 	and.w	r4, r4, #7
 800e8d0:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800e8d2:	42a5      	cmp	r5, r4
 800e8d4:	bf14      	ite	ne
 800e8d6:	2401      	movne	r4, #1
 800e8d8:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800e8da:	6833      	ldr	r3, [r6, #0]
 800e8dc:	2263      	movs	r2, #99	; 0x63
 800e8de:	2104      	movs	r1, #4
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	61dc      	str	r4, [r3, #28]
 800e8e4:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	4798      	blx	r3
    switch (action) {
 800e8ec:	2c02      	cmp	r4, #2
 800e8ee:	d00b      	beq.n	800e908 <jpeg_resync_to_restart+0x90>
 800e8f0:	2c03      	cmp	r4, #3
 800e8f2:	d002      	beq.n	800e8fa <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800e8fa:	2001      	movs	r0, #1
}
 800e8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800e900:	2403      	movs	r4, #3
 800e902:	e7ea      	b.n	800e8da <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800e904:	2402      	movs	r4, #2
 800e906:	e7e8      	b.n	800e8da <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff fa13 	bl	800dd34 <next_marker>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d0f4      	beq.n	800e8fc <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800e912:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800e916:	e7c4      	b.n	800e8a2 <jpeg_resync_to_restart+0x2a>

0800e918 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800e918:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e91a:	6843      	ldr	r3, [r0, #4]
 800e91c:	22ac      	movs	r2, #172	; 0xac
 800e91e:	2100      	movs	r1, #0
{
 800e920:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e926:	4b11      	ldr	r3, [pc, #68]	; (800e96c <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800e928:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e92c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e92e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800e930:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800e934:	4b0e      	ldr	r3, [pc, #56]	; (800e970 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800e936:	4a0f      	ldr	r2, [pc, #60]	; (800e974 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800e938:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800e93a:	4b0f      	ldr	r3, [pc, #60]	; (800e978 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800e93c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800e93e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800e940:	2300      	movs	r3, #0
 800e942:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800e944:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800e948:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800e94c:	4299      	cmp	r1, r3
 800e94e:	d1fb      	bne.n	800e948 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800e950:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800e954:	2240      	movs	r2, #64	; 0x40
 800e956:	2100      	movs	r1, #0
 800e958:	f01c fd9e 	bl	802b498 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800e95c:	4b07      	ldr	r3, [pc, #28]	; (800e97c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800e95e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800e960:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800e962:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800e964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800e968:	f7ff ba59 	b.w	800de1e <reset_marker_reader>
 800e96c:	0800de1f 	.word	0x0800de1f
 800e970:	0800e051 	.word	0x0800e051
 800e974:	0800dcbf 	.word	0x0800dcbf
 800e978:	0800ddc1 	.word	0x0800ddc1
 800e97c:	0800dbe9 	.word	0x0800dbe9

0800e980 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800e980:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e982:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800e986:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800e988:	68ab      	ldr	r3, [r5, #8]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d02a      	beq.n	800e9e4 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800e98e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e990:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800e994:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e99a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e99e:	2102      	movs	r1, #2
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e9a6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e9aa:	2102      	movs	r1, #2
 800e9ac:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800e9b2:	68a2      	ldr	r2, [r4, #8]
 800e9b4:	b1aa      	cbz	r2, 800e9e2 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e9b6:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800e9b8:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e9ba:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800e9bc:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e9be:	bf14      	ite	ne
 800e9c0:	2102      	movne	r1, #2
 800e9c2:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800e9c4:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e9c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800e9c8:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e9ca:	b151      	cbz	r1, 800e9e2 <prepare_for_output_pass+0x62>
 800e9cc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800e9d0:	6949      	ldr	r1, [r1, #20]
 800e9d2:	b931      	cbnz	r1, 800e9e2 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800e9d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e9d6:	2900      	cmp	r1, #0
 800e9d8:	bf14      	ite	ne
 800e9da:	2102      	movne	r1, #2
 800e9dc:	2101      	moveq	r1, #1
 800e9de:	440b      	add	r3, r1
 800e9e0:	6113      	str	r3, [r2, #16]
    }
  }
}
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800e9e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e9e6:	b16b      	cbz	r3, 800ea04 <prepare_for_output_pass+0x84>
 800e9e8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e9ec:	b953      	cbnz	r3, 800ea04 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800e9ee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d037      	beq.n	800ea64 <prepare_for_output_pass+0xe4>
 800e9f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d034      	beq.n	800ea64 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800e9fa:	69ab      	ldr	r3, [r5, #24]
 800e9fc:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800ea00:	2301      	movs	r3, #1
 800ea02:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800ea04:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800ea08:	4620      	mov	r0, r4
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800ea0e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800ea12:	4620      	mov	r0, r4
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800ea18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1c9      	bne.n	800e9b2 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800ea1e:	692b      	ldr	r3, [r5, #16]
 800ea20:	b923      	cbnz	r3, 800ea2c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800ea22:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800ea26:	4620      	mov	r0, r4
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800ea2c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800ea30:	4620      	mov	r0, r4
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800ea36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ea38:	b12b      	cbz	r3, 800ea46 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800ea3a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ea3e:	4620      	mov	r0, r4
 800ea40:	68a9      	ldr	r1, [r5, #8]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800ea46:	68aa      	ldr	r2, [r5, #8]
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	bf14      	ite	ne
 800ea54:	2103      	movne	r1, #3
 800ea56:	2100      	moveq	r1, #0
 800ea58:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800ea5a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ea5e:	2100      	movs	r1, #0
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	e7a4      	b.n	800e9ae <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800ea64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea66:	b11b      	cbz	r3, 800ea70 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800ea68:	696b      	ldr	r3, [r5, #20]
 800ea6a:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800ea6e:	e7c9      	b.n	800ea04 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	222f      	movs	r2, #47	; 0x2f
 800ea74:	4620      	mov	r0, r4
 800ea76:	615a      	str	r2, [r3, #20]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4798      	blx	r3
 800ea7c:	e7c2      	b.n	800ea04 <prepare_for_output_pass+0x84>

0800ea7e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800ea7e:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800ea80:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ea82:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800ea86:	b11a      	cbz	r2, 800ea90 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800ea88:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	4798      	blx	r3
  master->pass_number++;
 800ea90:	68e3      	ldr	r3, [r4, #12]
 800ea92:	3301      	adds	r3, #1
 800ea94:	60e3      	str	r3, [r4, #12]
}
 800ea96:	bd10      	pop	{r4, pc}

0800ea98 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ea98:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800ea9a:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d143      	bne.n	800eb28 <use_merged_upsample+0x90>
 800eaa0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800eaa4:	2a00      	cmp	r2, #0
 800eaa6:	d141      	bne.n	800eb2c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800eaa8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800eaac:	2b03      	cmp	r3, #3
 800eaae:	d139      	bne.n	800eb24 <use_merged_upsample+0x8c>
 800eab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eab2:	2b03      	cmp	r3, #3
 800eab4:	d136      	bne.n	800eb24 <use_merged_upsample+0x8c>
 800eab6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800eaba:	2b02      	cmp	r3, #2
 800eabc:	d132      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800eabe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800eac0:	2b03      	cmp	r3, #3
 800eac2:	d12f      	bne.n	800eb24 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800eac4:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800eac8:	6899      	ldr	r1, [r3, #8]
 800eaca:	2902      	cmp	r1, #2
 800eacc:	d12a      	bne.n	800eb24 <use_merged_upsample+0x8c>
 800eace:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800ead0:	2901      	cmp	r1, #1
 800ead2:	d127      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800ead4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ead8:	2901      	cmp	r1, #1
 800eada:	d123      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800eadc:	68d9      	ldr	r1, [r3, #12]
 800eade:	2902      	cmp	r1, #2
 800eae0:	dc20      	bgt.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800eae2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800eae4:	2901      	cmp	r1, #1
 800eae6:	d11d      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800eae8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800eaec:	2901      	cmp	r1, #1
 800eaee:	d119      	bne.n	800eb24 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800eaf0:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800eaf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800eaf6:	42a1      	cmp	r1, r4
 800eaf8:	d114      	bne.n	800eb24 <use_merged_upsample+0x8c>
 800eafa:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800eafc:	42a1      	cmp	r1, r4
 800eafe:	d111      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800eb00:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800eb04:	42a1      	cmp	r1, r4
 800eb06:	d10d      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800eb08:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800eb0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800eb0e:	4281      	cmp	r1, r0
 800eb10:	d108      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800eb12:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800eb16:	4281      	cmp	r1, r0
 800eb18:	d104      	bne.n	800eb24 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800eb1a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800eb1e:	1a53      	subs	r3, r2, r1
 800eb20:	425a      	negs	r2, r3
 800eb22:	415a      	adcs	r2, r3
}
 800eb24:	4610      	mov	r0, r2
 800eb26:	bd10      	pop	{r4, pc}
    return FALSE;
 800eb28:	2200      	movs	r2, #0
 800eb2a:	e7fb      	b.n	800eb24 <use_merged_upsample+0x8c>
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	e7f9      	b.n	800eb24 <use_merged_upsample+0x8c>

0800eb30 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800eb30:	6942      	ldr	r2, [r0, #20]
 800eb32:	2aca      	cmp	r2, #202	; 0xca
{
 800eb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb38:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800eb3a:	d005      	beq.n	800eb48 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800eb3c:	6803      	ldr	r3, [r0, #0]
 800eb3e:	2115      	movs	r1, #21
 800eb40:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800eb48:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb4a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800eb4c:	f7fe faf8 	bl	800d140 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb50:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800eb54:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800eb58:	462b      	mov	r3, r5
 800eb5a:	45b4      	cmp	ip, r6
 800eb5c:	dd6b      	ble.n	800ec36 <jpeg_calc_output_dimensions+0x106>
 800eb5e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800eb60:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800eb62:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800eb66:	2a00      	cmp	r2, #0
 800eb68:	bf14      	ite	ne
 800eb6a:	2708      	movne	r7, #8
 800eb6c:	2704      	moveq	r7, #4
 800eb6e:	e00a      	b.n	800eb86 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800eb70:	689a      	ldr	r2, [r3, #8]
 800eb72:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800eb76:	434a      	muls	r2, r1
 800eb78:	0052      	lsls	r2, r2, #1
 800eb7a:	fb9e f9f2 	sdiv	r9, lr, r2
 800eb7e:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800eb82:	b922      	cbnz	r2, 800eb8e <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800eb84:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800eb86:	fb01 f008 	mul.w	r0, r1, r8
 800eb8a:	42b8      	cmp	r0, r7
 800eb8c:	ddf0      	ble.n	800eb70 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800eb8e:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800eb90:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800eb94:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800eb98:	fb08 f109 	mul.w	r1, r8, r9
 800eb9c:	42b9      	cmp	r1, r7
 800eb9e:	dd0b      	ble.n	800ebb8 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800eba0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800eba4:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800eba6:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ebaa:	dc14      	bgt.n	800ebd6 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800ebac:	0042      	lsls	r2, r0, #1
 800ebae:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800ebb2:	bfc8      	it	gt
 800ebb4:	629a      	strgt	r2, [r3, #40]	; 0x28
 800ebb6:	e00f      	b.n	800ebd8 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800ebb8:	68da      	ldr	r2, [r3, #12]
 800ebba:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800ebbe:	fb02 f208 	mul.w	r2, r2, r8
 800ebc2:	0052      	lsls	r2, r2, #1
 800ebc4:	fb9e faf2 	sdiv	sl, lr, r2
 800ebc8:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ebcc:	2a00      	cmp	r2, #0
 800ebce:	d1e7      	bne.n	800eba0 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800ebd0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800ebd4:	e7e0      	b.n	800eb98 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800ebd6:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800ebd8:	3601      	adds	r6, #1
 800ebda:	3358      	adds	r3, #88	; 0x58
 800ebdc:	e7bd      	b.n	800eb5a <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ebde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800ebe0:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ebe2:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800ebe4:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ebe6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800ebea:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ebee:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800ebf0:	69e3      	ldr	r3, [r4, #28]
 800ebf2:	4351      	muls	r1, r2
 800ebf4:	4358      	muls	r0, r3
 800ebf6:	f007 fe71 	bl	80168dc <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ebfa:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800ebfe:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ec02:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ec06:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800ec0a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ec0e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800ec10:	6a23      	ldr	r3, [r4, #32]
 800ec12:	4351      	muls	r1, r2
 800ec14:	4358      	muls	r0, r3
 800ec16:	f007 fe61 	bl	80168dc <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800ec1a:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ec20:	42b2      	cmp	r2, r6
 800ec22:	dcdc      	bgt.n	800ebde <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800ec24:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800ec28:	2b03      	cmp	r3, #3
 800ec2a:	d806      	bhi.n	800ec3a <jpeg_calc_output_dimensions+0x10a>
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d809      	bhi.n	800ec44 <jpeg_calc_output_dimensions+0x114>
 800ec30:	d009      	beq.n	800ec46 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800ec32:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800ec34:	e008      	b.n	800ec48 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec36:	2600      	movs	r6, #0
 800ec38:	e7f1      	b.n	800ec1e <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800ec3a:	3b04      	subs	r3, #4
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d8f8      	bhi.n	800ec32 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800ec40:	2304      	movs	r3, #4
 800ec42:	e000      	b.n	800ec46 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ec44:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800ec46:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ec48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ec4a:	b95b      	cbnz	r3, 800ec64 <jpeg_calc_output_dimensions+0x134>
 800ec4c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800ec4e:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ec50:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800ec52:	f7ff ff21 	bl	800ea98 <use_merged_upsample>
 800ec56:	b138      	cbz	r0, 800ec68 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800ec58:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800ec5c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800ec60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ec64:	2301      	movs	r3, #1
 800ec66:	e7f2      	b.n	800ec4e <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e7f7      	b.n	800ec5c <jpeg_calc_output_dimensions+0x12c>

0800ec6c <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800ec6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec6e:	6843      	ldr	r3, [r0, #4]
 800ec70:	221c      	movs	r2, #28
 800ec72:	2101      	movs	r1, #1
{
 800ec74:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec76:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800ec78:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec7a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ec7c:	4b6d      	ldr	r3, [pc, #436]	; (800ee34 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800ec7e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec82:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ec84:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800ec86:	4b6c      	ldr	r3, [pc, #432]	; (800ee38 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800ec88:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800ec8a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f7ff ff4f 	bl	800eb30 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec92:	6863      	ldr	r3, [r4, #4]
 800ec94:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800ec98:	2101      	movs	r1, #1
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800eca0:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eca4:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800eca6:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800eca8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800ecac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ecb0:	f01c fbf2 	bl	802b498 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800ecb4:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800ecb8:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800ecba:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800ecbe:	3101      	adds	r1, #1
 800ecc0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ecc4:	d1f9      	bne.n	800ecba <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800ecc6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ecca:	21ff      	movs	r1, #255	; 0xff
 800eccc:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800ecd0:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800ecd2:	f01c fbe1 	bl	802b498 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800ecd6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ecda:	2100      	movs	r1, #0
 800ecdc:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800ece0:	f01c fbda 	bl	802b498 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800ece4:	2280      	movs	r2, #128	; 0x80
 800ece6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800ecea:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800ecee:	f01c fbc5 	bl	802b47c <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800ecf2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800ecf4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800ecf6:	f7ff fecf 	bl	800ea98 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800ecfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800ecfc:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800ecfe:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800ed02:	b1b3      	cbz	r3, 800ed32 <jinit_master_decompress+0xc6>
 800ed04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ed06:	b1a2      	cbz	r2, 800ed32 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800ed08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d166      	bne.n	800eddc <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800ed0e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed10:	2b03      	cmp	r3, #3
 800ed12:	f04f 0301 	mov.w	r3, #1
 800ed16:	d068      	beq.n	800edea <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800ed18:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800ed1a:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800ed1c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800ed20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800ed24:	4620      	mov	r0, r4
 800ed26:	f006 fef1 	bl	8015b0c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800ed2a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ed2e:	616b      	str	r3, [r5, #20]
 800ed30:	e062      	b.n	800edf8 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800ed32:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800ed36:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1e5      	bne.n	800ed08 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800ed3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed3e:	b94b      	cbnz	r3, 800ed54 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800ed40:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800ed42:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d069      	beq.n	800ee1c <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800ed48:	f000 fa1c 	bl	800f184 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800ed4c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 fb98 	bl	800f484 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800ed54:	4620      	mov	r0, r4
 800ed56:	f7fc fda7 	bl	800b8a8 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800ed5a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800ed5e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d061      	beq.n	800ee28 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800ed64:	f7fb fc16 	bl	800a594 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800ed68:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ed6c:	691b      	ldr	r3, [r3, #16]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d15d      	bne.n	800ee2e <jinit_master_decompress+0x1c2>
 800ed72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ed74:	3900      	subs	r1, #0
 800ed76:	bf18      	it	ne
 800ed78:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f7fc f8fc 	bl	800af78 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800ed80:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ed82:	b911      	cbnz	r1, 800ed8a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7fe fca3 	bl	800d6d0 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800ed8a:	6863      	ldr	r3, [r4, #4]
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800ed92:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ed96:	4620      	mov	r0, r4
 800ed98:	689b      	ldr	r3, [r3, #8]
 800ed9a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800ed9c:	68a2      	ldr	r2, [r4, #8]
 800ed9e:	b1e2      	cbz	r2, 800edda <jinit_master_decompress+0x16e>
 800eda0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eda2:	b9d3      	cbnz	r3, 800edda <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800eda4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800eda8:	691b      	ldr	r3, [r3, #16]
 800edaa:	b1b3      	cbz	r3, 800edda <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800edac:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800edb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800edb2:	b111      	cbz	r1, 800edba <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800edb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800edb8:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800edba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800edbe:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800edc0:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 800edc2:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800edc4:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800edc8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800edca:	4283      	cmp	r3, r0
 800edcc:	bf14      	ite	ne
 800edce:	2303      	movne	r3, #3
 800edd0:	2302      	moveq	r3, #2
 800edd2:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800edd4:	68eb      	ldr	r3, [r5, #12]
 800edd6:	3301      	adds	r3, #1
 800edd8:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800edda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	2230      	movs	r2, #48	; 0x30
 800ede0:	4620      	mov	r0, r4
 800ede2:	615a      	str	r2, [r3, #20]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4798      	blx	r3
 800ede8:	e791      	b.n	800ed0e <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800edea:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800edee:	b17a      	cbz	r2, 800ee10 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800edf0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800edf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d195      	bne.n	800ed24 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800edf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800edfa:	b913      	cbnz	r3, 800ee02 <jinit_master_decompress+0x196>
 800edfc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d09c      	beq.n	800ed3c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800ee02:	4620      	mov	r0, r4
 800ee04:	f007 fcfe 	bl	8016804 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800ee08:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ee0c:	61ab      	str	r3, [r5, #24]
 800ee0e:	e795      	b.n	800ed3c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800ee10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ee12:	b10a      	cbz	r2, 800ee18 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800ee14:	66e3      	str	r3, [r4, #108]	; 0x6c
 800ee16:	e7ec      	b.n	800edf2 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800ee18:	6663      	str	r3, [r4, #100]	; 0x64
 800ee1a:	e783      	b.n	800ed24 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800ee1c:	f7fc fad2 	bl	800b3c4 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 fc4f 	bl	800f6c4 <jinit_upsampler>
 800ee26:	e791      	b.n	800ed4c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800ee28:	f7fd fed6 	bl	800cbd8 <jinit_huff_decoder>
 800ee2c:	e79c      	b.n	800ed68 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800ee2e:	2101      	movs	r1, #1
 800ee30:	e7a3      	b.n	800ed7a <jinit_master_decompress+0x10e>
 800ee32:	bf00      	nop
 800ee34:	0800e981 	.word	0x0800e981
 800ee38:	0800ea7f 	.word	0x0800ea7f

0800ee3c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ee3c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800ee40:	2200      	movs	r2, #0
 800ee42:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800ee44:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800ee46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ee48:	4770      	bx	lr

0800ee4a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800ee4a:	b570      	push	{r4, r5, r6, lr}
 800ee4c:	9d05      	ldr	r5, [sp, #20]
 800ee4e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800ee50:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800ee54:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800ee56:	68de      	ldr	r6, [r3, #12]
 800ee58:	9b04      	ldr	r3, [sp, #16]
 800ee5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ee5e:	6822      	ldr	r2, [r4, #0]
 800ee60:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	3301      	adds	r3, #1
 800ee66:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800ee68:	6823      	ldr	r3, [r4, #0]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	6023      	str	r3, [r4, #0]
}
 800ee6e:	bd70      	pop	{r4, r5, r6, pc}

0800ee70 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800ee70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ee74:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800ee78:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800ee7a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800ee7e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800ee80:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800ee84:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800ee86:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800ee88:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ee8a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800ee8e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ee90:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800ee92:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ee94:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800ee96:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800ee9a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ee9c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ee9e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800eea0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800eea4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800eea8:	9903      	ldr	r1, [sp, #12]
 800eeaa:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800eeac:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800eeae:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800eeb2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800eeb6:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800eeba:	9205      	str	r2, [sp, #20]
 800eebc:	9a05      	ldr	r2, [sp, #20]
 800eebe:	3306      	adds	r3, #6
 800eec0:	3102      	adds	r1, #2
 800eec2:	4295      	cmp	r5, r2
 800eec4:	d128      	bne.n	800ef18 <h2v1_merged_upsample+0xa8>
 800eec6:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800eec8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800eeca:	fb03 f30e 	mul.w	r3, r3, lr
 800eece:	07d2      	lsls	r2, r2, #31
 800eed0:	eb0c 0103 	add.w	r1, ip, r3
 800eed4:	d51d      	bpl.n	800ef12 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800eed6:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eed8:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800eeda:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eede:	782a      	ldrb	r2, [r5, #0]
 800eee0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800eee4:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800eee8:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eeea:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800eeec:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800eeee:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800eef2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800eef6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800eefa:	9a03      	ldr	r2, [sp, #12]
 800eefc:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ef00:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ef02:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800ef04:	5dbe      	ldrb	r6, [r7, r6]
 800ef06:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ef08:	5c80      	ldrb	r0, [r0, r2]
 800ef0a:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ef0c:	5ca2      	ldrb	r2, [r4, r2]
 800ef0e:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800ef12:	b007      	add	sp, #28
 800ef14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800ef18:	f819 ab01 	ldrb.w	sl, [r9], #1
 800ef1c:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ef1e:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800ef22:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ef26:	9a02      	ldr	r2, [sp, #8]
 800ef28:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800ef2c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800ef30:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ef34:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800ef36:	9f01      	ldr	r7, [sp, #4]
 800ef38:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ef3c:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ef40:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800ef44:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ef48:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800ef4a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ef4e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800ef52:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ef56:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800ef5a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800ef5e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ef62:	f817 700a 	ldrb.w	r7, [r7, sl]
 800ef66:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ef6a:	f812 200a 	ldrb.w	r2, [r2, sl]
 800ef6e:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ef72:	f816 200a 	ldrb.w	r2, [r6, sl]
 800ef76:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ef7a:	e79f      	b.n	800eebc <h2v1_merged_upsample+0x4c>

0800ef7c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800ef7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ef80:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800ef84:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ef86:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800ef8a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800ef8c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800ef90:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800ef92:	696e      	ldr	r6, [r5, #20]
 800ef94:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ef96:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800ef98:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ef9a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800ef9c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800efa0:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800efa4:	686d      	ldr	r5, [r5, #4]
 800efa6:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800efa8:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800efaa:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800efac:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800efae:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800efb0:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800efb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800efb8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800efba:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800efbc:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800efca:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800efcc:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800efce:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800efd0:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800efd2:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800efd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efd6:	3206      	adds	r2, #6
 800efd8:	3306      	adds	r3, #6
 800efda:	f10e 0e02 	add.w	lr, lr, #2
 800efde:	4588      	cmp	r8, r1
 800efe0:	f10c 0c02 	add.w	ip, ip, #2
 800efe4:	d13a      	bne.n	800f05c <h2v2_merged_upsample+0xe0>
 800efe6:	2306      	movs	r3, #6
 800efe8:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800efea:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800efec:	437b      	muls	r3, r7
 800efee:	07c0      	lsls	r0, r0, #31
 800eff0:	eb02 0103 	add.w	r1, r2, r3
 800eff4:	9a01      	ldr	r2, [sp, #4]
 800eff6:	441a      	add	r2, r3
 800eff8:	d52d      	bpl.n	800f056 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800effa:	9808      	ldr	r0, [sp, #32]
 800effc:	9d03      	ldr	r5, [sp, #12]
 800effe:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f000:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800f004:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f008:	9d05      	ldr	r5, [sp, #20]
 800f00a:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800f00e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f012:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f016:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800f018:	9804      	ldr	r0, [sp, #16]
 800f01a:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f01e:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800f022:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f024:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800f026:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f02a:	f815 e000 	ldrb.w	lr, [r5, r0]
 800f02e:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f032:	f81c e000 	ldrb.w	lr, [ip, r0]
 800f036:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f03a:	5c21      	ldrb	r1, [r4, r0]
 800f03c:	9800      	ldr	r0, [sp, #0]
 800f03e:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800f040:	9907      	ldr	r1, [sp, #28]
 800f042:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f046:	5c68      	ldrb	r0, [r5, r1]
 800f048:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f04a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800f04e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f050:	5c62      	ldrb	r2, [r4, r1]
 800f052:	9901      	ldr	r1, [sp, #4]
 800f054:	54ca      	strb	r2, [r1, r3]
  }
}
 800f056:	b00b      	add	sp, #44	; 0x2c
 800f058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f05c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f05e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800f062:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f066:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800f06a:	9102      	str	r1, [sp, #8]
 800f06c:	9903      	ldr	r1, [sp, #12]
 800f06e:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f072:	9905      	ldr	r1, [sp, #20]
 800f074:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800f078:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f07c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800f07e:	9e04      	ldr	r6, [sp, #16]
 800f080:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f084:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f088:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f08c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f090:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f092:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f096:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f09a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f09e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f0a2:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800f0a6:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f0aa:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f0ae:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f0b2:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f0b6:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f0ba:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f0be:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800f0c2:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f0c6:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f0ca:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f0ce:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f0d2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f0d6:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f0da:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800f0de:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f0e2:	f816 6009 	ldrb.w	r6, [r6, r9]
 800f0e6:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f0ea:	f811 1009 	ldrb.w	r1, [r1, r9]
 800f0ee:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f0f2:	f815 1009 	ldrb.w	r1, [r5, r9]
 800f0f6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f0fa:	e76b      	b.n	800efd4 <h2v2_merged_upsample+0x58>

0800f0fc <merged_2v_upsample>:
{
 800f0fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f100:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f104:	4616      	mov	r6, r2
 800f106:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800f10a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f10c:	f8d8 3000 	ldr.w	r3, [r8]
 800f110:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800f114:	b1dd      	cbz	r5, 800f14e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f118:	2501      	movs	r5, #1
 800f11a:	f104 0020 	add.w	r0, r4, #32
 800f11e:	9301      	str	r3, [sp, #4]
 800f120:	2300      	movs	r3, #0
 800f122:	9500      	str	r5, [sp, #0]
 800f124:	4619      	mov	r1, r3
 800f126:	f007 fbe6 	bl	80168f6 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800f12a:	2300      	movs	r3, #0
 800f12c:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800f12e:	f8d8 3000 	ldr.w	r3, [r8]
 800f132:	442b      	add	r3, r5
 800f134:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800f138:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f13a:	1b5b      	subs	r3, r3, r5
 800f13c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800f13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f140:	b913      	cbnz	r3, 800f148 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800f142:	6833      	ldr	r3, [r6, #0]
 800f144:	3301      	adds	r3, #1
 800f146:	6033      	str	r3, [r6, #0]
}
 800f148:	b004      	add	sp, #16
 800f14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800f14e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800f150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800f152:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800f154:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f158:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800f15c:	bf28      	it	cs
 800f15e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f160:	9302      	str	r3, [sp, #8]
 800f162:	42bd      	cmp	r5, r7
 800f164:	bf28      	it	cs
 800f166:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f168:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800f16a:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800f16c:	bf17      	itett	ne
 800f16e:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f170:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800f172:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f174:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f176:	bf0c      	ite	eq
 800f178:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f17a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f17c:	ab02      	add	r3, sp, #8
 800f17e:	6832      	ldr	r2, [r6, #0]
 800f180:	47b8      	blx	r7
 800f182:	e7d4      	b.n	800f12e <merged_2v_upsample+0x32>

0800f184 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f184:	6843      	ldr	r3, [r0, #4]
 800f186:	2230      	movs	r2, #48	; 0x30
 800f188:	2101      	movs	r1, #1
 800f18a:	681b      	ldr	r3, [r3, #0]
{
 800f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f190:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f192:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f194:	4b37      	ldr	r3, [pc, #220]	; (800f274 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f196:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f198:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f19a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f19c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f1a0:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800f1a2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f1a6:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800f1a8:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800f1aa:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f1ac:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800f1ae:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800f1b0:	d15a      	bne.n	800f268 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800f1b2:	4b31      	ldr	r3, [pc, #196]	; (800f278 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1b4:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800f1b6:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800f1b8:	4b30      	ldr	r3, [pc, #192]	; (800f27c <jinit_merged_upsampler+0xf8>)
 800f1ba:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1bc:	4620      	mov	r0, r4
 800f1be:	6863      	ldr	r3, [r4, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800f1c4:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1c6:	6863      	ldr	r3, [r4, #4]
 800f1c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1cc:	2101      	movs	r1, #1
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f1d2:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1d6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1d8:	6863      	ldr	r3, [r4, #4]
 800f1da:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800f1de:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1e8:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800f1ea:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2101      	movs	r1, #1
 800f1f4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f1f6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800f294 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1fa:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f1fc:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800f1fe:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f200:	2101      	movs	r1, #1
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4620      	mov	r0, r4
 800f206:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f20a:	4f1d      	ldr	r7, [pc, #116]	; (800f280 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f20c:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f20e:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800f210:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f212:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f214:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f298 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f218:	491a      	ldr	r1, [pc, #104]	; (800f284 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800f21a:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f21e:	4d1a      	ldr	r5, [pc, #104]	; (800f288 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f220:	fb08 e203 	mla	r2, r8, r3, lr
 800f224:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800f226:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f22a:	fb07 f203 	mul.w	r2, r7, r3
 800f22e:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800f232:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800f236:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800f238:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f23c:	fb05 f203 	mul.w	r2, r5, r3
 800f240:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800f244:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800f248:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f24c:	fb01 f203 	mul.w	r2, r1, r3
 800f250:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800f254:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800f258:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f25c:	3301      	adds	r3, #1
 800f25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f262:	d1dd      	bne.n	800f220 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800f264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800f268:	4a08      	ldr	r2, [pc, #32]	; (800f28c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800f26a:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800f26c:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800f26e:	4a08      	ldr	r2, [pc, #32]	; (800f290 <jinit_merged_upsampler+0x10c>)
 800f270:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800f272:	e7a8      	b.n	800f1c6 <jinit_merged_upsampler+0x42>
 800f274:	0800ee3d 	.word	0x0800ee3d
 800f278:	0800f0fd 	.word	0x0800f0fd
 800f27c:	0800ef7d 	.word	0x0800ef7d
 800f280:	0001c5a2 	.word	0x0001c5a2
 800f284:	ffffa7e6 	.word	0xffffa7e6
 800f288:	ffff492e 	.word	0xffff492e
 800f28c:	0800ee4b 	.word	0x0800ee4b
 800f290:	0800ee71 	.word	0x0800ee71
 800f294:	000166e9 	.word	0x000166e9
 800f298:	ff4d0b80 	.word	0xff4d0b80

0800f29c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800f29c:	2902      	cmp	r1, #2
{
 800f29e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f2a0:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800f2a4:	d023      	beq.n	800f2ee <start_pass_dpost+0x52>
 800f2a6:	2903      	cmp	r1, #3
 800f2a8:	d019      	beq.n	800f2de <start_pass_dpost+0x42>
 800f2aa:	2900      	cmp	r1, #0
 800f2ac:	d128      	bne.n	800f300 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800f2ae:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f2b0:	b182      	cbz	r2, 800f2d4 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800f2b2:	4a16      	ldr	r2, [pc, #88]	; (800f30c <start_pass_dpost+0x70>)
 800f2b4:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800f2b6:	68e2      	ldr	r2, [r4, #12]
 800f2b8:	b93a      	cbnz	r2, 800f2ca <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800f2ba:	6843      	ldr	r3, [r0, #4]
 800f2bc:	2101      	movs	r1, #1
 800f2be:	9100      	str	r1, [sp, #0]
 800f2c0:	69dd      	ldr	r5, [r3, #28]
 800f2c2:	68a1      	ldr	r1, [r4, #8]
 800f2c4:	6923      	ldr	r3, [r4, #16]
 800f2c6:	47a8      	blx	r5
 800f2c8:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800f2d0:	b003      	add	sp, #12
 800f2d2:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800f2d4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800f2d8:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800f2da:	6063      	str	r3, [r4, #4]
    break;
 800f2dc:	e7f5      	b.n	800f2ca <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800f2de:	68a2      	ldr	r2, [r4, #8]
 800f2e0:	b91a      	cbnz	r2, 800f2ea <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f2e2:	6803      	ldr	r3, [r0, #0]
 800f2e4:	6159      	str	r1, [r3, #20]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800f2ea:	4b09      	ldr	r3, [pc, #36]	; (800f310 <start_pass_dpost+0x74>)
 800f2ec:	e7f5      	b.n	800f2da <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800f2ee:	68a2      	ldr	r2, [r4, #8]
 800f2f0:	b922      	cbnz	r2, 800f2fc <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f2f2:	6803      	ldr	r3, [r0, #0]
 800f2f4:	2203      	movs	r2, #3
 800f2f6:	615a      	str	r2, [r3, #20]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800f2fc:	4b05      	ldr	r3, [pc, #20]	; (800f314 <start_pass_dpost+0x78>)
 800f2fe:	e7ec      	b.n	800f2da <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f300:	6803      	ldr	r3, [r0, #0]
 800f302:	2203      	movs	r2, #3
 800f304:	615a      	str	r2, [r3, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4798      	blx	r3
    break;
 800f30a:	e7de      	b.n	800f2ca <start_pass_dpost+0x2e>
 800f30c:	0800f319 	.word	0x0800f319
 800f310:	0800f379 	.word	0x0800f379
 800f314:	0800f407 	.word	0x0800f407

0800f318 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f31c:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f31e:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800f322:	4604      	mov	r4, r0
 800f324:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800f326:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f328:	682f      	ldr	r7, [r5, #0]
 800f32a:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800f32c:	2700      	movs	r7, #0
 800f32e:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800f330:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800f334:	9705      	str	r7, [sp, #20]
 800f336:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f33a:	42be      	cmp	r6, r7
 800f33c:	bf94      	ite	ls
 800f33e:	9602      	strls	r6, [sp, #8]
 800f340:	9702      	strhi	r7, [sp, #8]
 800f342:	ae07      	add	r6, sp, #28
 800f344:	9601      	str	r6, [sp, #4]
 800f346:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f34a:	9600      	str	r6, [sp, #0]
 800f34c:	9e05      	ldr	r6, [sp, #20]
 800f34e:	6876      	ldr	r6, [r6, #4]
 800f350:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800f352:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f354:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f358:	4620      	mov	r0, r4
 800f35a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f35c:	685e      	ldr	r6, [r3, #4]
 800f35e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f362:	9b07      	ldr	r3, [sp, #28]
 800f364:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f368:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800f36a:	682b      	ldr	r3, [r5, #0]
 800f36c:	9a07      	ldr	r2, [sp, #28]
 800f36e:	4413      	add	r3, r2
 800f370:	602b      	str	r3, [r5, #0]
}
 800f372:	b008      	add	sp, #32
 800f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f378 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f37c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f380:	b085      	sub	sp, #20
 800f382:	469a      	mov	sl, r3
 800f384:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f386:	69a3      	ldr	r3, [r4, #24]
{
 800f388:	460e      	mov	r6, r1
 800f38a:	4691      	mov	r9, r2
 800f38c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800f390:	b943      	cbnz	r3, 800f3a4 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f392:	6843      	ldr	r3, [r0, #4]
 800f394:	2201      	movs	r2, #1
 800f396:	9200      	str	r2, [sp, #0]
 800f398:	69df      	ldr	r7, [r3, #28]
 800f39a:	68a1      	ldr	r1, [r4, #8]
 800f39c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f3a0:	47b8      	blx	r7
 800f3a2:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800f3a4:	6922      	ldr	r2, [r4, #16]
 800f3a6:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800f3a8:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	9202      	str	r2, [sp, #8]
 800f3ae:	f104 0218 	add.w	r2, r4, #24
 800f3b2:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800f3b6:	9201      	str	r2, [sp, #4]
 800f3b8:	68e2      	ldr	r2, [r4, #12]
 800f3ba:	9200      	str	r2, [sp, #0]
 800f3bc:	464a      	mov	r2, r9
 800f3be:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f3c2:	4653      	mov	r3, sl
 800f3c4:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800f3c6:	69a6      	ldr	r6, [r4, #24]
 800f3c8:	42be      	cmp	r6, r7
 800f3ca:	d910      	bls.n	800f3ee <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f3cc:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800f3d0:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f3d2:	68e1      	ldr	r1, [r4, #12]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f3da:	4628      	mov	r0, r5
 800f3dc:	4633      	mov	r3, r6
 800f3de:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800f3e2:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800f3e4:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e8:	4433      	add	r3, r6
 800f3ea:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800f3ee:	6922      	ldr	r2, [r4, #16]
 800f3f0:	69a3      	ldr	r3, [r4, #24]
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d304      	bcc.n	800f400 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800f3f6:	6963      	ldr	r3, [r4, #20]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	61a3      	str	r3, [r4, #24]
  }
}
 800f400:	b005      	add	sp, #20
 800f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f406 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f406:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f40a:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f40e:	4607      	mov	r7, r0
 800f410:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f412:	69a3      	ldr	r3, [r4, #24]
 800f414:	b93b      	cbnz	r3, 800f426 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f416:	6842      	ldr	r2, [r0, #4]
 800f418:	9300      	str	r3, [sp, #0]
 800f41a:	69d5      	ldr	r5, [r2, #28]
 800f41c:	68a1      	ldr	r1, [r4, #8]
 800f41e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f422:	47a8      	blx	r5
 800f424:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800f426:	6963      	ldr	r3, [r4, #20]
 800f428:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f42a:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800f42c:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f42e:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f430:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f432:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f434:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f436:	429d      	cmp	r5, r3
 800f438:	bf28      	it	cs
 800f43a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f43c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f43e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f440:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f444:	429d      	cmp	r5, r3
 800f446:	bf28      	it	cs
 800f448:	461d      	movcs	r5, r3
 800f44a:	68e3      	ldr	r3, [r4, #12]
 800f44c:	9303      	str	r3, [sp, #12]
 800f44e:	9803      	ldr	r0, [sp, #12]
 800f450:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f454:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f458:	4638      	mov	r0, r7
 800f45a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f45e:	462b      	mov	r3, r5
 800f460:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800f462:	6833      	ldr	r3, [r6, #0]
 800f464:	442b      	add	r3, r5
 800f466:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800f468:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f46a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800f46c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800f46e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800f470:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f472:	d304      	bcc.n	800f47e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800f474:	6963      	ldr	r3, [r4, #20]
 800f476:	4413      	add	r3, r2
 800f478:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f47a:	2300      	movs	r3, #0
 800f47c:	61a3      	str	r3, [r4, #24]
  }
}
 800f47e:	b004      	add	sp, #16
 800f480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f484 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f484:	6843      	ldr	r3, [r0, #4]
 800f486:	221c      	movs	r2, #28
{
 800f488:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f48a:	681b      	ldr	r3, [r3, #0]
{
 800f48c:	b085      	sub	sp, #20
 800f48e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f490:	2101      	movs	r1, #1
{
 800f492:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f494:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800f496:	4b15      	ldr	r3, [pc, #84]	; (800f4ec <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800f498:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800f49a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f49e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800f4a0:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800f4a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800f4a4:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800f4a8:	b1bb      	cbz	r3, 800f4da <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f4aa:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f4ae:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f4b0:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f4b2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f4b4:	6861      	ldr	r1, [r4, #4]
 800f4b6:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800f4b8:	b18f      	cbz	r7, 800f4de <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f4ba:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f4c0:	9203      	str	r2, [sp, #12]
 800f4c2:	f007 fa10 	bl	80168e6 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f4c6:	692b      	ldr	r3, [r5, #16]
 800f4c8:	2101      	movs	r1, #1
 800f4ca:	9a03      	ldr	r2, [sp, #12]
 800f4cc:	e9cd 0300 	strd	r0, r3, [sp]
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	4632      	mov	r2, r6
 800f4d6:	47b8      	blx	r7
 800f4d8:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800f4da:	b005      	add	sp, #20
 800f4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800f4de:	688e      	ldr	r6, [r1, #8]
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	2101      	movs	r1, #1
 800f4e4:	47b0      	blx	r6
 800f4e6:	60e8      	str	r0, [r5, #12]
}
 800f4e8:	e7f7      	b.n	800f4da <jinit_d_post_controller+0x56>
 800f4ea:	bf00      	nop
 800f4ec:	0800f29d 	.word	0x0800f29d

0800f4f0 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f4f0:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f4f4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f4f8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f4fa:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f4fc:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f4fe:	4770      	bx	lr

0800f500 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800f500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f504:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f508:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f50a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800f50e:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f510:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800f512:	4683      	mov	fp, r0
 800f514:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f516:	429a      	cmp	r2, r3
 800f518:	db10      	blt.n	800f53c <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f51a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f51e:	2600      	movs	r6, #0
 800f520:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800f524:	9303      	str	r3, [sp, #12]
 800f526:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f52a:	9a03      	ldr	r2, [sp, #12]
 800f52c:	fb0a 2106 	mla	r1, sl, r6, r2
 800f530:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800f534:	42b2      	cmp	r2, r6
 800f536:	dc32      	bgt.n	800f59e <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800f53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f53e:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f540:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f542:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f54a:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800f54e:	1ace      	subs	r6, r1, r3
 800f550:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f552:	428e      	cmp	r6, r1
 800f554:	bf28      	it	cs
 800f556:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f558:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800f55c:	4566      	cmp	r6, ip
 800f55e:	bf28      	it	cs
 800f560:	4666      	movcs	r6, ip
 800f562:	9600      	str	r6, [sp, #0]
 800f564:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f568:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f56a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f56e:	f104 010c 	add.w	r1, r4, #12
 800f572:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800f574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4433      	add	r3, r6
 800f57c:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800f57e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f580:	1b9b      	subs	r3, r3, r6
 800f582:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800f584:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f586:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800f588:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800f58c:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800f58e:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800f590:	bfa2      	ittt	ge
 800f592:	682b      	ldrge	r3, [r5, #0]
 800f594:	3301      	addge	r3, #1
 800f596:	602b      	strge	r3, [r5, #0]
}
 800f598:	b005      	add	sp, #20
 800f59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f59e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f5a0:	f103 0904 	add.w	r9, r3, #4
 800f5a4:	682a      	ldr	r2, [r5, #0]
 800f5a6:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800f5a8:	f853 0928 	ldr.w	r0, [r3], #-40
 800f5ac:	4607      	mov	r7, r0
 800f5ae:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800f5b2:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800f5b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f5b8:	4658      	mov	r0, fp
 800f5ba:	47b8      	blx	r7
	 ci++, compptr++) {
 800f5bc:	464b      	mov	r3, r9
 800f5be:	e7b4      	b.n	800f52a <sep_upsample+0x2a>

0800f5c0 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800f5c0:	601a      	str	r2, [r3, #0]
}
 800f5c2:	4770      	bx	lr

0800f5c4 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	601a      	str	r2, [r3, #0]
}
 800f5c8:	4770      	bx	lr

0800f5ca <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800f5cc:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800f5d4:	4299      	cmp	r1, r3
 800f5d6:	dc00      	bgt.n	800f5da <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800f5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800f5da:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f5de:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800f5e0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f5e4:	440c      	add	r4, r1
    while (outptr < outend) {
 800f5e6:	42a1      	cmp	r1, r4
 800f5e8:	d301      	bcc.n	800f5ee <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	e7f0      	b.n	800f5d0 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f5ee:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800f5f2:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800f5f6:	f801 6c01 	strb.w	r6, [r1, #-1]
 800f5fa:	e7f4      	b.n	800f5e6 <h2v1_upsample+0x1c>

0800f5fc <int_upsample>:
{
 800f5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f600:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800f602:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f604:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800f608:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800f60a:	684b      	ldr	r3, [r1, #4]
 800f60c:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800f60e:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800f610:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800f612:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800f616:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f61a:	f108 33ff 	add.w	r3, r8, #4294967295
 800f61e:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800f620:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f624:	42a3      	cmp	r3, r4
 800f626:	dc02      	bgt.n	800f62e <int_upsample+0x32>
}
 800f628:	b005      	add	sp, #20
 800f62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800f62e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f632:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f634:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800f638:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800f63c:	454b      	cmp	r3, r9
 800f63e:	d30e      	bcc.n	800f65e <int_upsample+0x62>
    if (v_expand > 1) {
 800f640:	f1b8 0f01 	cmp.w	r8, #1
 800f644:	dd09      	ble.n	800f65a <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f646:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f648:	463a      	mov	r2, r7
 800f64a:	4621      	mov	r1, r4
 800f64c:	4638      	mov	r0, r7
 800f64e:	9301      	str	r3, [sp, #4]
 800f650:	9b03      	ldr	r3, [sp, #12]
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	1c63      	adds	r3, r4, #1
 800f656:	f007 f94e 	bl	80168f6 <jcopy_sample_rows>
    outrow += v_expand;
 800f65a:	4444      	add	r4, r8
 800f65c:	e7e0      	b.n	800f620 <int_upsample+0x24>
	*outptr++ = invalue;
 800f65e:	4618      	mov	r0, r3
 800f660:	4652      	mov	r2, sl
 800f662:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800f666:	f01b ff17 	bl	802b498 <memset>
 800f66a:	4603      	mov	r3, r0
 800f66c:	4453      	add	r3, sl
 800f66e:	e7e5      	b.n	800f63c <int_upsample+0x40>

0800f670 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f670:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f674:	4605      	mov	r5, r0
 800f676:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800f678:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800f67a:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f67c:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800f680:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f684:	42a3      	cmp	r3, r4
 800f686:	dc02      	bgt.n	800f68e <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800f688:	b002      	add	sp, #8
 800f68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800f68e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f692:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f694:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800f698:	441a      	add	r2, r3
    while (outptr < outend) {
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d30a      	bcc.n	800f6b4 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f69e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f6a0:	4621      	mov	r1, r4
 800f6a2:	4632      	mov	r2, r6
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	e9cd 8300 	strd	r8, r3, [sp]
 800f6aa:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800f6ac:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f6ae:	f007 f922 	bl	80168f6 <jcopy_sample_rows>
    outrow += 2;
 800f6b2:	e7e5      	b.n	800f680 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f6b4:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800f6b8:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800f6bc:	f803 0c01 	strb.w	r0, [r3, #-1]
 800f6c0:	e7eb      	b.n	800f69a <h2v2_upsample+0x2a>
	...

0800f6c4 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800f6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f6c8:	6843      	ldr	r3, [r0, #4]
 800f6ca:	22a0      	movs	r2, #160	; 0xa0
 800f6cc:	2101      	movs	r1, #1
{
 800f6ce:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800f6d4:	4b3f      	ldr	r3, [pc, #252]	; (800f7d4 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f6d6:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f6da:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800f6dc:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800f6de:	4b3e      	ldr	r3, [pc, #248]	; (800f7d8 <jinit_upsampler+0x114>)
 800f6e0:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800f6e6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f6ea:	b12b      	cbz	r3, 800f6f8 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800f6ec:	6823      	ldr	r3, [r4, #0]
 800f6ee:	221a      	movs	r2, #26
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	615a      	str	r2, [r3, #20]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f6f8:	f105 060c 	add.w	r6, r5, #12
 800f6fc:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800f700:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800f704:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800f708:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800f7e8 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f70c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800f710:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f7ec <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f714:	3574      	adds	r5, #116	; 0x74
 800f716:	eb05 0308 	add.w	r3, r5, r8
 800f71a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f71c:	429a      	cmp	r2, r3
 800f71e:	dc01      	bgt.n	800f724 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800f720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f726:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f728:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f72c:	4343      	muls	r3, r0
 800f72e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f732:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800f736:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f73a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800f73e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800f742:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800f744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f746:	b932      	cbnz	r2, 800f756 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800f748:	4b24      	ldr	r3, [pc, #144]	; (800f7dc <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800f74a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800f74c:	3758      	adds	r7, #88	; 0x58
 800f74e:	3604      	adds	r6, #4
 800f750:	f108 0801 	add.w	r8, r8, #1
 800f754:	e7df      	b.n	800f716 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f756:	fb0c f20e 	mul.w	r2, ip, lr
 800f75a:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800f75e:	4559      	cmp	r1, fp
 800f760:	d103      	bne.n	800f76a <jinit_upsampler+0xa6>
 800f762:	4283      	cmp	r3, r0
 800f764:	d101      	bne.n	800f76a <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800f766:	4b1e      	ldr	r3, [pc, #120]	; (800f7e0 <jinit_upsampler+0x11c>)
 800f768:	e7ef      	b.n	800f74a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800f76a:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800f76e:	d119      	bne.n	800f7a4 <jinit_upsampler+0xe0>
 800f770:	4283      	cmp	r3, r0
 800f772:	d111      	bne.n	800f798 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800f774:	4b1b      	ldr	r3, [pc, #108]	; (800f7e4 <jinit_upsampler+0x120>)
 800f776:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f778:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f77a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800f77e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f780:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f784:	f007 f8af 	bl	80168e6 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f788:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f78c:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f78e:	2101      	movs	r1, #1
 800f790:	4620      	mov	r0, r4
 800f792:	47d8      	blx	fp
 800f794:	6030      	str	r0, [r6, #0]
 800f796:	e7d9      	b.n	800f74c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800f798:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800f79c:	d102      	bne.n	800f7a4 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800f79e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800f7a2:	e7e9      	b.n	800f778 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800f7a4:	fb9b f2f1 	sdiv	r2, fp, r1
 800f7a8:	fb01 b112 	mls	r1, r1, r2, fp
 800f7ac:	b959      	cbnz	r1, 800f7c6 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800f7ae:	fb90 f1f3 	sdiv	r1, r0, r3
 800f7b2:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800f7b6:	b933      	cbnz	r3, 800f7c6 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800f7b8:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800f7bc:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800f7c0:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800f7c4:	e7d8      	b.n	800f778 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800f7c6:	6823      	ldr	r3, [r4, #0]
 800f7c8:	2227      	movs	r2, #39	; 0x27
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	615a      	str	r2, [r3, #20]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4798      	blx	r3
    if (need_buffer) {
 800f7d2:	e7d1      	b.n	800f778 <jinit_upsampler+0xb4>
 800f7d4:	0800f4f1 	.word	0x0800f4f1
 800f7d8:	0800f501 	.word	0x0800f501
 800f7dc:	0800f5c5 	.word	0x0800f5c5
 800f7e0:	0800f5c1 	.word	0x0800f5c1
 800f7e4:	0800f5cb 	.word	0x0800f5cb
 800f7e8:	0800f5fd 	.word	0x0800f5fd
 800f7ec:	0800f671 	.word	0x0800f671

0800f7f0 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800f7f0:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800f7f2:	6803      	ldr	r3, [r0, #0]
{
 800f7f4:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	4669      	mov	r1, sp
 800f7fa:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800f7fc:	b033      	add	sp, #204	; 0xcc
 800f7fe:	f85d fb04 	ldr.w	pc, [sp], #4

0800f802 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800f802:	2900      	cmp	r1, #0
{
 800f804:	4603      	mov	r3, r0
 800f806:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800f808:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800f80a:	da0b      	bge.n	800f824 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800f80c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800f80e:	b112      	cbz	r2, 800f816 <emit_message+0x14>
 800f810:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800f812:	2a02      	cmp	r2, #2
 800f814:	dd02      	ble.n	800f81c <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800f816:	68a2      	ldr	r2, [r4, #8]
 800f818:	4618      	mov	r0, r3
 800f81a:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800f81c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f81e:	3301      	adds	r3, #1
 800f820:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800f822:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800f824:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f826:	428b      	cmp	r3, r1
 800f828:	dbfb      	blt.n	800f822 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800f82a:	68a3      	ldr	r3, [r4, #8]
}
 800f82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800f830:	4718      	bx	r3

0800f832 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800f832:	6803      	ldr	r3, [r0, #0]
 800f834:	2200      	movs	r2, #0
 800f836:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800f838:	615a      	str	r2, [r3, #20]
}
 800f83a:	4770      	bx	lr

0800f83c <format_message>:
{
 800f83c:	4603      	mov	r3, r0
 800f83e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800f840:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800f842:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f844:	2b00      	cmp	r3, #0
{
 800f846:	b530      	push	{r4, r5, lr}
 800f848:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f84a:	dd1f      	ble.n	800f88c <format_message+0x50>
 800f84c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800f84e:	4299      	cmp	r1, r3
 800f850:	db1c      	blt.n	800f88c <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800f852:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f854:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800f858:	b911      	cbnz	r1, 800f860 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800f85a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800f85c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f85e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800f860:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800f862:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f866:	b9fc      	cbnz	r4, 800f8a8 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800f868:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f86a:	9305      	str	r3, [sp, #20]
 800f86c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f86e:	9304      	str	r3, [sp, #16]
 800f870:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f872:	9303      	str	r3, [sp, #12]
 800f874:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f876:	9302      	str	r3, [sp, #8]
 800f878:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f87a:	9301      	str	r3, [sp, #4]
 800f87c:	6a13      	ldr	r3, [r2, #32]
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800f884:	f01c fa32 	bl	802bcec <siprintf>
}
 800f888:	b007      	add	sp, #28
 800f88a:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800f88c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800f88e:	2c00      	cmp	r4, #0
 800f890:	d0e3      	beq.n	800f85a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f892:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800f894:	4299      	cmp	r1, r3
 800f896:	dce0      	bgt.n	800f85a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f898:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800f89c:	429d      	cmp	r5, r3
 800f89e:	dbdc      	blt.n	800f85a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800f8a0:	1a59      	subs	r1, r3, r1
 800f8a2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800f8a6:	e7d7      	b.n	800f858 <format_message+0x1c>
    if (ch == '%') {
 800f8a8:	2c25      	cmp	r4, #37	; 0x25
 800f8aa:	d1da      	bne.n	800f862 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	2b73      	cmp	r3, #115	; 0x73
 800f8b0:	d1da      	bne.n	800f868 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f8b2:	3218      	adds	r2, #24
}
 800f8b4:	b007      	add	sp, #28
 800f8b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f8ba:	f01c ba17 	b.w	802bcec <siprintf>

0800f8be <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800f8be:	6803      	ldr	r3, [r0, #0]
{
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800f8c8:	4620      	mov	r0, r4
}
 800f8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800f8ce:	f7f9 bf03 	b.w	80096d8 <jpeg_destroy>
	...

0800f8d4 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800f8d4:	4a0a      	ldr	r2, [pc, #40]	; (800f900 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800f8d6:	490b      	ldr	r1, [pc, #44]	; (800f904 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800f8d8:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800f8da:	4a0b      	ldr	r2, [pc, #44]	; (800f908 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800f8dc:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800f8de:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800f8e0:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800f8e2:	4a0a      	ldr	r2, [pc, #40]	; (800f90c <jpeg_std_error+0x38>)
 800f8e4:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800f8e6:	4a0a      	ldr	r2, [pc, #40]	; (800f910 <jpeg_std_error+0x3c>)
 800f8e8:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800f8ea:	4a0a      	ldr	r2, [pc, #40]	; (800f914 <jpeg_std_error+0x40>)
 800f8ec:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800f8ee:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800f8f0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800f8f4:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800f8f6:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800f8fa:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800f8fe:	4770      	bx	lr
 800f900:	0800f8bf 	.word	0x0800f8bf
 800f904:	0803045c 	.word	0x0803045c
 800f908:	0800f803 	.word	0x0800f803
 800f90c:	0800f7f1 	.word	0x0800f7f1
 800f910:	0800f83d 	.word	0x0800f83d
 800f914:	0800f833 	.word	0x0800f833

0800f918 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800f91c:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800f920:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800f922:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f926:	3a02      	subs	r2, #2
 800f928:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800f92c:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f92e:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800fc24 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f932:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800fc28 <jpeg_idct_float+0x310>
 800f936:	eddf 4abd 	vldr	s9, [pc, #756]	; 800fc2c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f93a:	eddf 3abd 	vldr	s7, [pc, #756]	; 800fc30 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f93e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800f942:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f944:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f948:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800f94c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f950:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800f954:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800f958:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f95c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800f960:	ecbc 7a01 	vldmia	ip!, {s14}
 800f964:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f968:	ea4e 0b09 	orr.w	fp, lr, r9
 800f96c:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f974:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f978:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f97c:	ea41 0b0b 	orr.w	fp, r1, fp
 800f980:	ea45 0b0b 	orr.w	fp, r5, fp
 800f984:	ea50 0b0b 	orrs.w	fp, r0, fp
 800f988:	f040 80c0 	bne.w	800fb0c <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 800f98c:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f990:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f994:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f998:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f99c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f9a0:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f9a4:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f9a8:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f9ac:	45e2      	cmp	sl, ip
 800f9ae:	d1c6      	bne.n	800f93e <jpeg_idct_float+0x26>
 800f9b0:	1f1c      	subs	r4, r3, #4
 800f9b2:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800f9b6:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f9b8:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800fc34 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f9bc:	eddf 4a99 	vldr	s9, [pc, #612]	; 800fc24 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f9c0:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800fc28 <jpeg_idct_float+0x310>
 800f9c4:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800fc2c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f9c8:	eddf 3a99 	vldr	s7, [pc, #612]	; 800fc30 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f9cc:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f9d0:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 800f9d2:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f9d6:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800f9da:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 800f9de:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800f9e2:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800f9e6:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 800f9ea:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800f9ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800f9f0:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800f9f4:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f9f6:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800f9f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f9fc:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f9fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fa02:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 800fa06:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800fa0a:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800fa0e:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fa12:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800fa16:	ed52 7a03 	vldr	s15, [r2, #-12]
 800fa1a:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800fa1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800fa22:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800fa26:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 800fa2a:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 800fa2e:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800fa32:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800fa36:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800fa3a:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fa3e:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fa42:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fa46:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fa4a:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fa4e:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800fa52:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800fa56:	eef0 1a67 	vmov.f32	s3, s15
 800fa5a:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fa5e:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fa62:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fa66:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fa6a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 800fa6e:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fa72:	ee12 3a10 	vmov	r3, s4
 800fa76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa7a:	5cf3      	ldrb	r3, [r6, r3]
 800fa7c:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fa7e:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fa82:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fa86:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fa8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fa8e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fa92:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fa94:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fa98:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fa9a:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fa9e:	ee16 3a10 	vmov	r3, s12
 800faa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800faa6:	5cf3      	ldrb	r3, [r6, r3]
 800faa8:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800faaa:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800faae:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fab6:	5cf3      	ldrb	r3, [r6, r3]
 800fab8:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800faba:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fabe:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800faca:	5cf3      	ldrb	r3, [r6, r3]
 800facc:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800face:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fad2:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fad6:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fada:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fae2:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fae4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fae8:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800faea:	ee17 3a90 	vmov	r3, s15
 800faee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800faf2:	5cf3      	ldrb	r3, [r6, r3]
 800faf4:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800faf6:	ee17 3a10 	vmov	r3, s14
 800fafa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fafe:	5cf3      	ldrb	r3, [r6, r3]
 800fb00:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fb02:	f47f af63 	bne.w	800f9cc <jpeg_idct_float+0xb4>
  }
}
 800fb06:	b041      	add	sp, #260	; 0x104
 800fb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fb0c:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fb10:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fb14:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fb18:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fb1c:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fb20:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fb24:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fb28:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fb2c:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fb30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fb34:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fb38:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fb3c:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fb40:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800fb44:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fb48:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fb4c:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fb50:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fb54:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fb58:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800fb5c:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800fb60:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fb64:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fb68:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800fb6c:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800fb70:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fb74:	ee07 ea90 	vmov	s15, lr
 800fb78:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fb7c:	ee07 8a90 	vmov	s15, r8
 800fb80:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fb84:	ee07 1a90 	vmov	s15, r1
 800fb88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb8c:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fb90:	ee07 0a10 	vmov	s14, r0
 800fb94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb98:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fb9c:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800fba0:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fba4:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800fba8:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800fbac:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800fbb0:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fbb4:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fbb8:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800fbbc:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fbc0:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fbc4:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800fbc8:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fbcc:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fbd0:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800fbd4:	eeb0 6a67 	vmov.f32	s12, s15
 800fbd8:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fbdc:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800fbe0:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fbe4:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800fbe8:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800fbec:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800fbf0:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800fbf4:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800fbf8:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800fbfc:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800fc00:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800fc04:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800fc08:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fc0c:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fc10:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800fc14:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fc18:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fc1c:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800fc20:	e6c4      	b.n	800f9ac <jpeg_idct_float+0x94>
 800fc22:	bf00      	nop
 800fc24:	3fb504f3 	.word	0x3fb504f3
 800fc28:	3f8a8bd4 	.word	0x3f8a8bd4
 800fc2c:	3fec835e 	.word	0x3fec835e
 800fc30:	40273d75 	.word	0x40273d75
 800fc34:	43008000 	.word	0x43008000

0800fc38 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc3c:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800fc3e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fc40:	3a02      	subs	r2, #2
{
 800fc42:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fc44:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fc48:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fc4c:	f105 0320 	add.w	r3, r5, #32
 800fc50:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800fc52:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fc54:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800fc58:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fc5a:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 800fc5e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fc62:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800fc66:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fc6a:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fc6e:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fc72:	f855 0b04 	ldr.w	r0, [r5], #4
 800fc76:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fc7a:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fc7c:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fc7e:	ea46 000c 	orr.w	r0, r6, ip
 800fc82:	4338      	orrs	r0, r7
 800fc84:	ea4a 0000 	orr.w	r0, sl, r0
 800fc88:	4308      	orrs	r0, r1
 800fc8a:	ea4e 0000 	orr.w	r0, lr, r0
 800fc8e:	ea58 0100 	orrs.w	r1, r8, r0
 800fc92:	d146      	bne.n	800fd22 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 800fc94:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fc98:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fc9a:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fc9c:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fc9e:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fca0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fca4:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fca8:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fcac:	9903      	ldr	r1, [sp, #12]
 800fcae:	42a9      	cmp	r1, r5
 800fcb0:	d1d0      	bne.n	800fc54 <jpeg_idct_ifast+0x1c>
 800fcb2:	9b02      	ldr	r3, [sp, #8]
 800fcb4:	f1a3 0b04 	sub.w	fp, r3, #4
 800fcb8:	331c      	adds	r3, #28
 800fcba:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800fcbc:	ab04      	add	r3, sp, #16
 800fcbe:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fcc0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800fcc2:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fcc6:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 800fcc8:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fccc:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fcce:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fcd0:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800fcd4:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fcd6:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fcda:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fcde:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800fce2:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fce4:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fce6:	ea47 0708 	orr.w	r7, r7, r8
 800fcea:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800fcee:	4327      	orrs	r7, r4
 800fcf0:	ea47 070c 	orr.w	r7, r7, ip
 800fcf4:	ea57 0502 	orrs.w	r5, r7, r2
 800fcf8:	d17e      	bne.n	800fdf8 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 800fcfa:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 800fcfe:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fd00:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 800fd04:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800fd08:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800fd0a:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800fd0c:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800fd0e:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800fd10:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800fd12:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800fd14:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fd16:	9b02      	ldr	r3, [sp, #8]
 800fd18:	455b      	cmp	r3, fp
 800fd1a:	d1d1      	bne.n	800fcc0 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800fd1c:	b045      	add	sp, #276	; 0x114
 800fd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fd22:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fd24:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fd28:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fd2c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800fd2e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fd32:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800fd36:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fd3a:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800fd3e:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fd42:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fd46:	ebac 0000 	sub.w	r0, ip, r0
 800fd4a:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800fd4c:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fd50:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 800fd54:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 800fd58:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 800fd5c:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fd5e:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fd60:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 800fd64:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fd66:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fd68:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fd6a:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fd6c:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fd6e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800fd72:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fd74:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800fd78:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fd7c:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 800fd80:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800fd82:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 800fd86:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fd88:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 800fd8a:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fd8e:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fd92:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fd94:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 800fd98:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fd9a:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 800fd9e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fda2:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fda6:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fda8:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fdaa:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fdae:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fdb0:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fdb2:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800fdb6:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 800fdba:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800fdbe:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800fdc2:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800fdc6:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800fdca:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 800fdce:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800fdd0:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800fdd4:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800fdd8:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800fdda:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800fddc:	4459      	add	r1, fp
 800fdde:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800fde0:	9900      	ldr	r1, [sp, #0]
 800fde2:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800fde6:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800fdea:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800fdee:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800fdf2:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800fdf4:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800fdf6:	e759      	b.n	800fcac <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800fdf8:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fdfc:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800fe00:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800fe04:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fe08:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 800fe0c:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fe10:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fe12:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800fe14:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800fe16:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fe1a:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800fe1e:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 800fe22:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fe24:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 800fe26:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fe2a:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 800fe2e:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 800fe32:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fe36:	f240 15d9 	movw	r5, #473	; 0x1d9
 800fe3a:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fe3e:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 800fe42:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fe44:	9d01      	ldr	r5, [sp, #4]
 800fe46:	1b64      	subs	r4, r4, r5
 800fe48:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fe4c:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fe4e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fe50:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fe54:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fe58:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fe5a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fe5c:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fe60:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800fe62:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fe66:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fe6a:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fe6e:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 800fe72:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 800fe76:	44a6      	add	lr, r4
			    & RANGE_MASK];
 800fe78:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fe7c:	f819 2002 	ldrb.w	r2, [r9, r2]
 800fe80:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fe84:	f819 200c 	ldrb.w	r2, [r9, ip]
 800fe88:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fe8a:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fe8c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800fe8e:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 800fe92:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fe96:	f819 2002 	ldrb.w	r2, [r9, r2]
 800fe9a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fe9c:	f819 3007 	ldrb.w	r3, [r9, r7]
 800fea0:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800fea2:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800fea4:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 800fea6:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800feaa:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800feae:	f819 3003 	ldrb.w	r3, [r9, r3]
 800feb2:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800feb4:	f819 3001 	ldrb.w	r3, [r9, r1]
 800feb8:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800feba:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800febe:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 800fec2:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800fec6:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800feca:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fece:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800fed0:	f819 300e 	ldrb.w	r3, [r9, lr]
 800fed4:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fed6:	e71e      	b.n	800fd16 <jpeg_idct_ifast+0xde>

0800fed8 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800fede:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fee0:	3a02      	subs	r2, #2
{
 800fee2:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 800fee4:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fee6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800feea:	3380      	adds	r3, #128	; 0x80
 800feec:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800feee:	f105 0320 	add.w	r3, r5, #32
 800fef2:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fef4:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800fef8:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fefa:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fefe:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 800ff02:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ff06:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 800ff0a:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800ff0e:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800ff12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff16:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800ff1a:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ff1c:	ea4a 030b 	orr.w	r3, sl, fp
 800ff20:	ea4e 0303 	orr.w	r3, lr, r3
 800ff24:	433b      	orrs	r3, r7
 800ff26:	ea48 0303 	orr.w	r3, r8, r3
 800ff2a:	4333      	orrs	r3, r6
 800ff2c:	ea59 0303 	orrs.w	r3, r9, r3
 800ff30:	d145      	bne.n	800ffbe <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800ff32:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 800ff34:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800ff38:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800ff3a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800ff3c:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800ff3e:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800ff40:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800ff44:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800ff48:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800ff4c:	9b05      	ldr	r3, [sp, #20]
 800ff4e:	42ab      	cmp	r3, r5
 800ff50:	d1d0      	bne.n	800fef4 <jpeg_idct_islow+0x1c>
 800ff52:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800ff54:	ad06      	add	r5, sp, #24
 800ff56:	f1a3 0904 	sub.w	r9, r3, #4
 800ff5a:	331c      	adds	r3, #28
 800ff5c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800ff5e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800ff62:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800ff64:	9302      	str	r3, [sp, #8]
 800ff66:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ff68:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800ff6c:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 800ff70:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ff74:	ea4a 0200 	orr.w	r2, sl, r0
 800ff78:	ea42 020e 	orr.w	r2, r2, lr
 800ff7c:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 800ff80:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ff82:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ff86:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ff8a:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	ea52 020c 	orrs.w	r2, r2, ip
 800ff92:	f040 8098 	bne.w	80100c6 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ff96:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 800ff98:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 800ff9c:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ff9e:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 800ffa0:	9902      	ldr	r1, [sp, #8]
 800ffa2:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 800ffa4:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800ffa6:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800ffa8:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800ffaa:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800ffac:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800ffae:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800ffb0:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800ffb2:	9b05      	ldr	r3, [sp, #20]
 800ffb4:	454b      	cmp	r3, r9
 800ffb6:	d1d2      	bne.n	800ff5e <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800ffb8:	b047      	add	sp, #284	; 0x11c
 800ffba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ffbe:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800ffc0:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ffc4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800ffc8:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800ffca:	f241 1651 	movw	r6, #4433	; 0x1151
 800ffce:	eb0b 0300 	add.w	r3, fp, r0
 800ffd2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800ffd4:	f641 067e 	movw	r6, #6270	; 0x187e
 800ffd8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800ffdc:	4e7a      	ldr	r6, [pc, #488]	; (80101c8 <jpeg_idct_islow+0x2f0>)
 800ffde:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 800ffe2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ffe4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800ffe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ffea:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 800ffec:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 800fff0:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 800fff4:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 800fff8:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fffc:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 800fffe:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 8010000:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 8010002:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010004:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010008:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 801000c:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801000e:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010012:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010016:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 801001a:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801001e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8010020:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8010024:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8010028:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801002c:	1930      	adds	r0, r6, r4
 801002e:	4358      	muls	r0, r3
    z2 += z1;
 8010030:	4b66      	ldr	r3, [pc, #408]	; (80101cc <jpeg_idct_islow+0x2f4>)
 8010032:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8010036:	4b66      	ldr	r3, [pc, #408]	; (80101d0 <jpeg_idct_islow+0x2f8>)
 8010038:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801003c:	eb09 040a 	add.w	r4, r9, sl
 8010040:	4b64      	ldr	r3, [pc, #400]	; (80101d4 <jpeg_idct_islow+0x2fc>)
 8010042:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8010044:	f640 138e 	movw	r3, #2446	; 0x98e
 8010048:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801004c:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801004e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8010052:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010056:	4b60      	ldr	r3, [pc, #384]	; (80101d8 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8010058:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801005c:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8010060:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010064:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010068:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 801006a:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801006c:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801006e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010072:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8010076:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801007a:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801007e:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010082:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8010084:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010086:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801008a:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801008e:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010092:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8010096:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010098:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801009c:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801009e:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80100a0:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80100a2:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80100a4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80100a6:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80100aa:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80100ac:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80100ae:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80100b0:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80100b2:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80100b6:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80100b8:	9b02      	ldr	r3, [sp, #8]
 80100ba:	eba3 0909 	sub.w	r9, r3, r9
 80100be:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80100c2:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 80100c4:	e742      	b.n	800ff4c <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80100c6:	1842      	adds	r2, r0, r1
 80100c8:	f241 1451 	movw	r4, #4433	; 0x1151
 80100cc:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80100ce:	f641 047e 	movw	r4, #6270	; 0x187e
 80100d2:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80100d6:	4c3c      	ldr	r4, [pc, #240]	; (80101c8 <jpeg_idct_islow+0x2f0>)
 80100d8:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 80100dc:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 80100de:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 80100e0:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80100e4:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 80100e8:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 80100ec:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80100f0:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 80100f2:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 80100f6:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 80100fa:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80100fc:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8010100:	1821      	adds	r1, r4, r0
 8010102:	4351      	muls	r1, r2
    z2 += z1;
 8010104:	4a31      	ldr	r2, [pc, #196]	; (80101cc <jpeg_idct_islow+0x2f4>)
 8010106:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 801010a:	4a31      	ldr	r2, [pc, #196]	; (80101d0 <jpeg_idct_islow+0x2f8>)
 801010c:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8010110:	eb0a 000c 	add.w	r0, sl, ip
 8010114:	4a2f      	ldr	r2, [pc, #188]	; (80101d4 <jpeg_idct_islow+0x2fc>)
 8010116:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 8010118:	f640 128e 	movw	r2, #2446	; 0x98e
 801011c:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 8010120:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 8010122:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 8010126:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801012a:	4a2b      	ldr	r2, [pc, #172]	; (80101d8 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 801012c:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010130:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 8010134:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010138:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801013c:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 801013e:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8010140:	4454      	add	r4, sl
 8010142:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010146:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801014a:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 801014e:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010152:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 8010154:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010158:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801015a:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801015e:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 8010162:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010166:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 8010168:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801016c:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010170:	9a01      	ldr	r2, [sp, #4]
 8010172:	5dd0      	ldrb	r0, [r2, r7]
 8010174:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010176:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 8010178:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801017c:	5c10      	ldrb	r0, [r2, r0]
 801017e:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010180:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010184:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010186:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010188:	eb02 000b 	add.w	r0, r2, fp
 801018c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 801018e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010192:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010194:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010196:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010198:	eba2 010b 	sub.w	r1, r2, fp
 801019c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 801019e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80101a2:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80101a4:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80101a6:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80101a8:	9a03      	ldr	r2, [sp, #12]
 80101aa:	4462      	add	r2, ip
			    & RANGE_MASK];
 80101ac:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80101b0:	5c8a      	ldrb	r2, [r1, r2]
 80101b2:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80101b4:	9a03      	ldr	r2, [sp, #12]
 80101b6:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 80101ba:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80101be:	f811 200c 	ldrb.w	r2, [r1, ip]
 80101c2:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80101c4:	e6f5      	b.n	800ffb2 <jpeg_idct_islow+0xda>
 80101c6:	bf00      	nop
 80101c8:	ffffc4df 	.word	0xffffc4df
 80101cc:	ffffc13b 	.word	0xffffc13b
 80101d0:	fffff384 	.word	0xfffff384
 80101d4:	ffffe333 	.word	0xffffe333
 80101d8:	ffffadfd 	.word	0xffffadfd

080101dc <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80101dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e0:	b0b9      	sub	sp, #228	; 0xe4
 80101e2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80101e4:	1e96      	subs	r6, r2, #2
 80101e6:	9304      	str	r3, [sp, #16]
 80101e8:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80101ea:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80101ee:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80101f2:	3380      	adds	r3, #128	; 0x80
 80101f4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80101f6:	f102 030c 	add.w	r3, r2, #12
 80101fa:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80101fc:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010200:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010204:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010208:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801020c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010210:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010212:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010216:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 801021a:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 801021c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010220:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010222:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010224:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010226:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801022a:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801022e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8010232:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010234:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 8010238:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801023c:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010240:	eba4 010e 	sub.w	r1, r4, lr
 8010244:	f640 2212 	movw	r2, #2578	; 0xa12
 8010248:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801024c:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801024e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010252:	eb09 0007 	add.w	r0, r9, r7
 8010256:	4410      	add	r0, r2
 8010258:	4a87      	ldr	r2, [pc, #540]	; (8010478 <jpeg_idct_7x7+0x29c>)
 801025a:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801025e:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 8010260:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010264:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010268:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801026c:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010270:	fb02 1203 	mla	r2, r2, r3, r1
 8010274:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010278:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 801027c:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010280:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010282:	4b7e      	ldr	r3, [pc, #504]	; (801047c <jpeg_idct_7x7+0x2a0>)
 8010284:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010288:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 801028c:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801028e:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010290:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010294:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010296:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8010298:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801029a:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 801029e:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80102a2:	eb03 0904 	add.w	r9, r3, r4
 80102a6:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80102aa:	eba3 0904 	sub.w	r9, r3, r4
 80102ae:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80102b2:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80102b4:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80102b6:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80102ba:	4a71      	ldr	r2, [pc, #452]	; (8010480 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 80102bc:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 80102c0:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80102c2:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80102c6:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80102c8:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80102cc:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 80102d0:	44a1      	add	r9, r4
    tmp0 += z2;
 80102d2:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80102d4:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80102d8:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80102da:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80102dc:	4453      	add	r3, sl
 80102de:	12db      	asrs	r3, r3, #11
 80102e0:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80102ea:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80102ee:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80102f2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80102f4:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80102f8:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80102fc:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80102fe:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010300:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010302:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010304:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010308:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801030a:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801030e:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010312:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010314:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010318:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 801031c:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8010320:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010324:	9b05      	ldr	r3, [sp, #20]
 8010326:	42b3      	cmp	r3, r6
 8010328:	f47f af68 	bne.w	80101fc <jpeg_idct_7x7+0x20>
 801032c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 801032e:	ac07      	add	r4, sp, #28
 8010330:	f1a3 0904 	sub.w	r9, r3, #4
 8010334:	3318      	adds	r3, #24
 8010336:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010338:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 801033c:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 801033e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 8010340:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8010344:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010346:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 801034a:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801034c:	1b51      	subs	r1, r2, r5
 801034e:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8010352:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010356:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801035a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801035e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 8010362:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010366:	eba3 0c02 	sub.w	ip, r3, r2
 801036a:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801036e:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010370:	4941      	ldr	r1, [pc, #260]	; (8010478 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010372:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010376:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 801037a:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801037e:	eb0e 000c 	add.w	r0, lr, ip
 8010382:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8010386:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801038a:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801038e:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010392:	fb02 f208 	mul.w	r2, r2, r8
 8010396:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801039a:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801039e:	4d37      	ldr	r5, [pc, #220]	; (801047c <jpeg_idct_7x7+0x2a0>)
 80103a0:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 80103a4:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80103a8:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 80103aa:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80103ae:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80103b0:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80103b4:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80103b6:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80103b8:	f641 53ef 	movw	r3, #7663	; 0x1def
 80103bc:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80103c0:	eba2 050a 	sub.w	r5, r2, sl
 80103c4:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80103c8:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80103ca:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80103cc:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80103ce:	4b2c      	ldr	r3, [pc, #176]	; (8010480 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 80103d0:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 80103d4:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80103d6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80103da:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80103de:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80103e0:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80103e4:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 80103e8:	4455      	add	r5, sl
    tmp0 += z2;
 80103ea:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80103ec:	fb0b 220e 	mla	r2, fp, lr, r2
 80103f0:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80103f2:	eb01 020c 	add.w	r2, r1, ip
 80103f6:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 80103f8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80103fc:	5c9a      	ldrb	r2, [r3, r2]
 80103fe:	9b04      	ldr	r3, [sp, #16]
 8010400:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010402:	9b02      	ldr	r3, [sp, #8]
 8010404:	eba3 0c0c 	sub.w	ip, r3, ip
 8010408:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801040a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801040e:	f813 200c 	ldrb.w	r2, [r3, ip]
 8010412:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010414:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010416:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8010418:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801041c:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010420:	5c9a      	ldrb	r2, [r3, r2]
 8010422:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010424:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010426:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010428:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801042a:	eb03 020a 	add.w	r2, r3, sl
 801042e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010430:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010434:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010436:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010438:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801043a:	eba3 0a0a 	sub.w	sl, r3, sl
 801043e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010440:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010444:	f813 300a 	ldrb.w	r3, [r3, sl]
 8010448:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 801044a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801044e:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010452:	f642 5341 	movw	r3, #11585	; 0x2d41
 8010456:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 801045a:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801045c:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8010460:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010464:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010468:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 801046a:	9b05      	ldr	r3, [sp, #20]
 801046c:	454b      	cmp	r3, r9
 801046e:	f47f af63 	bne.w	8010338 <jpeg_idct_7x7+0x15c>
  }
}
 8010472:	b039      	add	sp, #228	; 0xe4
 8010474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010478:	ffffc515 	.word	0xffffc515
 801047c:	ffffb0f1 	.word	0xffffb0f1
 8010480:	ffffd3e1 	.word	0xffffd3e1

08010484 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010488:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801048c:	b0a7      	sub	sp, #156	; 0x9c
 801048e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010490:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010492:	3080      	adds	r0, #128	; 0x80
 8010494:	320a      	adds	r2, #10
 8010496:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010498:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801049a:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801049c:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801049e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80104a2:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104a6:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80104aa:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104ac:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104b0:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104b2:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104b6:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104ba:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 80104bc:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80104be:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104c2:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80104c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80104ca:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80104ce:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 80104d0:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80104d2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104d6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80104d8:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104dc:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80104e0:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104e2:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 80104e4:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104e8:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 80104ec:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80104ee:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104f2:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80104f4:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80104f8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104fc:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010500:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010504:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010508:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801050c:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010510:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8010514:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010518:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801051c:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010520:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010524:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010528:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801052c:	12d2      	asrs	r2, r2, #11
 801052e:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010532:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8010536:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010538:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801053c:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010540:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010542:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010546:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801054a:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801054c:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801054e:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010552:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010554:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010556:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010558:	42b2      	cmp	r2, r6
 801055a:	d1a0      	bne.n	801049e <jpeg_idct_6x6+0x1a>
 801055c:	f1a3 0e04 	sub.w	lr, r3, #4
 8010560:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010564:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010566:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801056a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 801056e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8010570:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010572:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 8010576:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8010578:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801057c:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010580:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010584:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010588:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801058c:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010590:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8010594:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8010598:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 801059c:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80105a0:	f242 7231 	movw	r2, #10033	; 0x2731
 80105a4:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 80105a8:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 80105ac:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 80105b0:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80105b4:	eb04 0508 	add.w	r5, r4, r8
 80105b8:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80105bc:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 80105c0:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80105c4:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80105c8:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105cc:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80105ce:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80105d2:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80105d6:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105da:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80105de:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 80105e2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80105e6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105ea:	5d04      	ldrb	r4, [r0, r4]
 80105ec:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80105ee:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80105f2:	9800      	ldr	r0, [sp, #0]
 80105f4:	5d84      	ldrb	r4, [r0, r6]
 80105f6:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80105f8:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80105fc:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8010600:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8010604:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010608:	5d04      	ldrb	r4, [r0, r4]
 801060a:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801060c:	f810 3008 	ldrb.w	r3, [r0, r8]
 8010610:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010612:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010616:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 801061a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 801061e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010622:	5cc3      	ldrb	r3, [r0, r3]
 8010624:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010626:	5d43      	ldrb	r3, [r0, r5]
 8010628:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 801062a:	d19c      	bne.n	8010566 <jpeg_idct_6x6+0xe2>
  }
}
 801062c:	b027      	add	sp, #156	; 0x9c
 801062e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010634 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010638:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801063c:	b09d      	sub	sp, #116	; 0x74
 801063e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010640:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010642:	3080      	adds	r0, #128	; 0x80
 8010644:	3208      	adds	r2, #8
 8010646:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010648:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801064a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801064e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010652:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010654:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010656:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801065a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801065c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010660:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010664:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010666:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010668:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801066c:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801066e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010672:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8010674:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010676:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801067a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801067e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010682:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010686:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801068a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801068e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010692:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010694:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010698:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801069c:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 80106a0:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80106a2:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 80106a6:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 80106aa:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 80106ae:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80106b2:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80106b6:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80106b8:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80106bc:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80106c0:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80106c2:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 80106c6:	483b      	ldr	r0, [pc, #236]	; (80107b4 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80106c8:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 80106ca:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80106ce:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80106d2:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80106d6:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80106d8:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80106dc:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80106e0:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80106e4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80106e8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80106ec:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80106f0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80106f4:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80106f8:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80106fc:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80106fe:	d1aa      	bne.n	8010656 <jpeg_idct_5x5+0x22>
 8010700:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8010704:	a903      	add	r1, sp, #12
 8010706:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010708:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801070c:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8010710:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8010712:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010716:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 801071a:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 801071c:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 801071e:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8010722:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010726:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 801072a:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801072e:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8010732:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8010736:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801073a:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801073c:	1b1b      	subs	r3, r3, r4
 801073e:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010742:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8010746:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 801074a:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 801074c:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 801074e:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010750:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8010754:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010758:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801075a:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 801075e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010762:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010766:	4813      	ldr	r0, [pc, #76]	; (80107b4 <jpeg_idct_5x5+0x180>)
 8010768:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801076c:	eb05 0b06 	add.w	fp, r5, r6
 8010770:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010772:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8010774:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8010778:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801077c:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8010780:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010782:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010786:	9800      	ldr	r0, [sp, #0]
 8010788:	5d45      	ldrb	r5, [r0, r5]
 801078a:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801078c:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801078e:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8010790:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010794:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010798:	5d45      	ldrb	r5, [r0, r5]
 801079a:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801079c:	5c82      	ldrb	r2, [r0, r2]
 801079e:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80107a0:	f810 300c 	ldrb.w	r3, [r0, ip]
 80107a4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	4573      	cmp	r3, lr
 80107aa:	d1b2      	bne.n	8010712 <jpeg_idct_5x5+0xde>
  }
}
 80107ac:	b01d      	add	sp, #116	; 0x74
 80107ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b2:	bf00      	nop
 80107b4:	ffffba5c 	.word	0xffffba5c

080107b8 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80107b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107bc:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80107be:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80107c0:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 80107c4:	1e96      	subs	r6, r2, #2
 80107c6:	3c04      	subs	r4, #4
 80107c8:	1d97      	adds	r7, r2, #6
 80107ca:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80107cc:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80107ce:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80107d2:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80107d6:	f8df c108 	ldr.w	ip, [pc, #264]	; 80108e0 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80107da:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80107de:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80107e0:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80107e4:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80107e8:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80107ea:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80107ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80107f0:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80107f4:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80107f8:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80107fc:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8010800:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010804:	6a22      	ldr	r2, [r4, #32]
 8010806:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801080a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801080c:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010810:	eb0a 020b 	add.w	r2, sl, fp
 8010814:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801081c:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010820:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010824:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010828:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 801082c:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010830:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010834:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010838:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 801083c:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010840:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010844:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010848:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801084a:	d1c6      	bne.n	80107da <jpeg_idct_4x4+0x22>
 801084c:	1f1e      	subs	r6, r3, #4
 801084e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8010852:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010854:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010858:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801085c:	f8df e080 	ldr.w	lr, [pc, #128]	; 80108e0 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8010860:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8010864:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8010866:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010868:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 801086c:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 801086e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8010872:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8010876:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801087a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 801087e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010882:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8010886:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801088a:	eb01 020b 	add.w	r2, r1, fp
 801088e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010892:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010896:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801089a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801089e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80108a2:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 80108a4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80108a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 80108aa:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80108ae:	f815 b00b 	ldrb.w	fp, [r5, fp]
 80108b2:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80108b6:	5c6b      	ldrb	r3, [r5, r1]
 80108b8:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80108ba:	9b01      	ldr	r3, [sp, #4]
 80108bc:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 80108c0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80108c4:	5ceb      	ldrb	r3, [r5, r3]
 80108c6:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80108c8:	9b01      	ldr	r3, [sp, #4]
 80108ca:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 80108ce:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80108d2:	5cab      	ldrb	r3, [r5, r2]
 80108d4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 80108d6:	d1c3      	bne.n	8010860 <jpeg_idct_4x4+0xa8>
  }
}
 80108d8:	b013      	add	sp, #76	; 0x4c
 80108da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108de:	bf00      	nop
 80108e0:	ffffc4df 	.word	0xffffc4df

080108e4 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108ea:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 80108ee:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80108f0:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80108f4:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108f6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80108fa:	f1a1 0c04 	sub.w	ip, r1, #4
 80108fe:	1d10      	adds	r0, r2, #4
 8010900:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010902:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010906:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801090a:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801090e:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010910:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010914:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010918:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801091a:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801091e:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010922:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010926:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 801092a:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801092e:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010936:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801093a:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 801093e:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8010942:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010946:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801094a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801094e:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010952:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010956:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010958:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801095c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010960:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010964:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010966:	d1d0      	bne.n	801090a <jpeg_idct_3x3+0x26>
 8010968:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801096a:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 801096e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010970:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8010974:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8010978:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801097a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801097c:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010980:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010982:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010986:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801098a:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801098e:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010992:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010996:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010998:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 801099c:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 80109a0:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80109a4:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80109a8:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 80109ac:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 80109b0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80109b4:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 80109b8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80109bc:	f81e a00a 	ldrb.w	sl, [lr, sl]
 80109c0:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80109c4:	f81e 4008 	ldrb.w	r4, [lr, r8]
 80109c8:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 80109ca:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80109ce:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 80109d0:	d1d0      	bne.n	8010974 <jpeg_idct_3x3+0x90>
  }
}
 80109d2:	b00b      	add	sp, #44	; 0x2c
 80109d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109d8 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80109d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80109dc:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 80109de:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80109e0:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109e4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80109e8:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80109ea:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109ec:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109f0:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109f2:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80109f4:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109f6:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 80109f8:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80109fa:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 80109fc:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 80109fe:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010a00:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010a04:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010a08:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8010a0a:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010a0e:	437a      	muls	r2, r7
{
 8010a10:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 8010a12:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 8010a14:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 8010a16:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010a1a:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010a1c:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010a1e:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010a20:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010a22:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010a26:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010a2a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010a2e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010a32:	5d2c      	ldrb	r4, [r5, r4]
 8010a34:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010a38:	5c28      	ldrb	r0, [r5, r0]
 8010a3a:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 8010a3e:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010a42:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 8010a44:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010a46:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010a48:	5c6b      	ldrb	r3, [r5, r1]
 8010a4a:	7063      	strb	r3, [r4, #1]
}
 8010a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a50 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8010a50:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010a52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010a56:	6809      	ldr	r1, [r1, #0]
 8010a58:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010a5a:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8010a5e:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010a60:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8010a64:	440a      	add	r2, r1
 8010a66:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	9b00      	ldr	r3, [sp, #0]
 8010a6e:	54d1      	strb	r1, [r2, r3]
}
 8010a70:	4770      	bx	lr
	...

08010a74 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a78:	b0d1      	sub	sp, #324	; 0x144
 8010a7a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010a7c:	1e96      	subs	r6, r2, #2
 8010a7e:	9306      	str	r3, [sp, #24]
 8010a80:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a82:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010a86:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a88:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010a8c:	f102 030e 	add.w	r3, r2, #14
 8010a90:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a92:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010a96:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a98:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a9c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010aa0:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010aa4:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010aa8:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010aaa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010aae:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8010ab2:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010ab4:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ab6:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010aba:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010abe:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ac2:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010ac4:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010ac8:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010acc:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 8010ace:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ad0:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010ad4:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ad8:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010ada:	1a8b      	subs	r3, r1, r2
 8010adc:	436b      	muls	r3, r5
 8010ade:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010ae0:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8010ae4:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010ae6:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 8010aea:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010aec:	188b      	adds	r3, r1, r2
 8010aee:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010af0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010af4:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010af6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010afa:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010afc:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010afe:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010b00:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8010b02:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8010b04:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010b06:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 8010b0a:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b0c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 8010b10:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8010b12:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b14:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010b16:	4b89      	ldr	r3, [pc, #548]	; (8010d3c <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b18:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010b1a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010b1c:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010b1e:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8010b22:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010b26:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010b2a:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010b2c:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010b30:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010b34:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010b38:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010b3c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010b40:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010b44:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010b48:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010b4c:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010b50:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010b54:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 8010b58:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010b5c:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 8010b60:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8010b64:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 8010b68:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010b6a:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010b6e:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 8010b72:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010b74:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010b76:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010b78:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 8010b7a:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010b7c:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010b80:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010b84:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010b86:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010b88:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010b8a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010b8c:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010b8e:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010b90:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010b94:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010b98:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010b9a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010b9c:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010ba0:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010ba4:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010ba8:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010baa:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8010bae:	9b05      	ldr	r3, [sp, #20]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	12db      	asrs	r3, r3, #11
 8010bb4:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010bb6:	9b05      	ldr	r3, [sp, #20]
 8010bb8:	1a9a      	subs	r2, r3, r2
 8010bba:	12d2      	asrs	r2, r2, #11
 8010bbc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8010bc0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8010bc4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010bc8:	12db      	asrs	r3, r3, #11
 8010bca:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010bcc:	9b07      	ldr	r3, [sp, #28]
 8010bce:	42b3      	cmp	r3, r6
 8010bd0:	f47f af5f 	bne.w	8010a92 <jpeg_idct_9x9+0x1e>
 8010bd4:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010bd6:	aa08      	add	r2, sp, #32
 8010bd8:	3b04      	subs	r3, #4
 8010bda:	9301      	str	r3, [sp, #4]
 8010bdc:	9b06      	ldr	r3, [sp, #24]
 8010bde:	3320      	adds	r3, #32
 8010be0:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010be2:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010be4:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 8010be8:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010bea:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8010bec:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 8010bf0:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8010bf4:	9106      	str	r1, [sp, #24]
 8010bf6:	9301      	str	r3, [sp, #4]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	995a      	ldr	r1, [sp, #360]	; 0x168
 8010bfc:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010bfe:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 8010c02:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c06:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010c0a:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8010c0e:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010c12:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 8010c16:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010c1a:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 8010c1e:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010c20:	1a43      	subs	r3, r0, r1
 8010c22:	fb0c f303 	mul.w	r3, ip, r3
 8010c26:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010c28:	18f3      	adds	r3, r6, r3
 8010c2a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010c2c:	1843      	adds	r3, r0, r1
 8010c2e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010c30:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010c34:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010c36:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010c3a:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010c3c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010c3e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010c40:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 8010c42:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 8010c44:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010c46:	4f3d      	ldr	r7, [pc, #244]	; (8010d3c <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 8010c48:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 8010c4a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 8010c4e:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010c50:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 8010c54:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010c56:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 8010c5a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010c5e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010c60:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8010c64:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010c68:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010c6c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010c70:	f640 737a 	movw	r3, #3962	; 0xf7a
 8010c74:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010c78:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8010c7c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010c80:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010c84:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8010c88:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8010c8c:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010c90:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8010c92:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010c94:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8010c98:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010c9a:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c9e:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010ca2:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8010ca6:	448e      	add	lr, r1
			    & RANGE_MASK];
 8010ca8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010cac:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cb0:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8010cb2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cb6:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010cba:	9b06      	ldr	r3, [sp, #24]
 8010cbc:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010cbe:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010cc0:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8010cc4:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010cc6:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010cca:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010cce:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 8010cd0:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010cd4:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010cd8:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010cdc:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010cde:	f81a 0009 	ldrb.w	r0, [sl, r9]
 8010ce2:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010ce4:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010ce6:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8010ce8:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010cec:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010cf0:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010cf4:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010cf6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010cfa:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010cfc:	9b05      	ldr	r3, [sp, #20]
 8010cfe:	4473      	add	r3, lr
			    & RANGE_MASK];
 8010d00:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010d04:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010d08:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010d0a:	9b05      	ldr	r3, [sp, #20]
 8010d0c:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 8010d10:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010d14:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 8010d18:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010d1a:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8010d1c:	9b02      	ldr	r3, [sp, #8]
 8010d1e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 8010d22:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8010d26:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010d2a:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 8010d2c:	9b07      	ldr	r3, [sp, #28]
 8010d2e:	428b      	cmp	r3, r1
 8010d30:	f47f af57 	bne.w	8010be2 <jpeg_idct_9x9+0x16e>
  }
}
 8010d34:	b051      	add	sp, #324	; 0x144
 8010d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3a:	bf00      	nop
 8010d3c:	ffffd8cf 	.word	0xffffd8cf

08010d40 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d44:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010d48:	b0d7      	sub	sp, #348	; 0x15c
 8010d4a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010d4c:	f1a2 0b02 	sub.w	fp, r2, #2
 8010d50:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d52:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8010d56:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010d58:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d5a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d5c:	f102 030e 	add.w	r3, r2, #14
 8010d60:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d62:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010d66:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d6a:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d6e:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d70:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d74:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d76:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010d7a:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d7e:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010d80:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8010d84:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010d86:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010d8a:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010d8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010d92:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8010d94:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8010d96:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010d98:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d9a:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010d9e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010da2:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010da6:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010daa:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010dac:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8010db0:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010db2:	19f3      	adds	r3, r6, r7
 8010db4:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010db6:	f241 0071 	movw	r0, #4209	; 0x1071
 8010dba:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010dbe:	489d      	ldr	r0, [pc, #628]	; (8011034 <jpeg_idct_10x10+0x2f4>)
 8010dc0:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010dc4:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8010dc8:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010dca:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8010dce:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8010dd0:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dd2:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8010dd6:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dd8:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010dda:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dde:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010de0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 8010de2:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010de4:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010de8:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010dea:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8010dee:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010df2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8010df6:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8010df8:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8010dfc:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010dfe:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010e02:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010e06:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010e0a:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 8010e0e:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010e12:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010e16:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010e1a:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010e1e:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010e20:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010e22:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010e26:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010e28:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010e2a:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010e2e:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010e32:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010e34:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010e38:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010e3a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010e3e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010e42:	f241 468c 	movw	r6, #5260	; 0x148c
 8010e46:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010e48:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010e4c:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010e50:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010e54:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010e58:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010e5a:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010e5c:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010e5e:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010e62:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8010e66:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010e6a:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010e6c:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010e6e:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010e70:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010e72:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010e76:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010e78:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010e7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010e7c:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010e7e:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010e82:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8010e86:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010e8a:	9b02      	ldr	r3, [sp, #8]
 8010e8c:	442b      	add	r3, r5
 8010e8e:	12db      	asrs	r3, r3, #11
 8010e90:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010e92:	9b02      	ldr	r3, [sp, #8]
 8010e94:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010e96:	9b01      	ldr	r3, [sp, #4]
 8010e98:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010e9a:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010e9c:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010e9e:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010ea2:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010ea4:	9b01      	ldr	r3, [sp, #4]
 8010ea6:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010eaa:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010eac:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010eb0:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010eb2:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010eb6:	f47f af54 	bne.w	8010d62 <jpeg_idct_10x10+0x22>
 8010eba:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 8010ebc:	a906      	add	r1, sp, #24
 8010ebe:	f1a3 0b04 	sub.w	fp, r3, #4
 8010ec2:	3324      	adds	r3, #36	; 0x24
 8010ec4:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010ec6:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010eca:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8010ece:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010ed0:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8010ed2:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8010ed6:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010ed8:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8010edc:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010ede:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010ee2:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010ee6:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010eea:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010eec:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8010eee:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010ef2:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8010ef4:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8010ef8:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010efc:	006d      	lsls	r5, r5, #1
 8010efe:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8010f02:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010f06:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010f08:	19eb      	adds	r3, r5, r7
 8010f0a:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010f0c:	f241 0071 	movw	r0, #4209	; 0x1071
 8010f10:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010f14:	4847      	ldr	r0, [pc, #284]	; (8011034 <jpeg_idct_10x10+0x2f4>)
 8010f16:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010f1a:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8010f1e:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 8010f20:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 8010f24:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8010f26:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8010f28:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010f2a:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 8010f2e:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8010f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8010f34:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8010f38:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8010f3c:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010f3e:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010f42:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010f46:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8010f4a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010f4e:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010f52:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8010f56:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010f5a:	f240 7014 	movw	r0, #1812	; 0x714
 8010f5e:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010f62:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010f66:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010f68:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010f6c:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010f70:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010f74:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010f76:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010f78:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010f7c:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010f7e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010f82:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010f86:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010f8a:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010f8e:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010f90:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010f92:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010f94:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010f96:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010f9a:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010f9e:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010fa2:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010fa6:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 8010fa8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010fac:	444d      	add	r5, r9
			    & RANGE_MASK];
 8010fae:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010fb2:	5c82      	ldrb	r2, [r0, r2]
 8010fb4:	9804      	ldr	r0, [sp, #16]
 8010fb6:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010fb8:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010fba:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010fbc:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010fc0:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010fc2:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010fc4:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8010fc6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8010fca:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010fce:	5c82      	ldrb	r2, [r0, r2]
 8010fd0:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010fd2:	5dc3      	ldrb	r3, [r0, r7]
 8010fd4:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010fd6:	9b01      	ldr	r3, [sp, #4]
 8010fd8:	4443      	add	r3, r8
			    & RANGE_MASK];
 8010fda:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010fde:	5cc3      	ldrb	r3, [r0, r3]
 8010fe0:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010fe2:	9b01      	ldr	r3, [sp, #4]
 8010fe4:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8010fe8:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010fec:	f810 3008 	ldrb.w	r3, [r0, r8]
 8010ff0:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010ff2:	9b03      	ldr	r3, [sp, #12]
 8010ff4:	442b      	add	r3, r5
			    & RANGE_MASK];
 8010ff6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010ffa:	5cc3      	ldrb	r3, [r0, r3]
 8010ffc:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010ffe:	9b03      	ldr	r3, [sp, #12]
 8011000:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8011002:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011006:	5d43      	ldrb	r3, [r0, r5]
 8011008:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801100a:	9b02      	ldr	r3, [sp, #8]
 801100c:	4453      	add	r3, sl
			    & RANGE_MASK];
 801100e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011012:	5cc3      	ldrb	r3, [r0, r3]
 8011014:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011016:	9b02      	ldr	r3, [sp, #8]
 8011018:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 801101c:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011020:	f810 300a 	ldrb.w	r3, [r0, sl]
 8011024:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 8011026:	9b05      	ldr	r3, [sp, #20]
 8011028:	455b      	cmp	r3, fp
 801102a:	f47f af4c 	bne.w	8010ec6 <jpeg_idct_10x10+0x186>
  }
}
 801102e:	b057      	add	sp, #348	; 0x15c
 8011030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011034:	ffffba5c 	.word	0xffffba5c

08011038 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	b0e5      	sub	sp, #404	; 0x194
 801103e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011040:	f1a2 0a02 	sub.w	sl, r2, #2
 8011044:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011046:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801104a:	3380      	adds	r3, #128	; 0x80
 801104c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801104e:	1f0b      	subs	r3, r1, #4
 8011050:	9302      	str	r3, [sp, #8]
 8011052:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011056:	aa0c      	add	r2, sp, #48	; 0x30
 8011058:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801105a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801105c:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011060:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011064:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011066:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801106a:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801106e:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011070:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011072:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011076:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011078:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801107c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 8011080:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011082:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011084:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011088:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801108a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801108e:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011090:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011094:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011096:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801109a:	eba4 0b06 	sub.w	fp, r4, r6
 801109e:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80110a2:	f640 55c9 	movw	r5, #3529	; 0xdc9
 80110a6:	436f      	muls	r7, r5
    z4 = z1 + z3;
 80110a8:	1985      	adds	r5, r0, r6
    z4 -= z2;
 80110aa:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80110ac:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80110b0:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 80110b4:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 80110b6:	449c      	add	ip, r3
 80110b8:	49d0      	ldr	r1, [pc, #832]	; (80113fc <jpeg_idct_11x11+0x3c4>)
 80110ba:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80110be:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 80110c2:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80110c4:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80110c8:	49cd      	ldr	r1, [pc, #820]	; (8011400 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80110ca:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80110cc:	fb01 3c00 	mla	ip, r1, r0, r3
 80110d0:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110d4:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110d8:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80110dc:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 80110de:	49c9      	ldr	r1, [pc, #804]	; (8011404 <jpeg_idct_11x11+0x3cc>)
 80110e0:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80110e4:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 80110e8:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80110ec:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80110f0:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80110f2:	49c5      	ldr	r1, [pc, #788]	; (8011408 <jpeg_idct_11x11+0x3d0>)
 80110f4:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80110f6:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110fa:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80110fe:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011102:	1941      	adds	r1, r0, r5
 8011104:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011106:	9902      	ldr	r1, [sp, #8]
 8011108:	6a08      	ldr	r0, [r1, #32]
 801110a:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801110e:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011110:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011114:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011116:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 801111a:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801111e:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 8011122:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8011124:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011128:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801112c:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011130:	4435      	add	r5, r6
 8011132:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011134:	f641 446a 	movw	r4, #7274	; 0x1c6a
 8011138:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801113a:	eb09 040c 	add.w	r4, r9, ip
 801113e:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011142:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011146:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801114a:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801114e:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011150:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011154:	44c6      	add	lr, r8
 8011156:	49ad      	ldr	r1, [pc, #692]	; (801140c <jpeg_idct_11x11+0x3d4>)
 8011158:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 801115c:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011160:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011164:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011168:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801116a:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801116e:	fb01 440c 	mla	r4, r1, ip, r4
 8011172:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011174:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011176:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011178:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801117a:	49a5      	ldr	r1, [pc, #660]	; (8011410 <jpeg_idct_11x11+0x3d8>)
 801117c:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801117e:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 8011182:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011184:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011188:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801118a:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801118c:	f242 000b 	movw	r0, #8203	; 0x200b
 8011190:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011194:	489f      	ldr	r0, [pc, #636]	; (8011414 <jpeg_idct_11x11+0x3dc>)
 8011196:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801119a:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 801119e:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80111a2:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80111a6:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80111aa:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80111ac:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80111ae:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80111b2:	ea4f 20ee 	mov.w	r0, lr, asr #11
 80111b6:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80111ba:	eb01 0009 	add.w	r0, r1, r9
 80111be:	12c0      	asrs	r0, r0, #11
 80111c0:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80111c2:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80111c6:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80111c8:	12c0      	asrs	r0, r0, #11
 80111ca:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80111ce:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80111d0:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80111d2:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80111d4:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80111d6:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80111d8:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80111da:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80111de:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80111e2:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80111e6:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80111e8:	12c0      	asrs	r0, r0, #11
 80111ea:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80111ec:	ea4f 20e8 	mov.w	r0, r8, asr #11
 80111f0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80111f4:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80111f6:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80111f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80111fa:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80111fc:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80111fe:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011200:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011204:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011208:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 801120c:	12db      	asrs	r3, r3, #11
 801120e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011214:	4553      	cmp	r3, sl
 8011216:	f47f af20 	bne.w	801105a <jpeg_idct_11x11+0x22>
 801121a:	9b08      	ldr	r3, [sp, #32]
 801121c:	3b04      	subs	r3, #4
 801121e:	9303      	str	r3, [sp, #12]
 8011220:	9b08      	ldr	r3, [sp, #32]
 8011222:	3328      	adds	r3, #40	; 0x28
 8011224:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8011226:	ab0c      	add	r3, sp, #48	; 0x30
 8011228:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801122a:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801122c:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8011230:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011232:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 8011236:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801123a:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 801123e:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8011240:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8011242:	9109      	str	r1, [sp, #36]	; 0x24
 8011244:	9303      	str	r3, [sp, #12]
 8011246:	460b      	mov	r3, r1
 8011248:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801124a:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 801124c:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 801124e:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011250:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8011252:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011254:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011258:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801125c:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801125e:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011262:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011264:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011266:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 801126a:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 801126c:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 801126e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011270:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8011274:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011278:	eb0e 000c 	add.w	r0, lr, ip
 801127c:	4a5f      	ldr	r2, [pc, #380]	; (80113fc <jpeg_idct_11x11+0x3c4>)
 801127e:	4418      	add	r0, r3
 8011280:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011284:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8011288:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 801128c:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801128e:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011292:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011294:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8011296:	4a5a      	ldr	r2, [pc, #360]	; (8011400 <jpeg_idct_11x11+0x3c8>)
 8011298:	fb02 3e04 	mla	lr, r2, r4, r3
 801129c:	eb0e 020c 	add.w	r2, lr, ip
 80112a0:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 80112a2:	4a58      	ldr	r2, [pc, #352]	; (8011404 <jpeg_idct_11x11+0x3cc>)
 80112a4:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80112a8:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 80112ac:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80112b0:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80112b4:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80112b6:	4a54      	ldr	r2, [pc, #336]	; (8011408 <jpeg_idct_11x11+0x3d0>)
 80112b8:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80112ba:	fb07 4406 	mla	r4, r7, r6, r4
 80112be:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80112c0:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80112c4:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 80112c6:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 80112c8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 80112cc:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 80112ce:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 80112d2:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 80112d6:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80112da:	4a4c      	ldr	r2, [pc, #304]	; (801140c <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80112dc:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80112e0:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80112e4:	4466      	add	r6, ip
 80112e6:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80112e8:	f641 456a 	movw	r5, #7274	; 0x1c6a
 80112ec:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80112ee:	eb07 0508 	add.w	r5, r7, r8
 80112f2:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80112f6:	f640 35b8 	movw	r5, #3000	; 0xbb8
 80112fa:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 80112fe:	eb04 050b 	add.w	r5, r4, fp
 8011302:	444d      	add	r5, r9
 8011304:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011308:	eb0e 0508 	add.w	r5, lr, r8
 801130c:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8011310:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011314:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011316:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801131a:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801131e:	4a3c      	ldr	r2, [pc, #240]	; (8011410 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011320:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011322:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011326:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011328:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801132c:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801132e:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8011330:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011332:	fb0b 440c 	mla	r4, fp, ip, r4
 8011336:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011338:	f242 040b 	movw	r4, #8203	; 0x200b
 801133c:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011340:	4c34      	ldr	r4, [pc, #208]	; (8011414 <jpeg_idct_11x11+0x3dc>)
 8011342:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011346:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 801134a:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801134e:	19d4      	adds	r4, r2, r7
 8011350:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011352:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011356:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011358:	5d14      	ldrb	r4, [r2, r4]
 801135a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801135c:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801135e:	9a05      	ldr	r2, [sp, #20]
 8011360:	1bd0      	subs	r0, r2, r7
 8011362:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011364:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011368:	5c10      	ldrb	r0, [r2, r0]
 801136a:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801136c:	9a04      	ldr	r2, [sp, #16]
 801136e:	eb02 000a 	add.w	r0, r2, sl
 8011372:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011374:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011378:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801137a:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801137c:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801137e:	eba2 0a0a 	sub.w	sl, r2, sl
 8011382:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011384:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011388:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801138c:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801138e:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011390:	1950      	adds	r0, r2, r5
 8011392:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011394:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011398:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801139a:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801139c:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801139e:	1b55      	subs	r5, r2, r5
 80113a0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80113a2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80113a6:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80113a8:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80113aa:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80113ac:	eb02 0009 	add.w	r0, r2, r9
 80113b0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80113b2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80113b6:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80113b8:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80113ba:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80113bc:	eba2 0909 	sub.w	r9, r2, r9
 80113c0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80113c2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80113c6:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80113ca:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80113cc:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80113ce:	1990      	adds	r0, r2, r6
 80113d0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80113d2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80113d6:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80113d8:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80113da:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80113dc:	1b96      	subs	r6, r2, r6
 80113de:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80113e0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80113e4:	5d90      	ldrb	r0, [r2, r6]
 80113e6:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80113e8:	f645 00ad 	movw	r0, #22701	; 0x58ad
 80113ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113ee:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80113f2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80113f4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80113f8:	5cd3      	ldrb	r3, [r2, r3]
 80113fa:	e00d      	b.n	8011418 <jpeg_idct_11x11+0x3e0>
 80113fc:	ffffc5b4 	.word	0xffffc5b4
 8011400:	ffffcf91 	.word	0xffffcf91
 8011404:	ffffdb05 	.word	0xffffdb05
 8011408:	ffffd37d 	.word	0xffffd37d
 801140c:	ffffe276 	.word	0xffffe276
 8011410:	ffffc675 	.word	0xffffc675
 8011414:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 8011418:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 801141a:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 801141c:	9b02      	ldr	r3, [sp, #8]
 801141e:	3320      	adds	r3, #32
 8011420:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 8011422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011424:	4293      	cmp	r3, r2
 8011426:	f47f af00 	bne.w	801122a <jpeg_idct_11x11+0x1f2>
  }
}
 801142a:	b065      	add	sp, #404	; 0x194
 801142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011430 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	b0eb      	sub	sp, #428	; 0x1ac
 8011436:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011438:	f1a2 0902 	sub.w	r9, r2, #2
 801143c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801143e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011442:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011446:	1f0b      	subs	r3, r1, #4
 8011448:	9300      	str	r3, [sp, #0]
 801144a:	f102 030e 	add.w	r3, r2, #14
 801144e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8011450:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011452:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011454:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011458:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801145c:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011460:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011464:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011466:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801146a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801146c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011470:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011474:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011476:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801147a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801147c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801147e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011480:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011482:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011486:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801148a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801148c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011490:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011494:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 8011496:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 8011498:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801149a:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 801149e:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 80114a2:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 80114a4:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 80114a8:	eb07 010c 	add.w	r1, r7, ip
 80114ac:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 80114ae:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 80114b2:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 80114b4:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 80114b8:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 80114ba:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 80114bc:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80114be:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 80114c2:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 80114c4:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80114c6:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 80114ca:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 80114cc:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 80114ce:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80114d0:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80114d4:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 80114d8:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80114da:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 80114dc:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80114de:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80114e2:	6a12      	ldr	r2, [r2, #32]
 80114e4:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80114e6:	9a00      	ldr	r2, [sp, #0]
 80114e8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80114ea:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80114ee:	9a00      	ldr	r2, [sp, #0]
 80114f0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80114f4:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80114f8:	49b6      	ldr	r1, [pc, #728]	; (80117d4 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80114fa:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80114fc:	9a00      	ldr	r2, [sp, #0]
 80114fe:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8011502:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011504:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011506:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801150a:	49b3      	ldr	r1, [pc, #716]	; (80117d8 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801150c:	eb02 0e06 	add.w	lr, r2, r6
 8011510:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011514:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011518:	f640 06f7 	movw	r6, #2295	; 0x8f7
 801151c:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011520:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011524:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011528:	18ae      	adds	r6, r5, r2
 801152a:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801152c:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801152e:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011530:	49aa      	ldr	r1, [pc, #680]	; (80117dc <jpeg_idct_12x12+0x3ac>)
 8011532:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011536:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8011538:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801153c:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011540:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011542:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8011546:	fb0a 4402 	mla	r4, sl, r2, r4
 801154a:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801154c:	49a4      	ldr	r1, [pc, #656]	; (80117e0 <jpeg_idct_12x12+0x3b0>)
 801154e:	fb01 0007 	mla	r0, r1, r7, r0
 8011552:	49a4      	ldr	r1, [pc, #656]	; (80117e4 <jpeg_idct_12x12+0x3b4>)
 8011554:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8011558:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801155a:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801155e:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011562:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011564:	eb02 0e05 	add.w	lr, r2, r5
 8011568:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801156c:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011570:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011572:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011576:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801157a:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801157e:	12ff      	asrs	r7, r7, #11
 8011580:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011584:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011588:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801158a:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801158e:	188f      	adds	r7, r1, r2
 8011590:	12ff      	asrs	r7, r7, #11
 8011592:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011594:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011596:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011598:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801159a:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801159c:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80115a0:	12d2      	asrs	r2, r2, #11
 80115a2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80115a4:	9a05      	ldr	r2, [sp, #20]
 80115a6:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80115a8:	9a06      	ldr	r2, [sp, #24]
 80115aa:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80115ac:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80115ae:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80115b0:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80115b4:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80115b6:	9a06      	ldr	r2, [sp, #24]
 80115b8:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80115ba:	9a02      	ldr	r2, [sp, #8]
 80115bc:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80115be:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80115c0:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80115c2:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80115c6:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80115c8:	9a02      	ldr	r2, [sp, #8]
 80115ca:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80115cc:	9a04      	ldr	r2, [sp, #16]
 80115ce:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80115d0:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80115d2:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80115d4:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80115d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80115dc:	9a04      	ldr	r2, [sp, #16]
 80115de:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80115e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80115e2:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80115e4:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80115e6:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80115ea:	f47f af32 	bne.w	8011452 <jpeg_idct_12x12+0x22>
 80115ee:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80115f0:	aa0a      	add	r2, sp, #40	; 0x28
 80115f2:	f1a3 0a04 	sub.w	sl, r3, #4
 80115f6:	332c      	adds	r3, #44	; 0x2c
 80115f8:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80115fa:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80115fe:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8011602:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011604:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 8011606:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 801160a:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 801160e:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8011610:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011612:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8011616:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8011618:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 801161c:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011620:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8011622:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011624:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011628:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801162c:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801162e:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8011632:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8011636:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 801163a:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 801163c:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8011640:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8011644:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8011648:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 801164c:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 801164e:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 8011650:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011654:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 8011658:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 801165c:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 801165e:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 8011660:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 8011664:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8011666:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 8011668:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 801166c:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801166e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011672:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011676:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801167a:	4956      	ldr	r1, [pc, #344]	; (80117d4 <jpeg_idct_12x12+0x3a4>)
 801167c:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 801167e:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011682:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011684:	eb04 0c06 	add.w	ip, r4, r6
 8011688:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801168c:	f640 0e5b 	movw	lr, #2139	; 0x85b
 8011690:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011694:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011698:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801169c:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80116a0:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80116a4:	4b4c      	ldr	r3, [pc, #304]	; (80117d8 <jpeg_idct_12x12+0x3a8>)
 80116a6:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80116aa:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 80116ae:	eb01 0609 	add.w	r6, r1, r9
 80116b2:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80116b6:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80116ba:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80116bc:	f243 28c6 	movw	r8, #12998	; 0x32c6
 80116c0:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80116c4:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80116c8:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80116ca:	4845      	ldr	r0, [pc, #276]	; (80117e0 <jpeg_idct_12x12+0x3b0>)
 80116cc:	fb00 1103 	mla	r1, r0, r3, r1
 80116d0:	4b44      	ldr	r3, [pc, #272]	; (80117e4 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80116d2:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80116d4:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 80116d8:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 80116dc:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 80116de:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80116e2:	4461      	add	r1, ip
    z2 -= z3;
 80116e4:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80116e6:	4b40      	ldr	r3, [pc, #256]	; (80117e8 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80116e8:	eb04 0c05 	add.w	ip, r4, r5
 80116ec:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80116f0:	f641 087e 	movw	r8, #6270	; 0x187e
 80116f4:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80116f8:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80116fc:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011700:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 8011704:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011708:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801170a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801170e:	f81b c008 	ldrb.w	ip, [fp, r8]
 8011712:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011716:	9b00      	ldr	r3, [sp, #0]
 8011718:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801171c:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801171e:	9b01      	ldr	r3, [sp, #4]
 8011720:	191f      	adds	r7, r3, r4
 8011722:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011724:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011728:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801172c:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801172e:	9b01      	ldr	r3, [sp, #4]
 8011730:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 8011734:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011738:	f81b 4008 	ldrb.w	r4, [fp, r8]
 801173c:	9b00      	ldr	r3, [sp, #0]
 801173e:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011740:	9b04      	ldr	r3, [sp, #16]
 8011742:	199c      	adds	r4, r3, r6
 8011744:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011746:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801174a:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801174e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011750:	9b04      	ldr	r3, [sp, #16]
 8011752:	1b9e      	subs	r6, r3, r6
 8011754:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011756:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801175a:	f81b 4006 	ldrb.w	r4, [fp, r6]
 801175e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011760:	9b05      	ldr	r3, [sp, #20]
 8011762:	eb03 0409 	add.w	r4, r3, r9
 8011766:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011768:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801176c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8011770:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011772:	9b05      	ldr	r3, [sp, #20]
 8011774:	eba3 0009 	sub.w	r0, r3, r9
 8011778:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801177a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801177e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011782:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011784:	9b02      	ldr	r3, [sp, #8]
 8011786:	1958      	adds	r0, r3, r5
 8011788:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801178a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801178e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011792:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011794:	9b02      	ldr	r3, [sp, #8]
 8011796:	1b5d      	subs	r5, r3, r5
 8011798:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801179a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801179e:	f81b 0005 	ldrb.w	r0, [fp, r5]
 80117a2:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80117a4:	9b03      	ldr	r3, [sp, #12]
 80117a6:	1858      	adds	r0, r3, r1
 80117a8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80117aa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80117ae:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80117b2:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80117b4:	9b03      	ldr	r3, [sp, #12]
 80117b6:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 80117b8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80117bc:	f81b 1001 	ldrb.w	r1, [fp, r1]
 80117c0:	9b00      	ldr	r3, [sp, #0]
 80117c2:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 80117c4:	9b07      	ldr	r3, [sp, #28]
 80117c6:	4553      	cmp	r3, sl
 80117c8:	f47f af17 	bne.w	80115fa <jpeg_idct_12x12+0x1ca>
  }
}
 80117cc:	b06b      	add	sp, #428	; 0x1ac
 80117ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d2:	bf00      	nop
 80117d4:	ffffeeaf 	.word	0xffffeeaf
 80117d8:	ffffde8b 	.word	0xffffde8b
 80117dc:	ffffd0b0 	.word	0xffffd0b0
 80117e0:	ffffea5c 	.word	0xffffea5c
 80117e4:	ffffc08c 	.word	0xffffc08c
 80117e8:	ffffc4df 	.word	0xffffc4df

080117ec <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80117ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f0:	b0f9      	sub	sp, #484	; 0x1e4
 80117f2:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 80117f4:	f1a2 0b02 	sub.w	fp, r2, #2
 80117f8:	930c      	str	r3, [sp, #48]	; 0x30
 80117fa:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80117fc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011800:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011804:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011808:	aa10      	add	r2, sp, #64	; 0x40
 801180a:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801180c:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011810:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011814:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011818:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801181c:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011820:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011822:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011824:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011828:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 801182c:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801182e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011832:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011836:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801183c:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801183e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011842:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8011844:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8011846:	1a09      	subs	r1, r1, r0
 8011848:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801184a:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801184e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011850:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 8011854:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011858:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 801185c:	fb00 5004 	mla	r0, r0, r4, r5
 8011860:	4408      	add	r0, r1
 8011862:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011864:	f241 000c 	movw	r0, #4108	; 0x100c
 8011868:	4360      	muls	r0, r4
 801186a:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801186c:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011870:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011872:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011876:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801187a:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801187c:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011880:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011882:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011884:	1a2d      	subs	r5, r5, r0
 8011886:	440d      	add	r5, r1
 8011888:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801188a:	4dd0      	ldr	r5, [pc, #832]	; (8011bcc <jpeg_idct_13x13+0x3e0>)
 801188c:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011890:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011894:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011896:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011898:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801189a:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801189e:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80118a0:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 80118a4:	4371      	muls	r1, r6
 80118a6:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80118a8:	48c9      	ldr	r0, [pc, #804]	; (8011bd0 <jpeg_idct_13x13+0x3e4>)
 80118aa:	4360      	muls	r0, r4
 80118ac:	1ac0      	subs	r0, r0, r3
 80118ae:	1a40      	subs	r0, r0, r1
 80118b0:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80118b2:	48c8      	ldr	r0, [pc, #800]	; (8011bd4 <jpeg_idct_13x13+0x3e8>)
 80118b4:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80118b8:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80118bc:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80118be:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80118c2:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80118c4:	6a3b      	ldr	r3, [r7, #32]
 80118c6:	434b      	muls	r3, r1
 80118c8:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80118ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80118cc:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80118ce:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80118d0:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 80118d4:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80118d6:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80118da:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80118dc:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80118de:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 80118e2:	4368      	muls	r0, r5
 80118e4:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80118e6:	f642 2050 	movw	r0, #10832	; 0x2a50
 80118ea:	4370      	muls	r0, r6
 80118ec:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80118ee:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 80118f2:	4428      	add	r0, r5
 80118f4:	f242 553e 	movw	r5, #9534	; 0x253e
 80118f8:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80118fa:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80118fe:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 8011902:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011906:	48b4      	ldr	r0, [pc, #720]	; (8011bd8 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011908:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 801190c:	44d6      	add	lr, sl
 801190e:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011912:	9801      	ldr	r0, [sp, #4]
 8011914:	4eb1      	ldr	r6, [pc, #708]	; (8011bdc <jpeg_idct_13x13+0x3f0>)
 8011916:	1818      	adds	r0, r3, r0
 8011918:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801191a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 801191e:	fb06 0603 	mla	r6, r6, r3, r0
 8011922:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011924:	4eae      	ldr	r6, [pc, #696]	; (8011be0 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011926:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011928:	9901      	ldr	r1, [sp, #4]
 801192a:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 801192e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011930:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011932:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011936:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011938:	9903      	ldr	r1, [sp, #12]
 801193a:	185d      	adds	r5, r3, r1
 801193c:	49a9      	ldr	r1, [pc, #676]	; (8011be4 <jpeg_idct_13x13+0x3f8>)
 801193e:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011940:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 8011942:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011944:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011948:	9901      	ldr	r1, [sp, #4]
 801194a:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801194c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801194e:	eb01 0a00 	add.w	sl, r1, r0
 8011952:	49a5      	ldr	r1, [pc, #660]	; (8011be8 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 8011954:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011956:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801195a:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 801195c:	4450      	add	r0, sl
    tmp13 += tmp14;
 801195e:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011960:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011964:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011968:	f640 2533 	movw	r5, #2611	; 0xa33
 801196c:	fb05 9101 	mla	r1, r5, r1, r9
 8011970:	4d9e      	ldr	r5, [pc, #632]	; (8011bec <jpeg_idct_13x13+0x400>)
 8011972:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011976:	9d01      	ldr	r5, [sp, #4]
 8011978:	1aeb      	subs	r3, r5, r3
 801197a:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801197e:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011982:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011984:	fb03 8805 	mla	r8, r3, r5, r8
 8011988:	9d03      	ldr	r5, [sp, #12]
 801198a:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 801198e:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011992:	9b06      	ldr	r3, [sp, #24]
 8011994:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011996:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011998:	12db      	asrs	r3, r3, #11
 801199a:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801199e:	9b06      	ldr	r3, [sp, #24]
 80119a0:	eba3 0e0e 	sub.w	lr, r3, lr
 80119a4:	ea4f 23ee 	mov.w	r3, lr, asr #11
 80119a8:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80119ac:	9b08      	ldr	r3, [sp, #32]
 80119ae:	4433      	add	r3, r6
 80119b0:	12db      	asrs	r3, r3, #11
 80119b2:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80119b4:	9b08      	ldr	r3, [sp, #32]
 80119b6:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80119b8:	9b07      	ldr	r3, [sp, #28]
 80119ba:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80119bc:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80119be:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80119c0:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80119c4:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80119c6:	9b07      	ldr	r3, [sp, #28]
 80119c8:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80119ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119cc:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80119ce:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80119d0:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80119d2:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80119d6:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80119d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119da:	eba3 0a0a 	sub.w	sl, r3, sl
 80119de:	ea4f 25ea 	mov.w	r5, sl, asr #11
 80119e2:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80119e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119e8:	440b      	add	r3, r1
 80119ea:	12db      	asrs	r3, r3, #11
 80119ec:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80119ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119f0:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80119f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f4:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80119f6:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80119f8:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80119fa:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80119fe:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011a00:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a06:	eba3 0909 	sub.w	r9, r3, r9
 8011a0a:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8011a0e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011a12:	9b04      	ldr	r3, [sp, #16]
 8011a14:	1b1c      	subs	r4, r3, r4
 8011a16:	f642 5341 	movw	r3, #11585	; 0x2d41
 8011a1a:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011a20:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011a22:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011a24:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011a28:	f47f aef0 	bne.w	801180c <jpeg_idct_13x13+0x20>
 8011a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8011a2e:	ac10      	add	r4, sp, #64	; 0x40
 8011a30:	3b04      	subs	r3, #4
 8011a32:	9303      	str	r3, [sp, #12]
 8011a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a36:	3330      	adds	r3, #48	; 0x30
 8011a38:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011a3a:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011a3c:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8011a40:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011a42:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 8011a46:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011a4a:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 8011a4e:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011a50:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8011a52:	920b      	str	r2, [sp, #44]	; 0x2c
 8011a54:	9303      	str	r3, [sp, #12]
 8011a56:	4613      	mov	r3, r2
 8011a58:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 8011a5a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 8011a5e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a60:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8011a64:	3310      	adds	r3, #16
 8011a66:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8011a68:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 8011a6a:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011a6c:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8011a6e:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011a70:	f240 3119 	movw	r1, #793	; 0x319
 8011a74:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011a76:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011a78:	4341      	muls	r1, r0
 8011a7a:	9802      	ldr	r0, [sp, #8]
 8011a7c:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011a80:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011a84:	fb00 500e 	mla	r0, r0, lr, r5
 8011a88:	4408      	add	r0, r1
 8011a8a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011a8c:	f241 000c 	movw	r0, #4108	; 0x100c
 8011a90:	fb00 f00e 	mul.w	r0, r0, lr
 8011a94:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011a96:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011a9a:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011a9c:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011aa0:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011aa4:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011aa6:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011aaa:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011aae:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011ab0:	1a2d      	subs	r5, r5, r0
 8011ab2:	440d      	add	r5, r1
 8011ab4:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011ab6:	4d45      	ldr	r5, [pc, #276]	; (8011bcc <jpeg_idct_13x13+0x3e0>)
 8011ab8:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011abc:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011ac0:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011ac2:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011ac4:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011ac6:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011aca:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011acc:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011ad0:	4371      	muls	r1, r6
 8011ad2:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011ad6:	483e      	ldr	r0, [pc, #248]	; (8011bd0 <jpeg_idct_13x13+0x3e4>)
 8011ad8:	fb00 f00e 	mul.w	r0, r0, lr
 8011adc:	1ac0      	subs	r0, r0, r3
 8011ade:	1a40      	subs	r0, r0, r1
 8011ae0:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011ae2:	483c      	ldr	r0, [pc, #240]	; (8011bd4 <jpeg_idct_13x13+0x3e8>)
 8011ae4:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011ae8:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011aec:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8011aee:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011af2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011af4:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 8011af6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011afa:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011afc:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011b00:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 8011b02:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011b06:	4834      	ldr	r0, [pc, #208]	; (8011bd8 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011b08:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011b0c:	4e33      	ldr	r6, [pc, #204]	; (8011bdc <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011b0e:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011b12:	eb0b 0705 	add.w	r7, fp, r5
 8011b16:	4457      	add	r7, sl
 8011b18:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011b1c:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011b20:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011b22:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8011b26:	1818      	adds	r0, r3, r0
 8011b28:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011b2a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8011b2e:	fb06 0603 	mla	r6, r6, r3, r0
 8011b32:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011b34:	4e2a      	ldr	r6, [pc, #168]	; (8011be0 <jpeg_idct_13x13+0x3f4>)
 8011b36:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011b3a:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011b3e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011b42:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011b44:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011b48:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011b4a:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011b4c:	4375      	muls	r5, r6
    tmp11 += tmp14;
 8011b4e:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011b52:	f244 6b94 	movw	fp, #18068	; 0x4694
 8011b56:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011b5a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 8011b5e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011b62:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011b64:	eb07 0a00 	add.w	sl, r7, r0
 8011b68:	481f      	ldr	r0, [pc, #124]	; (8011be8 <jpeg_idct_13x13+0x3fc>)
 8011b6a:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 8011b6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011b70:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011b72:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011b74:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011b78:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011b7c:	f640 2533 	movw	r5, #2611	; 0xa33
 8011b80:	fb05 9101 	mla	r1, r5, r1, r9
 8011b84:	4d19      	ldr	r5, [pc, #100]	; (8011bec <jpeg_idct_13x13+0x400>)
 8011b86:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011b8a:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011b8c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011b90:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011b94:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8011b98:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011b9a:	fb03 8807 	mla	r8, r3, r7, r8
 8011b9e:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011ba2:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011ba4:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011ba8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011baa:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011bac:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011bae:	442b      	add	r3, r5
 8011bb0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8011bb2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011bb6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011bba:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011bbc:	9b04      	ldr	r3, [sp, #16]
 8011bbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011bc0:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8011bc2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011bc6:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8011bca:	e011      	b.n	8011bf0 <jpeg_idct_13x13+0x404>
 8011bcc:	ffffd7ee 	.word	0xffffd7ee
 8011bd0:	fffffa8c 	.word	0xfffffa8c
 8011bd4:	ffffe64b 	.word	0xffffe64b
 8011bd8:	ffffbf5b 	.word	0xffffbf5b
 8011bdc:	fffff52b 	.word	0xfffff52b
 8011be0:	ffffcdb1 	.word	0xffffcdb1
 8011be4:	ffffdac2 	.word	0xffffdac2
 8011be8:	ffffeaf8 	.word	0xffffeaf8
 8011bec:	fffff116 	.word	0xfffff116
 8011bf0:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011bf2:	9b06      	ldr	r3, [sp, #24]
 8011bf4:	4433      	add	r3, r6
			     & RANGE_MASK];
 8011bf6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011bfa:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011bfe:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011c00:	9b06      	ldr	r3, [sp, #24]
 8011c02:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8011c04:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011c08:	f81c 3006 	ldrb.w	r3, [ip, r6]
 8011c0c:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011c0e:	9b05      	ldr	r3, [sp, #20]
 8011c10:	4403      	add	r3, r0
			     & RANGE_MASK];
 8011c12:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011c16:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011c1a:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011c1c:	9b05      	ldr	r3, [sp, #20]
 8011c1e:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8011c20:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011c24:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8011c28:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011c2a:	9b08      	ldr	r3, [sp, #32]
 8011c2c:	4453      	add	r3, sl
			     & RANGE_MASK];
 8011c2e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011c32:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011c36:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011c38:	9b08      	ldr	r3, [sp, #32]
 8011c3a:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8011c3e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011c42:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8011c46:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c4a:	440b      	add	r3, r1
			     & RANGE_MASK];
 8011c4c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011c50:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011c54:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c58:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011c5a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011c5e:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011c62:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011c66:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011c68:	9b07      	ldr	r3, [sp, #28]
 8011c6a:	444b      	add	r3, r9
			     & RANGE_MASK];
 8011c6c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011c70:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011c74:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011c76:	9b07      	ldr	r3, [sp, #28]
 8011c78:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 8011c7c:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011c80:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011c84:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011c86:	9b01      	ldr	r3, [sp, #4]
 8011c88:	eba3 030e 	sub.w	r3, r3, lr
 8011c8c:	434b      	muls	r3, r1
 8011c8e:	9902      	ldr	r1, [sp, #8]
 8011c90:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8011c94:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8011c98:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011c9c:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8011c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ca0:	9a03      	ldr	r2, [sp, #12]
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	f47f aec9 	bne.w	8011a3a <jpeg_idct_13x13+0x24e>
  }
}
 8011ca8:	b079      	add	sp, #484	; 0x1e4
 8011caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cae:	bf00      	nop

08011cb0 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb4:	b0ff      	sub	sp, #508	; 0x1fc
 8011cb6:	f1a2 0a02 	sub.w	sl, r2, #2
 8011cba:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011cbc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011cc0:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011cc2:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011cc6:	1f03      	subs	r3, r0, #4
 8011cc8:	9301      	str	r3, [sp, #4]
 8011cca:	f102 030e 	add.w	r3, r2, #14
 8011cce:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8011cd0:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011cd2:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011cd4:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011cd8:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011cdc:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ce0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ce4:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ce6:	9101      	str	r1, [sp, #4]
 8011ce8:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011cea:	9a01      	ldr	r2, [sp, #4]
 8011cec:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 8011cf0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8011cf4:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011cf6:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011cf8:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011cfa:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011cfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011d02:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011d06:	f640 2112 	movw	r1, #2578	; 0xa12
 8011d0a:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011d0e:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8011d12:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011d14:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011d16:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8011d18:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011d1c:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011d20:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 8011d22:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011d24:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011d28:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d2c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011d30:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011d32:	9a01      	ldr	r2, [sp, #4]
 8011d34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011d36:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d38:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011d3c:	48d2      	ldr	r0, [pc, #840]	; (8012088 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d3e:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011d40:	1916      	adds	r6, r2, r4
 8011d42:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011d46:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8011d4a:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011d4e:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011d52:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8011d56:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8011d58:	eb07 000c 	add.w	r0, r7, ip
 8011d5c:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8011d5e:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011d62:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d66:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 8011d6a:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8011d6c:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d6e:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8011d72:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8011d74:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011d76:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8011d7a:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8011d7c:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8011d7e:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011d80:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 8011d84:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 8011d86:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d88:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011d8a:	48c0      	ldr	r0, [pc, #768]	; (801208c <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d8c:	6a12      	ldr	r2, [r2, #32]
 8011d8e:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d90:	9a01      	ldr	r2, [sp, #4]
 8011d92:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011d94:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011d96:	9a01      	ldr	r2, [sp, #4]
 8011d98:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011d9c:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011da0:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011da2:	9a01      	ldr	r2, [sp, #4]
 8011da4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 8011da8:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011dac:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011dae:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 8011db2:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011db6:	f242 6152 	movw	r1, #9810	; 0x2652
 8011dba:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011dbe:	49b4      	ldr	r1, [pc, #720]	; (8012090 <jpeg_idct_14x14+0x3e0>)
 8011dc0:	eb09 0e05 	add.w	lr, r9, r5
 8011dc4:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8011dc8:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011dcc:	f641 0114 	movw	r1, #6164	; 0x1814
 8011dd0:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011dd4:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011dd8:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011dda:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 8011dde:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011de0:	48ac      	ldr	r0, [pc, #688]	; (8012094 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011de2:	fb08 f804 	mul.w	r8, r8, r4
 8011de6:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8011dea:	4441      	add	r1, r8
 8011dec:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011dee:	19b9      	adds	r1, r7, r6
 8011df0:	fb0c f101 	mul.w	r1, ip, r1
 8011df4:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011df8:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011dfc:	48a6      	ldr	r0, [pc, #664]	; (8012098 <jpeg_idct_14x14+0x3e8>)
 8011dfe:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011e02:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011e04:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e08:	48a4      	ldr	r0, [pc, #656]	; (801209c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011e0a:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011e0c:	1bf5      	subs	r5, r6, r7
 8011e0e:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e12:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8011e16:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e18:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 8011e1c:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011e1e:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8011e20:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e22:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011e24:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e26:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011e28:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011e2c:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011e2e:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011e32:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011e36:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011e38:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011e3a:	eba2 0e0e 	sub.w	lr, r2, lr
 8011e3e:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8011e42:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011e46:	9a04      	ldr	r2, [sp, #16]
 8011e48:	444a      	add	r2, r9
 8011e4a:	12d2      	asrs	r2, r2, #11
 8011e4c:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011e4e:	9a04      	ldr	r2, [sp, #16]
 8011e50:	eba2 0909 	sub.w	r9, r2, r9
 8011e54:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8011e58:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011e5c:	9a06      	ldr	r2, [sp, #24]
 8011e5e:	440a      	add	r2, r1
 8011e60:	12d2      	asrs	r2, r2, #11
 8011e62:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011e64:	9a06      	ldr	r2, [sp, #24]
 8011e66:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8011e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e6a:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011e6e:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8011e70:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011e74:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011e78:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011e7c:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011e7e:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011e80:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011e82:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011e86:	12d2      	asrs	r2, r2, #11
 8011e88:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011e8a:	9a07      	ldr	r2, [sp, #28]
 8011e8c:	eba2 0c0c 	sub.w	ip, r2, ip
 8011e90:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8011e94:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011e98:	9a05      	ldr	r2, [sp, #20]
 8011e9a:	442a      	add	r2, r5
 8011e9c:	12d2      	asrs	r2, r2, #11
 8011e9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011ea2:	9a05      	ldr	r2, [sp, #20]
 8011ea4:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011ea6:	9a03      	ldr	r2, [sp, #12]
 8011ea8:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011eaa:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011eac:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011eae:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011eb2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011eb6:	9a03      	ldr	r2, [sp, #12]
 8011eb8:	1a52      	subs	r2, r2, r1
 8011eba:	12d2      	asrs	r2, r2, #11
 8011ebc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ec2:	4552      	cmp	r2, sl
 8011ec4:	f47f af05 	bne.w	8011cd2 <jpeg_idct_14x14+0x22>
 8011ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eca:	3b04      	subs	r3, #4
 8011ecc:	9302      	str	r3, [sp, #8]
 8011ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ed0:	3334      	adds	r3, #52	; 0x34
 8011ed2:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8011ed4:	ab0e      	add	r3, sp, #56	; 0x38
 8011ed6:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011ed8:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011eda:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011ede:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011ee2:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8011ee6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8011eea:	920c      	str	r2, [sp, #48]	; 0x30
 8011eec:	9302      	str	r3, [sp, #8]
 8011eee:	4613      	mov	r3, r2
 8011ef0:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8011ef2:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ef4:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 8011ef6:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ef8:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011efa:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011efe:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011f02:	4861      	ldr	r0, [pc, #388]	; (8012088 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011f04:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011f06:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011f08:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 8011f0a:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011f0e:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8011f10:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011f14:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 8011f16:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011f1a:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011f1e:	005b      	lsls	r3, r3, #1
 8011f20:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8011f24:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 8011f26:	9b01      	ldr	r3, [sp, #4]
 8011f28:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 8011f2a:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011f2c:	18f1      	adds	r1, r6, r3
 8011f2e:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011f30:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8011f34:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011f38:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011f3c:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8011f40:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8011f42:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011f46:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 8011f4a:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 8011f4e:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8011f50:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8011f52:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011f54:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8011f58:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 8011f5a:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8011f5c:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 8011f5e:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011f60:	484a      	ldr	r0, [pc, #296]	; (801208c <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8011f62:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8011f64:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8011f66:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8011f68:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 8011f6a:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 8011f6e:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8011f70:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8011f74:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011f78:	eb03 0a08 	add.w	sl, r3, r8
 8011f7c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8011f80:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011f84:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011f88:	f242 6152 	movw	r1, #9810	; 0x2652
 8011f8c:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011f90:	493f      	ldr	r1, [pc, #252]	; (8012090 <jpeg_idct_14x14+0x3e0>)
 8011f92:	eb0a 0704 	add.w	r7, sl, r4
 8011f96:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8011f9a:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011f9e:	f641 0114 	movw	r1, #6164	; 0x1814
 8011fa2:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011fa4:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011fa8:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011faa:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 8011fae:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011fb2:	4838      	ldr	r0, [pc, #224]	; (8012094 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011fb4:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011fb8:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011fbc:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011fc0:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8011fc2:	4471      	add	r1, lr
 8011fc4:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011fc6:	eb08 010c 	add.w	r1, r8, ip
 8011fca:	4369      	muls	r1, r5
 8011fcc:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011fd0:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011fd4:	4830      	ldr	r0, [pc, #192]	; (8012098 <jpeg_idct_14x14+0x3e8>)
 8011fd6:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011fda:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011fdc:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011fe0:	482e      	ldr	r0, [pc, #184]	; (801209c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011fe2:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011fe4:	ebac 0408 	sub.w	r4, ip, r8
 8011fe8:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011fea:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011fec:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ff0:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011ff4:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011ff8:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011ffa:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011ffe:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012000:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8012002:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012006:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801200a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801200e:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012010:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012014:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012016:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012018:	980c      	ldr	r0, [sp, #48]	; 0x30
 801201a:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801201c:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8012020:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012022:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012024:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012026:	4453      	add	r3, sl
			     & RANGE_MASK];
 8012028:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801202c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012030:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012032:	9b05      	ldr	r3, [sp, #20]
 8012034:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8012038:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801203c:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8012040:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012042:	9b07      	ldr	r3, [sp, #28]
 8012044:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012046:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801204a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801204e:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012050:	9b07      	ldr	r3, [sp, #28]
 8012052:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012054:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012058:	f81b 3001 	ldrb.w	r3, [fp, r1]
 801205c:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012062:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012066:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801206a:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801206c:	9b03      	ldr	r3, [sp, #12]
 801206e:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012072:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012076:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801207a:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801207c:	9b08      	ldr	r3, [sp, #32]
 801207e:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012080:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8012084:	e00c      	b.n	80120a0 <jpeg_idct_14x14+0x3f0>
 8012086:	bf00      	nop
 8012088:	ffffc8fc 	.word	0xffffc8fc
 801208c:	ffffde0b 	.word	0xffffde0b
 8012090:	ffffdbf0 	.word	0xffffdbf0
 8012094:	fffff26e 	.word	0xfffff26e
 8012098:	ffffb409 	.word	0xffffb409
 801209c:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80120a0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80120a4:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80120a6:	9b08      	ldr	r3, [sp, #32]
 80120a8:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80120aa:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80120ae:	f81b 3005 	ldrb.w	r3, [fp, r5]
 80120b2:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80120b4:	9b06      	ldr	r3, [sp, #24]
 80120b6:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80120b8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80120bc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80120c0:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80120c2:	9b06      	ldr	r3, [sp, #24]
 80120c4:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80120c6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80120ca:	f81b 3004 	ldrb.w	r3, [fp, r4]
 80120ce:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80120d0:	9b04      	ldr	r3, [sp, #16]
 80120d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80120d4:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80120d6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80120da:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80120de:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80120e0:	9b04      	ldr	r3, [sp, #16]
 80120e2:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80120e4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80120e8:	f81b 3001 	ldrb.w	r3, [fp, r1]
 80120ec:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 80120ee:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80120f0:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 80120f2:	3320      	adds	r3, #32
 80120f4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80120f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120f8:	4293      	cmp	r3, r2
 80120fa:	f47f aeed 	bne.w	8011ed8 <jpeg_idct_14x14+0x228>
  }
}
 80120fe:	b07f      	add	sp, #508	; 0x1fc
 8012100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012104 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012108:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 801210c:	f1a2 0b02 	sub.w	fp, r2, #2
 8012110:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012112:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012116:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8012118:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801211c:	1f03      	subs	r3, r0, #4
 801211e:	9300      	str	r3, [sp, #0]
 8012120:	f102 030e 	add.w	r3, r2, #14
 8012124:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8012126:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012128:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801212a:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801212e:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012132:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012136:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801213a:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801213e:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012142:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012144:	9100      	str	r1, [sp, #0]
 8012146:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012148:	9a00      	ldr	r2, [sp, #0]
 801214a:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 801214e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8012150:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012152:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012154:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012156:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012158:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801215c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012160:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012164:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012166:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801216a:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801216e:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012170:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012174:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012178:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801217c:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 801217e:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8012182:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012184:	eba4 040c 	sub.w	r4, r4, ip
 8012188:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 801218c:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 801218e:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012190:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012194:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012196:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801219a:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 801219e:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80121a2:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80121a6:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 80121a8:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80121ac:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80121ae:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 80121b2:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80121b4:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80121b6:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80121ba:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80121be:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80121c0:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 80121c2:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80121c6:	443c      	add	r4, r7
 80121c8:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 80121cc:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80121d0:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80121d4:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 80121d6:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80121d8:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80121da:	f641 114c 	movw	r1, #6476	; 0x194c
 80121de:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80121e0:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80121e4:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80121e6:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 80121e8:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80121ea:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 80121ee:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 80121f0:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 80121f2:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80121f4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80121f6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 80121fa:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80121fc:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 8012200:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012202:	9908      	ldr	r1, [sp, #32]
 8012204:	9a01      	ldr	r2, [sp, #4]
 8012206:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012208:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801220c:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801220e:	9a00      	ldr	r2, [sp, #0]
 8012210:	6a12      	ldr	r2, [r2, #32]
 8012212:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012214:	9900      	ldr	r1, [sp, #0]
 8012216:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8012218:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801221a:	9900      	ldr	r1, [sp, #0]
 801221c:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012220:	9800      	ldr	r0, [sp, #0]
 8012222:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012226:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012228:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801222c:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012230:	48d2      	ldr	r0, [pc, #840]	; (801257c <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012232:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012236:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8012238:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801223c:	1917      	adds	r7, r2, r4
 801223e:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8012242:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012246:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801224a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801224e:	48cc      	ldr	r0, [pc, #816]	; (8012580 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012250:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012254:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012256:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801225a:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801225c:	48c9      	ldr	r0, [pc, #804]	; (8012584 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801225e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012262:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012266:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801226a:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801226c:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012270:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012274:	fb00 4402 	mla	r4, r0, r2, r4
 8012278:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801227a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801227e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012280:	f241 2068 	movw	r0, #4712	; 0x1268
 8012284:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012286:	f640 7039 	movw	r0, #3897	; 0xf39
 801228a:	fb00 1202 	mla	r2, r0, r2, r1
 801228e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012290:	1b92      	subs	r2, r2, r6
 8012292:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012294:	48bc      	ldr	r0, [pc, #752]	; (8012588 <jpeg_idct_15x15+0x484>)
 8012296:	fb00 110e 	mla	r1, r0, lr, r1
 801229a:	4431      	add	r1, r6
 801229c:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801229e:	9902      	ldr	r1, [sp, #8]
 80122a0:	4441      	add	r1, r8
 80122a2:	12c9      	asrs	r1, r1, #11
 80122a4:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80122a8:	9902      	ldr	r1, [sp, #8]
 80122aa:	eba1 0808 	sub.w	r8, r1, r8
 80122ae:	ea4f 21e8 	mov.w	r1, r8, asr #11
 80122b2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80122b6:	9906      	ldr	r1, [sp, #24]
 80122b8:	4449      	add	r1, r9
 80122ba:	12c9      	asrs	r1, r1, #11
 80122bc:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80122be:	9906      	ldr	r1, [sp, #24]
 80122c0:	eba1 0909 	sub.w	r9, r1, r9
 80122c4:	ea4f 21e9 	mov.w	r1, r9, asr #11
 80122c8:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80122cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80122ce:	4461      	add	r1, ip
 80122d0:	12c9      	asrs	r1, r1, #11
 80122d2:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80122d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80122d6:	eba1 0c0c 	sub.w	ip, r1, ip
 80122da:	ea4f 21ec 	mov.w	r1, ip, asr #11
 80122de:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122e2:	9903      	ldr	r1, [sp, #12]
 80122e4:	4411      	add	r1, r2
 80122e6:	12c9      	asrs	r1, r1, #11
 80122e8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80122ea:	9903      	ldr	r1, [sp, #12]
 80122ec:	1a8a      	subs	r2, r1, r2
 80122ee:	12d2      	asrs	r2, r2, #11
 80122f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80122f4:	9a07      	ldr	r2, [sp, #28]
 80122f6:	443a      	add	r2, r7
 80122f8:	12d2      	asrs	r2, r2, #11
 80122fa:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80122fc:	9a07      	ldr	r2, [sp, #28]
 80122fe:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012300:	9a04      	ldr	r2, [sp, #16]
 8012302:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012304:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012306:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012308:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801230c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012310:	9a04      	ldr	r2, [sp, #16]
 8012312:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012314:	9a05      	ldr	r2, [sp, #20]
 8012316:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012318:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801231a:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801231c:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012320:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012324:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012326:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012328:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801232a:	9a01      	ldr	r2, [sp, #4]
 801232c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012330:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012332:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012334:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012338:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801233c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801233e:	455a      	cmp	r2, fp
 8012340:	f47f aef2 	bne.w	8012128 <jpeg_idct_15x15+0x24>
 8012344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012346:	f1a3 0904 	sub.w	r9, r3, #4
 801234a:	3338      	adds	r3, #56	; 0x38
 801234c:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 801234e:	ab0e      	add	r3, sp, #56	; 0x38
 8012350:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012352:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012356:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 801235a:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801235c:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 8012360:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012362:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8012366:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012368:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801236a:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 801236e:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8012370:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012372:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8012374:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012376:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012378:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801237c:	f242 419d 	movw	r1, #9373	; 0x249d
 8012380:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8012382:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8012386:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801238a:	eba2 020c 	sub.w	r2, r2, ip
 801238e:	0052      	lsls	r2, r2, #1
 8012390:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8012394:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8012396:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012398:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801239c:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801239e:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80123a2:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80123a6:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 80123a8:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80123ac:	1a8a      	subs	r2, r1, r2
 80123ae:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 80123b0:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80123b4:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80123b8:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 80123ba:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80123bc:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80123c0:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80123c2:	f241 1282 	movw	r2, #4482	; 0x1182
 80123c6:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 80123c8:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80123cc:	440a      	add	r2, r1
 80123ce:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 80123d2:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80123d6:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 80123d8:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80123da:	4c68      	ldr	r4, [pc, #416]	; (801257c <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80123dc:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80123de:	f641 124c 	movw	r2, #6476	; 0x194c
 80123e2:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80123e4:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80123e8:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80123ea:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 80123ec:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 80123ee:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80123f0:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 80123f2:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80123f4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80123f6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 80123fa:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 80123fc:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80123fe:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 8012402:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 8012404:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012406:	9808      	ldr	r0, [sp, #32]
 8012408:	9a01      	ldr	r2, [sp, #4]
 801240a:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801240e:	6948      	ldr	r0, [r1, #20]
 8012410:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 8012414:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012416:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 801241a:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 801241c:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 801241e:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 8012422:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012426:	1950      	adds	r0, r2, r5
 8012428:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801242a:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801242e:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012432:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8012436:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801243a:	4c54      	ldr	r4, [pc, #336]	; (801258c <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801243c:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801243e:	4850      	ldr	r0, [pc, #320]	; (8012580 <jpeg_idct_15x15+0x47c>)
 8012440:	4378      	muls	r0, r7
 8012442:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012444:	484f      	ldr	r0, [pc, #316]	; (8012584 <jpeg_idct_15x15+0x480>)
 8012446:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012448:	f642 5002 	movw	r0, #11522	; 0x2d02
 801244c:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012450:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012452:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012456:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801245a:	fb04 0002 	mla	r0, r4, r2, r0
 801245e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012460:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012462:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012466:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012468:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801246c:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801246e:	eb02 000e 	add.w	r0, r2, lr
 8012472:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012474:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012476:	fb01 0202 	mla	r2, r1, r2, r0
 801247a:	eba2 020c 	sub.w	r2, r2, ip
 801247e:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012480:	4c41      	ldr	r4, [pc, #260]	; (8012588 <jpeg_idct_15x15+0x484>)
 8012482:	fb04 000e 	mla	r0, r4, lr, r0
 8012486:	4460      	add	r0, ip
 8012488:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801248a:	9802      	ldr	r0, [sp, #8]
 801248c:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801248e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012492:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012496:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012498:	9990      	ldr	r1, [sp, #576]	; 0x240
 801249a:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801249c:	9902      	ldr	r1, [sp, #8]
 801249e:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124a0:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 80124a2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124a6:	f81a 0006 	ldrb.w	r0, [sl, r6]
 80124aa:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124ac:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124b0:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 80124b4:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80124b8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124bc:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80124c0:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124c2:	f81a 1001 	ldrb.w	r1, [sl, r1]
 80124c6:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124c8:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80124cc:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 80124d0:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80124d4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124d8:	f81a 1001 	ldrb.w	r1, [sl, r1]
 80124dc:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80124de:	f81a 100b 	ldrb.w	r1, [sl, fp]
 80124e2:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80124e4:	9903      	ldr	r1, [sp, #12]
 80124e6:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80124e8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80124ec:	f81a 1001 	ldrb.w	r1, [sl, r1]
 80124f0:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80124f2:	9903      	ldr	r1, [sp, #12]
 80124f4:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80124f6:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80124f8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80124fc:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012500:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012502:	9a07      	ldr	r2, [sp, #28]
 8012504:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012506:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801250a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801250e:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012510:	9a07      	ldr	r2, [sp, #28]
 8012512:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012514:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012518:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801251c:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801251e:	9a04      	ldr	r2, [sp, #16]
 8012520:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012522:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012526:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801252a:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801252c:	9a04      	ldr	r2, [sp, #16]
 801252e:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012530:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012534:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012538:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801253a:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801253c:	9a05      	ldr	r2, [sp, #20]
 801253e:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012540:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012544:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012548:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801254a:	9a05      	ldr	r2, [sp, #20]
 801254c:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801254e:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012550:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012554:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8012558:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801255a:	9a01      	ldr	r2, [sp, #4]
 801255c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012560:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8012564:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012568:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 801256a:	9b00      	ldr	r3, [sp, #0]
 801256c:	3320      	adds	r3, #32
 801256e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8012570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012572:	454b      	cmp	r3, r9
 8012574:	f47f aeed 	bne.w	8012352 <jpeg_idct_15x15+0x24e>
 8012578:	e00a      	b.n	8012590 <jpeg_idct_15x15+0x48c>
 801257a:	bf00      	nop
 801257c:	ffffba5c 	.word	0xffffba5c
 8012580:	ffffe566 	.word	0xffffe566
 8012584:	ffffd4f6 	.word	0xffffd4f6
 8012588:	ffffe42f 	.word	0xffffe42f
 801258c:	ffffdc67 	.word	0xffffdc67
  }
}
 8012590:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8012594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012598 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801259c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80125a0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80125a2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80125a6:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125aa:	1e93      	subs	r3, r2, #2
 80125ac:	9300      	str	r3, [sp, #0]
 80125ae:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80125b0:	f1a3 0904 	sub.w	r9, r3, #4
 80125b4:	f102 030e 	add.w	r3, r2, #14
 80125b8:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 80125ba:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125bc:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80125be:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80125c2:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80125c6:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125ca:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125ce:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125d0:	9100      	str	r1, [sp, #0]
 80125d2:	f859 1f04 	ldr.w	r1, [r9, #4]!
 80125d6:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80125d8:	9900      	ldr	r1, [sp, #0]
 80125da:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 80125de:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80125e0:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 80125e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80125e8:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80125ea:	f642 10cf 	movw	r0, #10703	; 0x29cf
 80125ee:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80125f0:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 80125f2:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80125f4:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80125f6:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80125f8:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80125fc:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80125fe:	4ad6      	ldr	r2, [pc, #856]	; (8012958 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012600:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 8012604:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8012608:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801260c:	9900      	ldr	r1, [sp, #0]
 801260e:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 8012612:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8012616:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8012618:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801261c:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012620:	f642 4563 	movw	r5, #11363	; 0x2c63
 8012624:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012626:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801262a:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801262e:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012632:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012636:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801263a:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 801263e:	eb07 020c 	add.w	r2, r7, ip
 8012642:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012644:	eba7 020c 	sub.w	r2, r7, ip
 8012648:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801264a:	1972      	adds	r2, r6, r5
 801264c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801264e:	1b72      	subs	r2, r6, r5
 8012650:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012652:	eb0b 0204 	add.w	r2, fp, r4
 8012656:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012658:	ebab 0204 	sub.w	r2, fp, r4
 801265c:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801265e:	1842      	adds	r2, r0, r1
 8012660:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012662:	1a42      	subs	r2, r0, r1
 8012664:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012666:	9a00      	ldr	r2, [sp, #0]
 8012668:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 801266c:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8012670:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012672:	9a00      	ldr	r2, [sp, #0]
 8012674:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 8012678:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 801267c:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801267e:	9800      	ldr	r0, [sp, #0]
 8012680:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012684:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012686:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801268a:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801268e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012690:	9800      	ldr	r0, [sp, #0]
 8012692:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 8012696:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012698:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 801269c:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801269e:	f642 344e 	movw	r4, #11086	; 0x2b4e
 80126a2:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80126a4:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80126a8:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80126ac:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80126b0:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80126b4:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80126b8:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80126bc:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80126c0:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80126c4:	f241 5455 	movw	r4, #5461	; 0x1555
 80126c8:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 80126ca:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80126ce:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80126d0:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 80126d4:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80126d6:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80126da:	4ca0      	ldr	r4, [pc, #640]	; (801295c <jpeg_idct_16x16+0x3c4>)
 80126dc:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80126e0:	4f9f      	ldr	r7, [pc, #636]	; (8012960 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 80126e2:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80126e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80126e6:	4464      	add	r4, ip
 80126e8:	445c      	add	r4, fp
 80126ea:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80126ee:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80126f0:	4f9c      	ldr	r7, [pc, #624]	; (8012964 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80126f2:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80126f4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80126f8:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80126fa:	f240 214d 	movw	r1, #589	; 0x24d
 80126fe:	fb01 4102 	mla	r1, r1, r2, r4
 8012702:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012704:	4998      	ldr	r1, [pc, #608]	; (8012968 <jpeg_idct_16x16+0x3d0>)
 8012706:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801270a:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801270c:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801270e:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8012712:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012716:	fb07 1a05 	mla	sl, r7, r5, r1
 801271a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801271c:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801271e:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012722:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8012726:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012728:	4990      	ldr	r1, [pc, #576]	; (801296c <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801272a:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801272c:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012730:	4351      	muls	r1, r2
    tmp1  += z1;
 8012732:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012734:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012738:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801273c:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801273e:	498c      	ldr	r1, [pc, #560]	; (8012970 <jpeg_idct_16x16+0x3d8>)
 8012740:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012742:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8012746:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012748:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801274c:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801274e:	eb05 0b00 	add.w	fp, r5, r0
 8012752:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012754:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012756:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012758:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801275c:	f640 5123 	movw	r1, #3363	; 0xd23
 8012760:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012762:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8012764:	445c      	add	r4, fp
    tmp3  += z2;
 8012766:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012768:	4429      	add	r1, r5
    tmp10 += z2;
 801276a:	4484      	add	ip, r0
    tmp11 += z2;
 801276c:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801276e:	12c9      	asrs	r1, r1, #11
 8012770:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012774:	9901      	ldr	r1, [sp, #4]
 8012776:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012778:	9903      	ldr	r1, [sp, #12]
 801277a:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801277c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801277e:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012780:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012784:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012786:	9903      	ldr	r1, [sp, #12]
 8012788:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801278a:	9905      	ldr	r1, [sp, #20]
 801278c:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801278e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012790:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012792:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012796:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012798:	9905      	ldr	r1, [sp, #20]
 801279a:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801279c:	9907      	ldr	r1, [sp, #28]
 801279e:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80127a0:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80127a2:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80127a4:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80127a8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80127aa:	9907      	ldr	r1, [sp, #28]
 80127ac:	eba1 0e0e 	sub.w	lr, r1, lr
 80127b0:	ea4f 21ee 	mov.w	r1, lr, asr #11
 80127b4:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 80127b8:	9908      	ldr	r1, [sp, #32]
 80127ba:	4461      	add	r1, ip
 80127bc:	12c9      	asrs	r1, r1, #11
 80127be:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 80127c0:	9908      	ldr	r1, [sp, #32]
 80127c2:	eba1 0c0c 	sub.w	ip, r1, ip
 80127c6:	ea4f 21ec 	mov.w	r1, ip, asr #11
 80127ca:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 80127ce:	9906      	ldr	r1, [sp, #24]
 80127d0:	4401      	add	r1, r0
 80127d2:	12c9      	asrs	r1, r1, #11
 80127d4:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80127d8:	9906      	ldr	r1, [sp, #24]
 80127da:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80127dc:	9904      	ldr	r1, [sp, #16]
 80127de:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80127e0:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80127e2:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80127e4:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80127e8:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80127ec:	9904      	ldr	r1, [sp, #16]
 80127ee:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80127f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80127f2:	12d2      	asrs	r2, r2, #11
 80127f4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80127f8:	9a02      	ldr	r2, [sp, #8]
 80127fa:	440a      	add	r2, r1
 80127fc:	12d2      	asrs	r2, r2, #11
 80127fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012802:	9a02      	ldr	r2, [sp, #8]
 8012804:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012808:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801280a:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801280c:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801280e:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012812:	f47f aed3 	bne.w	80125bc <jpeg_idct_16x16+0x24>
 8012816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8012818:	ad0e      	add	r5, sp, #56	; 0x38
 801281a:	3b04      	subs	r3, #4
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012820:	333c      	adds	r3, #60	; 0x3c
 8012822:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012824:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012826:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801282a:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 801282e:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012832:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012836:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 801283a:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801283e:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012842:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012844:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012846:	9300      	str	r3, [sp, #0]
 8012848:	4613      	mov	r3, r2
 801284a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 801284c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 801284e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012852:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012856:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012858:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801285a:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801285c:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012860:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012864:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8012868:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 801286c:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012870:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012872:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012876:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012878:	4a37      	ldr	r2, [pc, #220]	; (8012958 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801287a:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801287e:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012882:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012886:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801288a:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801288e:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012892:	eb0e 0207 	add.w	r2, lr, r7
 8012896:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012898:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 801289c:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 80128a0:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80128a2:	eb0c 0206 	add.w	r2, ip, r6
 80128a6:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80128a8:	ebac 0206 	sub.w	r2, ip, r6
 80128ac:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80128ae:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 80128b2:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 80128b6:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80128b8:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80128ba:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 80128bc:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 80128c0:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80128c2:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128c4:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 80128c8:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 80128cc:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 80128ce:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 80128d2:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80128d6:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80128da:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128de:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80128e0:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128e4:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 80128e6:	4e1d      	ldr	r6, [pc, #116]	; (801295c <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128e8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80128ea:	f242 74e9 	movw	r4, #10217	; 0x27e9
 80128ee:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80128f2:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80128f6:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80128fa:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80128fe:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012902:	f241 5455 	movw	r4, #5461	; 0x1555
 8012906:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801290a:	f640 5423 	movw	r4, #3363	; 0xd23
 801290e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012912:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012914:	4454      	add	r4, sl
 8012916:	4474      	add	r4, lr
 8012918:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 801291c:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012920:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012922:	eb0c 0409 	add.w	r4, ip, r9
 8012926:	445c      	add	r4, fp
 8012928:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801292c:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801292e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012930:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012932:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012936:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012938:	f240 224d 	movw	r2, #589	; 0x24d
 801293c:	fb02 4203 	mla	r2, r2, r3, r4
 8012940:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012942:	4a09      	ldr	r2, [pc, #36]	; (8012968 <jpeg_idct_16x16+0x3d0>)
 8012944:	fb02 4407 	mla	r4, r2, r7, r4
 8012948:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801294c:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012950:	4c04      	ldr	r4, [pc, #16]	; (8012964 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012952:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012954:	1afa      	subs	r2, r7, r3
 8012956:	e00d      	b.n	8012974 <jpeg_idct_16x16+0x3dc>
 8012958:	ffffecc2 	.word	0xffffecc2
 801295c:	ffffb6d6 	.word	0xffffb6d6
 8012960:	ffffc542 	.word	0xffffc542
 8012964:	ffffe77a 	.word	0xffffe77a
 8012968:	ffffdbfa 	.word	0xffffdbfa
 801296c:	ffffeaab 	.word	0xffffeaab
 8012970:	ffffd817 	.word	0xffffd817
 8012974:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012978:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 801297c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801297e:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012980:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012984:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012988:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801298a:	4a4f      	ldr	r2, [pc, #316]	; (8012ac8 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801298c:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801298e:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012992:	435a      	muls	r2, r3
    tmp1  += z1;
 8012994:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012996:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801299a:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801299e:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80129a0:	4a4a      	ldr	r2, [pc, #296]	; (8012acc <jpeg_idct_16x16+0x534>)
 80129a2:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80129a4:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 80129a8:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80129aa:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80129ae:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80129b0:	eb07 0b00 	add.w	fp, r7, r0
 80129b4:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80129b6:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80129b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80129ba:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80129be:	f640 5223 	movw	r2, #3363	; 0xd23
 80129c2:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80129c4:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 80129c6:	445c      	add	r4, fp
    tmp3  += z2;
 80129c8:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80129ca:	443a      	add	r2, r7
 80129cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 80129ce:	4484      	add	ip, r0
    tmp11 += z2;
 80129d0:	4448      	add	r0, r9
			     & RANGE_MASK];
 80129d2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80129d6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80129da:	9b98      	ldr	r3, [sp, #608]	; 0x260
 80129dc:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80129de:	9b01      	ldr	r3, [sp, #4]
 80129e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129e2:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80129e4:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 80129e6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80129ea:	f818 2002 	ldrb.w	r2, [r8, r2]
 80129ee:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80129f0:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80129f2:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80129f4:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80129f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80129fa:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80129fe:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a02:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012a04:	f818 2006 	ldrb.w	r2, [r8, r6]
 8012a08:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012a0a:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012a0c:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012a0e:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012a10:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a14:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012a18:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a1c:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012a1e:	f818 2004 	ldrb.w	r2, [r8, r4]
 8012a22:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012a24:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012a28:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012a2c:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012a2e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a32:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012a36:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a3a:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012a3c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012a40:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012a42:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012a46:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012a4a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012a4c:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a50:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012a54:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a58:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012a5a:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012a5e:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012a60:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012a62:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012a64:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012a66:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a6a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012a6e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a72:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012a74:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012a78:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012a7a:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012a7e:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012a82:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012a86:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012a8a:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012a8e:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012a90:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012a94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012a96:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012a98:	9b02      	ldr	r3, [sp, #8]
 8012a9a:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012a9c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012aa0:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012aa4:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012aa6:	9b02      	ldr	r3, [sp, #8]
 8012aa8:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8012aac:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012aae:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012ab2:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012ab6:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8012ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aba:	4293      	cmp	r3, r2
 8012abc:	f47f aeb2 	bne.w	8012824 <jpeg_idct_16x16+0x28c>
  }
}
 8012ac0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ac8:	ffffeaab 	.word	0xffffeaab
 8012acc:	ffffd817 	.word	0xffffd817

08012ad0 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012ad6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012ad8:	3a02      	subs	r2, #2
{
 8012ada:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8012adc:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012ade:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012ae2:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012ae6:	f105 0320 	add.w	r3, r5, #32
 8012aea:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012aec:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8012af0:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012af2:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8012af6:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 8012afa:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012afe:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 8012b02:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8012b06:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b0e:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8012b12:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012b14:	ea4a 030b 	orr.w	r3, sl, fp
 8012b18:	ea4e 0303 	orr.w	r3, lr, r3
 8012b1c:	ea4c 0303 	orr.w	r3, ip, r3
 8012b20:	433b      	orrs	r3, r7
 8012b22:	4333      	orrs	r3, r6
 8012b24:	ea59 0303 	orrs.w	r3, r9, r3
 8012b28:	f040 8159 	bne.w	8012dde <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012b2c:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8012b2e:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8012b32:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8012b34:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8012b36:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8012b38:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8012b3a:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8012b3e:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8012b42:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012b46:	9b04      	ldr	r3, [sp, #16]
 8012b48:	42ab      	cmp	r3, r5
 8012b4a:	d1cf      	bne.n	8012aec <jpeg_idct_16x8+0x1c>
 8012b4c:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8012b4e:	ad0e      	add	r5, sp, #56	; 0x38
 8012b50:	3b04      	subs	r3, #4
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	9b03      	ldr	r3, [sp, #12]
 8012b56:	331c      	adds	r3, #28
 8012b58:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012b5a:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012b5c:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012b60:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8012b64:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012b68:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012b6c:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8012b70:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012b74:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012b78:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012b7a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012b7c:	9300      	str	r3, [sp, #0]
 8012b7e:	4613      	mov	r3, r2
 8012b80:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012b82:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012b84:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b88:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012b8c:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012b8e:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012b90:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012b92:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8012b96:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012b9a:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8012b9e:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8012ba2:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012ba6:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8012ba8:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012bac:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012bae:	4acf      	ldr	r2, [pc, #828]	; (8012eec <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012bb0:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012bb4:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012bb8:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012bbc:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012bc0:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012bc4:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012bc8:	eb0e 0207 	add.w	r2, lr, r7
 8012bcc:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012bce:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8012bd2:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012bd6:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012bd8:	eb0c 0206 	add.w	r2, ip, r6
 8012bdc:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012bde:	ebac 0206 	sub.w	r2, ip, r6
 8012be2:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012be4:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012be8:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012bec:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012bee:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012bf0:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8012bf2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012bf6:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012bf8:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012bfa:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012bfe:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8012c02:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8012c04:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012c08:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012c0c:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012c10:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012c14:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012c16:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012c1a:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012c1c:	4eb4      	ldr	r6, [pc, #720]	; (8012ef0 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012c1e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012c20:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8012c24:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012c28:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012c2c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012c30:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012c34:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012c38:	f241 5455 	movw	r4, #5461	; 0x1555
 8012c3c:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012c40:	f640 5423 	movw	r4, #3363	; 0xd23
 8012c44:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012c48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012c4a:	4454      	add	r4, sl
 8012c4c:	4474      	add	r4, lr
 8012c4e:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012c52:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012c56:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012c58:	eb0c 0409 	add.w	r4, ip, r9
 8012c5c:	445c      	add	r4, fp
 8012c5e:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012c62:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012c64:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012c66:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012c68:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012c6c:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012c6e:	f240 224d 	movw	r2, #589	; 0x24d
 8012c72:	fb02 4203 	mla	r2, r2, r3, r4
 8012c76:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012c78:	4a9e      	ldr	r2, [pc, #632]	; (8012ef4 <jpeg_idct_16x8+0x424>)
 8012c7a:	fb02 4407 	mla	r4, r2, r7, r4
 8012c7e:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012c82:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012c86:	4c9c      	ldr	r4, [pc, #624]	; (8012ef8 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012c88:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012c8a:	1afa      	subs	r2, r7, r3
 8012c8c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012c90:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8012c94:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012c96:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012c98:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012c9c:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012ca0:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012ca2:	4a96      	ldr	r2, [pc, #600]	; (8012efc <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012ca4:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012ca6:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012caa:	435a      	muls	r2, r3
    tmp1  += z1;
 8012cac:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012cae:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012cb2:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012cb6:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012cb8:	4a91      	ldr	r2, [pc, #580]	; (8012f00 <jpeg_idct_16x8+0x430>)
 8012cba:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012cbc:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8012cc0:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012cc2:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012cc6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012cc8:	eb07 0b00 	add.w	fp, r7, r0
 8012ccc:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012cce:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012cd0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012cd2:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012cd6:	f640 5223 	movw	r2, #3363	; 0xd23
 8012cda:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012cdc:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8012cde:	445c      	add	r4, fp
    tmp3  += z2;
 8012ce0:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012ce2:	443a      	add	r2, r7
 8012ce4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012ce6:	4484      	add	ip, r0
    tmp11 += z2;
 8012ce8:	4448      	add	r0, r9
			     & RANGE_MASK];
 8012cea:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012cee:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012cf2:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8012cf4:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012cf6:	9b01      	ldr	r3, [sp, #4]
 8012cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cfa:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012cfc:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8012cfe:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012d02:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012d06:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012d08:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012d0a:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012d0c:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012d0e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012d12:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012d16:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012d1a:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012d1c:	f818 2006 	ldrb.w	r2, [r8, r6]
 8012d20:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012d22:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012d24:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012d26:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012d28:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012d2c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012d30:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012d34:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012d36:	f818 2004 	ldrb.w	r2, [r8, r4]
 8012d3a:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012d3c:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012d40:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012d44:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012d46:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012d4a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012d4e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012d52:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012d54:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012d58:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012d5a:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012d5e:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012d62:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012d64:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012d68:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012d6c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012d70:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012d72:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012d76:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012d78:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012d7a:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012d7c:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012d7e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012d82:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012d86:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012d8a:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012d8c:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012d90:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012d92:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012d96:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012d9a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012d9e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012da2:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012da6:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012da8:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012dae:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012db0:	9b02      	ldr	r3, [sp, #8]
 8012db2:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012db4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012db8:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012dbc:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012dbe:	9b02      	ldr	r3, [sp, #8]
 8012dc0:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8012dc4:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012dc6:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012dca:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012dce:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8012dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012dd2:	4293      	cmp	r3, r2
 8012dd4:	f47f aec1 	bne.w	8012b5a <jpeg_idct_16x8+0x8a>
  }
}
 8012dd8:	b04f      	add	sp, #316	; 0x13c
 8012dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012dde:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8012de0:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012de4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8012de8:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012dea:	f241 1651 	movw	r6, #4433	; 0x1151
 8012dee:	eb0b 0300 	add.w	r3, fp, r0
 8012df2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012df4:	f641 067e 	movw	r6, #6270	; 0x187e
 8012df8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012dfc:	4e41      	ldr	r6, [pc, #260]	; (8012f04 <jpeg_idct_16x8+0x434>)
 8012dfe:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8012e02:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012e04:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012e0a:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 8012e0e:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8012e12:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8012e16:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8012e1a:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e1e:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8012e20:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8012e22:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e24:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8012e28:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 8012e2a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e2c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8012e30:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012e32:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012e36:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e3a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8012e3e:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012e40:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8012e42:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8012e46:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 8012e4a:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012e4e:	1930      	adds	r0, r6, r4
 8012e50:	4358      	muls	r0, r3
    z2 += z1;
 8012e52:	4b2d      	ldr	r3, [pc, #180]	; (8012f08 <jpeg_idct_16x8+0x438>)
 8012e54:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8012e58:	4b2c      	ldr	r3, [pc, #176]	; (8012f0c <jpeg_idct_16x8+0x43c>)
 8012e5a:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8012e5e:	eb09 040a 	add.w	r4, r9, sl
 8012e62:	4b2b      	ldr	r3, [pc, #172]	; (8012f10 <jpeg_idct_16x8+0x440>)
 8012e64:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8012e66:	f640 138e 	movw	r3, #2446	; 0x98e
 8012e6a:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8012e6e:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8012e70:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8012e74:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012e78:	4b26      	ldr	r3, [pc, #152]	; (8012f14 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 8012e7a:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012e7e:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8012e82:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012e86:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012e8a:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8012e8c:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8012e8e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8012e90:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8012e94:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8012e98:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012e9c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012ea0:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012ea4:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012ea6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012ea8:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012eac:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012eb0:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012eb4:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012eb8:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012eba:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012ebc:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012ec0:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012ec2:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012ec4:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012ec6:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012ec8:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012eca:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012ece:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012ed0:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012ed2:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012ed4:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012ed6:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012eda:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8012edc:	9b00      	ldr	r3, [sp, #0]
 8012ede:	eba3 0909 	sub.w	r9, r3, r9
 8012ee2:	ea4f 20e9 	mov.w	r0, r9, asr #11
 8012ee6:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 8012ee8:	e62d      	b.n	8012b46 <jpeg_idct_16x8+0x76>
 8012eea:	bf00      	nop
 8012eec:	ffffecc2 	.word	0xffffecc2
 8012ef0:	ffffb6d6 	.word	0xffffb6d6
 8012ef4:	ffffdbfa 	.word	0xffffdbfa
 8012ef8:	ffffe77a 	.word	0xffffe77a
 8012efc:	ffffeaab 	.word	0xffffeaab
 8012f00:	ffffd817 	.word	0xffffd817
 8012f04:	ffffc4df 	.word	0xffffc4df
 8012f08:	ffffc13b 	.word	0xffffc13b
 8012f0c:	fffff384 	.word	0xfffff384
 8012f10:	ffffe333 	.word	0xffffe333
 8012f14:	ffffadfd 	.word	0xffffadfd

08012f18 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	b0c5      	sub	sp, #276	; 0x114
 8012f1e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8012f20:	f1a2 0c02 	sub.w	ip, r2, #2
 8012f24:	320e      	adds	r2, #14
 8012f26:	9302      	str	r3, [sp, #8]
 8012f28:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012f2a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012f2e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8012f32:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012f34:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012f36:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012f3a:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012f3e:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012f42:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012f46:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f4a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012f4e:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012f50:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012f54:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8012f58:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f5e:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012f60:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8012f62:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012f64:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8012f68:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012f6c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8012f70:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012f72:	eba8 0102 	sub.w	r1, r8, r2
 8012f76:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012f7a:	eba5 0008 	sub.w	r0, r5, r8
 8012f7e:	f640 2112 	movw	r1, #2578	; 0xa12
 8012f82:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012f86:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012f88:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012f8a:	eb09 0407 	add.w	r4, r9, r7
 8012f8e:	440c      	add	r4, r1
 8012f90:	49ba      	ldr	r1, [pc, #744]	; (801327c <jpeg_idct_14x7+0x364>)
 8012f92:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8012f96:	18a9      	adds	r1, r5, r2
 8012f98:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012f9a:	9900      	ldr	r1, [sp, #0]
 8012f9c:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012fa0:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8012fa4:	fb01 0102 	mla	r1, r1, r2, r0
 8012fa8:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012fac:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012fb0:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012fb4:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012fb6:	4ab2      	ldr	r2, [pc, #712]	; (8013280 <jpeg_idct_14x7+0x368>)
 8012fb8:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012fbc:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8012fc0:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012fc2:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012fc4:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012fc8:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012fca:	6e35      	ldr	r5, [r6, #96]	; 0x60
 8012fcc:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012fce:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8012fd2:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012fd6:	eb02 0905 	add.w	r9, r2, r5
 8012fda:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012fde:	eba2 0905 	sub.w	r9, r2, r5
 8012fe2:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012fe6:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012fe8:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012fea:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012fee:	49a5      	ldr	r1, [pc, #660]	; (8013284 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 8012ff0:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 8012ff4:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012ff6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012ffa:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012ffc:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013000:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8013004:	44a9      	add	r9, r5
    tmp10 += z2;
 8013006:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013008:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801300c:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801300e:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013010:	4452      	add	r2, sl
 8013012:	12d2      	asrs	r2, r2, #11
 8013014:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013018:	9a01      	ldr	r2, [sp, #4]
 801301a:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801301e:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013022:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013026:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013028:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801302c:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013030:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013032:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013036:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013038:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801303a:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801303c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801303e:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013042:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8013044:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013046:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 801304a:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801304e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013052:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013056:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801305a:	ea4f 22e8 	mov.w	r2, r8, asr #11
 801305e:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013062:	9a04      	ldr	r2, [sp, #16]
 8013064:	4562      	cmp	r2, ip
 8013066:	f47f af66 	bne.w	8012f36 <jpeg_idct_14x7+0x1e>
 801306a:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801306c:	ac0c      	add	r4, sp, #48	; 0x30
 801306e:	3a04      	subs	r2, #4
 8013070:	9200      	str	r2, [sp, #0]
 8013072:	9a02      	ldr	r2, [sp, #8]
 8013074:	3218      	adds	r2, #24
 8013076:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013078:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801307a:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 801307e:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013080:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8013084:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013088:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801308c:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801308e:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8013092:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013094:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8013098:	9200      	str	r2, [sp, #0]
 801309a:	460a      	mov	r2, r1
 801309c:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801309e:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80130a0:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 80130a2:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80130a4:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 80130a8:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80130ac:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80130ae:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80130b0:	4d75      	ldr	r5, [pc, #468]	; (8013288 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 80130b2:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80130b6:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 80130b8:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 80130bc:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80130c0:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80130c2:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80130c6:	0052      	lsls	r2, r2, #1
 80130c8:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 80130cc:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 80130ce:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80130d2:	eb0e 0002 	add.w	r0, lr, r2
 80130d6:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80130d8:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80130dc:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80130e0:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80130e4:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 80130e8:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 80130ea:	eb0c 0507 	add.w	r5, ip, r7
 80130ee:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 80130f0:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80130f4:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 80130f8:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 80130fc:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80130fe:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 8013100:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 8013102:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 8013106:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013108:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 801310c:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 801310e:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 8013112:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 8013116:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 801311a:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801311c:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8013120:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8013122:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013126:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 801312a:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801312e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013132:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013136:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801313a:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801313e:	4853      	ldr	r0, [pc, #332]	; (801328c <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013140:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013144:	eb0a 0705 	add.w	r7, sl, r5
 8013148:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 801314c:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013150:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8013154:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8013158:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801315c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013160:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013164:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013168:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 801316a:	4470      	add	r0, lr
 801316c:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801316e:	eb08 000c 	add.w	r0, r8, ip
 8013172:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013174:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013178:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801317c:	fb06 0608 	mla	r6, r6, r8, r0
 8013180:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013182:	4e43      	ldr	r6, [pc, #268]	; (8013290 <jpeg_idct_14x7+0x378>)
 8013184:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013188:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801318c:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801318e:	ebac 0508 	sub.w	r5, ip, r8
 8013192:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013194:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013196:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 801319a:	483e      	ldr	r0, [pc, #248]	; (8013294 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801319c:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131a0:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80131a2:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80131a8:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80131aa:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80131ac:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 80131b0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80131b4:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131b8:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80131ba:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131bc:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 80131be:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80131c0:	9a02      	ldr	r2, [sp, #8]
 80131c2:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 80131c4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80131c8:	5dda      	ldrb	r2, [r3, r7]
 80131ca:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80131cc:	9a04      	ldr	r2, [sp, #16]
 80131ce:	4452      	add	r2, sl
			     & RANGE_MASK];
 80131d0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80131d4:	5c9a      	ldrb	r2, [r3, r2]
 80131d6:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80131d8:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80131da:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80131dc:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 80131e0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80131e4:	f813 200a 	ldrb.w	r2, [r3, sl]
 80131e8:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80131ea:	9a06      	ldr	r2, [sp, #24]
 80131ec:	4402      	add	r2, r0
			     & RANGE_MASK];
 80131ee:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80131f2:	5c9a      	ldrb	r2, [r3, r2]
 80131f4:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80131f6:	9a06      	ldr	r2, [sp, #24]
 80131f8:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 80131fa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80131fe:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013200:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013202:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013204:	9a01      	ldr	r2, [sp, #4]
 8013206:	444a      	add	r2, r9
			     & RANGE_MASK];
 8013208:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801320c:	5c9a      	ldrb	r2, [r3, r2]
 801320e:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013210:	9a01      	ldr	r2, [sp, #4]
 8013212:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8013216:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801321a:	f813 2009 	ldrb.w	r2, [r3, r9]
 801321e:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013220:	9a07      	ldr	r2, [sp, #28]
 8013222:	4432      	add	r2, r6
			     & RANGE_MASK];
 8013224:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013228:	5c9a      	ldrb	r2, [r3, r2]
 801322a:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801322c:	9a07      	ldr	r2, [sp, #28]
 801322e:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8013230:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013234:	5d9a      	ldrb	r2, [r3, r6]
 8013236:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013238:	9a05      	ldr	r2, [sp, #20]
 801323a:	4472      	add	r2, lr
			     & RANGE_MASK];
 801323c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013240:	5c9a      	ldrb	r2, [r3, r2]
 8013242:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013244:	9a05      	ldr	r2, [sp, #20]
 8013246:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 801324a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801324e:	5d5a      	ldrb	r2, [r3, r5]
 8013250:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013252:	9a03      	ldr	r2, [sp, #12]
 8013254:	4402      	add	r2, r0
			     & RANGE_MASK];
 8013256:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801325a:	5c9a      	ldrb	r2, [r3, r2]
 801325c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801325e:	9a03      	ldr	r2, [sp, #12]
 8013260:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8013262:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013266:	5c1a      	ldrb	r2, [r3, r0]
 8013268:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 801326a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801326c:	9900      	ldr	r1, [sp, #0]
 801326e:	428a      	cmp	r2, r1
 8013270:	f47f af02 	bne.w	8013078 <jpeg_idct_14x7+0x160>
  }
}
 8013274:	b045      	add	sp, #276	; 0x114
 8013276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801327a:	bf00      	nop
 801327c:	ffffc515 	.word	0xffffc515
 8013280:	ffffb0f1 	.word	0xffffb0f1
 8013284:	ffffd3e1 	.word	0xffffd3e1
 8013288:	ffffc8fc 	.word	0xffffc8fc
 801328c:	ffffdbf0 	.word	0xffffdbf0
 8013290:	ffffb409 	.word	0xffffb409
 8013294:	ffffc9e6 	.word	0xffffc9e6

08013298 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801329c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80132a0:	b0bb      	sub	sp, #236	; 0xec
 80132a2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80132a4:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80132a6:	3080      	adds	r0, #128	; 0x80
 80132a8:	320e      	adds	r2, #14
 80132aa:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80132ac:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80132ae:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80132b0:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80132b2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80132b6:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80132ba:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80132be:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80132c0:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80132c4:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80132c6:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80132ca:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80132ce:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 80132d0:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80132d2:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80132d6:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80132da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80132de:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80132e2:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 80132e4:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 80132e6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80132ea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80132ec:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80132f0:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80132f4:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80132f6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 80132f8:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80132fc:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8013300:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013302:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013306:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013308:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801330c:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013310:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013314:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013318:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801331c:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013320:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013324:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013328:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801332c:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013330:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013334:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013338:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801333c:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013340:	12d2      	asrs	r2, r2, #11
 8013342:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013346:	ea4f 22ee 	mov.w	r2, lr, asr #11
 801334a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801334e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013352:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013356:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013358:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801335c:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013360:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013362:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013364:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013368:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801336a:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801336c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801336e:	42b2      	cmp	r2, r6
 8013370:	d19f      	bne.n	80132b2 <jpeg_idct_12x6+0x1a>
 8013372:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8013376:	aa0a      	add	r2, sp, #40	; 0x28
 8013378:	3314      	adds	r3, #20
 801337a:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801337c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013380:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 8013384:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013386:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013388:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801338a:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 801338e:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013390:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8013394:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8013398:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801339a:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 801339e:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80133a2:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 80133a6:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 80133aa:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80133ae:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80133b0:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 80133b4:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80133b8:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 80133ba:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 80133be:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 80133c0:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 80133c4:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 80133c8:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 80133cc:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 80133d0:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 80133d4:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 80133d6:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 80133da:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80133dc:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 80133e0:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 80133e2:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 80133e6:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 80133e8:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 80133ec:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80133ee:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 80133f2:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 80133f4:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 80133f6:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80133fa:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80133fc:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013400:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013404:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013408:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801340c:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013410:	484f      	ldr	r0, [pc, #316]	; (8013550 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013412:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013416:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801341a:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801341c:	484d      	ldr	r0, [pc, #308]	; (8013554 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801341e:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013422:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013426:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801342a:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801342e:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013432:	eb01 0709 	add.w	r7, r1, r9
 8013436:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801343a:	4847      	ldr	r0, [pc, #284]	; (8013558 <jpeg_idct_12x6+0x2c0>)
 801343c:	fb00 1108 	mla	r1, r0, r8, r1
 8013440:	4846      	ldr	r0, [pc, #280]	; (801355c <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013442:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013444:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013448:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 801344c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013450:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8013454:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8013458:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801345a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801345e:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013460:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013464:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013468:	483d      	ldr	r0, [pc, #244]	; (8013560 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801346a:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801346c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013470:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013474:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013478:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801347a:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801347e:	eb00 080e 	add.w	r8, r0, lr
 8013482:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 8013484:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013488:	f811 c008 	ldrb.w	ip, [r1, r8]
 801348c:	9944      	ldr	r1, [sp, #272]	; 0x110
 801348e:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013492:	9904      	ldr	r1, [sp, #16]
 8013494:	eba1 0e0e 	sub.w	lr, r1, lr
 8013498:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801349a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801349e:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80134a2:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80134a4:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80134a8:	eb01 0c05 	add.w	ip, r1, r5
 80134ac:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80134ae:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80134b2:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80134b6:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80134ba:	9902      	ldr	r1, [sp, #8]
 80134bc:	eba1 0805 	sub.w	r8, r1, r5
 80134c0:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80134c2:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80134c6:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80134ca:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80134cc:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80134ce:	19cd      	adds	r5, r1, r7
 80134d0:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80134d2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80134d6:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80134d8:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80134da:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80134dc:	1bcf      	subs	r7, r1, r7
 80134de:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80134e0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80134e4:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80134e6:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80134e8:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80134ea:	190d      	adds	r5, r1, r4
 80134ec:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80134ee:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80134f2:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80134f4:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80134f6:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80134f8:	1b0c      	subs	r4, r1, r4
 80134fa:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80134fc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013500:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013502:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013504:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013506:	198c      	adds	r4, r1, r6
 8013508:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801350a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801350e:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013510:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013512:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013514:	1b8e      	subs	r6, r1, r6
 8013516:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013518:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801351c:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801351e:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013520:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013522:	eb01 0409 	add.w	r4, r1, r9
 8013526:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013528:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801352c:	5d0c      	ldrb	r4, [r1, r4]
 801352e:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013530:	9905      	ldr	r1, [sp, #20]
 8013532:	9801      	ldr	r0, [sp, #4]
 8013534:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 8013538:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801353c:	5c41      	ldrb	r1, [r0, r1]
 801353e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8013540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013542:	4553      	cmp	r3, sl
 8013544:	f47f af1a 	bne.w	801337c <jpeg_idct_12x6+0xe4>
  }
}
 8013548:	b03b      	add	sp, #236	; 0xec
 801354a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354e:	bf00      	nop
 8013550:	ffffeeaf 	.word	0xffffeeaf
 8013554:	ffffde8b 	.word	0xffffde8b
 8013558:	ffffea5c 	.word	0xffffea5c
 801355c:	ffffc08c 	.word	0xffffc08c
 8013560:	ffffc4df 	.word	0xffffc4df

08013564 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013568:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801356c:	b0af      	sub	sp, #188	; 0xbc
 801356e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013570:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013572:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013574:	320e      	adds	r2, #14
 8013576:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013578:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801357a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801357e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013586:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801358a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801358c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013590:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013594:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013596:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013598:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801359c:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801359e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80135a2:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 80135a4:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80135a6:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80135aa:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80135ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80135b2:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80135b6:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80135ba:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80135be:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80135c2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80135c4:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80135c8:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80135cc:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 80135d0:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80135d2:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 80135d6:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 80135da:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 80135de:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80135e2:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80135e6:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80135e8:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80135ec:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80135f0:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80135f2:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80135f6:	4b6c      	ldr	r3, [pc, #432]	; (80137a8 <jpeg_idct_10x5+0x244>)
 80135f8:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80135fc:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013600:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013602:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013606:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801360a:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801360e:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013612:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013614:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013618:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801361c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013620:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013624:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013628:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801362c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801362e:	d1aa      	bne.n	8013586 <jpeg_idct_10x5+0x22>
 8013630:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8013632:	a906      	add	r1, sp, #24
 8013634:	f1a3 0b04 	sub.w	fp, r3, #4
 8013638:	3310      	adds	r3, #16
 801363a:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801363c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013640:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013642:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 8013644:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8013648:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801364a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801364e:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013650:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013654:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013658:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 801365c:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013660:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013662:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8013664:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013668:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 801366a:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801366e:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013672:	006d      	lsls	r5, r5, #1
 8013674:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8013678:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801367c:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801367e:	eb05 030c 	add.w	r3, r5, ip
 8013682:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013684:	f241 0771 	movw	r7, #4209	; 0x1071
 8013688:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801368c:	4f46      	ldr	r7, [pc, #280]	; (80137a8 <jpeg_idct_10x5+0x244>)
 801368e:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 8013692:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8013696:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013698:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 801369c:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801369e:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 80136a0:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 80136a2:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 80136a4:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 80136a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 80136ac:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 80136b0:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 80136b4:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80136b6:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80136ba:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 80136be:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80136c2:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 80136c4:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80136c8:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 80136cc:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80136d0:	f240 7614 	movw	r6, #1812	; 0x714
 80136d4:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80136d6:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80136d8:	eba6 0608 	sub.w	r6, r6, r8
 80136dc:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80136de:	f241 26cf 	movw	r6, #4815	; 0x12cf
 80136e2:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80136e6:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 80136ea:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 80136ee:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80136f2:	1ad3      	subs	r3, r2, r3
 80136f4:	035b      	lsls	r3, r3, #13
 80136f6:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80136fa:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80136fe:	f642 0353 	movw	r3, #10323	; 0x2853
 8013702:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013704:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013706:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013708:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801370c:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013710:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013714:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013716:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 801371a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801371e:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013720:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 8013722:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013726:	5c82      	ldrb	r2, [r0, r2]
 8013728:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801372a:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801372c:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801372e:	f810 200c 	ldrb.w	r2, [r0, ip]
 8013732:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013734:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013736:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8013738:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801373c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013740:	5c82      	ldrb	r2, [r0, r2]
 8013742:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013744:	5dc3      	ldrb	r3, [r0, r7]
 8013746:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013748:	9b00      	ldr	r3, [sp, #0]
 801374a:	4443      	add	r3, r8
			    & RANGE_MASK];
 801374c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013750:	5cc3      	ldrb	r3, [r0, r3]
 8013752:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013754:	9b00      	ldr	r3, [sp, #0]
 8013756:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 801375a:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801375e:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013762:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013764:	9b02      	ldr	r3, [sp, #8]
 8013766:	442b      	add	r3, r5
			    & RANGE_MASK];
 8013768:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801376c:	5cc3      	ldrb	r3, [r0, r3]
 801376e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013770:	9b02      	ldr	r3, [sp, #8]
 8013772:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8013774:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013778:	5d43      	ldrb	r3, [r0, r5]
 801377a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801377c:	9b01      	ldr	r3, [sp, #4]
 801377e:	4453      	add	r3, sl
			    & RANGE_MASK];
 8013780:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013784:	5cc3      	ldrb	r3, [r0, r3]
 8013786:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013788:	9b01      	ldr	r3, [sp, #4]
 801378a:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 801378e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013792:	f810 300a 	ldrb.w	r3, [r0, sl]
 8013796:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8013798:	9b05      	ldr	r3, [sp, #20]
 801379a:	455b      	cmp	r3, fp
 801379c:	f47f af4e 	bne.w	801363c <jpeg_idct_10x5+0xd8>
  }
}
 80137a0:	b02f      	add	sp, #188	; 0xbc
 80137a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a6:	bf00      	nop
 80137a8:	ffffba5c 	.word	0xffffba5c

080137ac <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80137ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80137b0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80137b4:	b0a5      	sub	sp, #148	; 0x94
 80137b6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80137b8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80137ba:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137be:	f102 070e 	add.w	r7, r2, #14
 80137c2:	3d04      	subs	r5, #4
  wsptr = workspace;
 80137c4:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80137c6:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80137ca:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80137ce:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137d2:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80137d4:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80137d8:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137dc:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80137de:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80137e2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80137e4:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80137e8:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80137ec:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80137f0:	4966      	ldr	r1, [pc, #408]	; (801398c <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80137f2:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80137f6:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80137fa:	6a2a      	ldr	r2, [r5, #32]
 80137fc:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013800:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8013802:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013806:	eb0a 020b 	add.w	r2, sl, fp
 801380a:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801380e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013812:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013816:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801381a:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801381e:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013822:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013826:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801382a:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 801382e:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013832:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013836:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801383a:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 801383e:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013840:	d1c5      	bne.n	80137ce <jpeg_idct_8x4+0x22>
 8013842:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8013846:	a904      	add	r1, sp, #16
 8013848:	330c      	adds	r3, #12
 801384a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801384c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013850:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013854:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013856:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013858:	9302      	str	r3, [sp, #8]
 801385a:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 801385c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 8013860:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 8013864:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013868:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 801386c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 8013870:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013874:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013878:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 801387c:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013880:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013884:	4841      	ldr	r0, [pc, #260]	; (801398c <jpeg_idct_8x4+0x1e0>)
 8013886:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801388a:	f851 3c20 	ldr.w	r3, [r1, #-32]
 801388e:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013890:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 8013892:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013894:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8013898:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 801389c:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 80138a0:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 80138a2:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 80138a6:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 80138aa:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 80138ae:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 80138b0:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 80138b4:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80138b6:	1883      	adds	r3, r0, r2
 80138b8:	436b      	muls	r3, r5
    z2 += z1;
 80138ba:	4d35      	ldr	r5, [pc, #212]	; (8013990 <jpeg_idct_8x4+0x1e4>)
 80138bc:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 80138c0:	4d34      	ldr	r5, [pc, #208]	; (8013994 <jpeg_idct_8x4+0x1e8>)
 80138c2:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80138c6:	eb07 0209 	add.w	r2, r7, r9
 80138ca:	4d33      	ldr	r5, [pc, #204]	; (8013998 <jpeg_idct_8x4+0x1ec>)
 80138cc:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 80138ce:	f640 158e 	movw	r5, #2446	; 0x98e
 80138d2:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 80138d6:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 80138d8:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80138dc:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 80138e0:	f243 0a0b 	movw	sl, #12299	; 0x300b
 80138e4:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80138e8:	eb0e 0905 	add.w	r9, lr, r5
 80138ec:	4d2b      	ldr	r5, [pc, #172]	; (801399c <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 80138ee:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80138f2:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 80138f6:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 80138fa:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 80138fc:	4448      	add	r0, r9
 80138fe:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013902:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013906:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801390a:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 801390c:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 8013910:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013914:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013916:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 8013918:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801391c:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8013920:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013924:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013926:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801392a:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801392e:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013930:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 8013932:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013936:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 801393a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801393e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013942:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013946:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013948:	f81c 2009 	ldrb.w	r2, [ip, r9]
 801394c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801394e:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 8013952:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013956:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801395a:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801395c:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013960:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013962:	9b00      	ldr	r3, [sp, #0]
 8013964:	443b      	add	r3, r7
			    & RANGE_MASK];
 8013966:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801396a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801396e:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013970:	9b00      	ldr	r3, [sp, #0]
 8013972:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8013974:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013978:	f81c 3007 	ldrb.w	r3, [ip, r7]
 801397c:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 801397e:	9b03      	ldr	r3, [sp, #12]
 8013980:	4543      	cmp	r3, r8
 8013982:	f47f af63 	bne.w	801384c <jpeg_idct_8x4+0xa0>
  }
}
 8013986:	b025      	add	sp, #148	; 0x94
 8013988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801398c:	ffffc4df 	.word	0xffffc4df
 8013990:	ffffc13b 	.word	0xffffc13b
 8013994:	fffff384 	.word	0xfffff384
 8013998:	ffffe333 	.word	0xffffe333
 801399c:	ffffadfd 	.word	0xffffadfd

080139a0 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80139a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a4:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80139a6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 80139aa:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80139ac:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80139b0:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80139b2:	3080      	adds	r0, #128	; 0x80
 80139b4:	f102 040a 	add.w	r4, r2, #10
 80139b8:	f1a1 0c04 	sub.w	ip, r1, #4
 80139bc:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80139be:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80139c2:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80139c6:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80139c8:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80139cc:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80139ce:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139d2:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80139d6:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80139d8:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139dc:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139e0:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139e4:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 80139e8:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139ec:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80139f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80139f4:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139f8:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 80139fc:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8013a00:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013a04:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013a08:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013a0c:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013a10:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013a14:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013a16:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013a1a:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013a1e:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013a22:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013a24:	d1d0      	bne.n	80139c8 <jpeg_idct_6x3+0x28>
 8013a26:	f1a3 0e04 	sub.w	lr, r3, #4
 8013a2a:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013a2e:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013a32:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8013a36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013a38:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013a3a:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8013a3e:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013a40:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a44:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013a48:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013a4c:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a50:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8013a54:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013a58:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8013a5c:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8013a60:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 8013a64:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013a68:	f242 7131 	movw	r1, #10033	; 0x2731
 8013a6c:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8013a70:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8013a74:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8013a78:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013a7c:	eb04 0508 	add.w	r5, r4, r8
 8013a80:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013a84:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8013a88:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013a8c:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013a90:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013a94:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013a96:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013a9a:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013a9e:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013aa2:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013aa6:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8013aaa:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013aae:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013ab2:	5d04      	ldrb	r4, [r0, r4]
 8013ab4:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013ab6:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013aba:	9801      	ldr	r0, [sp, #4]
 8013abc:	5d84      	ldrb	r4, [r0, r6]
 8013abe:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013ac0:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013ac4:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8013ac8:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013acc:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013ad0:	5d04      	ldrb	r4, [r0, r4]
 8013ad2:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013ad4:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013ad8:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013ada:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013ade:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8013ae2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013ae6:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013aea:	5cc3      	ldrb	r3, [r0, r3]
 8013aec:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013aee:	5d43      	ldrb	r3, [r0, r5]
 8013af0:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8013af2:	d19c      	bne.n	8013a2e <jpeg_idct_6x3+0x8e>
  }
}
 8013af4:	b015      	add	sp, #84	; 0x54
 8013af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013afc <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b00:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b02:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8013b06:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8013b08:	1e96      	subs	r6, r2, #2
 8013b0a:	f10d 0c08 	add.w	ip, sp, #8
 8013b0e:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013b10:	3c04      	subs	r4, #4
 8013b12:	f102 0e06 	add.w	lr, r2, #6
 8013b16:	4660      	mov	r0, ip
{
 8013b18:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b1a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 8013b1e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013b22:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b24:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013b28:	6a27      	ldr	r7, [r4, #32]
 8013b2a:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8013b2e:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013b32:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 8013b36:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 8013b3a:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8013b3e:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013b42:	d1ea      	bne.n	8013b1a <jpeg_idct_4x2+0x1e>
 8013b44:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013b46:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013b4a:	f641 097e 	movw	r9, #6270	; 0x187e
 8013b4e:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8013b52:	46e0      	mov	r8, ip
 8013b54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013b56:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8013b5a:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 8013b5c:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8013b60:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 8013b64:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 8013b68:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 8013b6c:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8013b6e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013b72:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013b76:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013b78:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013b7a:	4b13      	ldr	r3, [pc, #76]	; (8013bc8 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013b7c:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013b80:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013b84:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013b88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b8a:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013b8e:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8013b92:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8013b96:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013b9a:	5def      	ldrb	r7, [r5, r7]
 8013b9c:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013ba0:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8013ba2:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013ba4:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013ba6:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013baa:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8013bae:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013bb0:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013bb4:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013bb8:	5c69      	ldrb	r1, [r5, r1]
 8013bba:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013bbc:	5caa      	ldrb	r2, [r5, r2]
 8013bbe:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013bc0:	d1c7      	bne.n	8013b52 <jpeg_idct_4x2+0x56>
  }
}
 8013bc2:	b00b      	add	sp, #44	; 0x2c
 8013bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bc8:	ffffc4df 	.word	0xffffc4df

08013bcc <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013bcc:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013bce:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8013bd4:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013bd6:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013bd8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013bdc:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013bde:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013be2:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013be4:	437b      	muls	r3, r7
{
 8013be6:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8013be8:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013bea:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8013bec:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013bee:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013bf0:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013bf2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013bf6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013bfa:	5c41      	ldrb	r1, [r0, r1]
 8013bfc:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013bfe:	5cc3      	ldrb	r3, [r0, r3]
 8013c00:	7073      	strb	r3, [r6, #1]
}
 8013c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c04 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c08:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013c0c:	f1a2 0802 	sub.w	r8, r2, #2
 8013c10:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013c12:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013c16:	3380      	adds	r3, #128	; 0x80
 8013c18:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c1a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8013c1c:	f1a3 0904 	sub.w	r9, r3, #4
 8013c20:	f102 030e 	add.w	r3, r2, #14
 8013c24:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8013c26:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013c28:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013c2c:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013c30:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013c34:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013c38:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013c3c:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013c40:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013c42:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c46:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013c48:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8013c4a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013c4c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013c54:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013c56:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013c58:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 8013c5c:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8013c5e:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8013c60:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8013c62:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013c66:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013c6a:	4ad3      	ldr	r2, [pc, #844]	; (8013fb8 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013c6c:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013c70:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8013c74:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8013c78:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8013c7a:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013c7e:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013c82:	f642 4563 	movw	r5, #11363	; 0x2c63
 8013c86:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013c88:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013c8c:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013c90:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013c94:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013c98:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013c9c:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8013ca0:	eb07 020c 	add.w	r2, r7, ip
 8013ca4:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013ca6:	eba7 020c 	sub.w	r2, r7, ip
 8013caa:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013cac:	1972      	adds	r2, r6, r5
 8013cae:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013cb0:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013cb2:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8013cb6:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013cb8:	eb0b 0204 	add.w	r2, fp, r4
 8013cbc:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013cbe:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013cc2:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8013cc6:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013cc8:	1842      	adds	r2, r0, r1
 8013cca:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013ccc:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013cce:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8013cd2:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013cd4:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013cd8:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013cdc:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013cde:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8013ce2:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013ce4:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8013ce8:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013cea:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013cee:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013cf0:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013cf4:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013cf6:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 8013cfa:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013cfc:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013cfe:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013d02:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013d06:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013d0a:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013d0e:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8013d12:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013d16:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013d1a:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013d1e:	f241 5455 	movw	r4, #5461	; 0x1555
 8013d22:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013d24:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013d28:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013d2a:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013d2e:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013d30:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013d34:	4ca1      	ldr	r4, [pc, #644]	; (8013fbc <jpeg_idct_8x16+0x3b8>)
 8013d36:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013d3a:	4fa1      	ldr	r7, [pc, #644]	; (8013fc0 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013d3c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013d3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013d40:	4464      	add	r4, ip
 8013d42:	445c      	add	r4, fp
 8013d44:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013d48:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013d4a:	4f9e      	ldr	r7, [pc, #632]	; (8013fc4 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013d4c:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013d4e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8013d52:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013d54:	f240 214d 	movw	r1, #589	; 0x24d
 8013d58:	fb01 4102 	mla	r1, r1, r2, r4
 8013d5c:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013d5e:	499a      	ldr	r1, [pc, #616]	; (8013fc8 <jpeg_idct_8x16+0x3c4>)
 8013d60:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013d64:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013d66:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013d68:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8013d6c:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013d70:	fb07 1a05 	mla	sl, r7, r5, r1
 8013d74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013d76:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013d78:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013d7c:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8013d80:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013d82:	4992      	ldr	r1, [pc, #584]	; (8013fcc <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013d84:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013d86:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013d8a:	4351      	muls	r1, r2
    tmp1  += z1;
 8013d8c:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013d8e:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013d92:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013d96:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013d98:	498d      	ldr	r1, [pc, #564]	; (8013fd0 <jpeg_idct_8x16+0x3cc>)
 8013d9a:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013d9c:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8013da0:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013da2:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013da6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013da8:	eb05 0b00 	add.w	fp, r5, r0
 8013dac:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013dae:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013db0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013db2:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013db6:	f640 5123 	movw	r1, #3363	; 0xd23
 8013dba:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013dbc:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8013dbe:	445c      	add	r4, fp
    tmp3  += z2;
 8013dc0:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013dc2:	4429      	add	r1, r5
    tmp10 += z2;
 8013dc4:	4484      	add	ip, r0
    tmp11 += z2;
 8013dc6:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013dc8:	12c9      	asrs	r1, r1, #11
 8013dca:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013dce:	9901      	ldr	r1, [sp, #4]
 8013dd0:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013dd2:	9903      	ldr	r1, [sp, #12]
 8013dd4:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013dd6:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013dd8:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013dda:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013dde:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013de0:	9903      	ldr	r1, [sp, #12]
 8013de2:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013de4:	9905      	ldr	r1, [sp, #20]
 8013de6:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013de8:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013dea:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013dec:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013df0:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013df2:	9905      	ldr	r1, [sp, #20]
 8013df4:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013df6:	9907      	ldr	r1, [sp, #28]
 8013df8:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013dfa:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013dfc:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013dfe:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013e02:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013e04:	9907      	ldr	r1, [sp, #28]
 8013e06:	eba1 0e0e 	sub.w	lr, r1, lr
 8013e0a:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8013e0e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013e12:	9908      	ldr	r1, [sp, #32]
 8013e14:	4461      	add	r1, ip
 8013e16:	12c9      	asrs	r1, r1, #11
 8013e18:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013e1a:	9908      	ldr	r1, [sp, #32]
 8013e1c:	eba1 0c0c 	sub.w	ip, r1, ip
 8013e20:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8013e24:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013e28:	9906      	ldr	r1, [sp, #24]
 8013e2a:	4401      	add	r1, r0
 8013e2c:	12c9      	asrs	r1, r1, #11
 8013e2e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013e32:	9906      	ldr	r1, [sp, #24]
 8013e34:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013e36:	9904      	ldr	r1, [sp, #16]
 8013e38:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013e3a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013e3c:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013e3e:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013e42:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013e46:	9904      	ldr	r1, [sp, #16]
 8013e48:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013e4c:	12d2      	asrs	r2, r2, #11
 8013e4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013e52:	9a02      	ldr	r2, [sp, #8]
 8013e54:	440a      	add	r2, r1
 8013e56:	12d2      	asrs	r2, r2, #11
 8013e58:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013e5c:	9a02      	ldr	r2, [sp, #8]
 8013e5e:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013e60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013e62:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013e64:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013e66:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013e6a:	f47f aedd 	bne.w	8013c28 <jpeg_idct_8x16+0x24>
 8013e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8013e70:	a80e      	add	r0, sp, #56	; 0x38
 8013e72:	f1a3 0904 	sub.w	r9, r3, #4
 8013e76:	333c      	adds	r3, #60	; 0x3c
 8013e78:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013e7a:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013e7e:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013e82:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013e84:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8013e86:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8013e8a:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8013e8c:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8013e90:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013e92:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8013e94:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8013e98:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013e9c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013e9e:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8013ea2:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013ea6:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013eaa:	4c4a      	ldr	r4, [pc, #296]	; (8013fd4 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 8013eac:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013eb0:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013eb4:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8013eb8:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013ebc:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013ebe:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8013ec0:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8013ec2:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8013ec6:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 8013eca:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 8013ece:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8013ed2:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8013ed4:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8013ed8:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 8013edc:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013ede:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8013ee2:	1862      	adds	r2, r4, r1
 8013ee4:	435a      	muls	r2, r3
    z2 += z1;
 8013ee6:	4b3c      	ldr	r3, [pc, #240]	; (8013fd8 <jpeg_idct_8x16+0x3d4>)
 8013ee8:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 8013eec:	4b3b      	ldr	r3, [pc, #236]	; (8013fdc <jpeg_idct_8x16+0x3d8>)
 8013eee:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013ef2:	eb0c 010a 	add.w	r1, ip, sl
 8013ef6:	4b3a      	ldr	r3, [pc, #232]	; (8013fe0 <jpeg_idct_8x16+0x3dc>)
 8013ef8:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 8013efa:	f640 138e 	movw	r3, #2446	; 0x98e
 8013efe:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 8013f02:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8013f04:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 8013f08:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013f0c:	4b35      	ldr	r3, [pc, #212]	; (8013fe4 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 8013f0e:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013f12:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8013f16:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013f1a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013f1e:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8013f20:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8013f22:	4454      	add	r4, sl
 8013f24:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013f28:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013f2c:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8013f30:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013f34:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8013f36:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013f3a:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013f3c:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013f40:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8013f44:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013f48:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 8013f4a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013f4e:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013f52:	9b00      	ldr	r3, [sp, #0]
 8013f54:	5dd9      	ldrb	r1, [r3, r7]
 8013f56:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013f58:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 8013f5a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013f5e:	5c59      	ldrb	r1, [r3, r1]
 8013f60:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013f62:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013f66:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013f68:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013f6a:	eb03 010b 	add.w	r1, r3, fp
 8013f6e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013f70:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013f74:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013f76:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013f78:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013f7a:	eba3 020b 	sub.w	r2, r3, fp
 8013f7e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013f80:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013f84:	5c9b      	ldrb	r3, [r3, r2]
 8013f86:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013f88:	9b01      	ldr	r3, [sp, #4]
 8013f8a:	9a00      	ldr	r2, [sp, #0]
 8013f8c:	4463      	add	r3, ip
			    & RANGE_MASK];
 8013f8e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013f92:	5cd3      	ldrb	r3, [r2, r3]
 8013f94:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013f96:	9b01      	ldr	r3, [sp, #4]
 8013f98:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 8013f9c:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013fa0:	f812 300c 	ldrb.w	r3, [r2, ip]
 8013fa4:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8013fa6:	9b04      	ldr	r3, [sp, #16]
 8013fa8:	454b      	cmp	r3, r9
 8013faa:	f47f af66 	bne.w	8013e7a <jpeg_idct_8x16+0x276>
  }
}
 8013fae:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8013fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb6:	bf00      	nop
 8013fb8:	ffffecc2 	.word	0xffffecc2
 8013fbc:	ffffb6d6 	.word	0xffffb6d6
 8013fc0:	ffffc542 	.word	0xffffc542
 8013fc4:	ffffe77a 	.word	0xffffe77a
 8013fc8:	ffffdbfa 	.word	0xffffdbfa
 8013fcc:	ffffeaab 	.word	0xffffeaab
 8013fd0:	ffffd817 	.word	0xffffd817
 8013fd4:	ffffc4df 	.word	0xffffc4df
 8013fd8:	ffffc13b 	.word	0xffffc13b
 8013fdc:	fffff384 	.word	0xfffff384
 8013fe0:	ffffe333 	.word	0xffffe333
 8013fe4:	ffffadfd 	.word	0xffffadfd

08013fe8 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fec:	b0ef      	sub	sp, #444	; 0x1bc
 8013fee:	f1a2 0e02 	sub.w	lr, r2, #2
 8013ff2:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ff4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013ff8:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013ffa:	3380      	adds	r3, #128	; 0x80
 8013ffc:	3804      	subs	r0, #4
 8013ffe:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8014000:	f102 030c 	add.w	r3, r2, #12
 8014004:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8014006:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014008:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801400c:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014010:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8014014:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014018:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801401c:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801401e:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014020:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014024:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014026:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 801402a:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801402c:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014030:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014038:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801403c:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8014040:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014042:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014044:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8014046:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801404a:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801404e:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8014050:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014054:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014058:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801405c:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014060:	49b7      	ldr	r1, [pc, #732]	; (8014340 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014062:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014064:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014066:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014068:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 801406c:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801406e:	1916      	adds	r6, r2, r4
 8014070:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014074:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8014078:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801407c:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014080:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8014084:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8014086:	eb07 010c 	add.w	r1, r7, ip
 801408a:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 801408c:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014090:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014094:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8014098:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 801409a:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801409c:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 80140a0:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 80140a2:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140a4:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 80140a8:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 80140aa:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 80140ae:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80140b2:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 80140b6:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 80140b8:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140ba:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140bc:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140c0:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80140c2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80140c4:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140c6:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 80140ca:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140cc:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80140d0:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140d4:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80140d6:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 80140da:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80140de:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80140e2:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80140e6:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80140ea:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80140ee:	4995      	ldr	r1, [pc, #596]	; (8014344 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80140f0:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80140f4:	eb0a 0805 	add.w	r8, sl, r5
 80140f8:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 80140fc:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8014100:	f201 211b 	addw	r1, r1, #539	; 0x21b
 8014104:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8014108:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801410a:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 801410e:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8014110:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014114:	4c8c      	ldr	r4, [pc, #560]	; (8014348 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 8014116:	4449      	add	r1, r9
 8014118:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801411a:	19b9      	adds	r1, r7, r6
 801411c:	fb0c f101 	mul.w	r1, ip, r1
 8014120:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014124:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014128:	4c88      	ldr	r4, [pc, #544]	; (801434c <jpeg_idct_7x14+0x364>)
 801412a:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801412e:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014130:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014134:	4c86      	ldr	r4, [pc, #536]	; (8014350 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014136:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014138:	1bf5      	subs	r5, r6, r7
 801413a:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801413e:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8014142:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8014146:	9c07      	ldr	r4, [sp, #28]
 8014148:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801414a:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801414c:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8014150:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014152:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014154:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014158:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 801415a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801415c:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801415e:	12d2      	asrs	r2, r2, #11
 8014160:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014164:	9a01      	ldr	r2, [sp, #4]
 8014166:	eba2 0208 	sub.w	r2, r2, r8
 801416a:	12d2      	asrs	r2, r2, #11
 801416c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014170:	9a03      	ldr	r2, [sp, #12]
 8014172:	4452      	add	r2, sl
 8014174:	12d2      	asrs	r2, r2, #11
 8014176:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014178:	9a03      	ldr	r2, [sp, #12]
 801417a:	eba2 0a0a 	sub.w	sl, r2, sl
 801417e:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8014182:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014186:	9a05      	ldr	r2, [sp, #20]
 8014188:	440a      	add	r2, r1
 801418a:	12d2      	asrs	r2, r2, #11
 801418c:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801418e:	9a05      	ldr	r2, [sp, #20]
 8014190:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8014192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014194:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014198:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 801419a:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801419c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801419e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80141a2:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80141a6:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80141a8:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80141aa:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80141ac:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80141b0:	12d2      	asrs	r2, r2, #11
 80141b2:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80141b4:	9a06      	ldr	r2, [sp, #24]
 80141b6:	eba2 0c0c 	sub.w	ip, r2, ip
 80141ba:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80141be:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80141c2:	9a04      	ldr	r2, [sp, #16]
 80141c4:	442a      	add	r2, r5
 80141c6:	12d2      	asrs	r2, r2, #11
 80141c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80141cc:	9a04      	ldr	r2, [sp, #16]
 80141ce:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80141d0:	9a02      	ldr	r2, [sp, #8]
 80141d2:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80141d4:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80141d6:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80141d8:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80141dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80141e0:	9a02      	ldr	r2, [sp, #8]
 80141e2:	1a52      	subs	r2, r2, r1
 80141e4:	12d2      	asrs	r2, r2, #11
 80141e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80141ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80141ec:	4572      	cmp	r2, lr
 80141ee:	f47f af0b 	bne.w	8014008 <jpeg_idct_7x14+0x20>
 80141f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 80141f4:	ac0c      	add	r4, sp, #48	; 0x30
 80141f6:	f1a3 0904 	sub.w	r9, r3, #4
 80141fa:	3334      	adds	r3, #52	; 0x34
 80141fc:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80141fe:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8014202:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8014204:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8014206:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 801420a:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801420c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8014210:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014212:	1b51      	subs	r1, r2, r5
 8014214:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8014218:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801421c:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014220:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014224:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 8014228:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801422c:	eba3 0c02 	sub.w	ip, r3, r2
 8014230:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014234:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014236:	4947      	ldr	r1, [pc, #284]	; (8014354 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014238:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801423c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8014240:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014244:	eb0e 000c 	add.w	r0, lr, ip
 8014248:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 801424c:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014250:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014254:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014258:	fb02 f208 	mul.w	r2, r2, r8
 801425c:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014260:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014264:	4d3c      	ldr	r5, [pc, #240]	; (8014358 <jpeg_idct_7x14+0x370>)
 8014266:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 801426a:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801426e:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8014270:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014274:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014276:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801427a:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801427c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801427e:	f641 53ef 	movw	r3, #7663	; 0x1def
 8014282:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014286:	eba2 050a 	sub.w	r5, r2, sl
 801428a:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801428e:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014290:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014292:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014294:	4b31      	ldr	r3, [pc, #196]	; (801435c <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 8014296:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 801429a:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801429c:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80142a0:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80142a4:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80142a6:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80142aa:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80142ae:	4455      	add	r5, sl
    tmp10 += z2;
 80142b0:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80142b2:	fb0b 220e 	mla	r2, fp, lr, r2
 80142b6:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80142b8:	eb01 020c 	add.w	r2, r1, ip
 80142bc:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 80142be:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80142c2:	5c9a      	ldrb	r2, [r3, r2]
 80142c4:	9b03      	ldr	r3, [sp, #12]
 80142c6:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80142c8:	9b01      	ldr	r3, [sp, #4]
 80142ca:	eba3 0c0c 	sub.w	ip, r3, ip
 80142ce:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80142d0:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80142d4:	f813 200c 	ldrb.w	r2, [r3, ip]
 80142d8:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80142da:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80142dc:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80142de:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80142e2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80142e6:	5c9a      	ldrb	r2, [r3, r2]
 80142e8:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80142ea:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80142ec:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80142ee:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80142f0:	eb03 020a 	add.w	r2, r3, sl
 80142f4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80142f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80142fa:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80142fc:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80142fe:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014300:	eba3 0a0a 	sub.w	sl, r3, sl
 8014304:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014306:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801430a:	f813 300a 	ldrb.w	r3, [r3, sl]
 801430e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8014310:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8014314:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014318:	f642 5341 	movw	r3, #11585	; 0x2d41
 801431c:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8014320:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014322:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8014326:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801432a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801432e:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8014330:	9b04      	ldr	r3, [sp, #16]
 8014332:	454b      	cmp	r3, r9
 8014334:	f47f af63 	bne.w	80141fe <jpeg_idct_7x14+0x216>
  }
}
 8014338:	b06f      	add	sp, #444	; 0x1bc
 801433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801433e:	bf00      	nop
 8014340:	ffffc8fc 	.word	0xffffc8fc
 8014344:	ffffdbf0 	.word	0xffffdbf0
 8014348:	fffff26e 	.word	0xfffff26e
 801434c:	ffffb409 	.word	0xffffb409
 8014350:	ffffc9e6 	.word	0xffffc9e6
 8014354:	ffffc515 	.word	0xffffc515
 8014358:	ffffb0f1 	.word	0xffffb0f1
 801435c:	ffffd3e1 	.word	0xffffd3e1

08014360 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014364:	b0d3      	sub	sp, #332	; 0x14c
 8014366:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014368:	f1a2 0a02 	sub.w	sl, r2, #2
 801436c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801436e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014372:	3380      	adds	r3, #128	; 0x80
 8014374:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014376:	1f0b      	subs	r3, r1, #4
 8014378:	9300      	str	r3, [sp, #0]
 801437a:	f102 030a 	add.w	r3, r2, #10
 801437e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8014380:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014382:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014384:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014388:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801438c:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014390:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014394:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014396:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801439a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801439c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80143a0:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80143a4:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80143a6:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143aa:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 80143ac:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80143ae:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80143b0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80143b2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80143b6:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80143ba:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80143bc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80143c0:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80143c4:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80143c8:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 80143ca:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 80143cc:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80143ce:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 80143d2:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 80143d6:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 80143d8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 80143dc:	eb07 010c 	add.w	r1, r7, ip
 80143e0:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 80143e2:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 80143e6:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 80143ea:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 80143ee:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 80143f0:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 80143f2:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 80143f6:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80143fa:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 80143fe:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8014400:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 8014402:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014404:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014408:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 801440c:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801440e:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8014410:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014412:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014416:	6a12      	ldr	r2, [r2, #32]
 8014418:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801441c:	9a00      	ldr	r2, [sp, #0]
 801441e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8014420:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014424:	9a00      	ldr	r2, [sp, #0]
 8014426:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801442a:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801442e:	4977      	ldr	r1, [pc, #476]	; (801460c <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014430:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014432:	9a00      	ldr	r2, [sp, #0]
 8014434:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8014438:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801443c:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801443e:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014442:	4973      	ldr	r1, [pc, #460]	; (8014610 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014444:	eb02 0806 	add.w	r8, r2, r6
 8014448:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801444c:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014450:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8014454:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014458:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801445c:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014460:	18ae      	adds	r6, r5, r2
 8014462:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014464:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014466:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014468:	496a      	ldr	r1, [pc, #424]	; (8014614 <jpeg_idct_6x12+0x2b4>)
 801446a:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801446e:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8014470:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014474:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014478:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801447a:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 801447e:	fb0b 4402 	mla	r4, fp, r2, r4
 8014482:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014484:	4964      	ldr	r1, [pc, #400]	; (8014618 <jpeg_idct_6x12+0x2b8>)
 8014486:	fb01 000c 	mla	r0, r1, ip, r0
 801448a:	4964      	ldr	r1, [pc, #400]	; (801461c <jpeg_idct_6x12+0x2bc>)
 801448c:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8014490:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014494:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014498:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801449c:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801449e:	eb02 0805 	add.w	r8, r2, r5
 80144a2:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80144a6:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80144aa:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80144ae:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80144b2:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80144b6:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80144b8:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80144ba:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80144be:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80144c2:	9902      	ldr	r1, [sp, #8]
 80144c4:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80144c6:	1a8a      	subs	r2, r1, r2
 80144c8:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80144ca:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80144cc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80144d0:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80144d2:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80144d4:	4432      	add	r2, r6
 80144d6:	12d2      	asrs	r2, r2, #11
 80144d8:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80144da:	9a05      	ldr	r2, [sp, #20]
 80144dc:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80144de:	9a06      	ldr	r2, [sp, #24]
 80144e0:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80144e2:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80144e4:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80144e6:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80144ea:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80144ec:	9a06      	ldr	r2, [sp, #24]
 80144ee:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80144f0:	9a03      	ldr	r2, [sp, #12]
 80144f2:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80144f4:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80144f6:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80144f8:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80144fc:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80144fe:	9a03      	ldr	r2, [sp, #12]
 8014500:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014504:	9a04      	ldr	r2, [sp, #16]
 8014506:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014508:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801450a:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801450c:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014510:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014512:	9a04      	ldr	r2, [sp, #16]
 8014514:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014516:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014518:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801451a:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801451c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014520:	f47f af2f 	bne.w	8014382 <jpeg_idct_6x12+0x22>
 8014524:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8014526:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014528:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 801452c:	f1a3 0c04 	sub.w	ip, r3, #4
 8014530:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8014534:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014538:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 801453c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 801453e:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014540:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8014544:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8014546:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801454a:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801454e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014552:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014556:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801455a:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 801455e:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8014562:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8014566:	eba3 0302 	sub.w	r3, r3, r2
 801456a:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801456c:	f242 7331 	movw	r3, #10033	; 0x2731
 8014570:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 8014574:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014578:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 801457c:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 8014580:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014584:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014588:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801458c:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014590:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8014594:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014596:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801459a:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801459c:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80145a0:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80145a4:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80145a8:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80145ac:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 80145b0:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80145b4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80145b8:	5c18      	ldrb	r0, [r3, r0]
 80145ba:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80145bc:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80145c0:	9b01      	ldr	r3, [sp, #4]
 80145c2:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145c4:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80145c6:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145c8:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 80145cc:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80145ce:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145d2:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80145d4:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145d6:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80145d8:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 80145dc:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80145de:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80145e0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80145e4:	f813 300e 	ldrb.w	r3, [r3, lr]
 80145e8:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80145ea:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80145ee:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 80145f2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80145f6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80145fa:	5cc3      	ldrb	r3, [r0, r3]
 80145fc:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80145fe:	5d03      	ldrb	r3, [r0, r4]
 8014600:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8014602:	d197      	bne.n	8014534 <jpeg_idct_6x12+0x1d4>
  }
}
 8014604:	b053      	add	sp, #332	; 0x14c
 8014606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801460a:	bf00      	nop
 801460c:	ffffeeaf 	.word	0xffffeeaf
 8014610:	ffffde8b 	.word	0xffffde8b
 8014614:	ffffd0b0 	.word	0xffffd0b0
 8014618:	ffffea5c 	.word	0xffffea5c
 801461c:	ffffc08c 	.word	0xffffc08c

08014620 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014624:	b0b9      	sub	sp, #228	; 0xe4
 8014626:	1e94      	subs	r4, r2, #2
 8014628:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801462a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801462e:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014630:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014632:	3380      	adds	r3, #128	; 0x80
 8014634:	3804      	subs	r0, #4
 8014636:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014638:	f102 0308 	add.w	r3, r2, #8
 801463c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801463e:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014642:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014644:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014648:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801464c:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801464e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8014652:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014654:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8014658:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801465a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801465e:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014662:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014666:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014668:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 801466c:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 801466e:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014672:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014674:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014678:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801467c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014680:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014682:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014684:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014686:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 801468a:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801468c:	19f3      	adds	r3, r6, r7
 801468e:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014690:	f241 0271 	movw	r2, #4209	; 0x1071
 8014694:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014698:	4a6d      	ldr	r2, [pc, #436]	; (8014850 <jpeg_idct_5x10+0x230>)
 801469a:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 801469e:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 80146a0:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80146a4:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 80146a8:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 80146ac:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 80146b0:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 80146b2:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80146b4:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80146b8:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80146ba:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80146be:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80146c0:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80146c2:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80146c6:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80146c8:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 80146cc:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80146d0:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 80146d4:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80146d6:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 80146da:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 80146de:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80146e0:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80146e4:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80146e8:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80146ec:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80146ee:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80146f2:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 80146f6:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80146fa:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80146fc:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014700:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014702:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014706:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801470a:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801470c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801470e:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014712:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014716:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801471a:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801471e:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014722:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014724:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014728:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801472a:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801472e:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014732:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014736:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801473a:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801473c:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801473e:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014740:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014744:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014748:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801474c:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801474e:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014750:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014752:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014754:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014758:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801475a:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801475c:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 801475e:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014760:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8014764:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8014768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801476c:	9b02      	ldr	r3, [sp, #8]
 801476e:	442b      	add	r3, r5
 8014770:	12db      	asrs	r3, r3, #11
 8014772:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014774:	9b02      	ldr	r3, [sp, #8]
 8014776:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014778:	9b01      	ldr	r3, [sp, #4]
 801477a:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801477c:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801477e:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014780:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014782:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014784:	9b01      	ldr	r3, [sp, #4]
 8014786:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801478a:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801478c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014790:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014792:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014794:	f47f af53 	bne.w	801463e <jpeg_idct_5x10+0x1e>
 8014798:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 801479a:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801479c:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80147a0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80147a4:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80147a8:	f641 289a 	movw	r8, #6810	; 0x1a9a
 80147ac:	3324      	adds	r3, #36	; 0x24
 80147ae:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 80147b0:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80147b4:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 80147b6:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 80147b8:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80147bc:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 80147c0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80147c4:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80147c8:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80147ca:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80147cc:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 80147ce:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80147d2:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 80147d6:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80147da:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 80147de:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80147e2:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80147e4:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 80147e8:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 80147ea:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80147ec:	eb05 000b 	add.w	r0, r5, fp
 80147f0:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80147f4:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80147f8:	4b15      	ldr	r3, [pc, #84]	; (8014850 <jpeg_idct_5x10+0x230>)
 80147fa:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 80147fe:	eb04 0b05 	add.w	fp, r4, r5
 8014802:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014804:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8014806:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 801480a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801480e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8014812:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014814:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014818:	9b00      	ldr	r3, [sp, #0]
 801481a:	5d1c      	ldrb	r4, [r3, r4]
 801481c:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801481e:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014820:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8014822:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8014826:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801482a:	5d1c      	ldrb	r4, [r3, r4]
 801482c:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801482e:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8014830:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014832:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014834:	009b      	lsls	r3, r3, #2
 8014836:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801483a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801483c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014840:	5ddb      	ldrb	r3, [r3, r7]
 8014842:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014844:	9b02      	ldr	r3, [sp, #8]
 8014846:	4563      	cmp	r3, ip
 8014848:	d1b2      	bne.n	80147b0 <jpeg_idct_5x10+0x190>
  }
}
 801484a:	b039      	add	sp, #228	; 0xe4
 801484c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014850:	ffffba5c 	.word	0xffffba5c

08014854 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014858:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801485a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801485c:	3a02      	subs	r2, #2
{
 801485e:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8014860:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014862:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014866:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 801486a:	f105 0310 	add.w	r3, r5, #16
 801486e:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014870:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8014874:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014876:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801487a:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 801487e:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014882:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8014886:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801488a:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801488e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014892:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8014896:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014898:	ea4a 030b 	orr.w	r3, sl, fp
 801489c:	ea4e 0303 	orr.w	r3, lr, r3
 80148a0:	433b      	orrs	r3, r7
 80148a2:	ea48 0303 	orr.w	r3, r8, r3
 80148a6:	4333      	orrs	r3, r6
 80148a8:	ea59 0303 	orrs.w	r3, r9, r3
 80148ac:	d154      	bne.n	8014958 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80148ae:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 80148b0:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 80148b4:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 80148b6:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 80148b8:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 80148ba:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 80148bc:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 80148be:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 80148c0:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 80148c2:	9b05      	ldr	r3, [sp, #20]
 80148c4:	42ab      	cmp	r3, r5
 80148c6:	d1d3      	bne.n	8014870 <jpeg_idct_4x8+0x1c>
 80148c8:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 80148ca:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80148cc:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80148d0:	f641 0e7e 	movw	lr, #6270	; 0x187e
 80148d4:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80148d6:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014a5c <jpeg_idct_4x8+0x208>
 80148da:	331c      	adds	r3, #28
 80148dc:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 80148de:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 80148e2:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 80148e4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80148e6:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 80148ea:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 80148ec:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 80148f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80148f4:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 80148f6:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80148fa:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80148fe:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014900:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014904:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014906:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801490a:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801490e:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014912:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014916:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 801491a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 801491e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014922:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8014926:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801492a:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 801492e:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014930:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014932:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014936:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 801493a:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 801493c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014940:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014944:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8014948:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801494a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801494e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8014950:	d1c5      	bne.n	80148de <jpeg_idct_4x8+0x8a>
  }
}
 8014952:	b027      	add	sp, #156	; 0x9c
 8014954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014958:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801495a:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801495e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8014962:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014964:	f241 1651 	movw	r6, #4433	; 0x1151
 8014968:	eb0b 0300 	add.w	r3, fp, r0
 801496c:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801496e:	f641 067e 	movw	r6, #6270	; 0x187e
 8014972:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014976:	4e39      	ldr	r6, [pc, #228]	; (8014a5c <jpeg_idct_4x8+0x208>)
 8014978:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 801497c:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801497e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014984:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8014986:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 801498a:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 801498e:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 8014992:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 8014994:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8014996:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 8014998:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801499c:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 801499e:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80149a0:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80149a4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 80149a8:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80149aa:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80149ae:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80149b2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80149b6:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80149ba:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80149bc:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 80149c0:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 80149c4:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80149c8:	1930      	adds	r0, r6, r4
 80149ca:	4358      	muls	r0, r3
    z2 += z1;
 80149cc:	4b24      	ldr	r3, [pc, #144]	; (8014a60 <jpeg_idct_4x8+0x20c>)
 80149ce:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 80149d2:	4b24      	ldr	r3, [pc, #144]	; (8014a64 <jpeg_idct_4x8+0x210>)
 80149d4:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80149d8:	eb09 040a 	add.w	r4, r9, sl
 80149dc:	4b22      	ldr	r3, [pc, #136]	; (8014a68 <jpeg_idct_4x8+0x214>)
 80149de:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 80149e0:	f640 138e 	movw	r3, #2446	; 0x98e
 80149e4:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 80149e8:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 80149ea:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 80149ee:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80149f2:	4b1e      	ldr	r3, [pc, #120]	; (8014a6c <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 80149f4:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80149f8:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80149fc:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014a00:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014a04:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8014a06:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014a08:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8014a0a:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014a0e:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8014a12:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014a16:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014a18:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014a1a:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014a1c:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014a1e:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014a20:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014a24:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014a26:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014a2a:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014a2e:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014a30:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014a34:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014a36:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014a38:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014a3a:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014a3c:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014a3e:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014a40:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014a42:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014a44:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014a46:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014a48:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014a4a:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8014a4c:	9b02      	ldr	r3, [sp, #8]
 8014a4e:	eba3 0909 	sub.w	r9, r3, r9
 8014a52:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8014a56:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8014a58:	e733      	b.n	80148c2 <jpeg_idct_4x8+0x6e>
 8014a5a:	bf00      	nop
 8014a5c:	ffffc4df 	.word	0xffffc4df
 8014a60:	ffffc13b 	.word	0xffffc13b
 8014a64:	fffff384 	.word	0xfffff384
 8014a68:	ffffe333 	.word	0xffffe333
 8014a6c:	ffffadfd 	.word	0xffffadfd

08014a70 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a74:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014a78:	b095      	sub	sp, #84	; 0x54
 8014a7a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014a7c:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a7e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014a82:	3204      	adds	r2, #4
 8014a84:	3c04      	subs	r4, #4
  wsptr = workspace;
 8014a86:	ae02      	add	r6, sp, #8
{
 8014a88:	9300      	str	r3, [sp, #0]
 8014a8a:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a8c:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014a90:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a94:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014a98:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a9a:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a9e:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014aa0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014aa4:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014aa8:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8014aaa:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014aac:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014ab0:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014ab4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014ab8:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014abc:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8014abe:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014ac0:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014ac4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014ac6:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014ac8:	f242 7731 	movw	r7, #10033	; 0x2731
 8014acc:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ace:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8014ad2:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8014ad6:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ad8:	6a22      	ldr	r2, [r4, #32]
 8014ada:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014adc:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8014ade:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014ae2:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8014ae6:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014aea:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014aee:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014af2:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014af6:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014af8:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014afa:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014afe:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014b00:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014b04:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014b08:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014b0c:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014b10:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014b14:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014b18:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014b1c:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014b20:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014b24:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014b26:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014b2a:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014b2e:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014b30:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014b34:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014b38:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014b3a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014b3e:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014b42:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014b44:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014b46:	d1a1      	bne.n	8014a8c <jpeg_idct_3x6+0x1c>
 8014b48:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8014b4a:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014b4c:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014b50:	f242 7b31 	movw	fp, #10033	; 0x2731
 8014b54:	1f1d      	subs	r5, r3, #4
 8014b56:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8014b58:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8014b5c:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8014b5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014b60:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8014b64:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8014b66:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b6a:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014b6e:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014b72:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b76:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014b7a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014b7c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8014b80:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8014b84:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014b88:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014b8c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8014b90:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8014b94:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014b98:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8014b9c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014ba0:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8014ba4:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014ba8:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8014bac:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014bae:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014bb2:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8014bb4:	d1d0      	bne.n	8014b58 <jpeg_idct_3x6+0xe8>
  }
}
 8014bb6:	b015      	add	sp, #84	; 0x54
 8014bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014bbc <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014bc0:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014bc4:	b08b      	sub	sp, #44	; 0x2c
 8014bc6:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014bc8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014bca:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014bce:	ad02      	add	r5, sp, #8
 8014bd0:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014bd2:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014bd6:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014bda:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014bdc:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8014be0:	46b4      	mov	ip, r6
 8014be2:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014be6:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014be8:	4f29      	ldr	r7, [pc, #164]	; (8014c90 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014bea:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014bec:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014bf0:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8014bf4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014bf6:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014bfa:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014bfe:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014c02:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014c06:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014c0a:	6a21      	ldr	r1, [r4, #32]
 8014c0c:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014c10:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014c12:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014c16:	eb0a 010b 	add.w	r1, sl, fp
 8014c1a:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014c1e:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014c22:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8014c26:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014c2a:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8014c2e:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8014c32:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8014c36:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014c3a:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8014c3e:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8014c42:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014c44:	d1ca      	bne.n	8014bdc <jpeg_idct_2x4+0x20>
 8014c46:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8014c48:	a902      	add	r1, sp, #8
 8014c4a:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014c4c:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8014c50:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8014c52:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8014c54:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014c58:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 8014c5a:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014c5e:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014c62:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014c64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014c68:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014c6c:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8014c70:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8014c74:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014c78:	5d3c      	ldrb	r4, [r7, r4]
 8014c7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014c7c:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014c7e:	9c01      	ldr	r4, [sp, #4]
 8014c80:	5ca2      	ldrb	r2, [r4, r2]
 8014c82:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8014c86:	d1e1      	bne.n	8014c4c <jpeg_idct_2x4+0x90>
  }
}
 8014c88:	b00b      	add	sp, #44	; 0x2c
 8014c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c8e:	bf00      	nop
 8014c90:	ffffc4df 	.word	0xffffc4df

08014c94 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014c94:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014c96:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c98:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014c9c:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014c9e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8014ca2:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014ca4:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014ca6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014caa:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 8014cac:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014cae:	3080      	adds	r0, #128	; 0x80
{
 8014cb0:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014cb2:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014cb4:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8014cb6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8014cba:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014cbe:	5d06      	ldrb	r6, [r0, r4]
 8014cc0:	681c      	ldr	r4, [r3, #0]
 8014cc2:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014cc4:	5c42      	ldrb	r2, [r0, r1]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	555a      	strb	r2, [r3, r5]
}
 8014cca:	bd70      	pop	{r4, r5, r6, pc}

08014ccc <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8014ccc:	6803      	ldr	r3, [r0, #0]
 8014cce:	2238      	movs	r2, #56	; 0x38
 8014cd0:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	4718      	bx	r3

08014cd8 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014cd8:	688b      	ldr	r3, [r1, #8]
{
 8014cda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014cde:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8014ce2:	698b      	ldr	r3, [r1, #24]
{
 8014ce4:	b085      	sub	sp, #20
 8014ce6:	4681      	mov	r9, r0
 8014ce8:	460c      	mov	r4, r1
 8014cea:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8014cec:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014cf0:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014cf2:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014cf6:	6922      	ldr	r2, [r4, #16]
 8014cf8:	42b2      	cmp	r2, r6
 8014cfa:	dc02      	bgt.n	8014d02 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8014cfc:	b005      	add	sp, #20
 8014cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014d02:	1b92      	subs	r2, r2, r6
 8014d04:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8014d06:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014d08:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014d0a:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8014d0c:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014d10:	bfa8      	it	ge
 8014d12:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014d14:	69e1      	ldr	r1, [r4, #28]
 8014d16:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014d18:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014d1a:	428a      	cmp	r2, r1
 8014d1c:	bfa8      	it	ge
 8014d1e:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014d20:	42aa      	cmp	r2, r5
 8014d22:	bfa8      	it	ge
 8014d24:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014d26:	2a00      	cmp	r2, #0
 8014d28:	dde8      	ble.n	8014cfc <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 8014d2a:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014d2e:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8014d30:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014d32:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8014d36:	f1ba 0f00 	cmp.w	sl, #0
 8014d3a:	d00a      	beq.n	8014d52 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014d3c:	9300      	str	r3, [sp, #0]
 8014d3e:	4659      	mov	r1, fp
 8014d40:	463b      	mov	r3, r7
 8014d42:	4648      	mov	r0, r9
 8014d44:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014d46:	47a8      	blx	r5
    file_offset += byte_count;
 8014d48:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014d4a:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014d4c:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014d4e:	4416      	add	r6, r2
 8014d50:	e7d1      	b.n	8014cf6 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014d52:	9b03      	ldr	r3, [sp, #12]
 8014d54:	4659      	mov	r1, fp
 8014d56:	4648      	mov	r0, r9
 8014d58:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014d5a:	9300      	str	r3, [sp, #0]
 8014d5c:	463b      	mov	r3, r7
 8014d5e:	e7f2      	b.n	8014d46 <do_barray_io+0x6e>

08014d60 <alloc_small>:
{
 8014d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014d64:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014d68:	4606      	mov	r6, r0
 8014d6a:	460d      	mov	r5, r1
 8014d6c:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014d6e:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014d70:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014d72:	d902      	bls.n	8014d7a <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8014d74:	2101      	movs	r1, #1
 8014d76:	f7ff ffa9 	bl	8014ccc <out_of_memory>
  if (odd_bytes > 0)
 8014d7a:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8014d7e:	bf1c      	itt	ne
 8014d80:	3408      	addne	r4, #8
 8014d82:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014d84:	2d01      	cmp	r5, #1
 8014d86:	d906      	bls.n	8014d96 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014d88:	6833      	ldr	r3, [r6, #0]
 8014d8a:	220f      	movs	r2, #15
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8014d96:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8014d9a:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8014d9e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8014da2:	b9e8      	cbnz	r0, 8014de0 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8014da4:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014da8:	f1ba 0f00 	cmp.w	sl, #0
 8014dac:	d11e      	bne.n	8014dec <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8014dae:	4b1d      	ldr	r3, [pc, #116]	; (8014e24 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8014db0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8014db4:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8014db8:	429d      	cmp	r5, r3
 8014dba:	bf28      	it	cs
 8014dbc:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8014dbe:	eb05 0b09 	add.w	fp, r5, r9
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	4659      	mov	r1, fp
 8014dc6:	f000 fbcf 	bl	8015568 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8014dca:	b988      	cbnz	r0, 8014df0 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014dcc:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8014dce:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014dd2:	d803      	bhi.n	8014ddc <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8014dd4:	2102      	movs	r1, #2
 8014dd6:	4630      	mov	r0, r6
 8014dd8:	f7ff ff78 	bl	8014ccc <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8014ddc:	465d      	mov	r5, fp
 8014dde:	e7ee      	b.n	8014dbe <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8014de0:	6883      	ldr	r3, [r0, #8]
 8014de2:	42a3      	cmp	r3, r4
 8014de4:	d211      	bcs.n	8014e0a <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8014de6:	4682      	mov	sl, r0
 8014de8:	6800      	ldr	r0, [r0, #0]
 8014dea:	e7da      	b.n	8014da2 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8014dec:	4b0e      	ldr	r3, [pc, #56]	; (8014e28 <alloc_small+0xc8>)
 8014dee:	e7df      	b.n	8014db0 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8014df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014df2:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8014df4:	445b      	add	r3, fp
 8014df6:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8014df8:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014dfa:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8014dfc:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014e00:	f1ba 0f00 	cmp.w	sl, #0
 8014e04:	d10b      	bne.n	8014e1e <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8014e06:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014e0a:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014e0c:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014e0e:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014e10:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8014e12:	6882      	ldr	r2, [r0, #8]
 8014e14:	1b12      	subs	r2, r2, r4
 8014e16:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014e18:	4418      	add	r0, r3
}
 8014e1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8014e1e:	f8ca 0000 	str.w	r0, [sl]
 8014e22:	e7f2      	b.n	8014e0a <alloc_small+0xaa>
 8014e24:	08030664 	.word	0x08030664
 8014e28:	0803065c 	.word	0x0803065c

08014e2c <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8014e2c:	2901      	cmp	r1, #1
{
 8014e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e32:	4604      	mov	r4, r0
 8014e34:	460d      	mov	r5, r1
 8014e36:	4616      	mov	r6, r2
 8014e38:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014e3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8014e3e:	d005      	beq.n	8014e4c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014e40:	6803      	ldr	r3, [r0, #0]
 8014e42:	220f      	movs	r2, #15
 8014e44:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8014e4c:	223c      	movs	r2, #60	; 0x3c
 8014e4e:	4629      	mov	r1, r5
 8014e50:	4620      	mov	r0, r4
 8014e52:	f7ff ff85 	bl	8014d60 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014e56:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8014e58:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014e5a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8014e5c:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8014e5e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8014e62:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8014e64:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8014e66:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8014e6a:	9a07      	ldr	r2, [sp, #28]
 8014e6c:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8014e6e:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8014e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e76 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8014e76:	2901      	cmp	r1, #1
{
 8014e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	460d      	mov	r5, r1
 8014e80:	4616      	mov	r6, r2
 8014e82:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014e84:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8014e88:	d005      	beq.n	8014e96 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014e8a:	6803      	ldr	r3, [r0, #0]
 8014e8c:	220f      	movs	r2, #15
 8014e8e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8014e96:	223c      	movs	r2, #60	; 0x3c
 8014e98:	4629      	mov	r1, r5
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	f7ff ff60 	bl	8014d60 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014ea0:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8014ea2:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014ea4:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8014ea6:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8014ea8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8014eac:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8014eae:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8014eb0:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8014eb4:	9a07      	ldr	r2, [sp, #28]
 8014eb6:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8014eb8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8014ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ec0 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014ec0:	2901      	cmp	r1, #1
{
 8014ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec6:	4606      	mov	r6, r0
 8014ec8:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014eca:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014ecc:	d910      	bls.n	8014ef0 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014ece:	6803      	ldr	r3, [r0, #0]
 8014ed0:	220f      	movs	r2, #15
 8014ed2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8014eda:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8014ede:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8014ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8014ee2:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8014ee4:	bb0b      	cbnz	r3, 8014f2a <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8014ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8014ee8:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 8014eea:	bb69      	cbnz	r1, 8014f48 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8014eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8014ef0:	d1f3      	bne.n	8014eda <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014ef2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014ef4:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014ef6:	b924      	cbnz	r4, 8014f02 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014ef8:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 8014efa:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014efc:	b95f      	cbnz	r7, 8014f16 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8014efe:	64af      	str	r7, [r5, #72]	; 0x48
 8014f00:	e7eb      	b.n	8014eda <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8014f02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014f04:	b12b      	cbz	r3, 8014f12 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014f08:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014f0c:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014f0e:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014f10:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014f12:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014f14:	e7ef      	b.n	8014ef6 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8014f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f18:	b12b      	cbz	r3, 8014f26 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f1c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014f20:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014f22:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014f24:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014f26:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8014f28:	e7e8      	b.n	8014efc <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014f2a:	e9d3 8700 	ldrd	r8, r7, [r3]
 8014f2e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014f30:	4619      	mov	r1, r3
 8014f32:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014f34:	4417      	add	r7, r2
 8014f36:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014f38:	463a      	mov	r2, r7
 8014f3a:	f000 fb1e 	bl	801557a <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8014f3e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014f40:	1bdb      	subs	r3, r3, r7
 8014f42:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8014f44:	4643      	mov	r3, r8
 8014f46:	e7cd      	b.n	8014ee4 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8014f48:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014f4a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8014f4c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8014f50:	4414      	add	r4, r2
 8014f52:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014f54:	4622      	mov	r2, r4
 8014f56:	f000 fb0a 	bl	801556e <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8014f5a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8014f5c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8014f5e:	1b1b      	subs	r3, r3, r4
 8014f60:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8014f62:	e7c2      	b.n	8014eea <free_pool+0x2a>

08014f64 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8014f64:	b510      	push	{r4, lr}
 8014f66:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8014f68:	2101      	movs	r1, #1
 8014f6a:	f7ff ffa9 	bl	8014ec0 <free_pool>
 8014f6e:	2100      	movs	r1, #0
 8014f70:	4620      	mov	r0, r4
 8014f72:	f7ff ffa5 	bl	8014ec0 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8014f76:	4620      	mov	r0, r4
 8014f78:	6861      	ldr	r1, [r4, #4]
 8014f7a:	2254      	movs	r2, #84	; 0x54
 8014f7c:	f000 faf7 	bl	801556e <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8014f80:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8014f82:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8014f84:	6063      	str	r3, [r4, #4]
}
 8014f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8014f8a:	f000 bb02 	b.w	8015592 <jpeg_mem_term>

08014f8e <access_virt_barray>:
{
 8014f8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8014f92:	18d7      	adds	r7, r2, r3
{
 8014f94:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014f96:	684a      	ldr	r2, [r1, #4]
{
 8014f98:	460c      	mov	r4, r1
 8014f9a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014f9e:	42ba      	cmp	r2, r7
 8014fa0:	d304      	bcc.n	8014fac <access_virt_barray+0x1e>
 8014fa2:	68ca      	ldr	r2, [r1, #12]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d301      	bcc.n	8014fac <access_virt_barray+0x1e>
 8014fa8:	680b      	ldr	r3, [r1, #0]
 8014faa:	b933      	cbnz	r3, 8014fba <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014fac:	6803      	ldr	r3, [r0, #0]
 8014fae:	2217      	movs	r2, #23
 8014fb0:	9001      	str	r0, [sp, #4]
 8014fb2:	615a      	str	r2, [r3, #20]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	4798      	blx	r3
 8014fb8:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 8014fba:	69a3      	ldr	r3, [r4, #24]
 8014fbc:	42ab      	cmp	r3, r5
 8014fbe:	d803      	bhi.n	8014fc8 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8014fc0:	6922      	ldr	r2, [r4, #16]
 8014fc2:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014fc4:	42bb      	cmp	r3, r7
 8014fc6:	d221      	bcs.n	801500c <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8014fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014fca:	b933      	cbnz	r3, 8014fda <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8014fcc:	6803      	ldr	r3, [r0, #0]
 8014fce:	2247      	movs	r2, #71	; 0x47
 8014fd0:	9001      	str	r0, [sp, #4]
 8014fd2:	615a      	str	r2, [r3, #20]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	4798      	blx	r3
 8014fd8:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 8014fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fdc:	b13b      	cbz	r3, 8014fee <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8014fde:	2201      	movs	r2, #1
 8014fe0:	4621      	mov	r1, r4
 8014fe2:	9001      	str	r0, [sp, #4]
 8014fe4:	f7ff fe78 	bl	8014cd8 <do_barray_io>
      ptr->dirty = FALSE;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	9801      	ldr	r0, [sp, #4]
 8014fec:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8014fee:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	4621      	mov	r1, r4
 8014ff4:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8014ff6:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014ff8:	bf29      	itett	cs
 8014ffa:	6923      	ldrcs	r3, [r4, #16]
 8014ffc:	462b      	movcc	r3, r5
 8014ffe:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8015000:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8015004:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8015006:	f7ff fe67 	bl	8014cd8 <do_barray_io>
 801500a:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 801500c:	69e6      	ldr	r6, [r4, #28]
 801500e:	42be      	cmp	r6, r7
 8015010:	d21c      	bcs.n	801504c <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8015012:	42ae      	cmp	r6, r5
 8015014:	d20c      	bcs.n	8015030 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8015016:	f1b8 0f00 	cmp.w	r8, #0
 801501a:	d01b      	beq.n	8015054 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801501c:	6803      	ldr	r3, [r0, #0]
 801501e:	2217      	movs	r2, #23
 8015020:	9001      	str	r0, [sp, #4]
 8015022:	462e      	mov	r6, r5
 8015024:	615a      	str	r2, [r3, #20]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	4798      	blx	r3
    if (writable)
 801502a:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 801502c:	61e7      	str	r7, [r4, #28]
 801502e:	e002      	b.n	8015036 <access_virt_barray+0xa8>
    if (writable)
 8015030:	f1b8 0f00 	cmp.w	r8, #0
 8015034:	d1fa      	bne.n	801502c <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8015036:	6a22      	ldr	r2, [r4, #32]
 8015038:	b1b2      	cbz	r2, 8015068 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801503a:	68a2      	ldr	r2, [r4, #8]
 801503c:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015040:	69a2      	ldr	r2, [r4, #24]
 8015042:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8015044:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8015046:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015048:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 801504a:	d305      	bcc.n	8015058 <access_virt_barray+0xca>
  if (writable)
 801504c:	f1b8 0f00 	cmp.w	r8, #0
 8015050:	d10d      	bne.n	801506e <access_virt_barray+0xe0>
 8015052:	e00e      	b.n	8015072 <access_virt_barray+0xe4>
 8015054:	462e      	mov	r6, r5
 8015056:	e7ee      	b.n	8015036 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015058:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801505c:	464a      	mov	r2, r9
 801505e:	2100      	movs	r1, #0
	undef_row++;
 8015060:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015062:	f016 fa19 	bl	802b498 <memset>
	undef_row++;
 8015066:	e7ee      	b.n	8015046 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8015068:	f1b8 0f00 	cmp.w	r8, #0
 801506c:	d009      	beq.n	8015082 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 801506e:	2301      	movs	r3, #1
 8015070:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015072:	69a0      	ldr	r0, [r4, #24]
 8015074:	1a2d      	subs	r5, r5, r0
 8015076:	6820      	ldr	r0, [r4, #0]
}
 8015078:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801507c:	b003      	add	sp, #12
 801507e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015082:	6803      	ldr	r3, [r0, #0]
 8015084:	2217      	movs	r2, #23
 8015086:	615a      	str	r2, [r3, #20]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4798      	blx	r3
  if (writable)
 801508c:	e7f1      	b.n	8015072 <access_virt_barray+0xe4>

0801508e <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 801508e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8015092:	429a      	cmp	r2, r3
{
 8015094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015098:	4606      	mov	r6, r0
 801509a:	4688      	mov	r8, r1
 801509c:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801509e:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80150a0:	d902      	bls.n	80150a8 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 80150a2:	2103      	movs	r1, #3
 80150a4:	f7ff fe12 	bl	8014ccc <out_of_memory>
  if (odd_bytes > 0)
 80150a8:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80150ac:	bf1c      	itt	ne
 80150ae:	3408      	addne	r4, #8
 80150b0:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80150b2:	f1b8 0f01 	cmp.w	r8, #1
 80150b6:	d906      	bls.n	80150c6 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80150b8:	6833      	ldr	r3, [r6, #0]
 80150ba:	220f      	movs	r2, #15
 80150bc:	4630      	mov	r0, r6
 80150be:	e9c3 2805 	strd	r2, r8, [r3, #20]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 80150c6:	f104 0110 	add.w	r1, r4, #16
 80150ca:	4630      	mov	r0, r6
 80150cc:	f000 fa52 	bl	8015574 <jpeg_get_large>
  if (hdr_ptr == NULL)
 80150d0:	4605      	mov	r5, r0
 80150d2:	b918      	cbnz	r0, 80150dc <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 80150d4:	2104      	movs	r1, #4
 80150d6:	4630      	mov	r0, r6
 80150d8:	f7ff fdf8 	bl	8014ccc <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80150dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80150de:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80150e2:	3310      	adds	r3, #16
 80150e4:	4423      	add	r3, r4
 80150e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 80150e8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80150ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 80150ee:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 80150f2:	2300      	movs	r3, #0
 80150f4:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 80150f6:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 80150f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080150fc <alloc_barray>:
{
 80150fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8015100:	01d7      	lsls	r7, r2, #7
{
 8015102:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015104:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015108:	4680      	mov	r8, r0
 801510a:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801510c:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 801510e:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015110:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8015114:	d904      	bls.n	8015120 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8015116:	6803      	ldr	r3, [r0, #0]
 8015118:	2248      	movs	r2, #72	; 0x48
 801511a:	615a      	str	r2, [r3, #20]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015120:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8015122:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8015126:	4651      	mov	r1, sl
 8015128:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 801512a:	bfa8      	it	ge
 801512c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 801512e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015130:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8015132:	f7ff fe15 	bl	8014d60 <alloc_small>
 8015136:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015138:	42ae      	cmp	r6, r5
 801513a:	d302      	bcc.n	8015142 <alloc_barray+0x46>
}
 801513c:	4648      	mov	r0, r9
 801513e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015142:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015144:	4651      	mov	r1, sl
 8015146:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015148:	429c      	cmp	r4, r3
 801514a:	bf28      	it	cs
 801514c:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 801514e:	fb04 f207 	mul.w	r2, r4, r7
 8015152:	f7ff ff9c 	bl	801508e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015156:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801515a:	4426      	add	r6, r4
 801515c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015160:	4293      	cmp	r3, r2
 8015162:	d0e9      	beq.n	8015138 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8015164:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8015168:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 801516a:	e7f9      	b.n	8015160 <alloc_barray+0x64>

0801516c <alloc_sarray>:
{
 801516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015170:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015172:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015176:	4607      	mov	r7, r0
 8015178:	468a      	mov	sl, r1
  if (ltemp <= 0)
 801517a:	429a      	cmp	r2, r3
{
 801517c:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801517e:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015180:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8015184:	d904      	bls.n	8015190 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8015186:	6803      	ldr	r3, [r0, #0]
 8015188:	2248      	movs	r2, #72	; 0x48
 801518a:	615a      	str	r2, [r3, #20]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015190:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8015192:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8015196:	4651      	mov	r1, sl
 8015198:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 801519a:	bfa8      	it	ge
 801519c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 801519e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 80151a0:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 80151a2:	f7ff fddd 	bl	8014d60 <alloc_small>
 80151a6:	4681      	mov	r9, r0
  while (currow < numrows) {
 80151a8:	42ae      	cmp	r6, r5
 80151aa:	d302      	bcc.n	80151b2 <alloc_sarray+0x46>
}
 80151ac:	4648      	mov	r0, r9
 80151ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80151b2:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 80151b4:	4651      	mov	r1, sl
 80151b6:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80151b8:	429c      	cmp	r4, r3
 80151ba:	bf28      	it	cs
 80151bc:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 80151be:	fb04 f208 	mul.w	r2, r4, r8
 80151c2:	f7ff ff64 	bl	801508e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 80151c6:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80151ca:	4426      	add	r6, r4
 80151cc:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80151d0:	4293      	cmp	r3, r2
 80151d2:	d0e9      	beq.n	80151a8 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 80151d4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 80151d8:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 80151da:	e7f9      	b.n	80151d0 <alloc_sarray+0x64>

080151dc <realize_virt_arrays>:
{
 80151dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80151e0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 80151e4:	2500      	movs	r5, #0
{
 80151e6:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80151e8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 80151ec:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80151ee:	bb03      	cbnz	r3, 8015232 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80151f0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80151f4:	bb43      	cbnz	r3, 8015248 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 80151f6:	2e00      	cmp	r6, #0
 80151f8:	dd19      	ble.n	801522e <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 80151fa:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80151fe:	462a      	mov	r2, r5
 8015200:	4631      	mov	r1, r6
 8015202:	4638      	mov	r0, r7
 8015204:	f000 f9bc 	bl	8015580 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8015208:	4285      	cmp	r5, r0
 801520a:	dd2a      	ble.n	8015262 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 801520c:	fb90 f6f6 	sdiv	r6, r0, r6
 8015210:	2e01      	cmp	r6, #1
 8015212:	bfb8      	it	lt
 8015214:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015216:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801521a:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 801521e:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015220:	bb0c      	cbnz	r4, 8015266 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015222:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015226:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801522a:	2d00      	cmp	r5, #0
 801522c:	d141      	bne.n	80152b2 <realize_virt_arrays+0xd6>
}
 801522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015232:	681a      	ldr	r2, [r3, #0]
 8015234:	b932      	cbnz	r2, 8015244 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8015236:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 801523a:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 801523e:	6859      	ldr	r1, [r3, #4]
 8015240:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015246:	e7d2      	b.n	80151ee <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	b942      	cbnz	r2, 801525e <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 801524c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8015250:	4351      	muls	r1, r2
 8015252:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8015256:	6859      	ldr	r1, [r3, #4]
 8015258:	434a      	muls	r2, r1
 801525a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015260:	e7c8      	b.n	80151f4 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8015262:	4e27      	ldr	r6, [pc, #156]	; (8015300 <realize_virt_arrays+0x124>)
 8015264:	e7d7      	b.n	8015216 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015266:	6823      	ldr	r3, [r4, #0]
 8015268:	b9ab      	cbnz	r3, 8015296 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 801526a:	6862      	ldr	r2, [r4, #4]
 801526c:	68e1      	ldr	r1, [r4, #12]
 801526e:	1e53      	subs	r3, r2, #1
 8015270:	fbb3 f3f1 	udiv	r3, r3, r1
 8015274:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015276:	429e      	cmp	r6, r3
 8015278:	db0f      	blt.n	801529a <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 801527a:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801527c:	6923      	ldr	r3, [r4, #16]
 801527e:	2101      	movs	r1, #1
 8015280:	68a2      	ldr	r2, [r4, #8]
 8015282:	4638      	mov	r0, r7
 8015284:	f7ff ff72 	bl	801516c <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8015288:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801528c:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 801528e:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8015290:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8015292:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015296:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8015298:	e7c2      	b.n	8015220 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 801529a:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801529c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801529e:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 80152a0:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 80152a2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80152a6:	435a      	muls	r2, r3
 80152a8:	f000 f96c 	bl	8015584 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 80152ac:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 80152b0:	e7e4      	b.n	801527c <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 80152b2:	682b      	ldr	r3, [r5, #0]
 80152b4:	b9ab      	cbnz	r3, 80152e2 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 80152b6:	6868      	ldr	r0, [r5, #4]
 80152b8:	68e9      	ldr	r1, [r5, #12]
 80152ba:	1e43      	subs	r3, r0, #1
 80152bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80152c0:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 80152c2:	429e      	cmp	r6, r3
 80152c4:	db0f      	blt.n	80152e6 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 80152c6:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80152c8:	692b      	ldr	r3, [r5, #16]
 80152ca:	2101      	movs	r1, #1
 80152cc:	68aa      	ldr	r2, [r5, #8]
 80152ce:	4638      	mov	r0, r7
 80152d0:	f7ff ff14 	bl	80150fc <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 80152d4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80152d8:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 80152da:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 80152dc:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 80152de:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80152e2:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80152e4:	e7a1      	b.n	801522a <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 80152e6:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80152e8:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 80152ea:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80152ec:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80152ee:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80152f0:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80152f4:	01d2      	lsls	r2, r2, #7
 80152f6:	f000 f945 	bl	8015584 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 80152fa:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80152fe:	e7e3      	b.n	80152c8 <realize_virt_arrays+0xec>
 8015300:	3b9aca00 	.word	0x3b9aca00

08015304 <access_virt_sarray>:
{
 8015304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8015308:	eb02 0803 	add.w	r8, r2, r3
{
 801530c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801530e:	684a      	ldr	r2, [r1, #4]
{
 8015310:	b087      	sub	sp, #28
 8015312:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015314:	4542      	cmp	r2, r8
{
 8015316:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801531a:	d304      	bcc.n	8015326 <access_virt_sarray+0x22>
 801531c:	68ca      	ldr	r2, [r1, #12]
 801531e:	429a      	cmp	r2, r3
 8015320:	d301      	bcc.n	8015326 <access_virt_sarray+0x22>
 8015322:	680b      	ldr	r3, [r1, #0]
 8015324:	b933      	cbnz	r3, 8015334 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015326:	6803      	ldr	r3, [r0, #0]
 8015328:	2217      	movs	r2, #23
 801532a:	9003      	str	r0, [sp, #12]
 801532c:	615a      	str	r2, [r3, #20]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	4798      	blx	r3
 8015332:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8015334:	69a3      	ldr	r3, [r4, #24]
 8015336:	42ab      	cmp	r3, r5
 8015338:	d80c      	bhi.n	8015354 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801533a:	6922      	ldr	r2, [r4, #16]
 801533c:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801533e:	4543      	cmp	r3, r8
 8015340:	d308      	bcc.n	8015354 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8015342:	69e6      	ldr	r6, [r4, #28]
 8015344:	4546      	cmp	r6, r8
 8015346:	f0c0 8081 	bcc.w	801544c <access_virt_sarray+0x148>
  if (writable)
 801534a:	f1ba 0f00 	cmp.w	sl, #0
 801534e:	f040 80a8 	bne.w	80154a2 <access_virt_sarray+0x19e>
 8015352:	e0a8      	b.n	80154a6 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8015354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015356:	b933      	cbnz	r3, 8015366 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8015358:	6803      	ldr	r3, [r0, #0]
 801535a:	2247      	movs	r2, #71	; 0x47
 801535c:	9003      	str	r0, [sp, #12]
 801535e:	615a      	str	r2, [r3, #20]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	4798      	blx	r3
 8015364:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8015366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015368:	b17b      	cbz	r3, 801538a <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801536a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801536e:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8015372:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015374:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8015378:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801537c:	6922      	ldr	r2, [r4, #16]
 801537e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015380:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015384:	dc3c      	bgt.n	8015400 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8015386:	2300      	movs	r3, #0
 8015388:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 801538a:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801538c:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015390:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015392:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8015396:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015398:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801539c:	bf2a      	itet	cs
 801539e:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80153a2:	462b      	movcc	r3, r5
 80153a4:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80153a8:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 80153aa:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80153ae:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80153b0:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80153b2:	454a      	cmp	r2, r9
 80153b4:	ddc5      	ble.n	8015342 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80153b6:	eba2 0209 	sub.w	r2, r2, r9
 80153ba:	6967      	ldr	r7, [r4, #20]
 80153bc:	42ba      	cmp	r2, r7
 80153be:	bfa8      	it	ge
 80153c0:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 80153c2:	69a7      	ldr	r7, [r4, #24]
 80153c4:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80153c6:	1bf6      	subs	r6, r6, r7
 80153c8:	42b2      	cmp	r2, r6
 80153ca:	bfa8      	it	ge
 80153cc:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80153ce:	6866      	ldr	r6, [r4, #4]
 80153d0:	1bf6      	subs	r6, r6, r7
 80153d2:	42b2      	cmp	r2, r6
 80153d4:	bfa8      	it	ge
 80153d6:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 80153d8:	2a00      	cmp	r2, #0
 80153da:	ddb2      	ble.n	8015342 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 80153dc:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80153e0:	6822      	ldr	r2, [r4, #0]
 80153e2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80153e4:	9600      	str	r6, [sp, #0]
 80153e6:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80153ea:	9305      	str	r3, [sp, #20]
 80153ec:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80153f0:	47b8      	blx	r7
    file_offset += byte_count;
 80153f2:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80153f4:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80153f6:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80153f8:	4491      	add	r9, r2
 80153fa:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80153fe:	e7d6      	b.n	80153ae <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015400:	eba2 0209 	sub.w	r2, r2, r9
 8015404:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8015406:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015408:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801540a:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801540e:	bfa8      	it	ge
 8015410:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015412:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015414:	42ba      	cmp	r2, r7
 8015416:	bfa8      	it	ge
 8015418:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801541a:	eba6 070c 	sub.w	r7, r6, ip
 801541e:	42ba      	cmp	r2, r7
 8015420:	bfa8      	it	ge
 8015422:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015424:	2a00      	cmp	r2, #0
 8015426:	ddae      	ble.n	8015386 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8015428:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801542c:	6822      	ldr	r2, [r4, #0]
 801542e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015430:	9700      	str	r7, [sp, #0]
 8015432:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8015436:	9305      	str	r3, [sp, #20]
 8015438:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801543c:	47b0      	blx	r6
    file_offset += byte_count;
 801543e:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015440:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015442:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015444:	4491      	add	r9, r2
 8015446:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801544a:	e797      	b.n	801537c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 801544c:	42ae      	cmp	r6, r5
 801544e:	d20d      	bcs.n	801546c <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 8015450:	f1ba 0f00 	cmp.w	sl, #0
 8015454:	d020      	beq.n	8015498 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015456:	6803      	ldr	r3, [r0, #0]
 8015458:	2217      	movs	r2, #23
 801545a:	9003      	str	r0, [sp, #12]
 801545c:	462e      	mov	r6, r5
 801545e:	615a      	str	r2, [r3, #20]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	4798      	blx	r3
    if (writable)
 8015464:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8015466:	f8c4 801c 	str.w	r8, [r4, #28]
 801546a:	e002      	b.n	8015472 <access_virt_sarray+0x16e>
    if (writable)
 801546c:	f1ba 0f00 	cmp.w	sl, #0
 8015470:	d1f9      	bne.n	8015466 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 8015472:	6a22      	ldr	r2, [r4, #32]
 8015474:	b192      	cbz	r2, 801549c <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015476:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015478:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801547a:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 801547c:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8015480:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015482:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8015484:	f4bf af61 	bcs.w	801534a <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015488:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801548c:	463a      	mov	r2, r7
 801548e:	2100      	movs	r1, #0
	undef_row++;
 8015490:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015492:	f016 f801 	bl	802b498 <memset>
	undef_row++;
 8015496:	e7f3      	b.n	8015480 <access_virt_sarray+0x17c>
 8015498:	462e      	mov	r6, r5
 801549a:	e7ea      	b.n	8015472 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 801549c:	f1ba 0f00 	cmp.w	sl, #0
 80154a0:	d009      	beq.n	80154b6 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 80154a2:	2301      	movs	r3, #1
 80154a4:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80154a6:	69a0      	ldr	r0, [r4, #24]
 80154a8:	1a2d      	subs	r5, r5, r0
 80154aa:	6820      	ldr	r0, [r4, #0]
}
 80154ac:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80154b0:	b007      	add	sp, #28
 80154b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80154b6:	6803      	ldr	r3, [r0, #0]
 80154b8:	2217      	movs	r2, #23
 80154ba:	615a      	str	r2, [r3, #20]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	4798      	blx	r3
  if (writable)
 80154c0:	e7f1      	b.n	80154a6 <access_virt_sarray+0x1a2>
	...

080154c4 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 80154c4:	2300      	movs	r3, #0
{
 80154c6:	b570      	push	{r4, r5, r6, lr}
 80154c8:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 80154ca:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80154cc:	f000 f85f 	bl	801558e <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80154d0:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80154d2:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80154d4:	4628      	mov	r0, r5
 80154d6:	f000 f847 	bl	8015568 <jpeg_get_small>

  if (mem == NULL) {
 80154da:	4604      	mov	r4, r0
 80154dc:	b948      	cbnz	r0, 80154f2 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 80154de:	4628      	mov	r0, r5
 80154e0:	f000 f857 	bl	8015592 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 80154e4:	682b      	ldr	r3, [r5, #0]
 80154e6:	2238      	movs	r2, #56	; 0x38
 80154e8:	4628      	mov	r0, r5
 80154ea:	e9c3 2405 	strd	r2, r4, [r3, #20]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 80154f2:	4b12      	ldr	r3, [pc, #72]	; (801553c <jinit_memory_mgr+0x78>)
 80154f4:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 80154f6:	4b12      	ldr	r3, [pc, #72]	; (8015540 <jinit_memory_mgr+0x7c>)
 80154f8:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 80154fa:	4b12      	ldr	r3, [pc, #72]	; (8015544 <jinit_memory_mgr+0x80>)
 80154fc:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 80154fe:	4b12      	ldr	r3, [pc, #72]	; (8015548 <jinit_memory_mgr+0x84>)
 8015500:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8015502:	4b12      	ldr	r3, [pc, #72]	; (801554c <jinit_memory_mgr+0x88>)
 8015504:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8015506:	4b12      	ldr	r3, [pc, #72]	; (8015550 <jinit_memory_mgr+0x8c>)
 8015508:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801550a:	4b12      	ldr	r3, [pc, #72]	; (8015554 <jinit_memory_mgr+0x90>)
 801550c:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801550e:	4b12      	ldr	r3, [pc, #72]	; (8015558 <jinit_memory_mgr+0x94>)
 8015510:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8015512:	4b12      	ldr	r3, [pc, #72]	; (801555c <jinit_memory_mgr+0x98>)
 8015514:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 8015516:	4b12      	ldr	r3, [pc, #72]	; (8015560 <jinit_memory_mgr+0x9c>)
 8015518:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 801551a:	4b12      	ldr	r3, [pc, #72]	; (8015564 <jinit_memory_mgr+0xa0>)
 801551c:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 801551e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8015522:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8015526:	2300      	movs	r3, #0
 8015528:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 801552a:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 801552c:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 801552e:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8015530:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8015534:	2354      	movs	r3, #84	; 0x54
 8015536:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8015538:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 801553a:	bd70      	pop	{r4, r5, r6, pc}
 801553c:	08014d61 	.word	0x08014d61
 8015540:	0801508f 	.word	0x0801508f
 8015544:	0801516d 	.word	0x0801516d
 8015548:	080150fd 	.word	0x080150fd
 801554c:	08014e77 	.word	0x08014e77
 8015550:	08014e2d 	.word	0x08014e2d
 8015554:	080151dd 	.word	0x080151dd
 8015558:	08015305 	.word	0x08015305
 801555c:	08014f8f 	.word	0x08014f8f
 8015560:	08014ec1 	.word	0x08014ec1
 8015564:	08014f65 	.word	0x08014f65

08015568 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8015568:	4608      	mov	r0, r1
 801556a:	f7f2 b8a7 	b.w	80076bc <pvPortMalloc>

0801556e <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 801556e:	4608      	mov	r0, r1
 8015570:	f7f2 b93a 	b.w	80077e8 <vPortFree>

08015574 <jpeg_get_large>:
 8015574:	4608      	mov	r0, r1
 8015576:	f7f2 b8a1 	b.w	80076bc <pvPortMalloc>

0801557a <jpeg_free_large>:
 801557a:	4608      	mov	r0, r1
 801557c:	f7f2 b934 	b.w	80077e8 <vPortFree>

08015580 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8015580:	4610      	mov	r0, r2
 8015582:	4770      	bx	lr

08015584 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8015584:	6803      	ldr	r3, [r0, #0]
 8015586:	2233      	movs	r2, #51	; 0x33
 8015588:	615a      	str	r2, [r3, #20]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	4718      	bx	r3

0801558e <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 801558e:	2000      	movs	r0, #0
 8015590:	4770      	bx	lr

08015592 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8015592:	4770      	bx	lr

08015594 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8015594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015598:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801559c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801559e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80155a2:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80155a4:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80155a6:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 80155aa:	bf16      	itet	ne
 80155ac:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 80155ae:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 80155b2:	461e      	movne	r6, r3
 80155b4:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80155b6:	6843      	ldr	r3, [r0, #4]
 80155b8:	f506 7280 	add.w	r2, r6, #256	; 0x100
 80155bc:	689f      	ldr	r7, [r3, #8]
 80155be:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80155c0:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 80155c2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80155c6:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 80155ca:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80155cc:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80155ce:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80155d0:	429a      	cmp	r2, r3
 80155d2:	dc01      	bgt.n	80155d8 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 80155d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80155d8:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 80155dc:	009f      	lsls	r7, r3, #2
 80155de:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 80155e0:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 80155e4:	b126      	cbz	r6, 80155f0 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 80155e6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80155ea:	32ff      	adds	r2, #255	; 0xff
 80155ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 80155f0:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80155f4:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 80155f8:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 80155fa:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80155fc:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015600:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015602:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8015606:	428f      	cmp	r7, r1
 8015608:	db0a      	blt.n	8015620 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 801560a:	fb10 fb0c 	smulbb	fp, r0, ip
 801560e:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015612:	3101      	adds	r1, #1
 8015614:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8015618:	d1f5      	bne.n	8015606 <create_colorindex+0x72>
    if (pad)
 801561a:	b93e      	cbnz	r6, 801562c <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 801561c:	3301      	adds	r3, #1
 801561e:	e7d6      	b.n	80155ce <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8015620:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015622:	fb08 a700 	mla	r7, r8, r0, sl
 8015626:	fb97 f7f9 	sdiv	r7, r7, r9
 801562a:	e7ec      	b.n	8015606 <create_colorindex+0x72>
 801562c:	4611      	mov	r1, r2
 801562e:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8015632:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8015636:	f892 9000 	ldrb.w	r9, [r2]
 801563a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801563e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015640:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015644:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015648:	d1f5      	bne.n	8015636 <create_colorindex+0xa2>
 801564a:	e7e7      	b.n	801561c <create_colorindex+0x88>

0801564c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 801564c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8015650:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8015654:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8015656:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801565a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 801565e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8015662:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015664:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8015666:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015668:	4540      	cmp	r0, r8
 801566a:	db02      	blt.n	8015672 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 801566c:	b003      	add	sp, #12
 801566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8015672:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8015676:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8015678:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801567c:	eb04 0a03 	add.w	sl, r4, r3
 8015680:	4554      	cmp	r4, sl
 8015682:	d10f      	bne.n	80156a4 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8015684:	3001      	adds	r0, #1
 8015686:	e7ef      	b.n	8015668 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015688:	f815 b003 	ldrb.w	fp, [r5, r3]
 801568c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8015690:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015692:	f817 700b 	ldrb.w	r7, [r7, fp]
 8015696:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8015698:	4563      	cmp	r3, ip
 801569a:	dbf5      	blt.n	8015688 <color_quantize+0x3c>
 801569c:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 801569e:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 80156a2:	e7ed      	b.n	8015680 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 80156a4:	2300      	movs	r3, #0
      pixcode = 0;
 80156a6:	461e      	mov	r6, r3
 80156a8:	e7f6      	b.n	8015698 <color_quantize+0x4c>

080156aa <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 80156aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80156ae:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80156b2:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80156b6:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80156b8:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80156ba:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80156be:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 80156c2:	4298      	cmp	r0, r3
 80156c4:	db01      	blt.n	80156ca <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80156c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 80156ca:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 80156ce:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80156d2:	eb05 0a09 	add.w	sl, r5, r9
 80156d6:	4555      	cmp	r5, sl
 80156d8:	f104 0403 	add.w	r4, r4, #3
 80156dc:	d101      	bne.n	80156e2 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 80156de:	3001      	adds	r0, #1
 80156e0:	e7ef      	b.n	80156c2 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 80156e2:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80156e6:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 80156ea:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 80156ee:	f81e 6006 	ldrb.w	r6, [lr, r6]
 80156f2:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 80156f4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80156f8:	f818 6006 	ldrb.w	r6, [r8, r6]
 80156fc:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 80156fe:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8015702:	e7e8      	b.n	80156d6 <color_quantize3+0x2c>

08015704 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8015704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015708:	469a      	mov	sl, r3
 801570a:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801570c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015710:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015714:	699a      	ldr	r2, [r3, #24]
 8015716:	6811      	ldr	r1, [r2, #0]
 8015718:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801571a:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801571c:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801571e:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015720:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015722:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8015724:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8015726:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015728:	4551      	cmp	r1, sl
 801572a:	db02      	blt.n	8015732 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 801572c:	b00b      	add	sp, #44	; 0x2c
 801572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8015732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8015734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015736:	9c07      	ldr	r4, [sp, #28]
 8015738:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 801573c:	0190      	lsls	r0, r2, #6
 801573e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8015742:	9002      	str	r0, [sp, #8]
 8015744:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8015748:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 801574a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 801574c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8015750:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8015752:	9808      	ldr	r0, [sp, #32]
 8015754:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015758:	4575      	cmp	r5, lr
 801575a:	f100 0003 	add.w	r0, r0, #3
 801575e:	d106      	bne.n	801576e <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015760:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015762:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015764:	3201      	adds	r2, #1
 8015766:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 801576a:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801576c:	e7dc      	b.n	8015728 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801576e:	9e02      	ldr	r6, [sp, #8]
 8015770:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8015774:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8015778:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 801577a:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801577c:	f858 7006 	ldr.w	r7, [r8, r6]
 8015780:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015782:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8015784:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015788:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801578c:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8015790:	f859 7006 	ldr.w	r7, [r9, r6]
 8015794:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015796:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015798:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 801579c:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801579e:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80157a0:	9a06      	ldr	r2, [sp, #24]
 80157a2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80157a6:	4417      	add	r7, r2
 80157a8:	5dbe      	ldrb	r6, [r7, r6]
 80157aa:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 80157ac:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 80157b0:	e7d2      	b.n	8015758 <quantize3_ord_dither+0x54>

080157b2 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80157b2:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 80157b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80157b6:	3202      	adds	r2, #2
 80157b8:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 80157bc:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 80157be:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80157c0:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 80157c2:	3644      	adds	r6, #68	; 0x44
 80157c4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80157c6:	42bb      	cmp	r3, r7
 80157c8:	dc00      	bgt.n	80157cc <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 80157ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 80157cc:	6863      	ldr	r3, [r4, #4]
 80157ce:	462a      	mov	r2, r5
 80157d0:	2101      	movs	r1, #1
 80157d2:	4620      	mov	r0, r4
 80157d4:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80157d6:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 80157d8:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 80157da:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 80157de:	e7f1      	b.n	80157c4 <alloc_fs_workspace+0x12>

080157e0 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 80157e0:	4770      	bx	lr

080157e2 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 80157e2:	6803      	ldr	r3, [r0, #0]
 80157e4:	222f      	movs	r2, #47	; 0x2f
 80157e6:	615a      	str	r2, [r3, #20]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	4718      	bx	r3

080157ec <start_pass_1_quant>:
{
 80157ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80157f0:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80157f4:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 80157f6:	692b      	ldr	r3, [r5, #16]
 80157f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 80157fc:	696b      	ldr	r3, [r5, #20]
 80157fe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8015802:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8015806:	2b01      	cmp	r3, #1
 8015808:	d00b      	beq.n	8015822 <start_pass_1_quant+0x36>
 801580a:	2b02      	cmp	r3, #2
 801580c:	d05e      	beq.n	80158cc <start_pass_1_quant+0xe0>
 801580e:	2b00      	cmp	r3, #0
 8015810:	d174      	bne.n	80158fc <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8015812:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015814:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8015816:	bf0c      	ite	eq
 8015818:	4b3c      	ldreq	r3, [pc, #240]	; (801590c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 801581a:	4b3d      	ldrne	r3, [pc, #244]	; (8015910 <start_pass_1_quant+0x124>)
 801581c:	606b      	str	r3, [r5, #4]
}
 801581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8015822:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8015824:	4b3b      	ldr	r3, [pc, #236]	; (8015914 <start_pass_1_quant+0x128>)
 8015826:	4a3c      	ldr	r2, [pc, #240]	; (8015918 <start_pass_1_quant+0x12c>)
 8015828:	2903      	cmp	r1, #3
 801582a:	bf18      	it	ne
 801582c:	4613      	movne	r3, r2
 801582e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015830:	2300      	movs	r3, #0
 8015832:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015834:	69eb      	ldr	r3, [r5, #28]
 8015836:	b90b      	cbnz	r3, 801583c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8015838:	f7ff feac 	bl	8015594 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 801583c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 801583e:	2d00      	cmp	r5, #0
 8015840:	d1ed      	bne.n	801581e <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015842:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015846:	f107 0820 	add.w	r8, r7, #32
 801584a:	4646      	mov	r6, r8
 801584c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801584e:	429d      	cmp	r5, r3
 8015850:	dae5      	bge.n	801581e <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015852:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8015856:	4642      	mov	r2, r8
 8015858:	2300      	movs	r3, #0
 801585a:	429d      	cmp	r5, r3
 801585c:	d007      	beq.n	801586e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 801585e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015862:	4589      	cmp	r9, r1
 8015864:	d130      	bne.n	80158c8 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8015866:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801586a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 801586c:	bb48      	cbnz	r0, 80158c2 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801586e:	6863      	ldr	r3, [r4, #4]
 8015870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015874:	2101      	movs	r1, #1
 8015876:	4620      	mov	r0, r4
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 801587c:	f109 32ff 	add.w	r2, r9, #4294967295
 8015880:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8015884:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015920 <start_pass_1_quant+0x134>
 8015888:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 801588a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 801588e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8015892:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8015894:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 801589e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 80158a2:	bf45      	ittet	mi
 80158a4:	425b      	negmi	r3, r3
 80158a6:	fb93 f3f2 	sdivmi	r3, r3, r2
 80158aa:	fb93 f3f2 	sdivpl	r3, r3, r2
 80158ae:	425b      	negmi	r3, r3
 80158b0:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 80158b4:	458e      	cmp	lr, r1
 80158b6:	d1ed      	bne.n	8015894 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 80158b8:	3140      	adds	r1, #64	; 0x40
 80158ba:	f10c 0c10 	add.w	ip, ip, #16
 80158be:	458a      	cmp	sl, r1
 80158c0:	d1e5      	bne.n	801588e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80158c2:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 80158c4:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80158c6:	e7c1      	b.n	801584c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 80158c8:	3301      	adds	r3, #1
 80158ca:	e7c6      	b.n	801585a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 80158cc:	4b13      	ldr	r3, [pc, #76]	; (801591c <start_pass_1_quant+0x130>)
 80158ce:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 80158d0:	2300      	movs	r3, #0
 80158d2:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 80158d4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80158d6:	b90b      	cbnz	r3, 80158dc <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 80158d8:	f7ff ff6b 	bl	80157b2 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80158dc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80158de:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 80158e0:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80158e2:	3202      	adds	r2, #2
 80158e4:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 80158e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80158e8:	42bb      	cmp	r3, r7
 80158ea:	dd98      	ble.n	801581e <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 80158ec:	4632      	mov	r2, r6
 80158ee:	2100      	movs	r1, #0
 80158f0:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 80158f4:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 80158f6:	f015 fdcf 	bl	802b498 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 80158fa:	e7f4      	b.n	80158e6 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 80158fc:	6803      	ldr	r3, [r0, #0]
 80158fe:	2231      	movs	r2, #49	; 0x31
}
 8015900:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015904:	615a      	str	r2, [r3, #20]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	4718      	bx	r3
 801590a:	bf00      	nop
 801590c:	080156ab 	.word	0x080156ab
 8015910:	0801564d 	.word	0x0801564d
 8015914:	08015705 	.word	0x08015705
 8015918:	08015a5d 	.word	0x08015a5d
 801591c:	08015925 	.word	0x08015925
 8015920:	08030678 	.word	0x08030678

08015924 <quantize_fs_dither>:
{
 8015924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015928:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 801592a:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 801592c:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8015930:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015934:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8015938:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801593c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015940:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015942:	1e6b      	subs	r3, r5, #1
 8015944:	9304      	str	r3, [sp, #16]
 8015946:	fb03 f309 	mul.w	r3, r3, r9
 801594a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 801594c:	1c6b      	adds	r3, r5, #1
 801594e:	005b      	lsls	r3, r3, #1
 8015950:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8015952:	2300      	movs	r3, #0
 8015954:	9300      	str	r3, [sp, #0]
 8015956:	9a00      	ldr	r2, [sp, #0]
 8015958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801595a:	429a      	cmp	r2, r3
 801595c:	db02      	blt.n	8015964 <quantize_fs_dither+0x40>
}
 801595e:	b011      	add	sp, #68	; 0x44
 8015960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015964:	2100      	movs	r1, #0
 8015966:	462a      	mov	r2, r5
 8015968:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801596c:	f015 fd94 	bl	802b498 <memset>
    for (ci = 0; ci < nc; ci++) {
 8015970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015974:	2100      	movs	r1, #0
 8015976:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 8015978:	f1c9 0300 	rsb	r3, r9, #0
 801597c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 801597e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8015980:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8015982:	db06      	blt.n	8015992 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015984:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8015988:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801598a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 801598c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801598e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8015990:	e7e0      	b.n	8015954 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8015992:	9800      	ldr	r0, [sp, #0]
 8015994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015996:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 801599a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 801599e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80159a2:	9b05      	ldr	r3, [sp, #20]
 80159a4:	f853 cb04 	ldr.w	ip, [r3], #4
 80159a8:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 80159aa:	b312      	cbz	r2, 80159f2 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80159ac:	9b08      	ldr	r3, [sp, #32]
 80159ae:	449e      	add	lr, r3
	output_ptr += width-1;
 80159b0:	9b04      	ldr	r3, [sp, #16]
 80159b2:	4418      	add	r0, r3
	dirnc = -nc;
 80159b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159b6:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80159b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159ba:	449c      	add	ip, r3
	dir = -1;
 80159bc:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 80159c0:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 80159c2:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 80159c4:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 80159c6:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 80159c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80159cc:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 80159ce:	6923      	ldr	r3, [r4, #16]
 80159d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80159d4:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80159d6:	9b02      	ldr	r3, [sp, #8]
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 80159dc:	2300      	movs	r3, #0
      cur = 0;
 80159de:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 80159e0:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 80159e2:	9a03      	ldr	r2, [sp, #12]
 80159e4:	b94a      	cbnz	r2, 80159fa <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 80159e6:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 80159e8:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 80159ea:	436a      	muls	r2, r5
 80159ec:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 80159f0:	e7c5      	b.n	801597e <quantize_fs_dither+0x5a>
	dir = 1;
 80159f2:	2301      	movs	r3, #1
 80159f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80159f8:	e7e2      	b.n	80159c0 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80159fa:	9a01      	ldr	r2, [sp, #4]
 80159fc:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015a02:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8015a04:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015a08:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8015a0c:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8015a12:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015a16:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015a1a:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015a1e:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015a20:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8015a24:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015a28:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015a2c:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015a2e:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015a32:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8015a34:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8015a36:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 8015a3a:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8015a3c:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015a3e:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8015a40:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015a44:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015a46:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8015a48:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 8015a4a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015a4c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8015a4e:	4443      	add	r3, r8
	belowerr = bnexterr;
 8015a50:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8015a54:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015a58:	4417      	add	r7, r2
 8015a5a:	e7c2      	b.n	80159e2 <quantize_fs_dither+0xbe>

08015a5c <quantize_ord_dither>:
{
 8015a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a60:	b089      	sub	sp, #36	; 0x24
 8015a62:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015a64:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 8015a68:	1f14      	subs	r4, r2, #4
{
 8015a6a:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015a6c:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 8015a6e:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8015a70:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015a74:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015a76:	9b07      	ldr	r3, [sp, #28]
 8015a78:	429f      	cmp	r7, r3
 8015a7a:	db02      	blt.n	8015a82 <quantize_ord_dither+0x26>
}
 8015a7c:	b009      	add	sp, #36	; 0x24
 8015a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015a82:	4652      	mov	r2, sl
 8015a84:	2100      	movs	r1, #0
 8015a86:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015a8a:	f015 fd05 	bl	802b498 <memset>
    row_index = cquantize->row_index;
 8015a8e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8015a92:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 8015a96:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 8015a98:	019a      	lsls	r2, r3, #6
 8015a9a:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8015a9c:	9a01      	ldr	r2, [sp, #4]
 8015a9e:	4290      	cmp	r0, r2
 8015aa0:	db06      	blt.n	8015ab0 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015aa2:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8015aa4:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015aa6:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8015aaa:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8015aae:	e7e2      	b.n	8015a76 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8015ab0:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8015ab4:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8015ab6:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8015aba:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8015abe:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8015ac0:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8015ac2:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015ac4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015ac8:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 8015aca:	eb0a 0205 	add.w	r2, sl, r5
 8015ace:	9206      	str	r2, [sp, #24]
 8015ad0:	9a06      	ldr	r2, [sp, #24]
 8015ad2:	4295      	cmp	r5, r2
 8015ad4:	d101      	bne.n	8015ada <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015ad6:	3001      	adds	r0, #1
 8015ad8:	e7e0      	b.n	8015a9c <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015ada:	782a      	ldrb	r2, [r5, #0]
 8015adc:	f891 e000 	ldrb.w	lr, [r1]
 8015ae0:	9204      	str	r2, [sp, #16]
 8015ae2:	9a02      	ldr	r2, [sp, #8]
 8015ae4:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015ae8:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015aea:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015aec:	f85b b002 	ldr.w	fp, [fp, r2]
 8015af0:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015af2:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015af6:	4496      	add	lr, r2
 8015af8:	9a04      	ldr	r2, [sp, #16]
 8015afa:	f81e e00b 	ldrb.w	lr, [lr, fp]
 8015afe:	4472      	add	r2, lr
 8015b00:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8015b04:	9a01      	ldr	r2, [sp, #4]
 8015b06:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8015b08:	e7e2      	b.n	8015ad0 <quantize_ord_dither+0x74>
	...

08015b0c <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015b0c:	6843      	ldr	r3, [r0, #4]
 8015b0e:	2258      	movs	r2, #88	; 0x58
 8015b10:	2101      	movs	r1, #1
 8015b12:	681b      	ldr	r3, [r3, #0]
{
 8015b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b18:	b085      	sub	sp, #20
 8015b1a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015b1c:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8015b1e:	4b67      	ldr	r3, [pc, #412]	; (8015cbc <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015b20:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8015b24:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8015b26:	4b66      	ldr	r3, [pc, #408]	; (8015cc0 <jinit_1pass_quantizer+0x1b4>)
 8015b28:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8015b2a:	4b66      	ldr	r3, [pc, #408]	; (8015cc4 <jinit_1pass_quantizer+0x1b8>)
 8015b2c:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8015b2e:	2300      	movs	r3, #0
 8015b30:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8015b32:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8015b34:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015b36:	2b04      	cmp	r3, #4
 8015b38:	dd07      	ble.n	8015b4a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8015b3a:	6823      	ldr	r3, [r4, #0]
 8015b3c:	2039      	movs	r0, #57	; 0x39
 8015b3e:	2204      	movs	r2, #4
 8015b40:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	4620      	mov	r0, r4
 8015b48:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8015b4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b50:	dd08      	ble.n	8015b64 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8015b52:	6823      	ldr	r3, [r4, #0]
 8015b54:	213b      	movs	r1, #59	; 0x3b
 8015b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015b64:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8015b68:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8015b6a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8015b6e:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8015b72:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8015b76:	469a      	mov	sl, r3
 8015b78:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8015b7a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8015b7c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8015b7e:	4588      	cmp	r8, r1
 8015b80:	dc47      	bgt.n	8015c12 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8015b82:	4591      	cmp	r9, r2
 8015b84:	daf7      	bge.n	8015b76 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8015b86:	f1ba 0f01 	cmp.w	sl, #1
 8015b8a:	d106      	bne.n	8015b9a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8015b8c:	6823      	ldr	r3, [r4, #0]
 8015b8e:	213a      	movs	r1, #58	; 0x3a
 8015b90:	4620      	mov	r0, r4
 8015b92:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 8015b9a:	463a      	mov	r2, r7
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	2501      	movs	r5, #1
 8015ba0:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 8015ba2:	4598      	cmp	r8, r3
 8015ba4:	dc38      	bgt.n	8015c18 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015ba6:	f8df c120 	ldr.w	ip, [pc, #288]	; 8015cc8 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 8015baa:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8015bac:	460b      	mov	r3, r1
 8015bae:	4598      	cmp	r8, r3
 8015bb0:	dc38      	bgt.n	8015c24 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8015bb2:	2900      	cmp	r1, #0
 8015bb4:	d1f9      	bne.n	8015baa <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8015bb6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015bb8:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8015bba:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015bbc:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8015bbe:	d148      	bne.n	8015c52 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015bc0:	619d      	str	r5, [r3, #24]
 8015bc2:	6a31      	ldr	r1, [r6, #32]
 8015bc4:	61d9      	str	r1, [r3, #28]
 8015bc6:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015bc8:	6219      	str	r1, [r3, #32]
 8015bca:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015bcc:	6259      	str	r1, [r3, #36]	; 0x24
 8015bce:	2160      	movs	r1, #96	; 0x60
 8015bd0:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015bd2:	2101      	movs	r1, #1
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015bd8:	6863      	ldr	r3, [r4, #4]
 8015bda:	462a      	mov	r2, r5
 8015bdc:	2101      	movs	r1, #1
 8015bde:	689f      	ldr	r7, [r3, #8]
 8015be0:	4620      	mov	r0, r4
 8015be2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015be4:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015be6:	46ae      	mov	lr, r5
 8015be8:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8015bea:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015bec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	db33      	blt.n	8015c5a <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 8015bf2:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8015bf4:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8015bf6:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015bfa:	f7ff fccb 	bl	8015594 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8015bfe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015c02:	2b02      	cmp	r3, #2
 8015c04:	d156      	bne.n	8015cb4 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 8015c06:	4620      	mov	r0, r4
}
 8015c08:	b005      	add	sp, #20
 8015c0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8015c0e:	f7ff bdd0 	b.w	80157b2 <alloc_fs_workspace>
      temp *= iroot;
 8015c12:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8015c14:	3101      	adds	r1, #1
 8015c16:	e7b2      	b.n	8015b7e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015c18:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 8015c1c:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8015c1e:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 8015c22:	e7be      	b.n	8015ba2 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015c24:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8015c28:	2a02      	cmp	r2, #2
 8015c2a:	bf0c      	ite	eq
 8015c2c:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8015c30:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8015c32:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 8015c36:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8015c3a:	fb0a 2202 	mla	r2, sl, r2, r2
 8015c3e:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 8015c42:	4591      	cmp	r9, r2
 8015c44:	dbb5      	blt.n	8015bb2 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8015c46:	3301      	adds	r3, #1
 8015c48:	4615      	mov	r5, r2
      changed = TRUE;
 8015c4a:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8015c4c:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8015c50:	e7ad      	b.n	8015bae <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015c52:	2161      	movs	r1, #97	; 0x61
 8015c54:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8015c58:	e7bb      	b.n	8015bd2 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015c5a:	9b01      	ldr	r3, [sp, #4]
 8015c5c:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8015c60:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015c64:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015c66:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 8015c6a:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015c6e:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8015c70:	2300      	movs	r3, #0
 8015c72:	469a      	mov	sl, r3
 8015c74:	4599      	cmp	r9, r3
 8015c76:	dc02      	bgt.n	8015c7e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015c78:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8015c7a:	46c6      	mov	lr, r8
 8015c7c:	e7b6      	b.n	8015bec <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015c7e:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8015c82:	9f03      	ldr	r7, [sp, #12]
 8015c84:	4439      	add	r1, r7
 8015c86:	fb91 f1fb 	sdiv	r1, r1, fp
 8015c8a:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015c8c:	4651      	mov	r1, sl
 8015c8e:	42a9      	cmp	r1, r5
 8015c90:	db0d      	blt.n	8015cae <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8015c92:	3301      	adds	r3, #1
 8015c94:	44c2      	add	sl, r8
 8015c96:	e7ed      	b.n	8015c74 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015c98:	9f02      	ldr	r7, [sp, #8]
 8015c9a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8015c9e:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8015ca0:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015ca4:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8015ca6:	45e0      	cmp	r8, ip
 8015ca8:	dcf6      	bgt.n	8015c98 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015caa:	4471      	add	r1, lr
 8015cac:	e7ef      	b.n	8015c8e <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 8015cae:	f04f 0c00 	mov.w	ip, #0
 8015cb2:	e7f8      	b.n	8015ca6 <jinit_1pass_quantizer+0x19a>
}
 8015cb4:	b005      	add	sp, #20
 8015cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cba:	bf00      	nop
 8015cbc:	080157ed 	.word	0x080157ed
 8015cc0:	080157e1 	.word	0x080157e1
 8015cc4:	080157e3 	.word	0x080157e3
 8015cc8:	0803066c 	.word	0x0803066c

08015ccc <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8015ccc:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8015cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8015cd2:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015cd6:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8015cd8:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 8015cdc:	429c      	cmp	r4, r3
 8015cde:	db00      	blt.n	8015ce2 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8015ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 8015ce2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8015ce6:	4677      	mov	r7, lr
 8015ce8:	3203      	adds	r2, #3
 8015cea:	b90f      	cbnz	r7, 8015cf0 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 8015cec:	3401      	adds	r4, #1
 8015cee:	e7f5      	b.n	8015cdc <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015cf0:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015cf4:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015cf8:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015cfa:	08a8      	lsrs	r0, r5, #2
 8015cfc:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8015d00:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015d04:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8015d08:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 8015d0a:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 8015d0e:	3001      	adds	r0, #1
 8015d10:	b280      	uxth	r0, r0
 8015d12:	b108      	cbz	r0, 8015d18 <prescan_quantize+0x4c>
 8015d14:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 8015d18:	3f01      	subs	r7, #1
 8015d1a:	3203      	adds	r2, #3
 8015d1c:	e7e5      	b.n	8015cea <prescan_quantize+0x1e>

08015d1e <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8015d1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d22:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 8015d26:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 8015d2a:	2500      	movs	r5, #0
{
 8015d2c:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015d2e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015d32:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8015d34:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8015d36:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8015d38:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 8015d3a:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 8015d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8015d3e:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8015d42:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8015d44:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8015d46:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 8015d48:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 8015d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015d50:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8015d52:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8015d56:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015d58:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8015d5c:	341c      	adds	r4, #28
{
 8015d5e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8015d62:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8015d64:	0149      	lsls	r1, r1, #5
 8015d66:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8015d6a:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8015d6c:	eb09 0301 	add.w	r3, r9, r1
 8015d70:	105b      	asrs	r3, r3, #1
 8015d72:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 8015d74:	eb08 0304 	add.w	r3, r8, r4
 8015d78:	105b      	asrs	r3, r3, #1
 8015d7a:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 8015d7c:	9b01      	ldr	r3, [sp, #4]
 8015d7e:	42ab      	cmp	r3, r5
 8015d80:	dc43      	bgt.n	8015e0a <fill_inverse_cmap+0xec>
  ncolors = 0;
 8015d82:	2200      	movs	r2, #0
 8015d84:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 8015d86:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015d88:	4613      	mov	r3, r2
 8015d8a:	9c01      	ldr	r4, [sp, #4]
 8015d8c:	429c      	cmp	r4, r3
 8015d8e:	f300 809c 	bgt.w	8015eca <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015d92:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8015d94:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 8015d96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015d9a:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8015d9c:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015da0:	d1fb      	bne.n	8015d9a <fill_inverse_cmap+0x7c>
 8015da2:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015da4:	469b      	mov	fp, r3
 8015da6:	9107      	str	r1, [sp, #28]
 8015da8:	4593      	cmp	fp, r2
 8015daa:	f040 8096 	bne.w	8015eda <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 8015dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 8015db0:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 8015db2:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8015db6:	9b08      	ldr	r3, [sp, #32]
 8015db8:	f023 0103 	bic.w	r1, r3, #3
 8015dbc:	9b05      	ldr	r3, [sp, #20]
 8015dbe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8015dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dc4:	f023 0307 	bic.w	r3, r3, #7
 8015dc8:	4629      	mov	r1, r5
 8015dca:	019b      	lsls	r3, r3, #6
 8015dcc:	3110      	adds	r1, #16
 8015dce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015dd2:	f855 4b04 	ldr.w	r4, [r5], #4
 8015dd6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015dd8:	f102 0720 	add.w	r7, r2, #32
 8015ddc:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015dde:	4626      	mov	r6, r4
 8015de0:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015de2:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015de6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015dea:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015dec:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015dee:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015df2:	d1f8      	bne.n	8015de6 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015df4:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015df6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015df8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8015dfc:	d1ef      	bne.n	8015dde <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8015dfe:	428d      	cmp	r5, r1
 8015e00:	d1e7      	bne.n	8015dd2 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 8015e02:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8015e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8015e0a:	9b00      	ldr	r3, [sp, #0]
 8015e0c:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8015e14:	4591      	cmp	r9, r2
 8015e16:	dd2a      	ble.n	8015e6e <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8015e18:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8015e1c:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8015e1e:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8015e22:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8015e28:	459a      	cmp	sl, r3
 8015e2a:	dd33      	ble.n	8015e94 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8015e2c:	eba3 0e0a 	sub.w	lr, r3, sl
 8015e30:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015e34:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8015e38:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8015e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8015e3e:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8015e46:	4598      	cmp	r8, r3
 8015e48:	dd32      	ble.n	8015eb0 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 8015e4a:	eba3 0708 	sub.w	r7, r3, r8
 8015e4e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015e50:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8015e54:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8015e56:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8015e58:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 8015e5c:	aa70      	add	r2, sp, #448	; 0x1c0
 8015e5e:	429e      	cmp	r6, r3
 8015e60:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8015e64:	f105 0501 	add.w	r5, r5, #1
 8015e68:	bfa8      	it	ge
 8015e6a:	461e      	movge	r6, r3
 8015e6c:	e786      	b.n	8015d7c <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8015e6e:	4291      	cmp	r1, r2
 8015e70:	da06      	bge.n	8015e80 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8015e72:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8015e76:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8015e7a:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8015e7e:	e7d0      	b.n	8015e22 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8015e80:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8015e82:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8015e86:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8015e88:	bfac      	ite	ge
 8015e8a:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8015e8c:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8015e90:	4352      	muls	r2, r2
 8015e92:	e7c7      	b.n	8015e24 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8015e94:	4298      	cmp	r0, r3
 8015e96:	da08      	bge.n	8015eaa <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8015e98:	eba3 0e00 	sub.w	lr, r3, r0
 8015e9c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015ea0:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8015ea4:	eba3 030a 	sub.w	r3, r3, sl
 8015ea8:	e7c7      	b.n	8015e3a <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 8015eaa:	459b      	cmp	fp, r3
 8015eac:	dbfa      	blt.n	8015ea4 <fill_inverse_cmap+0x186>
 8015eae:	e7c3      	b.n	8015e38 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8015eb0:	429c      	cmp	r4, r3
 8015eb2:	da06      	bge.n	8015ec2 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8015eb4:	1b1f      	subs	r7, r3, r4
 8015eb6:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015eb8:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8015ebc:	eba3 0308 	sub.w	r3, r3, r8
 8015ec0:	e7c9      	b.n	8015e56 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8015ec2:	9f03      	ldr	r7, [sp, #12]
 8015ec4:	429f      	cmp	r7, r3
 8015ec6:	dbf9      	blt.n	8015ebc <fill_inverse_cmap+0x19e>
 8015ec8:	e7c4      	b.n	8015e54 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 8015eca:	f851 4b04 	ldr.w	r4, [r1], #4
 8015ece:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8015ed0:	bfa4      	itt	ge
 8015ed2:	5483      	strbge	r3, [r0, r2]
 8015ed4:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	e757      	b.n	8015d8a <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8015eda:	9b07      	ldr	r3, [sp, #28]
 8015edc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015ee0:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015ee2:	9b00      	ldr	r3, [sp, #0]
 8015ee4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8015ee8:	680b      	ldr	r3, [r1, #0]
 8015eea:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015eec:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015eee:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015ef0:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015ef4:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015ef6:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015ef8:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015efc:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015f00:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015f04:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8015f06:	4364      	muls	r4, r4
 8015f08:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015f0c:	3004      	adds	r0, #4
 8015f0e:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 8015f10:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015f14:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015f16:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015f18:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015f1a:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 8015f1c:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015f1e:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015f20:	9106      	str	r1, [sp, #24]
 8015f22:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015f24:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8015f28:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8015f2c:	930e      	str	r3, [sp, #56]	; 0x38
 8015f2e:	9b06      	ldr	r3, [sp, #24]
 8015f30:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8015f32:	a810      	add	r0, sp, #64	; 0x40
 8015f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f38:	9003      	str	r0, [sp, #12]
 8015f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8015f3c:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 8015f3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015f40:	eb03 0c01 	add.w	ip, r3, r1
 8015f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f46:	440b      	add	r3, r1
 8015f48:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 8015f4a:	9b03      	ldr	r3, [sp, #12]
 8015f4c:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 8015f4e:	9b02      	ldr	r3, [sp, #8]
 8015f50:	9301      	str	r3, [sp, #4]
 8015f52:	e01c      	b.n	8015f8e <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8015f54:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8015f58:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 8015f5c:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015f5e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8015f60:	bfc8      	it	gt
 8015f62:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8015f64:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8015f66:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8015f6a:	bfc8      	it	gt
 8015f6c:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015f70:	42af      	cmp	r7, r5
 8015f72:	d1ef      	bne.n	8015f54 <fill_inverse_cmap+0x236>
	  cptr++;
 8015f74:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8015f76:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 8015f7a:	3304      	adds	r3, #4
 8015f7c:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 8015f7e:	9b01      	ldr	r3, [sp, #4]
 8015f80:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8015f82:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8015f86:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8015f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f8a:	4298      	cmp	r0, r3
 8015f8c:	d006      	beq.n	8015f9c <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015f8e:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8015f92:	9d06      	ldr	r5, [sp, #24]
 8015f94:	f8dd e010 	ldr.w	lr, [sp, #16]
 8015f98:	9c01      	ldr	r4, [sp, #4]
 8015f9a:	e7db      	b.n	8015f54 <fill_inverse_cmap+0x236>
	  cptr++;
 8015f9c:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015f9e:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8015fa0:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8015fa2:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015fa4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8015fa8:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 8015faa:	9b02      	ldr	r3, [sp, #8]
 8015fac:	4403      	add	r3, r0
 8015fae:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015fb0:	d1c4      	bne.n	8015f3c <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8015fb2:	f10b 0b01 	add.w	fp, fp, #1
 8015fb6:	e6f7      	b.n	8015da8 <fill_inverse_cmap+0x8a>

08015fb8 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8015fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fbc:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015fbe:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015fc2:	b085      	sub	sp, #20
 8015fc4:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8015fc6:	699b      	ldr	r3, [r3, #24]
{
 8015fc8:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015fca:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8015fcc:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8015fce:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015fd0:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015fd2:	4555      	cmp	r5, sl
 8015fd4:	db02      	blt.n	8015fdc <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8015fd6:	b005      	add	sp, #20
 8015fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8015fdc:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8015fe0:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8015fe4:	9b01      	ldr	r3, [sp, #4]
 8015fe6:	3403      	adds	r4, #3
 8015fe8:	eb06 0b03 	add.w	fp, r6, r3
 8015fec:	455e      	cmp	r6, fp
 8015fee:	d101      	bne.n	8015ff4 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8015ff0:	3501      	adds	r5, #1
 8015ff2:	e7ee      	b.n	8015fd2 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015ff4:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015ff8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015ffc:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8016000:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8016002:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8016006:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 801600a:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 801600e:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8016010:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8016014:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8016018:	f1bc 0f00 	cmp.w	ip, #0
 801601c:	d106      	bne.n	801602c <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 801601e:	4672      	mov	r2, lr
 8016020:	9303      	str	r3, [sp, #12]
 8016022:	9002      	str	r0, [sp, #8]
 8016024:	f7ff fe7b 	bl	8015d1e <fill_inverse_cmap>
 8016028:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 801602c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016030:	3403      	adds	r4, #3
 8016032:	3b01      	subs	r3, #1
 8016034:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8016038:	e7d8      	b.n	8015fec <pass2_no_dither+0x34>

0801603a <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 801603a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801603e:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8016042:	b09f      	sub	sp, #124	; 0x7c
 8016044:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8016046:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801604a:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801604c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801604e:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016050:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016054:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8016056:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801605a:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 801605c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8016060:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8016068:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 801606a:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 801606c:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 801606e:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016070:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016072:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016078:	3b03      	subs	r3, #3
 801607a:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801607c:	2306      	movs	r3, #6
 801607e:	fb02 3303 	mla	r3, r2, r3, r3
 8016082:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8016084:	2300      	movs	r3, #0
 8016086:	9304      	str	r3, [sp, #16]
 8016088:	9b04      	ldr	r3, [sp, #16]
 801608a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801608c:	4293      	cmp	r3, r2
 801608e:	db02      	blt.n	8016096 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8016090:	b01f      	add	sp, #124	; 0x7c
 8016092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8016096:	9a04      	ldr	r2, [sp, #16]
 8016098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801609a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801609e:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 80160a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80160a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160a6:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80160a8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80160ac:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 80160ae:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d036      	beq.n	8016124 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80160b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160b8:	9a01      	ldr	r2, [sp, #4]
 80160ba:	441a      	add	r2, r3
      outptr += width-1;
 80160bc:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80160be:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 80160c0:	3b01      	subs	r3, #1
 80160c2:	9a03      	ldr	r2, [sp, #12]
 80160c4:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80160c6:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 80160c8:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80160ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160cc:	4413      	add	r3, r2
      dir3 = -3;
 80160ce:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80160d2:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 80160d4:	2300      	movs	r3, #0
      dir3 = -3;
 80160d6:	9208      	str	r2, [sp, #32]
      dir = -1;
 80160d8:	f04f 32ff 	mov.w	r2, #4294967295
 80160dc:	920f      	str	r2, [sp, #60]	; 0x3c
 80160de:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80160e2:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80160e4:	9b08      	ldr	r3, [sp, #32]
 80160e6:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 80160e8:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80160ea:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 80160ec:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 80160ee:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80160f0:	1cab      	adds	r3, r5, #2
 80160f2:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80160f4:	1d2b      	adds	r3, r5, #4
 80160f6:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 80160f8:	9b05      	ldr	r3, [sp, #20]
 80160fa:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 80160fc:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80160fe:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8016102:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8016106:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016108:	b98f      	cbnz	r7, 801612e <pass2_fs_dither+0xf4>
 801610a:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 801610c:	9a02      	ldr	r2, [sp, #8]
 801610e:	435d      	muls	r5, r3
 8016110:	9906      	ldr	r1, [sp, #24]
 8016112:	9b02      	ldr	r3, [sp, #8]
 8016114:	5351      	strh	r1, [r2, r5]
 8016116:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 8016118:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 801611a:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 801611c:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 801611e:	9b04      	ldr	r3, [sp, #16]
 8016120:	3301      	adds	r3, #1
 8016122:	e7b0      	b.n	8016086 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8016124:	2301      	movs	r3, #1
      dir3 = 3;
 8016126:	2203      	movs	r2, #3
      dir = 1;
 8016128:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 801612a:	9208      	str	r2, [sp, #32]
 801612c:	e7d7      	b.n	80160de <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801612e:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8016132:	1977      	adds	r7, r6, r5
 8016134:	4463      	add	r3, ip
 8016136:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8016138:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801613a:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801613e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016140:	5ef3      	ldrsh	r3, [r6, r3]
 8016142:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016146:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016148:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801614a:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801614c:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801614e:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016152:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8016154:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8016158:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801615c:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 801615e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8016162:	9f01      	ldr	r7, [sp, #4]
 8016164:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016168:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801616a:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 801616c:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 801616e:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016170:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8016174:	9901      	ldr	r1, [sp, #4]
 8016176:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016178:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 801617c:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8016180:	9a01      	ldr	r2, [sp, #4]
 8016182:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016184:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016188:	ea4f 02aa 	mov.w	r2, sl, asr #2
 801618c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801618e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016192:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8016196:	461f      	mov	r7, r3
 8016198:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 801619c:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 80161a0:	f1bc 0f00 	cmp.w	ip, #0
 80161a4:	d105      	bne.n	80161b2 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 80161a6:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 80161aa:	f7ff fdb8 	bl	8015d1e <fill_inverse_cmap>
 80161ae:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 80161b2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 80161b6:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 80161b8:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80161ba:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 80161bc:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 80161be:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 80161c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80161c2:	5cd2      	ldrb	r2, [r2, r3]
 80161c4:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 80161c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80161ca:	5cd2      	ldrb	r2, [r2, r3]
 80161cc:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80161d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80161d2:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80161d4:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80161d6:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 80161da:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80161de:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 80161e0:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80161e4:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 80161e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 80161e8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 80161ec:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 80161ee:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 80161f2:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 80161f4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80161f8:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 80161fa:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80161fe:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8016200:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016202:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8016204:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8016208:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 801620a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 801620e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8016210:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8016214:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016216:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 8016218:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 801621a:	4437      	add	r7, r6
      outptr += dir;
 801621c:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 801621e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8016220:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016224:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8016226:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016228:	443e      	add	r6, r7
 801622a:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 801622c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801622e:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8016230:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8016234:	9609      	str	r6, [sp, #36]	; 0x24
 8016236:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016238:	e765      	b.n	8016106 <pass2_fs_dither+0xcc>

0801623a <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 801623a:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 801623c:	6843      	ldr	r3, [r0, #4]
 801623e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8016242:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016244:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801624c:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8016250:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8016254:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8016258:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 801625a:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 801625c:	425c      	negs	r4, r3
 801625e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016262:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8016264:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016268:	2b10      	cmp	r3, #16
 801626a:	d1f7      	bne.n	801625c <init_error_limit+0x22>
 801626c:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8016270:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8016274:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8016278:	425d      	negs	r5, r3
 801627a:	f844 3f04 	str.w	r3, [r4, #4]!
 801627e:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8016282:	f002 0501 	and.w	r5, r2, #1
 8016286:	3a01      	subs	r2, #1
 8016288:	442b      	add	r3, r5
 801628a:	f112 0f32 	cmn.w	r2, #50	; 0x32
 801628e:	d1f3      	bne.n	8016278 <init_error_limit+0x3e>
 8016290:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8016294:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8016298:	425c      	negs	r4, r3
 801629a:	f841 3f04 	str.w	r3, [r1, #4]!
 801629e:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 80162a2:	4282      	cmp	r2, r0
 80162a4:	d1f9      	bne.n	801629a <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 80162a6:	bd38      	pop	{r3, r4, r5, pc}

080162a8 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 80162a8:	4770      	bx	lr

080162aa <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 80162aa:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80162ae:	2201      	movs	r2, #1
 80162b0:	61da      	str	r2, [r3, #28]
}
 80162b2:	4770      	bx	lr

080162b4 <start_pass_2_quant>:
{
 80162b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80162b6:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80162ba:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 80162bc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 80162c0:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d050      	beq.n	8016368 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 80162c6:	2302      	movs	r3, #2
 80162c8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 80162cc:	b189      	cbz	r1, 80162f2 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 80162ce:	4b28      	ldr	r3, [pc, #160]	; (8016370 <start_pass_2_quant+0xbc>)
 80162d0:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 80162d2:	4b28      	ldr	r3, [pc, #160]	; (8016374 <start_pass_2_quant+0xc0>)
 80162d4:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 80162d6:	1f34      	subs	r4, r6, #4
 80162d8:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 80162da:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80162de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80162e2:	2100      	movs	r1, #0
 80162e4:	f015 f8d8 	bl	802b498 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 80162e8:	42a6      	cmp	r6, r4
 80162ea:	d1f6      	bne.n	80162da <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 80162ec:	2300      	movs	r3, #0
 80162ee:	61eb      	str	r3, [r5, #28]
}
 80162f0:	e02f      	b.n	8016352 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 80162f2:	4b21      	ldr	r3, [pc, #132]	; (8016378 <start_pass_2_quant+0xc4>)
 80162f4:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 80162f6:	4b21      	ldr	r3, [pc, #132]	; (801637c <start_pass_2_quant+0xc8>)
 80162f8:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 80162fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 80162fe:	2b00      	cmp	r3, #0
 8016300:	dc29      	bgt.n	8016356 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8016302:	223a      	movs	r2, #58	; 0x3a
 8016304:	6823      	ldr	r3, [r4, #0]
 8016306:	615a      	str	r2, [r3, #20]
 8016308:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801630a:	619a      	str	r2, [r3, #24]
 801630c:	4620      	mov	r0, r4
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8016312:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016316:	2b02      	cmp	r3, #2
 8016318:	d118      	bne.n	801634c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801631a:	2306      	movs	r3, #6
 801631c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801631e:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8016320:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8016322:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8016324:	b93b      	cbnz	r3, 8016336 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016326:	6863      	ldr	r3, [r4, #4]
 8016328:	2101      	movs	r1, #1
 801632a:	4620      	mov	r0, r4
 801632c:	9201      	str	r2, [sp, #4]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	4798      	blx	r3
 8016332:	9a01      	ldr	r2, [sp, #4]
 8016334:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8016336:	2100      	movs	r1, #0
 8016338:	6a28      	ldr	r0, [r5, #32]
 801633a:	f015 f8ad 	bl	802b498 <memset>
      if (cquantize->error_limiter == NULL)
 801633e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016340:	b913      	cbnz	r3, 8016348 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8016342:	4620      	mov	r0, r4
 8016344:	f7ff ff79 	bl	801623a <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8016348:	2300      	movs	r3, #0
 801634a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 801634c:	69eb      	ldr	r3, [r5, #28]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1c1      	bne.n	80162d6 <start_pass_2_quant+0x22>
}
 8016352:	b002      	add	sp, #8
 8016354:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8016356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801635a:	ddda      	ble.n	8016312 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801635c:	223b      	movs	r2, #59	; 0x3b
 801635e:	6823      	ldr	r3, [r4, #0]
 8016360:	615a      	str	r2, [r3, #20]
 8016362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016366:	e7d0      	b.n	801630a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8016368:	2900      	cmp	r1, #0
 801636a:	d1b0      	bne.n	80162ce <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 801636c:	4b04      	ldr	r3, [pc, #16]	; (8016380 <start_pass_2_quant+0xcc>)
 801636e:	e7c1      	b.n	80162f4 <start_pass_2_quant+0x40>
 8016370:	08015ccd 	.word	0x08015ccd
 8016374:	080165c3 	.word	0x080165c3
 8016378:	0801603b 	.word	0x0801603b
 801637c:	080162a9 	.word	0x080162a9
 8016380:	08015fb9 	.word	0x08015fb9

08016384 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8016384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016388:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 801638c:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801638e:	b085      	sub	sp, #20
  if (c0max > c0min)
 8016390:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 8016392:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016394:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016396:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801639a:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 801639e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 80163a2:	db24      	blt.n	80163ee <update_box.isra.0+0x6a>
  if (c1max > c1min)
 80163a4:	4584      	cmp	ip, r0
 80163a6:	4662      	mov	r2, ip
 80163a8:	db5d      	blt.n	8016466 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 80163aa:	42a5      	cmp	r5, r4
 80163ac:	f280 80eb 	bge.w	8016586 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 80163b0:	0196      	lsls	r6, r2, #6
 80163b2:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 80163b6:	46ac      	mov	ip, r5
 80163b8:	9602      	str	r6, [sp, #8]
 80163ba:	fb07 f602 	mul.w	r6, r7, r2
 80163be:	9603      	str	r6, [sp, #12]
 80163c0:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80163c2:	469e      	mov	lr, r3
 80163c4:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 80163c8:	9e03      	ldr	r6, [sp, #12]
 80163ca:	44b1      	add	r9, r6
 80163cc:	e083      	b.n	80164d6 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 80163ce:	9a01      	ldr	r2, [sp, #4]
 80163d0:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 80163d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80163d8:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80163da:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 80163dc:	454c      	cmp	r4, r9
 80163de:	da08      	bge.n	80163f2 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80163e0:	f108 0801 	add.w	r8, r8, #1
 80163e4:	4540      	cmp	r0, r8
 80163e6:	daf2      	bge.n	80163ce <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 80163e8:	3301      	adds	r3, #1
 80163ea:	459b      	cmp	fp, r3
 80163ec:	db0f      	blt.n	801640e <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80163ee:	46e0      	mov	r8, ip
 80163f0:	e7f8      	b.n	80163e4 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 80163f2:	f832 ab02 	ldrh.w	sl, [r2], #2
 80163f6:	f1ba 0f00 	cmp.w	sl, #0
 80163fa:	d005      	beq.n	8016408 <update_box.isra.0+0x84>
  if (c0max > c0min)
 80163fc:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 80163fe:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8016400:	ddd0      	ble.n	80163a4 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016402:	465f      	mov	r7, fp
 8016404:	46e0      	mov	r8, ip
 8016406:	e00f      	b.n	8016428 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016408:	f109 0901 	add.w	r9, r9, #1
 801640c:	e7e6      	b.n	80163dc <update_box.isra.0+0x58>
 have_c0min:
 801640e:	463b      	mov	r3, r7
 8016410:	e7f7      	b.n	8016402 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 8016412:	9a01      	ldr	r2, [sp, #4]
 8016414:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016418:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801641c:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801641e:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 8016420:	454c      	cmp	r4, r9
 8016422:	da07      	bge.n	8016434 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016424:	f108 0801 	add.w	r8, r8, #1
 8016428:	4540      	cmp	r0, r8
 801642a:	daf2      	bge.n	8016412 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 801642c:	3f01      	subs	r7, #1
 801642e:	429f      	cmp	r7, r3
 8016430:	dbb8      	blt.n	80163a4 <update_box.isra.0+0x20>
 8016432:	e7e7      	b.n	8016404 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8016434:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016438:	f1ba 0f00 	cmp.w	sl, #0
 801643c:	d002      	beq.n	8016444 <update_box.isra.0+0xc0>
	    goto have_c0max;
 801643e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8016440:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8016442:	e7af      	b.n	80163a4 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016444:	f109 0901 	add.w	r9, r9, #1
 8016448:	e7ea      	b.n	8016420 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801644a:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801644c:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 801644e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016452:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016454:	454c      	cmp	r4, r9
 8016456:	da0a      	bge.n	801646e <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016458:	f108 0801 	add.w	r8, r8, #1
 801645c:	45d8      	cmp	r8, fp
 801645e:	ddf4      	ble.n	801644a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 8016460:	3201      	adds	r2, #1
 8016462:	4290      	cmp	r0, r2
 8016464:	db11      	blt.n	801648a <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016466:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8016468:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 801646c:	e7f6      	b.n	801645c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 801646e:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016472:	b13e      	cbz	r6, 8016484 <update_box.isra.0+0x100>
  if (c1max > c1min)
 8016474:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 8016476:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8016478:	dd97      	ble.n	80163aa <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801647a:	4684      	mov	ip, r0
 801647c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 801647e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 8016482:	e00d      	b.n	80164a0 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016484:	f109 0901 	add.w	r9, r9, #1
 8016488:	e7e4      	b.n	8016454 <update_box.isra.0+0xd0>
 have_c1min:
 801648a:	4662      	mov	r2, ip
 801648c:	e7f5      	b.n	801647a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 801648e:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016490:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 8016492:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016496:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016498:	454c      	cmp	r4, r9
 801649a:	da09      	bge.n	80164b0 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801649c:	f108 0801 	add.w	r8, r8, #1
 80164a0:	45c3      	cmp	fp, r8
 80164a2:	daf4      	bge.n	801648e <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 80164a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80164a8:	4594      	cmp	ip, r2
 80164aa:	f6ff af7e 	blt.w	80163aa <update_box.isra.0+0x26>
 80164ae:	e7e5      	b.n	801647c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 80164b0:	f837 6b02 	ldrh.w	r6, [r7], #2
 80164b4:	b11e      	cbz	r6, 80164be <update_box.isra.0+0x13a>
	    goto have_c1max;
 80164b6:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 80164b8:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 80164bc:	e775      	b.n	80163aa <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 80164be:	f109 0901 	add.w	r9, r9, #1
 80164c2:	e7e9      	b.n	8016498 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80164c4:	9e01      	ldr	r6, [sp, #4]
 80164c6:	4690      	mov	r8, r2
 80164c8:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 80164cc:	444f      	add	r7, r9
 80164ce:	4580      	cmp	r8, r0
 80164d0:	dd11      	ble.n	80164f6 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80164d2:	f10e 0e01 	add.w	lr, lr, #1
 80164d6:	45f3      	cmp	fp, lr
 80164d8:	daf4      	bge.n	80164c4 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 80164da:	f10c 0c01 	add.w	ip, ip, #1
 80164de:	4564      	cmp	r4, ip
 80164e0:	f6bf af6e 	bge.w	80163c0 <update_box.isra.0+0x3c>
 have_c2min:
 80164e4:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80164e6:	4627      	mov	r7, r4
 80164e8:	9d02      	ldr	r5, [sp, #8]
 80164ea:	469e      	mov	lr, r3
 80164ec:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 80164f0:	9d03      	ldr	r5, [sp, #12]
 80164f2:	44a9      	add	r9, r5
 80164f4:	e034      	b.n	8016560 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 80164f6:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80164fa:	f837 a00a 	ldrh.w	sl, [r7, sl]
 80164fe:	f1ba 0f00 	cmp.w	sl, #0
 8016502:	d021      	beq.n	8016548 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 8016504:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8016506:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 801650a:	dcec      	bgt.n	80164e6 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801650c:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801650e:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016512:	eba4 070c 	sub.w	r7, r4, ip
 8016516:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801651a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801651e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8016522:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016526:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016528:	fb08 f808 	mul.w	r8, r8, r8
 801652c:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 8016530:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016534:	fb05 8505 	mla	r5, r5, r5, r8
 8016538:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 801653a:	459b      	cmp	fp, r3
 801653c:	da3f      	bge.n	80165be <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 801653e:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 8016542:	b005      	add	sp, #20
 8016544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016548:	f108 0801 	add.w	r8, r8, #1
 801654c:	e7bf      	b.n	80164ce <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801654e:	9d01      	ldr	r5, [sp, #4]
 8016550:	4690      	mov	r8, r2
 8016552:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 8016556:	444d      	add	r5, r9
 8016558:	4540      	cmp	r0, r8
 801655a:	da07      	bge.n	801656c <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801655c:	f10e 0e01 	add.w	lr, lr, #1
 8016560:	45f3      	cmp	fp, lr
 8016562:	daf4      	bge.n	801654e <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 8016564:	3f01      	subs	r7, #1
 8016566:	4567      	cmp	r7, ip
 8016568:	dbd0      	blt.n	801650c <update_box.isra.0+0x188>
 801656a:	e7bd      	b.n	80164e8 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 801656c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8016570:	f835 a00a 	ldrh.w	sl, [r5, sl]
 8016574:	f1ba 0f00 	cmp.w	sl, #0
 8016578:	d002      	beq.n	8016580 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 801657a:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 801657c:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 801657e:	e7c5      	b.n	801650c <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016580:	f108 0801 	add.w	r8, r8, #1
 8016584:	e7e8      	b.n	8016558 <update_box.isra.0+0x1d4>
 have_c2min:
 8016586:	46ac      	mov	ip, r5
 8016588:	e7c0      	b.n	801650c <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801658a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 801658e:	f1a5 0802 	sub.w	r8, r5, #2
 8016592:	9d01      	ldr	r5, [sp, #4]
 8016594:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8016598:	4445      	add	r5, r8
 801659a:	46e0      	mov	r8, ip
 801659c:	4544      	cmp	r4, r8
 801659e:	da04      	bge.n	80165aa <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80165a0:	3701      	adds	r7, #1
 80165a2:	42b8      	cmp	r0, r7
 80165a4:	daf1      	bge.n	801658a <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 80165a6:	3301      	adds	r3, #1
 80165a8:	e7c7      	b.n	801653a <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 80165aa:	f835 af02 	ldrh.w	sl, [r5, #2]!
 80165ae:	f1ba 0f00 	cmp.w	sl, #0
 80165b2:	d001      	beq.n	80165b8 <update_box.isra.0+0x234>
	  ccount++;
 80165b4:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80165b8:	f108 0801 	add.w	r8, r8, #1
 80165bc:	e7ee      	b.n	801659c <update_box.isra.0+0x218>
 80165be:	4617      	mov	r7, r2
 80165c0:	e7ef      	b.n	80165a2 <update_box.isra.0+0x21e>

080165c2 <finish_pass1>:
{
 80165c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80165c6:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80165ca:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80165cc:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 80165ce:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80165d2:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 80165d4:	691b      	ldr	r3, [r3, #16]
{
 80165d6:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 80165d8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 80165dc:	9b02      	ldr	r3, [sp, #8]
 80165de:	695b      	ldr	r3, [r3, #20]
 80165e0:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80165e2:	9a01      	ldr	r2, [sp, #4]
 80165e4:	6843      	ldr	r3, [r0, #4]
 80165e6:	0152      	lsls	r2, r2, #5
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80165ec:	2300      	movs	r3, #0
 80165ee:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 80165f0:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80165f2:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 80165f4:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 80165f6:	6142      	str	r2, [r0, #20]
 80165f8:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 80165fa:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80165fe:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8016602:	9b00      	ldr	r3, [sp, #0]
 8016604:	4601      	mov	r1, r0
 8016606:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 801660a:	f7ff febb 	bl	8016384 <update_box.isra.0>
  while (numboxes < desired_colors) {
 801660e:	9b01      	ldr	r3, [sp, #4]
 8016610:	455b      	cmp	r3, fp
 8016612:	dc24      	bgt.n	801665e <finish_pass1+0x9c>
 8016614:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 8016616:	9a00      	ldr	r2, [sp, #0]
 8016618:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 801661c:	6992      	ldr	r2, [r2, #24]
 801661e:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016620:	e9d8 7200 	ldrd	r7, r2, [r8]
 8016624:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016626:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801662a:	9205      	str	r2, [sp, #20]
 801662c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8016630:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016632:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016636:	9201      	str	r2, [sp, #4]
 8016638:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801663c:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 801663e:	9a01      	ldr	r2, [sp, #4]
 8016640:	0052      	lsls	r2, r2, #1
 8016642:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 8016644:	2200      	movs	r2, #0
  long c1total = 0;
 8016646:	4692      	mov	sl, r2
  long c0total = 0;
 8016648:	4691      	mov	r9, r2
  long total = 0;
 801664a:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 801664c:	9804      	ldr	r0, [sp, #16]
 801664e:	42b8      	cmp	r0, r7
 8016650:	f2c0 8098 	blt.w	8016784 <finish_pass1+0x1c2>
 8016654:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016656:	9e05      	ldr	r6, [sp, #20]
 8016658:	3004      	adds	r0, #4
 801665a:	9008      	str	r0, [sp, #32]
 801665c:	e07c      	b.n	8016758 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 801665e:	9b01      	ldr	r3, [sp, #4]
 8016660:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8016664:	db4f      	blt.n	8016706 <finish_pass1+0x144>
  boxptr which = NULL;
 8016666:	2300      	movs	r3, #0
 8016668:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801666a:	461e      	mov	r6, r3
  register long maxc = 0;
 801666c:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 801666e:	69c2      	ldr	r2, [r0, #28]
 8016670:	42ba      	cmp	r2, r7
 8016672:	dd04      	ble.n	801667e <finish_pass1+0xbc>
 8016674:	6984      	ldr	r4, [r0, #24]
 8016676:	2c00      	cmp	r4, #0
 8016678:	bfc4      	itt	gt
 801667a:	4603      	movgt	r3, r0
 801667c:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801667e:	3601      	adds	r6, #1
 8016680:	3020      	adds	r0, #32
 8016682:	45b3      	cmp	fp, r6
 8016684:	d1f3      	bne.n	801666e <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 8016686:	2b00      	cmp	r3, #0
 8016688:	d0c5      	beq.n	8016616 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 801668a:	685a      	ldr	r2, [r3, #4]
 801668c:	f101 0920 	add.w	r9, r1, #32
 8016690:	624a      	str	r2, [r1, #36]	; 0x24
 8016692:	68d8      	ldr	r0, [r3, #12]
 8016694:	62c8      	str	r0, [r1, #44]	; 0x2c
 8016696:	6958      	ldr	r0, [r3, #20]
 8016698:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 801669a:	6818      	ldr	r0, [r3, #0]
 801669c:	6208      	str	r0, [r1, #32]
 801669e:	6898      	ldr	r0, [r3, #8]
 80166a0:	6288      	str	r0, [r1, #40]	; 0x28
 80166a2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80166a6:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 80166aa:	6818      	ldr	r0, [r3, #0]
 80166ac:	9003      	str	r0, [sp, #12]
 80166ae:	1a10      	subs	r0, r2, r0
 80166b0:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 80166b4:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 80166b8:	9004      	str	r0, [sp, #16]
 80166ba:	1a30      	subs	r0, r6, r0
 80166bc:	00c7      	lsls	r7, r0, #3
 80166be:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 80166c2:	6958      	ldr	r0, [r3, #20]
 80166c4:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 80166c8:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 80166cc:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 80166d0:	f2c0 808c 	blt.w	80167ec <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 80166d4:	45be      	cmp	lr, r7
 80166d6:	dd25      	ble.n	8016724 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 80166d8:	9803      	ldr	r0, [sp, #12]
 80166da:	4402      	add	r2, r0
 80166dc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80166e0:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 80166e2:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 80166e4:	3201      	adds	r2, #1
 80166e6:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 80166e8:	4619      	mov	r1, r3
 80166ea:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 80166ec:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 80166f0:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 80166f4:	f7ff fe46 	bl	8016384 <update_box.isra.0>
    update_box(cinfo, b2);
 80166f8:	9b00      	ldr	r3, [sp, #0]
 80166fa:	4649      	mov	r1, r9
 80166fc:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016700:	f7ff fe40 	bl	8016384 <update_box.isra.0>
    numboxes++;
 8016704:	e783      	b.n	801660e <finish_pass1+0x4c>
  boxptr which = NULL;
 8016706:	2300      	movs	r3, #0
 8016708:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801670a:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 801670c:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 801670e:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016710:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 8016712:	42b7      	cmp	r7, r6
 8016714:	bfc4      	itt	gt
 8016716:	4613      	movgt	r3, r2
 8016718:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801671a:	4583      	cmp	fp, r0
 801671c:	f102 0220 	add.w	r2, r2, #32
 8016720:	d1f5      	bne.n	801670e <finish_pass1+0x14c>
 8016722:	e7b0      	b.n	8016686 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 8016724:	9a04      	ldr	r2, [sp, #16]
 8016726:	4416      	add	r6, r2
 8016728:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801672c:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 801672e:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 8016730:	3601      	adds	r6, #1
 8016732:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 8016734:	e7d8      	b.n	80166e8 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 8016736:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016738:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 801673c:	9c03      	ldr	r4, [sp, #12]
 801673e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8016742:	f10e 0e02 	add.w	lr, lr, #2
 8016746:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 801674a:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 801674e:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016750:	9c07      	ldr	r4, [sp, #28]
 8016752:	4564      	cmp	r4, ip
 8016754:	da05      	bge.n	8016762 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016756:	3601      	adds	r6, #1
 8016758:	9806      	ldr	r0, [sp, #24]
 801675a:	42b0      	cmp	r0, r6
 801675c:	daeb      	bge.n	8016736 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 801675e:	3701      	adds	r7, #1
 8016760:	e774      	b.n	801664c <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 8016762:	f830 5b02 	ldrh.w	r5, [r0], #2
 8016766:	b155      	cbz	r5, 801677e <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016768:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 801676a:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 801676c:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016770:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8016774:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8016778:	3404      	adds	r4, #4
 801677a:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 801677e:	f10c 0c01 	add.w	ip, ip, #1
 8016782:	e7e5      	b.n	8016750 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016784:	eb09 0961 	add.w	r9, r9, r1, asr #1
 8016788:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801678a:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 801678e:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016792:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016796:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801679a:	fb99 f9f1 	sdiv	r9, r9, r1
 801679e:	6800      	ldr	r0, [r0, #0]
 80167a0:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80167a4:	9800      	ldr	r0, [sp, #0]
 80167a6:	fb9a faf1 	sdiv	sl, sl, r1
 80167aa:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80167ae:	6840      	ldr	r0, [r0, #4]
 80167b0:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 80167b4:	9800      	ldr	r0, [sp, #0]
 80167b6:	fb92 f1f1 	sdiv	r1, r2, r1
 80167ba:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80167be:	6880      	ldr	r0, [r0, #8]
 80167c0:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 80167c2:	3301      	adds	r3, #1
 80167c4:	455b      	cmp	r3, fp
 80167c6:	f47f af26 	bne.w	8016616 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 80167ca:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 80167cc:	2162      	movs	r1, #98	; 0x62
 80167ce:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 80167d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 80167d4:	6812      	ldr	r2, [r2, #0]
 80167d6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80167da:	6853      	ldr	r3, [r2, #4]
 80167dc:	2101      	movs	r1, #1
 80167de:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 80167e0:	2301      	movs	r3, #1
 80167e2:	9a02      	ldr	r2, [sp, #8]
 80167e4:	61d3      	str	r3, [r2, #28]
}
 80167e6:	b00b      	add	sp, #44	; 0x2c
 80167e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 80167ec:	45a6      	cmp	lr, r4
 80167ee:	f73f af73 	bgt.w	80166d8 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 80167f2:	4460      	add	r0, ip
 80167f4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80167f8:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 80167fa:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 80167fc:	3001      	adds	r0, #1
 80167fe:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 8016800:	e772      	b.n	80166e8 <finish_pass1+0x126>
	...

08016804 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8016804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016806:	6843      	ldr	r3, [r0, #4]
 8016808:	222c      	movs	r2, #44	; 0x2c
 801680a:	2101      	movs	r1, #1
{
 801680c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8016812:	4b30      	ldr	r3, [pc, #192]	; (80168d4 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016814:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016818:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 801681a:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 801681c:	4b2e      	ldr	r3, [pc, #184]	; (80168d8 <jinit_2pass_quantizer+0xd4>)
 801681e:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8016820:	2300      	movs	r3, #0
 8016822:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8016824:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8016826:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016828:	2b03      	cmp	r3, #3
 801682a:	d005      	beq.n	8016838 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	2230      	movs	r2, #48	; 0x30
 8016830:	4620      	mov	r0, r4
 8016832:	615a      	str	r2, [r3, #20]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8016838:	6863      	ldr	r3, [r4, #4]
 801683a:	2600      	movs	r6, #0
 801683c:	2280      	movs	r2, #128	; 0x80
 801683e:	2101      	movs	r1, #1
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	4620      	mov	r0, r4
 8016844:	4798      	blx	r3
 8016846:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8016848:	6863      	ldr	r3, [r4, #4]
 801684a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801684e:	69af      	ldr	r7, [r5, #24]
 8016850:	2101      	movs	r1, #1
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	4620      	mov	r0, r4
 8016856:	4798      	blx	r3
 8016858:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 801685a:	3604      	adds	r6, #4
 801685c:	2e80      	cmp	r6, #128	; 0x80
 801685e:	d1f3      	bne.n	8016848 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8016860:	2301      	movs	r3, #1
 8016862:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8016864:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016866:	2b00      	cmp	r3, #0
 8016868:	d031      	beq.n	80168ce <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 801686a:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 801686c:	2e07      	cmp	r6, #7
 801686e:	dc25      	bgt.n	80168bc <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8016870:	223a      	movs	r2, #58	; 0x3a
 8016872:	6823      	ldr	r3, [r4, #0]
 8016874:	615a      	str	r2, [r3, #20]
 8016876:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016878:	619a      	str	r2, [r3, #24]
 801687a:	4620      	mov	r0, r4
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8016880:	6863      	ldr	r3, [r4, #4]
 8016882:	4632      	mov	r2, r6
 8016884:	2101      	movs	r1, #1
 8016886:	4620      	mov	r0, r4
 8016888:	689f      	ldr	r7, [r3, #8]
 801688a:	2303      	movs	r3, #3
 801688c:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 801688e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8016892:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016896:	b1e3      	cbz	r3, 80168d2 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8016898:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801689a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801689c:	4620      	mov	r0, r4
 801689e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 80168a0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80168a4:	2306      	movs	r3, #6
 80168a6:	435a      	muls	r2, r3
 80168a8:	6863      	ldr	r3, [r4, #4]
 80168aa:	320c      	adds	r2, #12
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	4798      	blx	r3
 80168b0:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 80168b2:	4620      	mov	r0, r4
  }
}
 80168b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 80168b8:	f7ff bcbf 	b.w	801623a <init_error_limit>
    if (desired > MAXNUMCOLORS)
 80168bc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80168c0:	ddde      	ble.n	8016880 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80168c2:	223b      	movs	r2, #59	; 0x3b
 80168c4:	6823      	ldr	r3, [r4, #0]
 80168c6:	615a      	str	r2, [r3, #20]
 80168c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80168cc:	e7d4      	b.n	8016878 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 80168ce:	612b      	str	r3, [r5, #16]
 80168d0:	e7df      	b.n	8016892 <jinit_2pass_quantizer+0x8e>
}
 80168d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168d4:	080162b5 	.word	0x080162b5
 80168d8:	080162ab 	.word	0x080162ab

080168dc <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 80168dc:	4408      	add	r0, r1
 80168de:	3801      	subs	r0, #1
}
 80168e0:	fb90 f0f1 	sdiv	r0, r0, r1
 80168e4:	4770      	bx	lr

080168e6 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 80168e6:	1e4b      	subs	r3, r1, #1
 80168e8:	4418      	add	r0, r3
  return a - (a % b);
 80168ea:	fb90 f3f1 	sdiv	r3, r0, r1
 80168ee:	fb01 0113 	mls	r1, r1, r3, r0
}
 80168f2:	1a40      	subs	r0, r0, r1
 80168f4:	4770      	bx	lr

080168f6 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 80168f6:	b570      	push	{r4, r5, r6, lr}
 80168f8:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 80168fa:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 80168fe:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8016902:	2e00      	cmp	r6, #0
 8016904:	dc00      	bgt.n	8016908 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8016906:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016908:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 801690a:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 801690c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016910:	f855 0b04 	ldr.w	r0, [r5], #4
 8016914:	f014 fdb2 	bl	802b47c <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016918:	e7f3      	b.n	8016902 <jcopy_sample_rows+0xc>

0801691a <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 801691a:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 801691c:	01d2      	lsls	r2, r2, #7
 801691e:	4601      	mov	r1, r0
 8016920:	4618      	mov	r0, r3
 8016922:	f014 bdab 	b.w	802b47c <memcpy>

08016926 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016926:	8880      	ldrh	r0, [r0, #4]
 8016928:	4770      	bx	lr

0801692a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801692a:	b570      	push	{r4, r5, r6, lr}
 801692c:	6803      	ldr	r3, [r0, #0]
 801692e:	460c      	mov	r4, r1
 8016930:	2100      	movs	r1, #0
 8016932:	4605      	mov	r5, r0
 8016934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016936:	4798      	blx	r3
 8016938:	4606      	mov	r6, r0
 801693a:	682b      	ldr	r3, [r5, #0]
 801693c:	4628      	mov	r0, r5
 801693e:	1ba4      	subs	r4, r4, r6
 8016940:	6a1b      	ldr	r3, [r3, #32]
 8016942:	b2a4      	uxth	r4, r4
 8016944:	4798      	blx	r3
 8016946:	fbb4 f0f0 	udiv	r0, r4, r0
 801694a:	bd70      	pop	{r4, r5, r6, pc}

0801694c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801694c:	2300      	movs	r3, #0
 801694e:	8083      	strh	r3, [r0, #4]
 8016950:	4770      	bx	lr

08016952 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016952:	b510      	push	{r4, lr}
 8016954:	6803      	ldr	r3, [r0, #0]
 8016956:	4604      	mov	r4, r0
 8016958:	8881      	ldrh	r1, [r0, #4]
 801695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801695c:	4798      	blx	r3
 801695e:	88a3      	ldrh	r3, [r4, #4]
 8016960:	3301      	adds	r3, #1
 8016962:	80a3      	strh	r3, [r4, #4]
 8016964:	bd10      	pop	{r4, pc}

08016966 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016966:	6803      	ldr	r3, [r0, #0]
 8016968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801696a:	4718      	bx	r3

0801696c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801696c:	4770      	bx	lr
	...

08016970 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016970:	4a02      	ldr	r2, [pc, #8]	; (801697c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016972:	6002      	str	r2, [r0, #0]
 8016974:	2200      	movs	r2, #0
 8016976:	8082      	strh	r2, [r0, #4]
 8016978:	4770      	bx	lr
 801697a:	bf00      	nop
 801697c:	08030c6c 	.word	0x08030c6c

08016980 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016980:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016982:	4770      	bx	lr

08016984 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>:
 8016984:	f8c0 10dc 	str.w	r1, [r0, #220]	; 0xdc
 8016988:	4770      	bx	lr

0801698a <_ZN8touchgfx14CircleProgress9setCenterEii>:
 801698a:	0149      	lsls	r1, r1, #5
 801698c:	0152      	lsls	r2, r2, #5
 801698e:	f8c0 10e0 	str.w	r1, [r0, #224]	; 0xe0
 8016992:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8016996:	4770      	bx	lr

08016998 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_>:
 8016998:	b530      	push	{r4, r5, lr}
 801699a:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
 801699e:	2520      	movs	r5, #32
 80169a0:	fb94 f4f5 	sdiv	r4, r4, r5
 80169a4:	600c      	str	r4, [r1, #0]
 80169a6:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 80169aa:	fb93 f3f5 	sdiv	r3, r3, r5
 80169ae:	6013      	str	r3, [r2, #0]
 80169b0:	bd30      	pop	{r4, r5, pc}

080169b2 <_ZNK8touchgfx14CircleProgress9getRadiusEv>:
 80169b2:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 80169b6:	2320      	movs	r3, #32
 80169b8:	fb90 f0f3 	sdiv	r0, r0, r3
 80169bc:	4770      	bx	lr

080169be <_ZNK8touchgfx14CircleProgress12getLineWidthEv>:
 80169be:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 80169c2:	2320      	movs	r3, #32
 80169c4:	fb90 f0f3 	sdiv	r0, r0, r3
 80169c8:	4770      	bx	lr

080169ca <_ZNK8touchgfx14CircleProgress13getStartAngleEv>:
 80169ca:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80169ce:	2320      	movs	r3, #32
 80169d0:	fb90 f0f3 	sdiv	r0, r0, r3
 80169d4:	b200      	sxth	r0, r0
 80169d6:	4770      	bx	lr

080169d8 <_ZNK8touchgfx14CircleProgress11getEndAngleEv>:
 80169d8:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80169dc:	4770      	bx	lr

080169de <_ZN8touchgfx14CircleProgress9setRadiusEi>:
 80169de:	0149      	lsls	r1, r1, #5
 80169e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80169e4:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
 80169e8:	4770      	bx	lr

080169ea <_ZN8touchgfx14CircleProgress12setLineWidthEi>:
 80169ea:	0149      	lsls	r1, r1, #5
 80169ec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80169f0:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
 80169f4:	4770      	bx	lr

080169f6 <_ZN8touchgfx14CircleProgressD1Ev>:
 80169f6:	4770      	bx	lr

080169f8 <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>:
 80169f8:	30b4      	adds	r0, #180	; 0xb4
 80169fa:	f001 bcdf 	b.w	80183bc <_ZN8touchgfx6Circle15setCapPrecisionEi>

080169fe <_ZN8touchgfx14CircleProgress8setAlphaEh>:
 80169fe:	b538      	push	{r3, r4, r5, lr}
 8016a00:	4604      	mov	r4, r0
 8016a02:	460d      	mov	r5, r1
 8016a04:	f000 f8fa 	bl	8016bfc <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8016a08:	f884 50da 	strb.w	r5, [r4, #218]	; 0xda
 8016a0c:	bd38      	pop	{r3, r4, r5, pc}

08016a0e <_ZNK8touchgfx14CircleProgress15getCapPrecisionEv>:
 8016a0e:	30b4      	adds	r0, #180	; 0xb4
 8016a10:	f001 bcdd 	b.w	80183ce <_ZNK8touchgfx6Circle15getCapPrecisionEv>

08016a14 <_ZN8touchgfx14CircleProgressD0Ev>:
 8016a14:	b510      	push	{r4, lr}
 8016a16:	4604      	mov	r4, r0
 8016a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016a1c:	f014 fc7d 	bl	802b31a <_ZdlPvj>
 8016a20:	4620      	mov	r0, r4
 8016a22:	bd10      	pop	{r4, pc}

08016a24 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8016a24:	b510      	push	{r4, lr}
 8016a26:	6803      	ldr	r3, [r0, #0]
 8016a28:	4604      	mov	r4, r0
 8016a2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8016a2e:	4798      	blx	r3
 8016a30:	b140      	cbz	r0, 8016a44 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 8016a32:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016a36:	b12b      	cbz	r3, 8016a44 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
 8016a38:	6823      	ldr	r3, [r4, #0]
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	695b      	ldr	r3, [r3, #20]
 8016a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a42:	4718      	bx	r3
 8016a44:	bd10      	pop	{r4, pc}

08016a46 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8016a46:	b570      	push	{r4, r5, r6, lr}
 8016a48:	6803      	ldr	r3, [r0, #0]
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	4615      	mov	r5, r2
 8016a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a50:	4798      	blx	r3
 8016a52:	6823      	ldr	r3, [r4, #0]
 8016a54:	4629      	mov	r1, r5
 8016a56:	4620      	mov	r0, r4
 8016a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a5e:	4718      	bx	r3

08016a60 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>:
 8016a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a64:	461d      	mov	r5, r3
 8016a66:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	460f      	mov	r7, r1
 8016a70:	4690      	mov	r8, r2
 8016a72:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8016a76:	4632      	mov	r2, r6
 8016a78:	4629      	mov	r1, r5
 8016a7a:	30b4      	adds	r0, #180	; 0xb4
 8016a7c:	f7ff ffe3 	bl	8016a46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016a80:	9606      	str	r6, [sp, #24]
 8016a82:	462b      	mov	r3, r5
 8016a84:	4642      	mov	r2, r8
 8016a86:	4639      	mov	r1, r7
 8016a88:	4620      	mov	r0, r4
 8016a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a8e:	f000 b99d 	b.w	8016dcc <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08016a92 <_ZN8touchgfx6Circle12updateArcEndINS_7CWRUtil2Q5EEEvT_>:
 8016a92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016a96:	4604      	mov	r4, r0
 8016a98:	9101      	str	r1, [sp, #4]
 8016a9a:	4299      	cmp	r1, r3
 8016a9c:	d00b      	beq.n	8016ab6 <_ZN8touchgfx6Circle12updateArcEndINS_7CWRUtil2Q5EEEvT_+0x24>
 8016a9e:	4601      	mov	r1, r0
 8016aa0:	aa01      	add	r2, sp, #4
 8016aa2:	a802      	add	r0, sp, #8
 8016aa4:	f001 fe7a 	bl	801879c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8016aa8:	9b01      	ldr	r3, [sp, #4]
 8016aaa:	a902      	add	r1, sp, #8
 8016aac:	4620      	mov	r0, r4
 8016aae:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016ab0:	6823      	ldr	r3, [r4, #0]
 8016ab2:	691b      	ldr	r3, [r3, #16]
 8016ab4:	4798      	blx	r3
 8016ab6:	b004      	add	sp, #16
 8016ab8:	bd10      	pop	{r4, pc}

08016aba <_ZN8touchgfx14CircleProgress8setValueEi>:
 8016aba:	b570      	push	{r4, r5, r6, lr}
 8016abc:	4604      	mov	r4, r0
 8016abe:	f000 f8f0 	bl	8016ca2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8016ac2:	f8d4 60fc 	ldr.w	r6, [r4, #252]	; 0xfc
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
 8016acc:	0176      	lsls	r6, r6, #5
 8016ace:	42b5      	cmp	r5, r6
 8016ad0:	bfcc      	ite	gt
 8016ad2:	1ba9      	subgt	r1, r5, r6
 8016ad4:	1b71      	suble	r1, r6, r5
 8016ad6:	b289      	uxth	r1, r1
 8016ad8:	f000 f905 	bl	8016ce6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8016adc:	42b5      	cmp	r5, r6
 8016ade:	4601      	mov	r1, r0
 8016ae0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016ae4:	bfcc      	ite	gt
 8016ae6:	1a69      	subgt	r1, r5, r1
 8016ae8:	1949      	addle	r1, r1, r5
 8016aea:	f7ff ffd2 	bl	8016a92 <_ZN8touchgfx6Circle12updateArcEndINS_7CWRUtil2Q5EEEvT_>
 8016aee:	bd70      	pop	{r4, r5, r6, pc}

08016af0 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>:
 8016af0:	0149      	lsls	r1, r1, #5
 8016af2:	0153      	lsls	r3, r2, #5
 8016af4:	b510      	push	{r4, lr}
 8016af6:	4604      	mov	r4, r0
 8016af8:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
 8016afc:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 8016b00:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
 8016b04:	f000 f877 	bl	8016bf6 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8016b08:	4601      	mov	r1, r0
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b10:	f7ff bfd3 	b.w	8016aba <_ZN8touchgfx14CircleProgress8setValueEi>

08016b14 <_ZN8touchgfx14CircleProgressC1Ev>:
 8016b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b16:	4604      	mov	r4, r0
 8016b18:	f000 f984 	bl	8016e24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8016b1c:	4b10      	ldr	r3, [pc, #64]	; (8016b60 <_ZN8touchgfx14CircleProgressC1Ev+0x4c>)
 8016b1e:	f44f 77b4 	mov.w	r7, #360	; 0x168
 8016b22:	4625      	mov	r5, r4
 8016b24:	2600      	movs	r6, #0
 8016b26:	f845 3bb4 	str.w	r3, [r5], #180
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	f001 fc2e 	bl	801838c <_ZN8touchgfx6CircleC1Ev>
 8016b30:	4629      	mov	r1, r5
 8016b32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016b36:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
 8016b3a:	f000 f9d3 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016b3e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8016b42:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016b46:	4628      	mov	r0, r5
 8016b48:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8016b4c:	f7ff ff7b 	bl	8016a46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016b50:	4620      	mov	r0, r4
 8016b52:	463a      	mov	r2, r7
 8016b54:	4631      	mov	r1, r6
 8016b56:	f7ff ffcb 	bl	8016af0 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b5e:	bf00      	nop
 8016b60:	08030ca0 	.word	0x08030ca0

08016b64 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016b64:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016b68:	4770      	bx	lr

08016b6a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016b6a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016b6e:	4770      	bx	lr

08016b70 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016b70:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016b74:	4770      	bx	lr

08016b76 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016b76:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016b7a:	4770      	bx	lr

08016b7c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b7e:	461e      	mov	r6, r3
 8016b80:	6803      	ldr	r3, [r0, #0]
 8016b82:	460f      	mov	r7, r1
 8016b84:	4604      	mov	r4, r0
 8016b86:	4615      	mov	r5, r2
 8016b88:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016b8c:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016b94:	4798      	blx	r3
 8016b96:	b93e      	cbnz	r6, 8016ba8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8016b98:	1bed      	subs	r5, r5, r7
 8016b9a:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8016b9e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016ba2:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8016ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ba8:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8016bac:	e7f7      	b.n	8016b9e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

08016bae <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016bae:	b510      	push	{r4, lr}
 8016bb0:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016bb4:	600c      	str	r4, [r1, #0]
 8016bb6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016bba:	6011      	str	r1, [r2, #0]
 8016bbc:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016bc0:	801a      	strh	r2, [r3, #0]
 8016bc2:	9b02      	ldr	r3, [sp, #8]
 8016bc4:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8016bc8:	801a      	strh	r2, [r3, #0]
 8016bca:	bd10      	pop	{r4, pc}

08016bcc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8016bcc:	b510      	push	{r4, lr}
 8016bce:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016bd2:	600c      	str	r4, [r1, #0]
 8016bd4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016bd8:	6011      	str	r1, [r2, #0]
 8016bda:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016bde:	801a      	strh	r2, [r3, #0]
 8016be0:	bd10      	pop	{r4, pc}

08016be2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016be2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016be6:	600b      	str	r3, [r1, #0]
 8016be8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016bec:	6013      	str	r3, [r2, #0]
 8016bee:	4770      	bx	lr

08016bf0 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016bf0:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016bf4:	4770      	bx	lr

08016bf6 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016bf6:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8016bfa:	4770      	bx	lr

08016bfc <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8016bfc:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8016c00:	4770      	bx	lr

08016c02 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8016c02:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8016c06:	4770      	bx	lr

08016c08 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8016c08:	4770      	bx	lr

08016c0a <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8016c0a:	b510      	push	{r4, lr}
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	21b4      	movs	r1, #180	; 0xb4
 8016c10:	f014 fb83 	bl	802b31a <_ZdlPvj>
 8016c14:	4620      	mov	r0, r4
 8016c16:	bd10      	pop	{r4, pc}

08016c18 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8016c18:	b570      	push	{r4, r5, r6, lr}
 8016c1a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016c1e:	4604      	mov	r4, r0
 8016c20:	4616      	mov	r6, r2
 8016c22:	428d      	cmp	r5, r1
 8016c24:	bfb8      	it	lt
 8016c26:	460d      	movlt	r5, r1
 8016c28:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016c2c:	428d      	cmp	r5, r1
 8016c2e:	bfa8      	it	ge
 8016c30:	460d      	movge	r5, r1
 8016c32:	b99a      	cbnz	r2, 8016c5c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8016c34:	6803      	ldr	r3, [r0, #0]
 8016c36:	4629      	mov	r1, r5
 8016c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016c3c:	4798      	blx	r3
 8016c3e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016c42:	b368      	cbz	r0, 8016ca0 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8016c44:	6803      	ldr	r3, [r0, #0]
 8016c46:	68db      	ldr	r3, [r3, #12]
 8016c48:	4798      	blx	r3
 8016c4a:	b348      	cbz	r0, 8016ca0 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8016c4c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016c50:	4621      	mov	r1, r4
 8016c52:	6803      	ldr	r3, [r0, #0]
 8016c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	4718      	bx	r3
 8016c5c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	dd08      	ble.n	8016c76 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8016c64:	f005 f924 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 8016c68:	4621      	mov	r1, r4
 8016c6a:	3004      	adds	r0, #4
 8016c6c:	f005 f945 	bl	801befa <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8016c70:	2300      	movs	r3, #0
 8016c72:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016c76:	6823      	ldr	r3, [r4, #0]
 8016c78:	4620      	mov	r0, r4
 8016c7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016c7e:	4798      	blx	r3
 8016c80:	2300      	movs	r3, #0
 8016c82:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8016c86:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016c8a:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8016c8e:	f005 f90f 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 8016c92:	4621      	mov	r1, r4
 8016c94:	3004      	adds	r0, #4
 8016c96:	f005 f9d9 	bl	801c04c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016ca0:	bd70      	pop	{r4, r5, r6, pc}

08016ca2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016ca2:	b510      	push	{r4, lr}
 8016ca4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016ca8:	4604      	mov	r4, r0
 8016caa:	4299      	cmp	r1, r3
 8016cac:	bfb8      	it	lt
 8016cae:	4619      	movlt	r1, r3
 8016cb0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016cb4:	4299      	cmp	r1, r3
 8016cb6:	bfa8      	it	ge
 8016cb8:	4619      	movge	r1, r3
 8016cba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016cbe:	428b      	cmp	r3, r1
 8016cc0:	d010      	beq.n	8016ce4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016cc2:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8016cc6:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8016cca:	b158      	cbz	r0, 8016ce4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016ccc:	6803      	ldr	r3, [r0, #0]
 8016cce:	68db      	ldr	r3, [r3, #12]
 8016cd0:	4798      	blx	r3
 8016cd2:	b138      	cbz	r0, 8016ce4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016cd4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016cd8:	4621      	mov	r1, r4
 8016cda:	6803      	ldr	r3, [r0, #0]
 8016cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ce0:	689b      	ldr	r3, [r3, #8]
 8016ce2:	4718      	bx	r3
 8016ce4:	bd10      	pop	{r4, pc}

08016ce6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ce8:	4604      	mov	r4, r0
 8016cea:	460d      	mov	r5, r1
 8016cec:	b1a9      	cbz	r1, 8016d1a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8016cee:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8016cf2:	ab01      	add	r3, sp, #4
 8016cf4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8016cf8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8016cfc:	1b89      	subs	r1, r1, r6
 8016cfe:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8016d02:	1a12      	subs	r2, r2, r0
 8016d04:	1a38      	subs	r0, r7, r0
 8016d06:	f006 fb0a 	bl	801d31e <_ZN8touchgfx6muldivElllRl>
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	ab01      	add	r3, sp, #4
 8016d0e:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8016d12:	4430      	add	r0, r6
 8016d14:	f006 fb03 	bl	801d31e <_ZN8touchgfx6muldivElllRl>
 8016d18:	b285      	uxth	r5, r0
 8016d1a:	4628      	mov	r0, r5
 8016d1c:	b003      	add	sp, #12
 8016d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d20 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8016d20:	b570      	push	{r4, r5, r6, lr}
 8016d22:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8016d26:	4604      	mov	r4, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d035      	beq.n	8016d98 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8016d2c:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016d30:	2100      	movs	r1, #0
 8016d32:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8016d36:	3001      	adds	r0, #1
 8016d38:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8016d3c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8016d40:	b280      	uxth	r0, r0
 8016d42:	1ad2      	subs	r2, r2, r3
 8016d44:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016d48:	b212      	sxth	r2, r2
 8016d4a:	47a8      	blx	r5
 8016d4c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	4401      	add	r1, r0
 8016d54:	4620      	mov	r0, r4
 8016d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016d5a:	4798      	blx	r3
 8016d5c:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8016d60:	429a      	cmp	r2, r3
 8016d62:	db19      	blt.n	8016d98 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8016d64:	2500      	movs	r5, #0
 8016d66:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016d6a:	f005 f8a1 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 8016d6e:	4621      	mov	r1, r4
 8016d70:	3004      	adds	r0, #4
 8016d72:	f005 f8c2 	bl	801befa <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8016d76:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016d7a:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016d7e:	b158      	cbz	r0, 8016d98 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8016d80:	6803      	ldr	r3, [r0, #0]
 8016d82:	68db      	ldr	r3, [r3, #12]
 8016d84:	4798      	blx	r3
 8016d86:	b138      	cbz	r0, 8016d98 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8016d88:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016d8c:	4621      	mov	r1, r4
 8016d8e:	6803      	ldr	r3, [r0, #0]
 8016d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d94:	689b      	ldr	r3, [r3, #8]
 8016d96:	4718      	bx	r3
 8016d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08016d9c <_ZN8touchgfx8DrawableC1Ev>:
 8016d9c:	4a0a      	ldr	r2, [pc, #40]	; (8016dc8 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 8016d9e:	6002      	str	r2, [r0, #0]
 8016da0:	2200      	movs	r2, #0
 8016da2:	8082      	strh	r2, [r0, #4]
 8016da4:	80c2      	strh	r2, [r0, #6]
 8016da6:	8102      	strh	r2, [r0, #8]
 8016da8:	8142      	strh	r2, [r0, #10]
 8016daa:	8182      	strh	r2, [r0, #12]
 8016dac:	81c2      	strh	r2, [r0, #14]
 8016dae:	8202      	strh	r2, [r0, #16]
 8016db0:	8242      	strh	r2, [r0, #18]
 8016db2:	61c2      	str	r2, [r0, #28]
 8016db4:	8402      	strh	r2, [r0, #32]
 8016db6:	8442      	strh	r2, [r0, #34]	; 0x22
 8016db8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016dbc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016dc0:	2201      	movs	r2, #1
 8016dc2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8016dc6:	4770      	bx	lr
 8016dc8:	080312d8 	.word	0x080312d8

08016dcc <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8016dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8016dd6:	4698      	mov	r8, r3
 8016dd8:	460e      	mov	r6, r1
 8016dda:	4615      	mov	r5, r2
 8016ddc:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8016de0:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016de4:	4619      	mov	r1, r3
 8016de6:	463a      	mov	r2, r7
 8016de8:	3058      	adds	r0, #88	; 0x58
 8016dea:	f7ff fe2c 	bl	8016a46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016dee:	4446      	add	r6, r8
 8016df0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016df4:	443d      	add	r5, r7
 8016df6:	42b3      	cmp	r3, r6
 8016df8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016dfc:	bfb8      	it	lt
 8016dfe:	8126      	strhlt	r6, [r4, #8]
 8016e00:	42ab      	cmp	r3, r5
 8016e02:	bfb8      	it	lt
 8016e04:	8165      	strhlt	r5, [r4, #10]
 8016e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e0a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	302c      	adds	r0, #44	; 0x2c
 8016e10:	f002 fc85 	bl	801971e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016e14:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8016e1e:	f7ff fe12 	bl	8016a46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016e22:	bd10      	pop	{r4, pc}

08016e24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8016e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e26:	4604      	mov	r4, r0
 8016e28:	2500      	movs	r5, #0
 8016e2a:	f7ff ffb7 	bl	8016d9c <_ZN8touchgfx8DrawableC1Ev>
 8016e2e:	4b24      	ldr	r3, [pc, #144]	; (8016ec0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8016e30:	4626      	mov	r6, r4
 8016e32:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016e36:	2226      	movs	r2, #38	; 0x26
 8016e38:	4629      	mov	r1, r5
 8016e3a:	62a5      	str	r5, [r4, #40]	; 0x28
 8016e3c:	f846 3b2c 	str.w	r3, [r6], #44
 8016e40:	4630      	mov	r0, r6
 8016e42:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016e46:	f014 fb27 	bl	802b498 <memset>
 8016e4a:	4630      	mov	r0, r6
 8016e4c:	f7ff ffa6 	bl	8016d9c <_ZN8touchgfx8DrawableC1Ev>
 8016e50:	a902      	add	r1, sp, #8
 8016e52:	4b1c      	ldr	r3, [pc, #112]	; (8016ec4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8016e54:	4630      	mov	r0, r6
 8016e56:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8016e5a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016e5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e60:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8016e64:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8016e68:	f002 fc59 	bl	801971e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016e6c:	4638      	mov	r0, r7
 8016e6e:	f7ff ff95 	bl	8016d9c <_ZN8touchgfx8DrawableC1Ev>
 8016e72:	4b15      	ldr	r3, [pc, #84]	; (8016ec8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8016e74:	4629      	mov	r1, r5
 8016e76:	4630      	mov	r0, r6
 8016e78:	65a3      	str	r3, [r4, #88]	; 0x58
 8016e7a:	2364      	movs	r3, #100	; 0x64
 8016e7c:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016e80:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016e84:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8016e88:	4b10      	ldr	r3, [pc, #64]	; (8016ecc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8016e8a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8016e8e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8016e92:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8016e96:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016e9a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8016e9e:	f7eb ff77 	bl	8002d90 <_ZN8touchgfx8Drawable4setXEs>
 8016ea2:	4629      	mov	r1, r5
 8016ea4:	4630      	mov	r0, r6
 8016ea6:	f7eb ff75 	bl	8002d94 <_ZN8touchgfx8Drawable4setYEs>
 8016eaa:	4631      	mov	r1, r6
 8016eac:	4620      	mov	r0, r4
 8016eae:	f000 f819 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	4639      	mov	r1, r7
 8016eb6:	f000 f815 	bl	8016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016eba:	4620      	mov	r0, r4
 8016ebc:	b003      	add	sp, #12
 8016ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ec0:	08030da4 	.word	0x08030da4
 8016ec4:	08031210 	.word	0x08031210
 8016ec8:	08030e78 	.word	0x08030e78
 8016ecc:	0801d991 	.word	0x0801d991

08016ed0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016ed0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ed2:	2000      	movs	r0, #0
 8016ed4:	b12b      	cbz	r3, 8016ee2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016ed6:	b920      	cbnz	r0, 8016ee2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016ed8:	1a5a      	subs	r2, r3, r1
 8016eda:	699b      	ldr	r3, [r3, #24]
 8016edc:	4250      	negs	r0, r2
 8016ede:	4150      	adcs	r0, r2
 8016ee0:	e7f8      	b.n	8016ed4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016ee2:	4770      	bx	lr

08016ee4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	6148      	str	r0, [r1, #20]
 8016ee8:	618b      	str	r3, [r1, #24]
 8016eea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016eec:	b913      	cbnz	r3, 8016ef4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8016eee:	6281      	str	r1, [r0, #40]	; 0x28
 8016ef0:	4770      	bx	lr
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	699a      	ldr	r2, [r3, #24]
 8016ef6:	2a00      	cmp	r2, #0
 8016ef8:	d1fb      	bne.n	8016ef2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016efa:	6199      	str	r1, [r3, #24]
 8016efc:	4770      	bx	lr

08016efe <_ZN8touchgfx9Container9removeAllEv>:
 8016efe:	2200      	movs	r2, #0
 8016f00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f02:	b123      	cbz	r3, 8016f0e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016f04:	6999      	ldr	r1, [r3, #24]
 8016f06:	6281      	str	r1, [r0, #40]	; 0x28
 8016f08:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016f0c:	e7f8      	b.n	8016f00 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016f0e:	4770      	bx	lr

08016f10 <_ZN8touchgfx9Container6unlinkEv>:
 8016f10:	2300      	movs	r3, #0
 8016f12:	6283      	str	r3, [r0, #40]	; 0x28
 8016f14:	4770      	bx	lr

08016f16 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016f16:	2200      	movs	r2, #0
 8016f18:	8002      	strh	r2, [r0, #0]
 8016f1a:	8042      	strh	r2, [r0, #2]
 8016f1c:	8082      	strh	r2, [r0, #4]
 8016f1e:	80c2      	strh	r2, [r0, #6]
 8016f20:	4770      	bx	lr

08016f22 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016f22:	b570      	push	{r4, r5, r6, lr}
 8016f24:	460d      	mov	r5, r1
 8016f26:	4616      	mov	r6, r2
 8016f28:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f2a:	b13c      	cbz	r4, 8016f3c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016f2c:	6823      	ldr	r3, [r4, #0]
 8016f2e:	4620      	mov	r0, r4
 8016f30:	4632      	mov	r2, r6
 8016f32:	4629      	mov	r1, r5
 8016f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f36:	4798      	blx	r3
 8016f38:	69a4      	ldr	r4, [r4, #24]
 8016f3a:	e7f6      	b.n	8016f2a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016f3c:	bd70      	pop	{r4, r5, r6, pc}

08016f3e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016f3e:	b538      	push	{r3, r4, r5, lr}
 8016f40:	460d      	mov	r5, r1
 8016f42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f44:	b134      	cbz	r4, 8016f54 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016f46:	682b      	ldr	r3, [r5, #0]
 8016f48:	4621      	mov	r1, r4
 8016f4a:	4628      	mov	r0, r5
 8016f4c:	689b      	ldr	r3, [r3, #8]
 8016f4e:	4798      	blx	r3
 8016f50:	69a4      	ldr	r4, [r4, #24]
 8016f52:	e7f7      	b.n	8016f44 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016f54:	bd38      	pop	{r3, r4, r5, pc}

08016f56 <_ZN8touchgfx9ContainerD1Ev>:
 8016f56:	4770      	bx	lr

08016f58 <_ZN8touchgfx9ContainerD0Ev>:
 8016f58:	b510      	push	{r4, lr}
 8016f5a:	4604      	mov	r4, r0
 8016f5c:	212c      	movs	r1, #44	; 0x2c
 8016f5e:	f014 f9dc 	bl	802b31a <_ZdlPvj>
 8016f62:	4620      	mov	r0, r4
 8016f64:	bd10      	pop	{r4, pc}

08016f66 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016f66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f68:	b19b      	cbz	r3, 8016f92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016f6a:	428b      	cmp	r3, r1
 8016f6c:	d109      	bne.n	8016f82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016f6e:	699a      	ldr	r2, [r3, #24]
 8016f70:	2100      	movs	r1, #0
 8016f72:	6159      	str	r1, [r3, #20]
 8016f74:	6282      	str	r2, [r0, #40]	; 0x28
 8016f76:	b902      	cbnz	r2, 8016f7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016f78:	4770      	bx	lr
 8016f7a:	6199      	str	r1, [r3, #24]
 8016f7c:	4770      	bx	lr
 8016f7e:	4613      	mov	r3, r2
 8016f80:	b13a      	cbz	r2, 8016f92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016f82:	699a      	ldr	r2, [r3, #24]
 8016f84:	428a      	cmp	r2, r1
 8016f86:	d1fa      	bne.n	8016f7e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016f88:	698a      	ldr	r2, [r1, #24]
 8016f8a:	619a      	str	r2, [r3, #24]
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016f92:	4770      	bx	lr

08016f94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016f94:	b410      	push	{r4}
 8016f96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f98:	4604      	mov	r4, r0
 8016f9a:	b92b      	cbnz	r3, 8016fa8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016f9c:	6803      	ldr	r3, [r0, #0]
 8016f9e:	4611      	mov	r1, r2
 8016fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fa6:	4718      	bx	r3
 8016fa8:	b941      	cbnz	r1, 8016fbc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016faa:	6193      	str	r3, [r2, #24]
 8016fac:	6282      	str	r2, [r0, #40]	; 0x28
 8016fae:	6154      	str	r4, [r2, #20]
 8016fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fb4:	4770      	bx	lr
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d0f9      	beq.n	8016fb0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016fbc:	4299      	cmp	r1, r3
 8016fbe:	6998      	ldr	r0, [r3, #24]
 8016fc0:	d1f9      	bne.n	8016fb6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016fc2:	6190      	str	r0, [r2, #24]
 8016fc4:	618a      	str	r2, [r1, #24]
 8016fc6:	e7f2      	b.n	8016fae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016fc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fcc:	461f      	mov	r7, r3
 8016fce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016fd2:	460d      	mov	r5, r1
 8016fd4:	4616      	mov	r6, r2
 8016fd6:	b103      	cbz	r3, 8016fda <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016fd8:	6038      	str	r0, [r7, #0]
 8016fda:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016fdc:	b314      	cbz	r4, 8017024 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016fde:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016fe2:	b1eb      	cbz	r3, 8017020 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016fe4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016fe8:	428d      	cmp	r5, r1
 8016fea:	db19      	blt.n	8017020 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016fec:	b289      	uxth	r1, r1
 8016fee:	8923      	ldrh	r3, [r4, #8]
 8016ff0:	440b      	add	r3, r1
 8016ff2:	b21b      	sxth	r3, r3
 8016ff4:	429d      	cmp	r5, r3
 8016ff6:	da13      	bge.n	8017020 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016ff8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016ffc:	4296      	cmp	r6, r2
 8016ffe:	db0f      	blt.n	8017020 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017000:	b292      	uxth	r2, r2
 8017002:	8963      	ldrh	r3, [r4, #10]
 8017004:	4413      	add	r3, r2
 8017006:	b21b      	sxth	r3, r3
 8017008:	429e      	cmp	r6, r3
 801700a:	da09      	bge.n	8017020 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801700c:	6823      	ldr	r3, [r4, #0]
 801700e:	1ab2      	subs	r2, r6, r2
 8017010:	1a69      	subs	r1, r5, r1
 8017012:	4620      	mov	r0, r4
 8017014:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8017018:	b212      	sxth	r2, r2
 801701a:	463b      	mov	r3, r7
 801701c:	b209      	sxth	r1, r1
 801701e:	47c0      	blx	r8
 8017020:	69a4      	ldr	r4, [r4, #24]
 8017022:	e7db      	b.n	8016fdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017028 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801702c:	4c6d      	ldr	r4, [pc, #436]	; (80171e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801702e:	b0a1      	sub	sp, #132	; 0x84
 8017030:	4606      	mov	r6, r0
 8017032:	6824      	ldr	r4, [r4, #0]
 8017034:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8017036:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801703a:	2400      	movs	r4, #0
 801703c:	9303      	str	r3, [sp, #12]
 801703e:	802c      	strh	r4, [r5, #0]
 8017040:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8017042:	802c      	strh	r4, [r5, #0]
 8017044:	601c      	str	r4, [r3, #0]
 8017046:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801704a:	f7ff ffbd 	bl	8016fc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801704e:	f1b9 0f03 	cmp.w	r9, #3
 8017052:	f340 80c1 	ble.w	80171d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017056:	4631      	mov	r1, r6
 8017058:	a80c      	add	r0, sp, #48	; 0x30
 801705a:	f006 f853 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801705e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017062:	9306      	str	r3, [sp, #24]
 8017064:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017068:	9307      	str	r3, [sp, #28]
 801706a:	9b03      	ldr	r3, [sp, #12]
 801706c:	f8d3 a000 	ldr.w	sl, [r3]
 8017070:	f1ba 0f00 	cmp.w	sl, #0
 8017074:	f000 80b3 	beq.w	80171de <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017078:	4651      	mov	r1, sl
 801707a:	a810      	add	r0, sp, #64	; 0x40
 801707c:	f006 f842 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017080:	2002      	movs	r0, #2
 8017082:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017086:	9b01      	ldr	r3, [sp, #4]
 8017088:	9a06      	ldr	r2, [sp, #24]
 801708a:	fb91 f1f0 	sdiv	r1, r1, r0
 801708e:	189d      	adds	r5, r3, r2
 8017090:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017094:	9a07      	ldr	r2, [sp, #28]
 8017096:	4419      	add	r1, r3
 8017098:	9b02      	ldr	r3, [sp, #8]
 801709a:	4413      	add	r3, r2
 801709c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80170a0:	1a6d      	subs	r5, r5, r1
 80170a2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80170a6:	fb92 f2f0 	sdiv	r2, r2, r0
 80170aa:	440a      	add	r2, r1
 80170ac:	1a9b      	subs	r3, r3, r2
 80170ae:	435b      	muls	r3, r3
 80170b0:	fb05 3505 	mla	r5, r5, r5, r3
 80170b4:	4f4c      	ldr	r7, [pc, #304]	; (80171e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80170b6:	ac10      	add	r4, sp, #64	; 0x40
 80170b8:	f1b9 0f0c 	cmp.w	r9, #12
 80170bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80170be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80170c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80170c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170c8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80170cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80170d0:	f04f 0303 	mov.w	r3, #3
 80170d4:	bfd8      	it	le
 80170d6:	f109 32ff 	addle.w	r2, r9, #4294967295
 80170da:	f04f 0400 	mov.w	r4, #0
 80170de:	f8cd 9000 	str.w	r9, [sp]
 80170e2:	bfcc      	ite	gt
 80170e4:	4698      	movgt	r8, r3
 80170e6:	fb92 f8f3 	sdivle	r8, r2, r3
 80170ea:	1c63      	adds	r3, r4, #1
 80170ec:	aa10      	add	r2, sp, #64	; 0x40
 80170ee:	f004 0401 	and.w	r4, r4, #1
 80170f2:	f04f 0b00 	mov.w	fp, #0
 80170f6:	9308      	str	r3, [sp, #32]
 80170f8:	9b00      	ldr	r3, [sp, #0]
 80170fa:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80170fe:	fb93 f3f8 	sdiv	r3, r3, r8
 8017102:	3404      	adds	r4, #4
 8017104:	b29b      	uxth	r3, r3
 8017106:	9304      	str	r3, [sp, #16]
 8017108:	9a04      	ldr	r2, [sp, #16]
 801710a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801710e:	fb13 f302 	smulbb	r3, r3, r2
 8017112:	9a01      	ldr	r2, [sp, #4]
 8017114:	b29b      	uxth	r3, r3
 8017116:	1899      	adds	r1, r3, r2
 8017118:	9305      	str	r3, [sp, #20]
 801711a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801711e:	b209      	sxth	r1, r1
 8017120:	4299      	cmp	r1, r3
 8017122:	db4d      	blt.n	80171c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017124:	8932      	ldrh	r2, [r6, #8]
 8017126:	4413      	add	r3, r2
 8017128:	b21b      	sxth	r3, r3
 801712a:	4299      	cmp	r1, r3
 801712c:	da48      	bge.n	80171c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801712e:	9b04      	ldr	r3, [sp, #16]
 8017130:	6827      	ldr	r7, [r4, #0]
 8017132:	fb17 f703 	smulbb	r7, r7, r3
 8017136:	9b02      	ldr	r3, [sp, #8]
 8017138:	b2bf      	uxth	r7, r7
 801713a:	18fa      	adds	r2, r7, r3
 801713c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017140:	b212      	sxth	r2, r2
 8017142:	429a      	cmp	r2, r3
 8017144:	db3c      	blt.n	80171c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017146:	8970      	ldrh	r0, [r6, #10]
 8017148:	4403      	add	r3, r0
 801714a:	b21b      	sxth	r3, r3
 801714c:	429a      	cmp	r2, r3
 801714e:	da37      	bge.n	80171c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017150:	2300      	movs	r3, #0
 8017152:	4630      	mov	r0, r6
 8017154:	930b      	str	r3, [sp, #44]	; 0x2c
 8017156:	ab0b      	add	r3, sp, #44	; 0x2c
 8017158:	f7ff ff36 	bl	8016fc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801715c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801715e:	b37a      	cbz	r2, 80171c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017160:	4552      	cmp	r2, sl
 8017162:	d02d      	beq.n	80171c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017164:	4611      	mov	r1, r2
 8017166:	a80e      	add	r0, sp, #56	; 0x38
 8017168:	9209      	str	r2, [sp, #36]	; 0x24
 801716a:	f005 ffcb 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801716e:	f04f 0e02 	mov.w	lr, #2
 8017172:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017176:	9a06      	ldr	r2, [sp, #24]
 8017178:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801717c:	9b01      	ldr	r3, [sp, #4]
 801717e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017182:	4413      	add	r3, r2
 8017184:	9a07      	ldr	r2, [sp, #28]
 8017186:	fb91 f1fe 	sdiv	r1, r1, lr
 801718a:	fb9c fcfe 	sdiv	ip, ip, lr
 801718e:	4401      	add	r1, r0
 8017190:	1a58      	subs	r0, r3, r1
 8017192:	9b02      	ldr	r3, [sp, #8]
 8017194:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017198:	4413      	add	r3, r2
 801719a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801719c:	448c      	add	ip, r1
 801719e:	eba3 030c 	sub.w	r3, r3, ip
 80171a2:	435b      	muls	r3, r3
 80171a4:	fb00 3300 	mla	r3, r0, r0, r3
 80171a8:	42ab      	cmp	r3, r5
 80171aa:	d208      	bcs.n	80171be <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80171ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171ae:	461d      	mov	r5, r3
 80171b0:	9803      	ldr	r0, [sp, #12]
 80171b2:	6001      	str	r1, [r0, #0]
 80171b4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80171b6:	9805      	ldr	r0, [sp, #20]
 80171b8:	8008      	strh	r0, [r1, #0]
 80171ba:	992b      	ldr	r1, [sp, #172]	; 0xac
 80171bc:	800f      	strh	r7, [r1, #0]
 80171be:	4692      	mov	sl, r2
 80171c0:	f10b 0b01 	add.w	fp, fp, #1
 80171c4:	3408      	adds	r4, #8
 80171c6:	f1bb 0f04 	cmp.w	fp, #4
 80171ca:	d19d      	bne.n	8017108 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80171cc:	9b00      	ldr	r3, [sp, #0]
 80171ce:	9c08      	ldr	r4, [sp, #32]
 80171d0:	444b      	add	r3, r9
 80171d2:	4544      	cmp	r4, r8
 80171d4:	9300      	str	r3, [sp, #0]
 80171d6:	d188      	bne.n	80170ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80171d8:	b021      	add	sp, #132	; 0x84
 80171da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171de:	f04f 35ff 	mov.w	r5, #4294967295
 80171e2:	e767      	b.n	80170b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80171e4:	20016e88 	.word	0x20016e88
 80171e8:	0802c8b0 	.word	0x0802c8b0

080171ec <_ZN8touchgfx4RectaNERKS0_>:
 80171ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171f0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80171f4:	888c      	ldrh	r4, [r1, #4]
 80171f6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80171fa:	443c      	add	r4, r7
 80171fc:	b2a4      	uxth	r4, r4
 80171fe:	fa0f f884 	sxth.w	r8, r4
 8017202:	45c1      	cmp	r9, r8
 8017204:	da2f      	bge.n	8017266 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017206:	8882      	ldrh	r2, [r0, #4]
 8017208:	444a      	add	r2, r9
 801720a:	b292      	uxth	r2, r2
 801720c:	fa0f fe82 	sxth.w	lr, r2
 8017210:	4577      	cmp	r7, lr
 8017212:	da28      	bge.n	8017266 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017214:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017218:	88cb      	ldrh	r3, [r1, #6]
 801721a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801721e:	442b      	add	r3, r5
 8017220:	b21b      	sxth	r3, r3
 8017222:	429e      	cmp	r6, r3
 8017224:	da1f      	bge.n	8017266 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017226:	88c3      	ldrh	r3, [r0, #6]
 8017228:	4433      	add	r3, r6
 801722a:	b29b      	uxth	r3, r3
 801722c:	fa0f fc83 	sxth.w	ip, r3
 8017230:	4565      	cmp	r5, ip
 8017232:	da18      	bge.n	8017266 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017234:	454f      	cmp	r7, r9
 8017236:	bfb8      	it	lt
 8017238:	464f      	movlt	r7, r9
 801723a:	42b5      	cmp	r5, r6
 801723c:	bfb8      	it	lt
 801723e:	4635      	movlt	r5, r6
 8017240:	45f0      	cmp	r8, lr
 8017242:	bfd8      	it	le
 8017244:	4622      	movle	r2, r4
 8017246:	1bd2      	subs	r2, r2, r7
 8017248:	8082      	strh	r2, [r0, #4]
 801724a:	884a      	ldrh	r2, [r1, #2]
 801724c:	88c9      	ldrh	r1, [r1, #6]
 801724e:	8007      	strh	r7, [r0, #0]
 8017250:	440a      	add	r2, r1
 8017252:	8045      	strh	r5, [r0, #2]
 8017254:	b292      	uxth	r2, r2
 8017256:	b211      	sxth	r1, r2
 8017258:	458c      	cmp	ip, r1
 801725a:	bfa8      	it	ge
 801725c:	4613      	movge	r3, r2
 801725e:	1b5b      	subs	r3, r3, r5
 8017260:	80c3      	strh	r3, [r0, #6]
 8017262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017266:	2300      	movs	r3, #0
 8017268:	8003      	strh	r3, [r0, #0]
 801726a:	8043      	strh	r3, [r0, #2]
 801726c:	8083      	strh	r3, [r0, #4]
 801726e:	80c3      	strh	r3, [r0, #6]
 8017270:	e7f7      	b.n	8017262 <_ZN8touchgfx4RectaNERKS0_+0x76>

08017272 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017272:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	dd06      	ble.n	8017288 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801727a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801727e:	2800      	cmp	r0, #0
 8017280:	bfcc      	ite	gt
 8017282:	2000      	movgt	r0, #0
 8017284:	2001      	movle	r0, #1
 8017286:	4770      	bx	lr
 8017288:	2001      	movs	r0, #1
 801728a:	4770      	bx	lr

0801728c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017290:	2300      	movs	r3, #0
 8017292:	4604      	mov	r4, r0
 8017294:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017296:	8003      	strh	r3, [r0, #0]
 8017298:	8043      	strh	r3, [r0, #2]
 801729a:	8083      	strh	r3, [r0, #4]
 801729c:	80c3      	strh	r3, [r0, #6]
 801729e:	2d00      	cmp	r5, #0
 80172a0:	d040      	beq.n	8017324 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80172a2:	1d28      	adds	r0, r5, #4
 80172a4:	f7ff ffe5 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 80172a8:	b988      	cbnz	r0, 80172ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80172aa:	4620      	mov	r0, r4
 80172ac:	f7ff ffe1 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 80172b0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80172b4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80172b8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80172bc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80172c0:	b138      	cbz	r0, 80172d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80172c2:	8022      	strh	r2, [r4, #0]
 80172c4:	8063      	strh	r3, [r4, #2]
 80172c6:	f8a4 e004 	strh.w	lr, [r4, #4]
 80172ca:	f8a4 c006 	strh.w	ip, [r4, #6]
 80172ce:	69ad      	ldr	r5, [r5, #24]
 80172d0:	e7e5      	b.n	801729e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80172d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80172d6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80172da:	4290      	cmp	r0, r2
 80172dc:	4607      	mov	r7, r0
 80172de:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80172e2:	460e      	mov	r6, r1
 80172e4:	bfa8      	it	ge
 80172e6:	4617      	movge	r7, r2
 80172e8:	4299      	cmp	r1, r3
 80172ea:	4472      	add	r2, lr
 80172ec:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80172f0:	bfa8      	it	ge
 80172f2:	461e      	movge	r6, r3
 80172f4:	4440      	add	r0, r8
 80172f6:	4471      	add	r1, lr
 80172f8:	4463      	add	r3, ip
 80172fa:	b200      	sxth	r0, r0
 80172fc:	8027      	strh	r7, [r4, #0]
 80172fe:	b212      	sxth	r2, r2
 8017300:	8066      	strh	r6, [r4, #2]
 8017302:	b209      	sxth	r1, r1
 8017304:	b21b      	sxth	r3, r3
 8017306:	4290      	cmp	r0, r2
 8017308:	bfac      	ite	ge
 801730a:	ebc7 0200 	rsbge	r2, r7, r0
 801730e:	ebc7 0202 	rsblt	r2, r7, r2
 8017312:	4299      	cmp	r1, r3
 8017314:	bfac      	ite	ge
 8017316:	ebc6 0301 	rsbge	r3, r6, r1
 801731a:	ebc6 0303 	rsblt	r3, r6, r3
 801731e:	80a2      	strh	r2, [r4, #4]
 8017320:	80e3      	strh	r3, [r4, #6]
 8017322:	e7d4      	b.n	80172ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017324:	4620      	mov	r0, r4
 8017326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801732a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801732a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801732e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017332:	b383      	cbz	r3, 8017396 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017334:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017336:	b374      	cbz	r4, 8017396 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017338:	f9b1 5000 	ldrsh.w	r5, [r1]
 801733c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017340:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017344:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017348:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801734c:	b303      	cbz	r3, 8017390 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801734e:	4668      	mov	r0, sp
 8017350:	1d21      	adds	r1, r4, #4
 8017352:	f8ad 5000 	strh.w	r5, [sp]
 8017356:	f8ad 6002 	strh.w	r6, [sp, #2]
 801735a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801735e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017362:	f7ff ff43 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8017366:	4668      	mov	r0, sp
 8017368:	f7ff ff83 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801736c:	b980      	cbnz	r0, 8017390 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801736e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017372:	4669      	mov	r1, sp
 8017374:	88a2      	ldrh	r2, [r4, #4]
 8017376:	4620      	mov	r0, r4
 8017378:	1a9b      	subs	r3, r3, r2
 801737a:	88e2      	ldrh	r2, [r4, #6]
 801737c:	f8ad 3000 	strh.w	r3, [sp]
 8017380:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017384:	1a9b      	subs	r3, r3, r2
 8017386:	f8ad 3002 	strh.w	r3, [sp, #2]
 801738a:	6823      	ldr	r3, [r4, #0]
 801738c:	689b      	ldr	r3, [r3, #8]
 801738e:	4798      	blx	r3
 8017390:	69a4      	ldr	r4, [r4, #24]
 8017392:	2c00      	cmp	r4, #0
 8017394:	d1d8      	bne.n	8017348 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017396:	b002      	add	sp, #8
 8017398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801739c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801739c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801739e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80173a2:	460d      	mov	r5, r1
 80173a4:	4616      	mov	r6, r2
 80173a6:	b323      	cbz	r3, 80173f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80173a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80173aa:	b314      	cbz	r4, 80173f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80173ac:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80173b0:	b1eb      	cbz	r3, 80173ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80173b2:	6828      	ldr	r0, [r5, #0]
 80173b4:	466b      	mov	r3, sp
 80173b6:	6869      	ldr	r1, [r5, #4]
 80173b8:	c303      	stmia	r3!, {r0, r1}
 80173ba:	4668      	mov	r0, sp
 80173bc:	1d21      	adds	r1, r4, #4
 80173be:	f7ff ff15 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 80173c2:	4668      	mov	r0, sp
 80173c4:	f7ff ff55 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 80173c8:	b988      	cbnz	r0, 80173ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80173ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80173ce:	4669      	mov	r1, sp
 80173d0:	88a2      	ldrh	r2, [r4, #4]
 80173d2:	4620      	mov	r0, r4
 80173d4:	1a9b      	subs	r3, r3, r2
 80173d6:	88e2      	ldrh	r2, [r4, #6]
 80173d8:	f8ad 3000 	strh.w	r3, [sp]
 80173dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80173e0:	1a9b      	subs	r3, r3, r2
 80173e2:	4632      	mov	r2, r6
 80173e4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80173e8:	6823      	ldr	r3, [r4, #0]
 80173ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173ec:	4798      	blx	r3
 80173ee:	69a4      	ldr	r4, [r4, #24]
 80173f0:	e7db      	b.n	80173aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80173f2:	b002      	add	sp, #8
 80173f4:	bd70      	pop	{r4, r5, r6, pc}

080173f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80173f6:	6803      	ldr	r3, [r0, #0]
 80173f8:	b513      	push	{r0, r1, r4, lr}
 80173fa:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80173fe:	2300      	movs	r3, #0
 8017400:	e9cd 3300 	strd	r3, r3, [sp]
 8017404:	466b      	mov	r3, sp
 8017406:	47a0      	blx	r4
 8017408:	b002      	add	sp, #8
 801740a:	bd10      	pop	{r4, pc}

0801740c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801740c:	2301      	movs	r3, #1
 801740e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017412:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017416:	4770      	bx	lr

08017418 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017418:	2301      	movs	r3, #1
 801741a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801741e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017422:	4770      	bx	lr

08017424 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017424:	6843      	ldr	r3, [r0, #4]
 8017426:	2201      	movs	r2, #1
 8017428:	725a      	strb	r2, [r3, #9]
 801742a:	6840      	ldr	r0, [r0, #4]
 801742c:	6803      	ldr	r3, [r0, #0]
 801742e:	691b      	ldr	r3, [r3, #16]
 8017430:	4718      	bx	r3

08017432 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017432:	6840      	ldr	r0, [r0, #4]
 8017434:	6803      	ldr	r3, [r0, #0]
 8017436:	689b      	ldr	r3, [r3, #8]
 8017438:	4718      	bx	r3

0801743a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801743a:	b530      	push	{r4, r5, lr}
 801743c:	b08b      	sub	sp, #44	; 0x2c
 801743e:	6804      	ldr	r4, [r0, #0]
 8017440:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017444:	9509      	str	r5, [sp, #36]	; 0x24
 8017446:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801744a:	9508      	str	r5, [sp, #32]
 801744c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8017450:	9507      	str	r5, [sp, #28]
 8017452:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017456:	9506      	str	r5, [sp, #24]
 8017458:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801745c:	9505      	str	r5, [sp, #20]
 801745e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8017462:	9504      	str	r5, [sp, #16]
 8017464:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017468:	9503      	str	r5, [sp, #12]
 801746a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801746e:	9502      	str	r5, [sp, #8]
 8017470:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017474:	e9cd 3500 	strd	r3, r5, [sp]
 8017478:	4613      	mov	r3, r2
 801747a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801747c:	2200      	movs	r2, #0
 801747e:	47a0      	blx	r4
 8017480:	b00b      	add	sp, #44	; 0x2c
 8017482:	bd30      	pop	{r4, r5, pc}

08017484 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017484:	4b04      	ldr	r3, [pc, #16]	; (8017498 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017486:	781b      	ldrb	r3, [r3, #0]
 8017488:	b123      	cbz	r3, 8017494 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801748a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801748e:	f080 0001 	eor.w	r0, r0, #1
 8017492:	4770      	bx	lr
 8017494:	2001      	movs	r0, #1
 8017496:	4770      	bx	lr
 8017498:	20016e86 	.word	0x20016e86

0801749c <_ZN8touchgfx3HAL8endFrameEv>:
 801749c:	b510      	push	{r4, lr}
 801749e:	4604      	mov	r4, r0
 80174a0:	6840      	ldr	r0, [r0, #4]
 80174a2:	6803      	ldr	r3, [r0, #0]
 80174a4:	689b      	ldr	r3, [r3, #8]
 80174a6:	4798      	blx	r3
 80174a8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80174ac:	b113      	cbz	r3, 80174b4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80174ae:	2301      	movs	r3, #1
 80174b0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80174b4:	bd10      	pop	{r4, pc}

080174b6 <_ZN8touchgfx3HAL10initializeEv>:
 80174b6:	b510      	push	{r4, lr}
 80174b8:	4604      	mov	r4, r0
 80174ba:	f7ea fd35 	bl	8001f28 <_ZN8touchgfx10OSWrappers10initializeEv>
 80174be:	f7ea fc11 	bl	8001ce4 <_ZN8touchgfx4GPIO4initEv>
 80174c2:	6860      	ldr	r0, [r4, #4]
 80174c4:	6803      	ldr	r3, [r0, #0]
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	4798      	blx	r3
 80174ca:	68e0      	ldr	r0, [r4, #12]
 80174cc:	6803      	ldr	r3, [r0, #0]
 80174ce:	689b      	ldr	r3, [r3, #8]
 80174d0:	4798      	blx	r3
 80174d2:	6823      	ldr	r3, [r4, #0]
 80174d4:	4620      	mov	r0, r4
 80174d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174dc:	4718      	bx	r3

080174de <_ZN8touchgfx3HAL9taskEntryEv>:
 80174de:	b508      	push	{r3, lr}
 80174e0:	6803      	ldr	r3, [r0, #0]
 80174e2:	4604      	mov	r4, r0
 80174e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80174e8:	4798      	blx	r3
 80174ea:	6823      	ldr	r3, [r4, #0]
 80174ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80174ee:	4620      	mov	r0, r4
 80174f0:	4798      	blx	r3
 80174f2:	f7ea fd65 	bl	8001fc0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80174f6:	6823      	ldr	r3, [r4, #0]
 80174f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174fa:	e7f8      	b.n	80174ee <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080174fc <_ZN8touchgfx3HAL4tickEv>:
 80174fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80174fe:	6803      	ldr	r3, [r0, #0]
 8017500:	4604      	mov	r4, r0
 8017502:	4d5b      	ldr	r5, [pc, #364]	; (8017670 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8017504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017508:	4798      	blx	r3
 801750a:	2800      	cmp	r0, #0
 801750c:	f000 8095 	beq.w	801763a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8017510:	2001      	movs	r0, #1
 8017512:	2600      	movs	r6, #0
 8017514:	f7ea fb4c 	bl	8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017518:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801751c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017520:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017524:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017528:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801752c:	b133      	cbz	r3, 801753c <_ZN8touchgfx3HAL4tickEv+0x40>
 801752e:	6823      	ldr	r3, [r4, #0]
 8017530:	4620      	mov	r0, r4
 8017532:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017536:	4798      	blx	r3
 8017538:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801753c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017540:	2601      	movs	r6, #1
 8017542:	6862      	ldr	r2, [r4, #4]
 8017544:	f083 0301 	eor.w	r3, r3, #1
 8017548:	702e      	strb	r6, [r5, #0]
 801754a:	7253      	strb	r3, [r2, #9]
 801754c:	f004 fcb0 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 8017550:	6803      	ldr	r3, [r0, #0]
 8017552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017554:	4798      	blx	r3
 8017556:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801755a:	b90b      	cbnz	r3, 8017560 <_ZN8touchgfx3HAL4tickEv+0x64>
 801755c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017560:	f004 fca6 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 8017564:	6803      	ldr	r3, [r0, #0]
 8017566:	695b      	ldr	r3, [r3, #20]
 8017568:	4798      	blx	r3
 801756a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801756c:	6803      	ldr	r3, [r0, #0]
 801756e:	691b      	ldr	r3, [r3, #16]
 8017570:	4798      	blx	r3
 8017572:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017576:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801757a:	3b01      	subs	r3, #1
 801757c:	b2db      	uxtb	r3, r3
 801757e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017582:	b10a      	cbz	r2, 8017588 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017584:	2b00      	cmp	r3, #0
 8017586:	d1eb      	bne.n	8017560 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017588:	4a3a      	ldr	r2, [pc, #232]	; (8017674 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801758a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801758e:	7813      	ldrb	r3, [r2, #0]
 8017590:	3301      	adds	r3, #1
 8017592:	b25b      	sxtb	r3, r3
 8017594:	4299      	cmp	r1, r3
 8017596:	7013      	strb	r3, [r2, #0]
 8017598:	dc10      	bgt.n	80175bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801759a:	2300      	movs	r3, #0
 801759c:	68e0      	ldr	r0, [r4, #12]
 801759e:	a902      	add	r1, sp, #8
 80175a0:	7013      	strb	r3, [r2, #0]
 80175a2:	aa03      	add	r2, sp, #12
 80175a4:	6803      	ldr	r3, [r0, #0]
 80175a6:	68db      	ldr	r3, [r3, #12]
 80175a8:	4798      	blx	r3
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	2800      	cmp	r0, #0
 80175ae:	d050      	beq.n	8017652 <_ZN8touchgfx3HAL4tickEv+0x156>
 80175b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80175b4:	4620      	mov	r0, r4
 80175b6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80175ba:	4798      	blx	r3
 80175bc:	2300      	movs	r3, #0
 80175be:	6960      	ldr	r0, [r4, #20]
 80175c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80175c4:	b158      	cbz	r0, 80175de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80175c6:	6803      	ldr	r3, [r0, #0]
 80175c8:	f10d 0107 	add.w	r1, sp, #7
 80175cc:	68db      	ldr	r3, [r3, #12]
 80175ce:	4798      	blx	r3
 80175d0:	b128      	cbz	r0, 80175de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80175d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80175d8:	6803      	ldr	r3, [r0, #0]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	4798      	blx	r3
 80175de:	f104 001c 	add.w	r0, r4, #28
 80175e2:	f013 fac3 	bl	802ab6c <_ZN8touchgfx8Gestures4tickEv>
 80175e6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80175ea:	b30b      	cbz	r3, 8017630 <_ZN8touchgfx3HAL4tickEv+0x134>
 80175ec:	6920      	ldr	r0, [r4, #16]
 80175ee:	6803      	ldr	r3, [r0, #0]
 80175f0:	691b      	ldr	r3, [r3, #16]
 80175f2:	4798      	blx	r3
 80175f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80175f6:	4606      	mov	r6, r0
 80175f8:	b903      	cbnz	r3, 80175fc <_ZN8touchgfx3HAL4tickEv+0x100>
 80175fa:	6720      	str	r0, [r4, #112]	; 0x70
 80175fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80175fe:	4a1e      	ldr	r2, [pc, #120]	; (8017678 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017600:	1af3      	subs	r3, r6, r3
 8017602:	4293      	cmp	r3, r2
 8017604:	d914      	bls.n	8017630 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017606:	6920      	ldr	r0, [r4, #16]
 8017608:	6803      	ldr	r3, [r0, #0]
 801760a:	699b      	ldr	r3, [r3, #24]
 801760c:	4798      	blx	r3
 801760e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017610:	2264      	movs	r2, #100	; 0x64
 8017612:	1af3      	subs	r3, r6, r3
 8017614:	fbb3 f3f2 	udiv	r3, r3, r2
 8017618:	fbb0 f0f3 	udiv	r0, r0, r3
 801761c:	2800      	cmp	r0, #0
 801761e:	dc1d      	bgt.n	801765c <_ZN8touchgfx3HAL4tickEv+0x160>
 8017620:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017624:	6920      	ldr	r0, [r4, #16]
 8017626:	2100      	movs	r1, #0
 8017628:	6803      	ldr	r3, [r0, #0]
 801762a:	69db      	ldr	r3, [r3, #28]
 801762c:	4798      	blx	r3
 801762e:	6726      	str	r6, [r4, #112]	; 0x70
 8017630:	f004 fc3e 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 8017634:	6803      	ldr	r3, [r0, #0]
 8017636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017638:	4798      	blx	r3
 801763a:	6823      	ldr	r3, [r4, #0]
 801763c:	4620      	mov	r0, r4
 801763e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017642:	4798      	blx	r3
 8017644:	2001      	movs	r0, #1
 8017646:	f7ea fae3 	bl	8001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801764a:	2300      	movs	r3, #0
 801764c:	702b      	strb	r3, [r5, #0]
 801764e:	b004      	add	sp, #16
 8017650:	bd70      	pop	{r4, r5, r6, pc}
 8017652:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017656:	4620      	mov	r0, r4
 8017658:	4798      	blx	r3
 801765a:	e7af      	b.n	80175bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801765c:	2863      	cmp	r0, #99	; 0x63
 801765e:	bfcb      	itete	gt
 8017660:	2300      	movgt	r3, #0
 8017662:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017666:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801766a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801766e:	e7d9      	b.n	8017624 <_ZN8touchgfx3HAL4tickEv+0x128>
 8017670:	20016e8c 	.word	0x20016e8c
 8017674:	20016e8d 	.word	0x20016e8d
 8017678:	05f5e100 	.word	0x05f5e100

0801767c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801767c:	f7ea bc84 	b.w	8001f88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017680 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017680:	6581      	str	r1, [r0, #88]	; 0x58
 8017682:	301c      	adds	r0, #28
 8017684:	f013 ba70 	b.w	802ab68 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017688 <_ZN8touchgfx3HAL5touchEll>:
 8017688:	b530      	push	{r4, r5, lr}
 801768a:	b087      	sub	sp, #28
 801768c:	4604      	mov	r4, r0
 801768e:	a804      	add	r0, sp, #16
 8017690:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017694:	f004 fa0c 	bl	801bab0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017698:	9b04      	ldr	r3, [sp, #16]
 801769a:	a906      	add	r1, sp, #24
 801769c:	a803      	add	r0, sp, #12
 801769e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80176a2:	9b05      	ldr	r3, [sp, #20]
 80176a4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80176a8:	f004 fa54 	bl	801bb54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80176ac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80176b0:	f104 001c 	add.w	r0, r4, #28
 80176b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80176b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80176bc:	b189      	cbz	r1, 80176e2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80176be:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80176c2:	9300      	str	r3, [sp, #0]
 80176c4:	4613      	mov	r3, r2
 80176c6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80176ca:	462a      	mov	r2, r5
 80176cc:	f013 fa5c 	bl	802ab88 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80176d0:	b128      	cbz	r0, 80176de <_ZN8touchgfx3HAL5touchEll+0x56>
 80176d2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80176d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80176d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80176dc:	6623      	str	r3, [r4, #96]	; 0x60
 80176de:	b007      	add	sp, #28
 80176e0:	bd30      	pop	{r4, r5, pc}
 80176e2:	f013 fa91 	bl	802ac08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80176e6:	2301      	movs	r3, #1
 80176e8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80176ec:	e7f1      	b.n	80176d2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080176ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80176ee:	b510      	push	{r4, lr}
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d046      	beq.n	8017782 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80176f4:	ea81 0002 	eor.w	r0, r1, r2
 80176f8:	07c4      	lsls	r4, r0, #31
 80176fa:	d508      	bpl.n	801770e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80176fc:	440b      	add	r3, r1
 80176fe:	3a01      	subs	r2, #1
 8017700:	428b      	cmp	r3, r1
 8017702:	d93e      	bls.n	8017782 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017704:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017708:	f801 0b01 	strb.w	r0, [r1], #1
 801770c:	e7f8      	b.n	8017700 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801770e:	07d0      	lsls	r0, r2, #31
 8017710:	bf42      	ittt	mi
 8017712:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017716:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801771a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801771e:	2b01      	cmp	r3, #1
 8017720:	d911      	bls.n	8017746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017722:	ea81 0402 	eor.w	r4, r1, r2
 8017726:	4610      	mov	r0, r2
 8017728:	07a4      	lsls	r4, r4, #30
 801772a:	d022      	beq.n	8017772 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801772c:	f023 0401 	bic.w	r4, r3, #1
 8017730:	440c      	add	r4, r1
 8017732:	428c      	cmp	r4, r1
 8017734:	4602      	mov	r2, r0
 8017736:	d904      	bls.n	8017742 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017738:	8812      	ldrh	r2, [r2, #0]
 801773a:	3002      	adds	r0, #2
 801773c:	f821 2b02 	strh.w	r2, [r1], #2
 8017740:	e7f7      	b.n	8017732 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017742:	f003 0301 	and.w	r3, r3, #1
 8017746:	f023 0003 	bic.w	r0, r3, #3
 801774a:	4408      	add	r0, r1
 801774c:	4288      	cmp	r0, r1
 801774e:	4614      	mov	r4, r2
 8017750:	d904      	bls.n	801775c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017752:	6824      	ldr	r4, [r4, #0]
 8017754:	3204      	adds	r2, #4
 8017756:	f841 4b04 	str.w	r4, [r1], #4
 801775a:	e7f7      	b.n	801774c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801775c:	f003 0303 	and.w	r3, r3, #3
 8017760:	3a01      	subs	r2, #1
 8017762:	440b      	add	r3, r1
 8017764:	428b      	cmp	r3, r1
 8017766:	d90c      	bls.n	8017782 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017768:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801776c:	f801 0b01 	strb.w	r0, [r1], #1
 8017770:	e7f8      	b.n	8017764 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017772:	0790      	lsls	r0, r2, #30
 8017774:	d0e7      	beq.n	8017746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017776:	f832 0b02 	ldrh.w	r0, [r2], #2
 801777a:	3b02      	subs	r3, #2
 801777c:	f821 0b02 	strh.w	r0, [r1], #2
 8017780:	e7e1      	b.n	8017746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017782:	2001      	movs	r0, #1
 8017784:	bd10      	pop	{r4, pc}

08017786 <_ZN8touchgfx3HAL7noTouchEv>:
 8017786:	b510      	push	{r4, lr}
 8017788:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801778c:	4604      	mov	r4, r0
 801778e:	b153      	cbz	r3, 80177a6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017790:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017794:	2101      	movs	r1, #1
 8017796:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801779a:	301c      	adds	r0, #28
 801779c:	f013 fa34 	bl	802ac08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80177a0:	2300      	movs	r3, #0
 80177a2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80177a6:	bd10      	pop	{r4, pc}

080177a8 <_ZN8touchgfx3HAL3lcdEv>:
 80177a8:	4b04      	ldr	r3, [pc, #16]	; (80177bc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80177b0:	b10a      	cbz	r2, 80177b6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80177b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80177b4:	b900      	cbnz	r0, 80177b8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 80177b6:	6898      	ldr	r0, [r3, #8]
 80177b8:	4770      	bx	lr
 80177ba:	bf00      	nop
 80177bc:	20016e88 	.word	0x20016e88

080177c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80177c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177c4:	b085      	sub	sp, #20
 80177c6:	4604      	mov	r4, r0
 80177c8:	2000      	movs	r0, #0
 80177ca:	4699      	mov	r9, r3
 80177cc:	ad04      	add	r5, sp, #16
 80177ce:	460f      	mov	r7, r1
 80177d0:	4690      	mov	r8, r2
 80177d2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80177d6:	69a0      	ldr	r0, [r4, #24]
 80177d8:	6806      	ldr	r6, [r0, #0]
 80177da:	9501      	str	r5, [sp, #4]
 80177dc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80177e0:	9500      	str	r5, [sp, #0]
 80177e2:	6835      	ldr	r5, [r6, #0]
 80177e4:	47a8      	blx	r5
 80177e6:	4d10      	ldr	r5, [pc, #64]	; (8017828 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80177e8:	4606      	mov	r6, r0
 80177ea:	f8a5 9000 	strh.w	r9, [r5]
 80177ee:	f7ff ffdb 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 80177f2:	6803      	ldr	r3, [r0, #0]
 80177f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177f6:	4798      	blx	r3
 80177f8:	b128      	cbz	r0, 8017806 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80177fa:	2801      	cmp	r0, #1
 80177fc:	d00b      	beq.n	8017816 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80177fe:	4630      	mov	r0, r6
 8017800:	b005      	add	sp, #20
 8017802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017806:	882b      	ldrh	r3, [r5, #0]
 8017808:	fb08 7203 	mla	r2, r8, r3, r7
 801780c:	9b03      	ldr	r3, [sp, #12]
 801780e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017812:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017814:	e7f3      	b.n	80177fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017816:	882a      	ldrh	r2, [r5, #0]
 8017818:	9b03      	ldr	r3, [sp, #12]
 801781a:	fb08 7202 	mla	r2, r8, r2, r7
 801781e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017822:	1a9a      	subs	r2, r3, r2
 8017824:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017826:	e7ea      	b.n	80177fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017828:	20016e82 	.word	0x20016e82

0801782c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801782c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801782e:	b08b      	sub	sp, #44	; 0x2c
 8017830:	4617      	mov	r7, r2
 8017832:	4604      	mov	r4, r0
 8017834:	460e      	mov	r6, r1
 8017836:	461d      	mov	r5, r3
 8017838:	f7ff ffb6 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 801783c:	6803      	ldr	r3, [r0, #0]
 801783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017840:	4798      	blx	r3
 8017842:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017846:	9007      	str	r0, [sp, #28]
 8017848:	4631      	mov	r1, r6
 801784a:	6822      	ldr	r2, [r4, #0]
 801784c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017850:	4b0c      	ldr	r3, [pc, #48]	; (8017884 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017852:	4620      	mov	r0, r4
 8017854:	881b      	ldrh	r3, [r3, #0]
 8017856:	9306      	str	r3, [sp, #24]
 8017858:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801785c:	9305      	str	r3, [sp, #20]
 801785e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017862:	9304      	str	r3, [sp, #16]
 8017864:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017868:	9303      	str	r3, [sp, #12]
 801786a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801786e:	9302      	str	r3, [sp, #8]
 8017870:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017874:	e9cd 5300 	strd	r5, r3, [sp]
 8017878:	463b      	mov	r3, r7
 801787a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801787c:	2200      	movs	r2, #0
 801787e:	47a8      	blx	r5
 8017880:	b00b      	add	sp, #44	; 0x2c
 8017882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017884:	20016e82 	.word	0x20016e82

08017888 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801788c:	4698      	mov	r8, r3
 801788e:	6803      	ldr	r3, [r0, #0]
 8017890:	b08b      	sub	sp, #44	; 0x2c
 8017892:	4617      	mov	r7, r2
 8017894:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017896:	460e      	mov	r6, r1
 8017898:	4b13      	ldr	r3, [pc, #76]	; (80178e8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801789a:	4604      	mov	r4, r0
 801789c:	f8b3 9000 	ldrh.w	r9, [r3]
 80178a0:	f7ff ff82 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 80178a4:	6803      	ldr	r3, [r0, #0]
 80178a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178a8:	4798      	blx	r3
 80178aa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80178ae:	2200      	movs	r2, #0
 80178b0:	4631      	mov	r1, r6
 80178b2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80178b6:	2302      	movs	r3, #2
 80178b8:	4620      	mov	r0, r4
 80178ba:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80178be:	2301      	movs	r3, #1
 80178c0:	9305      	str	r3, [sp, #20]
 80178c2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80178c6:	9304      	str	r3, [sp, #16]
 80178c8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80178cc:	9303      	str	r3, [sp, #12]
 80178ce:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80178d2:	9302      	str	r3, [sp, #8]
 80178d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80178d8:	e9cd 8300 	strd	r8, r3, [sp]
 80178dc:	463b      	mov	r3, r7
 80178de:	47a8      	blx	r5
 80178e0:	b00b      	add	sp, #44	; 0x2c
 80178e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178e6:	bf00      	nop
 80178e8:	20016e82 	.word	0x20016e82

080178ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80178ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178f0:	4698      	mov	r8, r3
 80178f2:	6803      	ldr	r3, [r0, #0]
 80178f4:	b087      	sub	sp, #28
 80178f6:	460e      	mov	r6, r1
 80178f8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80178fa:	4617      	mov	r7, r2
 80178fc:	4b0f      	ldr	r3, [pc, #60]	; (801793c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80178fe:	4604      	mov	r4, r0
 8017900:	f8b3 9000 	ldrh.w	r9, [r3]
 8017904:	f7ff ff50 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 8017908:	6803      	ldr	r3, [r0, #0]
 801790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801790c:	4798      	blx	r3
 801790e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017912:	463a      	mov	r2, r7
 8017914:	4631      	mov	r1, r6
 8017916:	f8cd 900c 	str.w	r9, [sp, #12]
 801791a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801791e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017922:	4620      	mov	r0, r4
 8017924:	9302      	str	r3, [sp, #8]
 8017926:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801792a:	9301      	str	r3, [sp, #4]
 801792c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017930:	9300      	str	r3, [sp, #0]
 8017932:	4643      	mov	r3, r8
 8017934:	47a8      	blx	r5
 8017936:	b007      	add	sp, #28
 8017938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801793c:	20016e82 	.word	0x20016e82

08017940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017944:	4604      	mov	r4, r0
 8017946:	b08f      	sub	sp, #60	; 0x3c
 8017948:	4610      	mov	r0, r2
 801794a:	460d      	mov	r5, r1
 801794c:	4691      	mov	r9, r2
 801794e:	461e      	mov	r6, r3
 8017950:	f007 fb4a 	bl	801efe8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017954:	2800      	cmp	r0, #0
 8017956:	f000 809d 	beq.w	8017a94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801795a:	6823      	ldr	r3, [r4, #0]
 801795c:	4620      	mov	r0, r4
 801795e:	f8df b198 	ldr.w	fp, [pc, #408]	; 8017af8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017962:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017968:	4798      	blx	r3
 801796a:	6823      	ldr	r3, [r4, #0]
 801796c:	4620      	mov	r0, r4
 801796e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8017afc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8017972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017974:	4798      	blx	r3
 8017976:	f8bb 3000 	ldrh.w	r3, [fp]
 801797a:	4f5c      	ldr	r7, [pc, #368]	; (8017aec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801797c:	9301      	str	r3, [sp, #4]
 801797e:	f8ba 3000 	ldrh.w	r3, [sl]
 8017982:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017986:	4640      	mov	r0, r8
 8017988:	9302      	str	r3, [sp, #8]
 801798a:	883b      	ldrh	r3, [r7, #0]
 801798c:	9303      	str	r3, [sp, #12]
 801798e:	4b58      	ldr	r3, [pc, #352]	; (8017af0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017990:	881a      	ldrh	r2, [r3, #0]
 8017992:	9305      	str	r3, [sp, #20]
 8017994:	9204      	str	r2, [sp, #16]
 8017996:	f007 fbbb 	bl	801f110 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801799a:	8038      	strh	r0, [r7, #0]
 801799c:	4640      	mov	r0, r8
 801799e:	f007 fbeb 	bl	801f178 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80179a2:	9b05      	ldr	r3, [sp, #20]
 80179a4:	b280      	uxth	r0, r0
 80179a6:	8018      	strh	r0, [r3, #0]
 80179a8:	4b52      	ldr	r3, [pc, #328]	; (8017af4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d174      	bne.n	8017a9a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80179b0:	883b      	ldrh	r3, [r7, #0]
 80179b2:	f8aa 0000 	strh.w	r0, [sl]
 80179b6:	f8ab 3000 	strh.w	r3, [fp]
 80179ba:	4648      	mov	r0, r9
 80179bc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80179c0:	f007 fb12 	bl	801efe8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80179c4:	2200      	movs	r2, #0
 80179c6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80179ca:	4611      	mov	r1, r2
 80179cc:	4628      	mov	r0, r5
 80179ce:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80179d2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80179d6:	f7ec f836 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
 80179da:	2301      	movs	r3, #1
 80179dc:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80179e0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80179e4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	dd5c      	ble.n	8017aa6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80179ec:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	dd58      	ble.n	8017aa6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80179f4:	462a      	mov	r2, r5
 80179f6:	ab0a      	add	r3, sp, #40	; 0x28
 80179f8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80179fc:	6851      	ldr	r1, [r2, #4]
 80179fe:	c303      	stmia	r3!, {r0, r1}
 8017a00:	4631      	mov	r1, r6
 8017a02:	a80a      	add	r0, sp, #40	; 0x28
 8017a04:	f7ff fbf2 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8017a08:	4b38      	ldr	r3, [pc, #224]	; (8017aec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017a0a:	2100      	movs	r1, #0
 8017a0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a10:	4b37      	ldr	r3, [pc, #220]	; (8017af0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017a12:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017a16:	aa0a      	add	r2, sp, #40	; 0x28
 8017a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a1c:	910c      	str	r1, [sp, #48]	; 0x30
 8017a1e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017a22:	ab08      	add	r3, sp, #32
 8017a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a28:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	a90c      	add	r1, sp, #48	; 0x30
 8017a30:	f7ff fbdc 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8017a34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d13c      	bne.n	8017ab4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8017a3a:	2000      	movs	r0, #0
 8017a3c:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017a40:	2600      	movs	r6, #0
 8017a42:	696b      	ldr	r3, [r5, #20]
 8017a44:	a908      	add	r1, sp, #32
 8017a46:	682a      	ldr	r2, [r5, #0]
 8017a48:	4628      	mov	r0, r5
 8017a4a:	9305      	str	r3, [sp, #20]
 8017a4c:	616e      	str	r6, [r5, #20]
 8017a4e:	6892      	ldr	r2, [r2, #8]
 8017a50:	4790      	blx	r2
 8017a52:	9b05      	ldr	r3, [sp, #20]
 8017a54:	4652      	mov	r2, sl
 8017a56:	4649      	mov	r1, r9
 8017a58:	616b      	str	r3, [r5, #20]
 8017a5a:	4628      	mov	r0, r5
 8017a5c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017a60:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017a64:	f7eb ffef 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
 8017a68:	9a01      	ldr	r2, [sp, #4]
 8017a6a:	4b23      	ldr	r3, [pc, #140]	; (8017af8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	801a      	strh	r2, [r3, #0]
 8017a70:	9a02      	ldr	r2, [sp, #8]
 8017a72:	4b22      	ldr	r3, [pc, #136]	; (8017afc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017a74:	801a      	strh	r2, [r3, #0]
 8017a76:	9a03      	ldr	r2, [sp, #12]
 8017a78:	4b1c      	ldr	r3, [pc, #112]	; (8017aec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017a7a:	801a      	strh	r2, [r3, #0]
 8017a7c:	4b1c      	ldr	r3, [pc, #112]	; (8017af0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017a7e:	9a04      	ldr	r2, [sp, #16]
 8017a80:	801a      	strh	r2, [r3, #0]
 8017a82:	6823      	ldr	r3, [r4, #0]
 8017a84:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a8a:	4798      	blx	r3
 8017a8c:	6823      	ldr	r3, [r4, #0]
 8017a8e:	4620      	mov	r0, r4
 8017a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a92:	4798      	blx	r3
 8017a94:	b00f      	add	sp, #60	; 0x3c
 8017a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a9a:	883b      	ldrh	r3, [r7, #0]
 8017a9c:	f8ab 0000 	strh.w	r0, [fp]
 8017aa0:	f8aa 3000 	strh.w	r3, [sl]
 8017aa4:	e789      	b.n	80179ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8017aa6:	462a      	mov	r2, r5
 8017aa8:	ab0a      	add	r3, sp, #40	; 0x28
 8017aaa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017aae:	6851      	ldr	r1, [r2, #4]
 8017ab0:	c303      	stmia	r3!, {r0, r1}
 8017ab2:	e7a9      	b.n	8017a08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017ab4:	a807      	add	r0, sp, #28
 8017ab6:	f007 fc9b 	bl	801f3f0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017aba:	4606      	mov	r6, r0
 8017abc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017abe:	6803      	ldr	r3, [r0, #0]
 8017ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ac2:	4798      	blx	r3
 8017ac4:	4286      	cmp	r6, r0
 8017ac6:	d1b8      	bne.n	8017a3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017ac8:	f7ff fe6e 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 8017acc:	6803      	ldr	r3, [r0, #0]
 8017ace:	4606      	mov	r6, r0
 8017ad0:	a807      	add	r0, sp, #28
 8017ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ad4:	9305      	str	r3, [sp, #20]
 8017ad6:	f007 fc8b 	bl	801f3f0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017ada:	9b05      	ldr	r3, [sp, #20]
 8017adc:	4601      	mov	r1, r0
 8017ade:	4630      	mov	r0, r6
 8017ae0:	4798      	blx	r3
 8017ae2:	f080 0001 	eor.w	r0, r0, #1
 8017ae6:	b2c0      	uxtb	r0, r0
 8017ae8:	e7a8      	b.n	8017a3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8017aea:	bf00      	nop
 8017aec:	20016e7c 	.word	0x20016e7c
 8017af0:	20016e7e 	.word	0x20016e7e
 8017af4:	20016e80 	.word	0x20016e80
 8017af8:	20016e82 	.word	0x20016e82
 8017afc:	20016e84 	.word	0x20016e84

08017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017b00:	4b07      	ldr	r3, [pc, #28]	; (8017b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017b02:	b510      	push	{r4, lr}
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	4604      	mov	r4, r0
 8017b08:	b13b      	cbz	r3, 8017b1a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017b0a:	6803      	ldr	r3, [r0, #0]
 8017b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b0e:	4798      	blx	r3
 8017b10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017b12:	4283      	cmp	r3, r0
 8017b14:	d101      	bne.n	8017b1a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017b16:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017b18:	bd10      	pop	{r4, pc}
 8017b1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017b1c:	e7fc      	b.n	8017b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017b1e:	bf00      	nop
 8017b20:	20016e86 	.word	0x20016e86

08017b24 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b28:	461d      	mov	r5, r3
 8017b2a:	b08a      	sub	sp, #40	; 0x28
 8017b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b30:	4690      	mov	r8, r2
 8017b32:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017b36:	2400      	movs	r4, #0
 8017b38:	4607      	mov	r7, r0
 8017b3a:	fb06 8505 	mla	r5, r6, r5, r8
 8017b3e:	9404      	str	r4, [sp, #16]
 8017b40:	f88d 4020 	strb.w	r4, [sp, #32]
 8017b44:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017b48:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017b4c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017b50:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017b54:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017b58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017b5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017b60:	f7ff ffce 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017b64:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017b68:	6878      	ldr	r0, [r7, #4]
 8017b6a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017b6e:	a901      	add	r1, sp, #4
 8017b70:	9505      	str	r5, [sp, #20]
 8017b72:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017b76:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8017b7a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017b7e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017b82:	6803      	ldr	r3, [r0, #0]
 8017b84:	685b      	ldr	r3, [r3, #4]
 8017b86:	4798      	blx	r3
 8017b88:	b00a      	add	sp, #40	; 0x28
 8017b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017b8e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017b8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b92:	b08b      	sub	sp, #44	; 0x2c
 8017b94:	2400      	movs	r4, #0
 8017b96:	4691      	mov	r9, r2
 8017b98:	461d      	mov	r5, r3
 8017b9a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8017b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017ba2:	4688      	mov	r8, r1
 8017ba4:	4607      	mov	r7, r0
 8017ba6:	9404      	str	r4, [sp, #16]
 8017ba8:	fb06 9505 	mla	r5, r6, r5, r9
 8017bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017bb0:	f7ff ffa6 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017bb4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017bb8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017bc2:	a901      	add	r1, sp, #4
 8017bc4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017bc8:	9505      	str	r5, [sp, #20]
 8017bca:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017bce:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017bd2:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017bd6:	f8cd 8010 	str.w	r8, [sp, #16]
 8017bda:	f8ad 4020 	strh.w	r4, [sp, #32]
 8017bde:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017be2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017be6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017bea:	6803      	ldr	r3, [r0, #0]
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	4798      	blx	r3
 8017bf0:	b00b      	add	sp, #44	; 0x2c
 8017bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08017bf8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bfc:	b08a      	sub	sp, #40	; 0x28
 8017bfe:	4698      	mov	r8, r3
 8017c00:	2300      	movs	r3, #0
 8017c02:	4606      	mov	r6, r0
 8017c04:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8017c08:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8017c0c:	2d0b      	cmp	r5, #11
 8017c0e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8017c12:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8017c16:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8017c1a:	9304      	str	r3, [sp, #16]
 8017c1c:	d137      	bne.n	8017c8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8017c1e:	2380      	movs	r3, #128	; 0x80
 8017c20:	f88d 0020 	strb.w	r0, [sp, #32]
 8017c24:	4630      	mov	r0, r6
 8017c26:	9203      	str	r2, [sp, #12]
 8017c28:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017c2c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017c30:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017c34:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017c38:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017c3c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017c40:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017c44:	f7ff ff5c 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017c48:	2c0b      	cmp	r4, #11
 8017c4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017c4e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017c52:	bf94      	ite	ls
 8017c54:	4b19      	ldrls	r3, [pc, #100]	; (8017cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8017c56:	2100      	movhi	r1, #0
 8017c58:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8017c5c:	bf98      	it	ls
 8017c5e:	5d19      	ldrbls	r1, [r3, r4]
 8017c60:	fb02 8307 	mla	r3, r2, r7, r8
 8017c64:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017c68:	10c9      	asrs	r1, r1, #3
 8017c6a:	fb01 0003 	mla	r0, r1, r3, r0
 8017c6e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017c72:	a901      	add	r1, sp, #4
 8017c74:	9005      	str	r0, [sp, #20]
 8017c76:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	6870      	ldr	r0, [r6, #4]
 8017c7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017c82:	6803      	ldr	r3, [r0, #0]
 8017c84:	685b      	ldr	r3, [r3, #4]
 8017c86:	4798      	blx	r3
 8017c88:	b00a      	add	sp, #40	; 0x28
 8017c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c8e:	2d02      	cmp	r5, #2
 8017c90:	d109      	bne.n	8017ca6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8017c92:	28ff      	cmp	r0, #255	; 0xff
 8017c94:	d105      	bne.n	8017ca2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8017c96:	f1bc 0f00 	cmp.w	ip, #0
 8017c9a:	bf14      	ite	ne
 8017c9c:	2340      	movne	r3, #64	; 0x40
 8017c9e:	2320      	moveq	r3, #32
 8017ca0:	e7be      	b.n	8017c20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017ca2:	2340      	movs	r3, #64	; 0x40
 8017ca4:	e7bc      	b.n	8017c20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017ca6:	28ff      	cmp	r0, #255	; 0xff
 8017ca8:	d105      	bne.n	8017cb6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8017caa:	f1bc 0f00 	cmp.w	ip, #0
 8017cae:	bf14      	ite	ne
 8017cb0:	2304      	movne	r3, #4
 8017cb2:	2301      	moveq	r3, #1
 8017cb4:	e7b4      	b.n	8017c20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017cb6:	2304      	movs	r3, #4
 8017cb8:	e7b2      	b.n	8017c20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017cba:	bf00      	nop
 8017cbc:	08030f00 	.word	0x08030f00

08017cc0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8017cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc4:	b08b      	sub	sp, #44	; 0x2c
 8017cc6:	461d      	mov	r5, r3
 8017cc8:	2400      	movs	r4, #0
 8017cca:	4688      	mov	r8, r1
 8017ccc:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8017cd0:	4693      	mov	fp, r2
 8017cd2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8017cd6:	4607      	mov	r7, r0
 8017cd8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017cdc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8017ce0:	9404      	str	r4, [sp, #16]
 8017ce2:	bf14      	ite	ne
 8017ce4:	2308      	movne	r3, #8
 8017ce6:	2302      	moveq	r3, #2
 8017ce8:	fb05 b50a 	mla	r5, r5, sl, fp
 8017cec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017cf0:	f7ff ff06 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017cf4:	2e0b      	cmp	r6, #11
 8017cf6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017cfa:	a901      	add	r1, sp, #4
 8017cfc:	bf98      	it	ls
 8017cfe:	4b13      	ldrls	r3, [pc, #76]	; (8017d4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8017d00:	f8ad a01e 	strh.w	sl, [sp, #30]
 8017d04:	bf98      	it	ls
 8017d06:	5d9c      	ldrbls	r4, [r3, r6]
 8017d08:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017d0c:	10e4      	asrs	r4, r4, #3
 8017d0e:	f8cd 8010 	str.w	r8, [sp, #16]
 8017d12:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017d16:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017d1a:	fb04 0405 	mla	r4, r4, r5, r0
 8017d1e:	6878      	ldr	r0, [r7, #4]
 8017d20:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017d24:	2300      	movs	r3, #0
 8017d26:	9405      	str	r4, [sp, #20]
 8017d28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017d2c:	f88d 9020 	strb.w	r9, [sp, #32]
 8017d30:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8017d34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017d38:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8017d3c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8017d40:	6803      	ldr	r3, [r0, #0]
 8017d42:	685b      	ldr	r3, [r3, #4]
 8017d44:	4798      	blx	r3
 8017d46:	b00b      	add	sp, #44	; 0x2c
 8017d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4c:	08030f00 	.word	0x08030f00

08017d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d54:	461e      	mov	r6, r3
 8017d56:	4b0a      	ldr	r3, [pc, #40]	; (8017d80 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8017d58:	460f      	mov	r7, r1
 8017d5a:	4690      	mov	r8, r2
 8017d5c:	881d      	ldrh	r5, [r3, #0]
 8017d5e:	f7ff fd23 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 8017d62:	6803      	ldr	r3, [r0, #0]
 8017d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d66:	4798      	blx	r3
 8017d68:	280b      	cmp	r0, #11
 8017d6a:	bf96      	itet	ls
 8017d6c:	4b05      	ldrls	r3, [pc, #20]	; (8017d84 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017d6e:	2400      	movhi	r4, #0
 8017d70:	5c1c      	ldrbls	r4, [r3, r0]
 8017d72:	fb08 7005 	mla	r0, r8, r5, r7
 8017d76:	10e4      	asrs	r4, r4, #3
 8017d78:	fb04 6000 	mla	r0, r4, r0, r6
 8017d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d80:	20016e82 	.word	0x20016e82
 8017d84:	08030f00 	.word	0x08030f00

08017d88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d8a:	b08b      	sub	sp, #44	; 0x2c
 8017d8c:	461f      	mov	r7, r3
 8017d8e:	4604      	mov	r4, r0
 8017d90:	4616      	mov	r6, r2
 8017d92:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017d96:	2500      	movs	r5, #0
 8017d98:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017d9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017da0:	9504      	str	r5, [sp, #16]
 8017da2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017da6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017daa:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017dae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017db2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017db6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017dba:	f88d 3020 	strb.w	r3, [sp, #32]
 8017dbe:	f7ff fe9f 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017dc2:	463a      	mov	r2, r7
 8017dc4:	4631      	mov	r1, r6
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f7ff ffc1 	bl	8017d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017dce:	4b0e      	ldr	r3, [pc, #56]	; (8017e08 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8017dd0:	9005      	str	r0, [sp, #20]
 8017dd2:	881b      	ldrh	r3, [r3, #0]
 8017dd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017dd8:	f7ff fce6 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 8017ddc:	6803      	ldr	r3, [r0, #0]
 8017dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017de0:	4798      	blx	r3
 8017de2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017de4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8017de8:	a901      	add	r1, sp, #4
 8017dea:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017dee:	9304      	str	r3, [sp, #16]
 8017df0:	6860      	ldr	r0, [r4, #4]
 8017df2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017df6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8017dfa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017dfe:	6803      	ldr	r3, [r0, #0]
 8017e00:	685b      	ldr	r3, [r3, #4]
 8017e02:	4798      	blx	r3
 8017e04:	b00b      	add	sp, #44	; 0x2c
 8017e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e08:	20016e82 	.word	0x20016e82

08017e0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e0e:	b08d      	sub	sp, #52	; 0x34
 8017e10:	2501      	movs	r5, #1
 8017e12:	4604      	mov	r4, r0
 8017e14:	466b      	mov	r3, sp
 8017e16:	9503      	str	r5, [sp, #12]
 8017e18:	e883 0006 	stmia.w	r3, {r1, r2}
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	f8bd 6000 	ldrh.w	r6, [sp]
 8017e22:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017e26:	9306      	str	r3, [sp, #24]
 8017e28:	6803      	ldr	r3, [r0, #0]
 8017e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e2c:	4798      	blx	r3
 8017e2e:	463a      	mov	r2, r7
 8017e30:	4631      	mov	r1, r6
 8017e32:	4603      	mov	r3, r0
 8017e34:	4620      	mov	r0, r4
 8017e36:	f7ff ff8b 	bl	8017d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017e3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017e3c:	9004      	str	r0, [sp, #16]
 8017e3e:	9307      	str	r3, [sp, #28]
 8017e40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017e44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017e48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017e4c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017e50:	4b0e      	ldr	r3, [pc, #56]	; (8017e8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8017e52:	881b      	ldrh	r3, [r3, #0]
 8017e54:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017e58:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017e5c:	f7ff fca4 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 8017e60:	6803      	ldr	r3, [r0, #0]
 8017e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e64:	4798      	blx	r3
 8017e66:	23ff      	movs	r3, #255	; 0xff
 8017e68:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017e6c:	a903      	add	r1, sp, #12
 8017e6e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017e72:	6860      	ldr	r0, [r4, #4]
 8017e74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017e78:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017e7c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017e80:	6803      	ldr	r3, [r0, #0]
 8017e82:	685b      	ldr	r3, [r3, #4]
 8017e84:	4798      	blx	r3
 8017e86:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017e88:	b00d      	add	sp, #52	; 0x34
 8017e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e8c:	20016e82 	.word	0x20016e82

08017e90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e94:	b08c      	sub	sp, #48	; 0x30
 8017e96:	461e      	mov	r6, r3
 8017e98:	2300      	movs	r3, #0
 8017e9a:	4604      	mov	r4, r0
 8017e9c:	466d      	mov	r5, sp
 8017e9e:	9306      	str	r3, [sp, #24]
 8017ea0:	6803      	ldr	r3, [r0, #0]
 8017ea2:	e885 0006 	stmia.w	r5, {r1, r2}
 8017ea6:	2501      	movs	r5, #1
 8017ea8:	f8bd 7000 	ldrh.w	r7, [sp]
 8017eac:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8017eb0:	9503      	str	r5, [sp, #12]
 8017eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017eb4:	4798      	blx	r3
 8017eb6:	4642      	mov	r2, r8
 8017eb8:	4639      	mov	r1, r7
 8017eba:	4603      	mov	r3, r0
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	f7ff ff47 	bl	8017d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017ec2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017ec6:	9004      	str	r0, [sp, #16]
 8017ec8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017ecc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017ed0:	9607      	str	r6, [sp, #28]
 8017ed2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017ed6:	4b10      	ldr	r3, [pc, #64]	; (8017f18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8017ed8:	881b      	ldrh	r3, [r3, #0]
 8017eda:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ee0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017ee4:	f7ff fc60 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 8017ee8:	6803      	ldr	r3, [r0, #0]
 8017eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eec:	4798      	blx	r3
 8017eee:	23ff      	movs	r3, #255	; 0xff
 8017ef0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017ef4:	a903      	add	r1, sp, #12
 8017ef6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017efa:	6860      	ldr	r0, [r4, #4]
 8017efc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017f00:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017f04:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017f08:	6803      	ldr	r3, [r0, #0]
 8017f0a:	685b      	ldr	r3, [r3, #4]
 8017f0c:	4798      	blx	r3
 8017f0e:	4630      	mov	r0, r6
 8017f10:	b00c      	add	sp, #48	; 0x30
 8017f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f16:	bf00      	nop
 8017f18:	20016e82 	.word	0x20016e82

08017f1c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8017f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f1e:	b085      	sub	sp, #20
 8017f20:	4605      	mov	r5, r0
 8017f22:	ac02      	add	r4, sp, #8
 8017f24:	e884 0006 	stmia.w	r4, {r1, r2}
 8017f28:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8017f2c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017f30:	f7ff fde6 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f34:	4631      	mov	r1, r6
 8017f36:	4603      	mov	r3, r0
 8017f38:	463a      	mov	r2, r7
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	f7ff ff08 	bl	8017d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017f40:	4a05      	ldr	r2, [pc, #20]	; (8017f58 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8017f42:	682b      	ldr	r3, [r5, #0]
 8017f44:	8812      	ldrh	r2, [r2, #0]
 8017f46:	9200      	str	r2, [sp, #0]
 8017f48:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017f52:	47b0      	blx	r6
 8017f54:	b005      	add	sp, #20
 8017f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f58:	20016e82 	.word	0x20016e82

08017f5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017f5c:	b570      	push	{r4, r5, r6, lr}
 8017f5e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8017f62:	4604      	mov	r4, r0
 8017f64:	b19b      	cbz	r3, 8017f8e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017f66:	2002      	movs	r0, #2
 8017f68:	f7e9 fe82 	bl	8001c70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	4620      	mov	r0, r4
 8017f70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017f74:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017f78:	6823      	ldr	r3, [r4, #0]
 8017f7a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017f7e:	f7ff fdbf 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f82:	4601      	mov	r1, r0
 8017f84:	4620      	mov	r0, r4
 8017f86:	462b      	mov	r3, r5
 8017f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f8c:	4718      	bx	r3
 8017f8e:	bd70      	pop	{r4, r5, r6, pc}

08017f90 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8017f90:	b570      	push	{r4, r5, r6, lr}
 8017f92:	4605      	mov	r5, r0
 8017f94:	460c      	mov	r4, r1
 8017f96:	2003      	movs	r0, #3
 8017f98:	b149      	cbz	r1, 8017fae <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8017f9a:	f7e9 fe09 	bl	8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017f9e:	6928      	ldr	r0, [r5, #16]
 8017fa0:	b168      	cbz	r0, 8017fbe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017fa2:	6803      	ldr	r3, [r0, #0]
 8017fa4:	2101      	movs	r1, #1
 8017fa6:	695b      	ldr	r3, [r3, #20]
 8017fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fac:	4718      	bx	r3
 8017fae:	f7e9 fe2f 	bl	8001c10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017fb2:	6928      	ldr	r0, [r5, #16]
 8017fb4:	b118      	cbz	r0, 8017fbe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017fb6:	6803      	ldr	r3, [r0, #0]
 8017fb8:	4621      	mov	r1, r4
 8017fba:	695b      	ldr	r3, [r3, #20]
 8017fbc:	e7f4      	b.n	8017fa8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8017fbe:	bd70      	pop	{r4, r5, r6, pc}

08017fc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017fc0:	b538      	push	{r3, r4, r5, lr}
 8017fc2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8017fc6:	4604      	mov	r4, r0
 8017fc8:	460d      	mov	r5, r1
 8017fca:	428b      	cmp	r3, r1
 8017fcc:	d006      	beq.n	8017fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8017fce:	6803      	ldr	r3, [r0, #0]
 8017fd0:	b929      	cbnz	r1, 8017fde <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8017fd2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017fd6:	4798      	blx	r3
 8017fd8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8017fdc:	bd38      	pop	{r3, r4, r5, pc}
 8017fde:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017fe2:	e7f8      	b.n	8017fd6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08017fe4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017fe4:	4b0d      	ldr	r3, [pc, #52]	; (801801c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017fe6:	b510      	push	{r4, lr}
 8017fe8:	781b      	ldrb	r3, [r3, #0]
 8017fea:	4604      	mov	r4, r0
 8017fec:	b95b      	cbnz	r3, 8018006 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017fee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017ff2:	2b02      	cmp	r3, #2
 8017ff4:	d007      	beq.n	8018006 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017ff6:	6840      	ldr	r0, [r0, #4]
 8017ff8:	f000 f92a 	bl	8018250 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017ffc:	b118      	cbz	r0, 8018006 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017ffe:	6862      	ldr	r2, [r4, #4]
 8018000:	7a53      	ldrb	r3, [r2, #9]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d0fc      	beq.n	8018000 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018006:	f7e9 ffb7 	bl	8001f78 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801800a:	4620      	mov	r0, r4
 801800c:	2100      	movs	r1, #0
 801800e:	f7ff ffd7 	bl	8017fc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018012:	4620      	mov	r0, r4
 8018014:	f7ff fd74 	bl	8017b00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018018:	bd10      	pop	{r4, pc}
 801801a:	bf00      	nop
 801801c:	20016e86 	.word	0x20016e86

08018020 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8018020:	b570      	push	{r4, r5, r6, lr}
 8018022:	4604      	mov	r4, r0
 8018024:	6803      	ldr	r3, [r0, #0]
 8018026:	b919      	cbnz	r1, 8018030 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8018028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801802a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801802e:	4718      	bx	r3
 8018030:	2200      	movs	r2, #0
 8018032:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8018036:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 801803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801803c:	4798      	blx	r3
 801803e:	4605      	mov	r5, r0
 8018040:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8018044:	4620      	mov	r0, r4
 8018046:	2101      	movs	r1, #1
 8018048:	f7ff ffba 	bl	8017fc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801804c:	4628      	mov	r0, r5
 801804e:	bd70      	pop	{r4, r5, r6, pc}

08018050 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018050:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018054:	1a13      	subs	r3, r2, r0
 8018056:	4258      	negs	r0, r3
 8018058:	4158      	adcs	r0, r3
 801805a:	4770      	bx	lr

0801805c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801805c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018060:	1a9b      	subs	r3, r3, r2
 8018062:	2b00      	cmp	r3, #0
 8018064:	bfdc      	itt	le
 8018066:	6882      	ldrle	r2, [r0, #8]
 8018068:	189b      	addle	r3, r3, r2
 801806a:	2b01      	cmp	r3, #1
 801806c:	bfcc      	ite	gt
 801806e:	2000      	movgt	r0, #0
 8018070:	2001      	movle	r0, #1
 8018072:	4770      	bx	lr

08018074 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018074:	6902      	ldr	r2, [r0, #16]
 8018076:	6843      	ldr	r3, [r0, #4]
 8018078:	2024      	movs	r0, #36	; 0x24
 801807a:	fb00 3002 	mla	r0, r0, r2, r3
 801807e:	4770      	bx	lr

08018080 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018080:	6803      	ldr	r3, [r0, #0]
 8018082:	691b      	ldr	r3, [r3, #16]
 8018084:	4718      	bx	r3

08018086 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018086:	2301      	movs	r3, #1
 8018088:	b570      	push	{r4, r5, r6, lr}
 801808a:	7203      	strb	r3, [r0, #8]
 801808c:	4604      	mov	r4, r0
 801808e:	6840      	ldr	r0, [r0, #4]
 8018090:	6803      	ldr	r3, [r0, #0]
 8018092:	699b      	ldr	r3, [r3, #24]
 8018094:	4798      	blx	r3
 8018096:	6803      	ldr	r3, [r0, #0]
 8018098:	4605      	mov	r5, r0
 801809a:	2b40      	cmp	r3, #64	; 0x40
 801809c:	d00c      	beq.n	80180b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801809e:	d810      	bhi.n	80180c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80180a0:	2b04      	cmp	r3, #4
 80180a2:	d01d      	beq.n	80180e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80180a4:	d804      	bhi.n	80180b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80180a6:	2b01      	cmp	r3, #1
 80180a8:	d006      	beq.n	80180b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80180aa:	2b02      	cmp	r3, #2
 80180ac:	d02c      	beq.n	8018108 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80180ae:	bd70      	pop	{r4, r5, r6, pc}
 80180b0:	2b08      	cmp	r3, #8
 80180b2:	d01d      	beq.n	80180f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80180b4:	2b20      	cmp	r3, #32
 80180b6:	d1fa      	bne.n	80180ae <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80180b8:	6823      	ldr	r3, [r4, #0]
 80180ba:	4620      	mov	r0, r4
 80180bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180be:	4798      	blx	r3
 80180c0:	e013      	b.n	80180ea <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80180c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180c6:	d0f7      	beq.n	80180b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80180c8:	d804      	bhi.n	80180d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80180ca:	2b80      	cmp	r3, #128	; 0x80
 80180cc:	d0f4      	beq.n	80180b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80180ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80180d2:	e7f0      	b.n	80180b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80180d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80180d8:	d0ee      	beq.n	80180b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80180da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80180de:	e7e5      	b.n	80180ac <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80180e0:	6823      	ldr	r3, [r4, #0]
 80180e2:	7f01      	ldrb	r1, [r0, #28]
 80180e4:	4620      	mov	r0, r4
 80180e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180e8:	4798      	blx	r3
 80180ea:	6823      	ldr	r3, [r4, #0]
 80180ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ee:	e006      	b.n	80180fe <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80180f0:	6823      	ldr	r3, [r4, #0]
 80180f2:	7f01      	ldrb	r1, [r0, #28]
 80180f4:	4620      	mov	r0, r4
 80180f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180f8:	4798      	blx	r3
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180fe:	4629      	mov	r1, r5
 8018100:	4620      	mov	r0, r4
 8018102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018106:	4718      	bx	r3
 8018108:	6823      	ldr	r3, [r4, #0]
 801810a:	4620      	mov	r0, r4
 801810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801810e:	4798      	blx	r3
 8018110:	e7f3      	b.n	80180fa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08018112 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018112:	4770      	bx	lr

08018114 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018114:	4770      	bx	lr

08018116 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8018116:	4770      	bx	lr

08018118 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018118:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801811c:	b510      	push	{r4, lr}
 801811e:	1ad2      	subs	r2, r2, r3
 8018120:	2a00      	cmp	r2, #0
 8018122:	bfdc      	itt	le
 8018124:	6884      	ldrle	r4, [r0, #8]
 8018126:	1912      	addle	r2, r2, r4
 8018128:	2a01      	cmp	r2, #1
 801812a:	dd16      	ble.n	801815a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801812c:	6842      	ldr	r2, [r0, #4]
 801812e:	2424      	movs	r4, #36	; 0x24
 8018130:	fb04 2303 	mla	r3, r4, r3, r2
 8018134:	f101 0220 	add.w	r2, r1, #32
 8018138:	f851 4b04 	ldr.w	r4, [r1], #4
 801813c:	4291      	cmp	r1, r2
 801813e:	f843 4b04 	str.w	r4, [r3], #4
 8018142:	d1f9      	bne.n	8018138 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8018144:	780a      	ldrb	r2, [r1, #0]
 8018146:	701a      	strb	r2, [r3, #0]
 8018148:	68c3      	ldr	r3, [r0, #12]
 801814a:	6882      	ldr	r2, [r0, #8]
 801814c:	f3bf 8f5b 	dmb	ish
 8018150:	3301      	adds	r3, #1
 8018152:	429a      	cmp	r2, r3
 8018154:	bfd8      	it	le
 8018156:	1a9b      	suble	r3, r3, r2
 8018158:	60c3      	str	r3, [r0, #12]
 801815a:	bd10      	pop	{r4, pc}

0801815c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801815c:	6903      	ldr	r3, [r0, #16]
 801815e:	6882      	ldr	r2, [r0, #8]
 8018160:	f3bf 8f5b 	dmb	ish
 8018164:	3301      	adds	r3, #1
 8018166:	429a      	cmp	r2, r3
 8018168:	bfd8      	it	le
 801816a:	1a9b      	suble	r3, r3, r2
 801816c:	6103      	str	r3, [r0, #16]
 801816e:	4770      	bx	lr

08018170 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018170:	b570      	push	{r4, r5, r6, lr}
 8018172:	4604      	mov	r4, r0
 8018174:	460e      	mov	r6, r1
 8018176:	6860      	ldr	r0, [r4, #4]
 8018178:	6803      	ldr	r3, [r0, #0]
 801817a:	685b      	ldr	r3, [r3, #4]
 801817c:	4798      	blx	r3
 801817e:	2800      	cmp	r0, #0
 8018180:	d1f9      	bne.n	8018176 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018182:	4d0d      	ldr	r5, [pc, #52]	; (80181b8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018184:	6828      	ldr	r0, [r5, #0]
 8018186:	6803      	ldr	r3, [r0, #0]
 8018188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801818a:	4798      	blx	r3
 801818c:	f7e9 ff02 	bl	8001f94 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018190:	6828      	ldr	r0, [r5, #0]
 8018192:	2101      	movs	r1, #1
 8018194:	f7ff ff14 	bl	8017fc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018198:	6860      	ldr	r0, [r4, #4]
 801819a:	4631      	mov	r1, r6
 801819c:	6803      	ldr	r3, [r0, #0]
 801819e:	689b      	ldr	r3, [r3, #8]
 80181a0:	4798      	blx	r3
 80181a2:	6823      	ldr	r3, [r4, #0]
 80181a4:	4620      	mov	r0, r4
 80181a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181a8:	4798      	blx	r3
 80181aa:	6828      	ldr	r0, [r5, #0]
 80181ac:	6803      	ldr	r3, [r0, #0]
 80181ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80181b4:	4718      	bx	r3
 80181b6:	bf00      	nop
 80181b8:	20016e88 	.word	0x20016e88

080181bc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80181bc:	b508      	push	{r3, lr}
 80181be:	f7e9 fedb 	bl	8001f78 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80181c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80181c6:	f7e9 bedf 	b.w	8001f88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080181ca <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80181ca:	b510      	push	{r4, lr}
 80181cc:	4604      	mov	r4, r0
 80181ce:	2114      	movs	r1, #20
 80181d0:	f013 f8a3 	bl	802b31a <_ZdlPvj>
 80181d4:	4620      	mov	r0, r4
 80181d6:	bd10      	pop	{r4, pc}

080181d8 <_ZN8touchgfx13DMA_Interface5startEv>:
 80181d8:	b510      	push	{r4, lr}
 80181da:	4604      	mov	r4, r0
 80181dc:	6840      	ldr	r0, [r0, #4]
 80181de:	6803      	ldr	r3, [r0, #0]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	4798      	blx	r3
 80181e4:	b948      	cbnz	r0, 80181fa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80181e6:	7a63      	ldrb	r3, [r4, #9]
 80181e8:	b13b      	cbz	r3, 80181fa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80181ea:	7a23      	ldrb	r3, [r4, #8]
 80181ec:	b92b      	cbnz	r3, 80181fa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	4620      	mov	r0, r4
 80181f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181f8:	4718      	bx	r3
 80181fa:	bd10      	pop	{r4, pc}

080181fc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80181fc:	b570      	push	{r4, r5, r6, lr}
 80181fe:	4604      	mov	r4, r0
 8018200:	6840      	ldr	r0, [r0, #4]
 8018202:	6803      	ldr	r3, [r0, #0]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	4798      	blx	r3
 8018208:	4605      	mov	r5, r0
 801820a:	b930      	cbnz	r0, 801821a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801820c:	7a23      	ldrb	r3, [r4, #8]
 801820e:	b123      	cbz	r3, 801821a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018210:	6860      	ldr	r0, [r4, #4]
 8018212:	6803      	ldr	r3, [r0, #0]
 8018214:	695b      	ldr	r3, [r3, #20]
 8018216:	4798      	blx	r3
 8018218:	7225      	strb	r5, [r4, #8]
 801821a:	6860      	ldr	r0, [r4, #4]
 801821c:	6803      	ldr	r3, [r0, #0]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	4798      	blx	r3
 8018222:	b928      	cbnz	r0, 8018230 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018224:	6823      	ldr	r3, [r4, #0]
 8018226:	4620      	mov	r0, r4
 8018228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801822a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801822e:	4718      	bx	r3
 8018230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018234:	f7e9 beb6 	b.w	8001fa4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018238 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018238:	b510      	push	{r4, lr}
 801823a:	6082      	str	r2, [r0, #8]
 801823c:	2200      	movs	r2, #0
 801823e:	4c03      	ldr	r4, [pc, #12]	; (801824c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018240:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018244:	e9c0 4100 	strd	r4, r1, [r0]
 8018248:	bd10      	pop	{r4, pc}
 801824a:	bf00      	nop
 801824c:	08030f14 	.word	0x08030f14

08018250 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018250:	6840      	ldr	r0, [r0, #4]
 8018252:	6803      	ldr	r3, [r0, #0]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4718      	bx	r3

08018258 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8018258:	094a      	lsrs	r2, r1, #5
 801825a:	4b06      	ldr	r3, [pc, #24]	; (8018274 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 801825c:	60c1      	str	r1, [r0, #12]
 801825e:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8018262:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018266:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801826a:	4313      	orrs	r3, r2
 801826c:	4319      	orrs	r1, r3
 801826e:	8201      	strh	r1, [r0, #16]
 8018270:	4770      	bx	lr
 8018272:	bf00      	nop
 8018274:	fffff800 	.word	0xfffff800

08018278 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8018278:	f1a0 0008 	sub.w	r0, r0, #8
 801827c:	e7ec      	b.n	8018258 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 801827e:	bf00      	nop

08018280 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8018280:	b508      	push	{r3, lr}
 8018282:	4b05      	ldr	r3, [pc, #20]	; (8018298 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8018284:	6818      	ldr	r0, [r3, #0]
 8018286:	6803      	ldr	r3, [r0, #0]
 8018288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801828c:	4798      	blx	r3
 801828e:	1e43      	subs	r3, r0, #1
 8018290:	4258      	negs	r0, r3
 8018292:	4158      	adcs	r0, r3
 8018294:	bd08      	pop	{r3, pc}
 8018296:	bf00      	nop
 8018298:	20016e88 	.word	0x20016e88

0801829c <_ZN8touchgfx13PainterRGB565D1Ev>:
 801829c:	4770      	bx	lr

0801829e <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 801829e:	3808      	subs	r0, #8
 80182a0:	4770      	bx	lr

080182a2 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 80182a2:	b430      	push	{r4, r5}
 80182a4:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 80182a8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80182ac:	8a02      	ldrh	r2, [r0, #16]
 80182ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80182b2:	4629      	mov	r1, r5
 80182b4:	9202      	str	r2, [sp, #8]
 80182b6:	68c2      	ldr	r2, [r0, #12]
 80182b8:	4620      	mov	r0, r4
 80182ba:	bc30      	pop	{r4, r5}
 80182bc:	f7ea b82e 	b.w	800231c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

080182c0 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 80182c0:	f7ea b822 	b.w	8002308 <_ZN8touchgfx5paint8tearDownEv>

080182c4 <_ZN8touchgfx13PainterRGB565D0Ev>:
 80182c4:	b510      	push	{r4, lr}
 80182c6:	4604      	mov	r4, r0
 80182c8:	2114      	movs	r1, #20
 80182ca:	f013 f826 	bl	802b31a <_ZdlPvj>
 80182ce:	4620      	mov	r0, r4
 80182d0:	bd10      	pop	{r4, pc}

080182d2 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 80182d2:	f1a0 0008 	sub.w	r0, r0, #8
 80182d6:	e7f5      	b.n	80182c4 <_ZN8touchgfx13PainterRGB565D0Ev>

080182d8 <_ZN8touchgfx6CircleD1Ev>:
 80182d8:	4770      	bx	lr

080182da <_ZN8touchgfx6CircleD0Ev>:
 80182da:	b510      	push	{r4, lr}
 80182dc:	4604      	mov	r4, r0
 80182de:	2148      	movs	r1, #72	; 0x48
 80182e0:	f013 f81b 	bl	802b31a <_ZdlPvj>
 80182e4:	4620      	mov	r0, r4
 80182e6:	bd10      	pop	{r4, pc}

080182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80182e8:	b507      	push	{r0, r1, r2, lr}
 80182ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80182ee:	ab01      	add	r3, sp, #4
 80182f0:	6809      	ldr	r1, [r1, #0]
 80182f2:	6800      	ldr	r0, [r0, #0]
 80182f4:	f005 f813 	bl	801d31e <_ZN8touchgfx6muldivElllRl>
 80182f8:	b003      	add	sp, #12
 80182fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018300 <_ZN8touchgfx7CWRUtil4sineEi>:
 8018300:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8018304:	fb90 f2f3 	sdiv	r2, r0, r3
 8018308:	fb02 0013 	mls	r0, r2, r3, r0
 801830c:	2800      	cmp	r0, #0
 801830e:	bfb8      	it	lt
 8018310:	18c0      	addlt	r0, r0, r3
 8018312:	4b0a      	ldr	r3, [pc, #40]	; (801833c <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8018314:	285a      	cmp	r0, #90	; 0x5a
 8018316:	dc02      	bgt.n	801831e <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8018318:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801831c:	4770      	bx	lr
 801831e:	28b4      	cmp	r0, #180	; 0xb4
 8018320:	dc02      	bgt.n	8018328 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8018322:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8018326:	e7f7      	b.n	8018318 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8018328:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801832c:	bfd4      	ite	le
 801832e:	38b4      	suble	r0, #180	; 0xb4
 8018330:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8018334:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018338:	4240      	negs	r0, r0
 801833a:	4770      	bx	lr
 801833c:	08030f68 	.word	0x08030f68

08018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8018340:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8018344:	fb90 f2f3 	sdiv	r2, r0, r3
 8018348:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801834a:	fb02 0013 	mls	r0, r2, r3, r0
 801834e:	2800      	cmp	r0, #0
 8018350:	bfb8      	it	lt
 8018352:	18c0      	addlt	r0, r0, r3
 8018354:	1144      	asrs	r4, r0, #5
 8018356:	f000 061f 	and.w	r6, r0, #31
 801835a:	4620      	mov	r0, r4
 801835c:	f7ff ffd0 	bl	8018300 <_ZN8touchgfx7CWRUtil4sineEi>
 8018360:	4605      	mov	r5, r0
 8018362:	b90e      	cbnz	r6, 8018368 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8018364:	b002      	add	sp, #8
 8018366:	bd70      	pop	{r4, r5, r6, pc}
 8018368:	1c60      	adds	r0, r4, #1
 801836a:	f7ff ffc9 	bl	8018300 <_ZN8touchgfx7CWRUtil4sineEi>
 801836e:	ab01      	add	r3, sp, #4
 8018370:	2220      	movs	r2, #32
 8018372:	4631      	mov	r1, r6
 8018374:	1b40      	subs	r0, r0, r5
 8018376:	f004 ffd2 	bl	801d31e <_ZN8touchgfx6muldivElllRl>
 801837a:	4428      	add	r0, r5
 801837c:	e7f2      	b.n	8018364 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

0801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801837e:	b508      	push	{r3, lr}
 8018380:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8018384:	f7ff ffdc 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018388:	bd08      	pop	{r3, pc}
	...

0801838c <_ZN8touchgfx6CircleC1Ev>:
 801838c:	b510      	push	{r4, lr}
 801838e:	4604      	mov	r4, r0
 8018390:	f000 fd66 	bl	8018e60 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018394:	4b08      	ldr	r3, [pc, #32]	; (80183b8 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8018396:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801839a:	4620      	mov	r0, r4
 801839c:	6023      	str	r3, [r4, #0]
 801839e:	2300      	movs	r3, #0
 80183a0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 80183a4:	f24b 4205 	movw	r2, #46085	; 0xb405
 80183a8:	60a3      	str	r3, [r4, #8]
 80183aa:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80183ae:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80183b2:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 80183b6:	bd10      	pop	{r4, pc}
 80183b8:	08031028 	.word	0x08031028

080183bc <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 80183bc:	29b4      	cmp	r1, #180	; 0xb4
 80183be:	bfa8      	it	ge
 80183c0:	21b4      	movge	r1, #180	; 0xb4
 80183c2:	2901      	cmp	r1, #1
 80183c4:	bfb8      	it	lt
 80183c6:	2101      	movlt	r1, #1
 80183c8:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
 80183cc:	4770      	bx	lr

080183ce <_ZNK8touchgfx6Circle15getCapPrecisionEv>:
 80183ce:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 80183d2:	4770      	bx	lr

080183d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80183d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d8:	428a      	cmp	r2, r1
 80183da:	4680      	mov	r8, r0
 80183dc:	4610      	mov	r0, r2
 80183de:	4699      	mov	r9, r3
 80183e0:	bfaa      	itet	ge
 80183e2:	460a      	movge	r2, r1
 80183e4:	460b      	movlt	r3, r1
 80183e6:	4603      	movge	r3, r0
 80183e8:	b085      	sub	sp, #20
 80183ea:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 80183ee:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 80183f2:	1a99      	subs	r1, r3, r2
 80183f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80183f6:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 80183fa:	bfa4      	itt	ge
 80183fc:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018400:	2200      	movge	r2, #0
 8018402:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 8018406:	9300      	str	r3, [sp, #0]
 8018408:	f102 0b01 	add.w	fp, r2, #1
 801840c:	2c00      	cmp	r4, #0
 801840e:	f040 80ae 	bne.w	801856e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 8018412:	4610      	mov	r0, r2
 8018414:	9201      	str	r2, [sp, #4]
 8018416:	f7ff ff93 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801841a:	a903      	add	r1, sp, #12
 801841c:	9003      	str	r0, [sp, #12]
 801841e:	4650      	mov	r0, sl
 8018420:	f7ff ff62 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018424:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8018428:	9a01      	ldr	r2, [sp, #4]
 801842a:	4408      	add	r0, r1
 801842c:	f8d9 1000 	ldr.w	r1, [r9]
 8018430:	4281      	cmp	r1, r0
 8018432:	bfc8      	it	gt
 8018434:	f8c9 0000 	strgt.w	r0, [r9]
 8018438:	6839      	ldr	r1, [r7, #0]
 801843a:	4288      	cmp	r0, r1
 801843c:	bfc8      	it	gt
 801843e:	6038      	strgt	r0, [r7, #0]
 8018440:	4610      	mov	r0, r2
 8018442:	f7ff ff9c 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018446:	a903      	add	r1, sp, #12
 8018448:	9003      	str	r0, [sp, #12]
 801844a:	4650      	mov	r0, sl
 801844c:	f7ff ff4c 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018450:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8018454:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8018458:	1a10      	subs	r0, r2, r0
 801845a:	6832      	ldr	r2, [r6, #0]
 801845c:	4282      	cmp	r2, r0
 801845e:	bfc8      	it	gt
 8018460:	6030      	strgt	r0, [r6, #0]
 8018462:	682a      	ldr	r2, [r5, #0]
 8018464:	4290      	cmp	r0, r2
 8018466:	fb9b f2f1 	sdiv	r2, fp, r1
 801846a:	fb01 b212 	mls	r2, r1, r2, fp
 801846e:	bfc8      	it	gt
 8018470:	6028      	strgt	r0, [r5, #0]
 8018472:	1a8a      	subs	r2, r1, r2
 8018474:	fb92 f0f1 	sdiv	r0, r2, r1
 8018478:	fb01 2210 	mls	r2, r1, r0, r2
 801847c:	4493      	add	fp, r2
 801847e:	9b00      	ldr	r3, [sp, #0]
 8018480:	455b      	cmp	r3, fp
 8018482:	db2a      	blt.n	80184da <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 8018484:	4658      	mov	r0, fp
 8018486:	f7ff ff5b 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801848a:	a903      	add	r1, sp, #12
 801848c:	9003      	str	r0, [sp, #12]
 801848e:	4650      	mov	r0, sl
 8018490:	f7ff ff2a 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018494:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8018498:	4410      	add	r0, r2
 801849a:	f8d9 2000 	ldr.w	r2, [r9]
 801849e:	4282      	cmp	r2, r0
 80184a0:	bfc8      	it	gt
 80184a2:	f8c9 0000 	strgt.w	r0, [r9]
 80184a6:	683a      	ldr	r2, [r7, #0]
 80184a8:	4290      	cmp	r0, r2
 80184aa:	bfc8      	it	gt
 80184ac:	6038      	strgt	r0, [r7, #0]
 80184ae:	4658      	mov	r0, fp
 80184b0:	f7ff ff65 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80184b4:	a903      	add	r1, sp, #12
 80184b6:	9003      	str	r0, [sp, #12]
 80184b8:	4650      	mov	r0, sl
 80184ba:	f7ff ff15 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80184be:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80184c2:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 80184c6:	1a10      	subs	r0, r2, r0
 80184c8:	6832      	ldr	r2, [r6, #0]
 80184ca:	4282      	cmp	r2, r0
 80184cc:	bfc8      	it	gt
 80184ce:	6030      	strgt	r0, [r6, #0]
 80184d0:	682a      	ldr	r2, [r5, #0]
 80184d2:	4290      	cmp	r0, r2
 80184d4:	bfc8      	it	gt
 80184d6:	6028      	strgt	r0, [r5, #0]
 80184d8:	e7d1      	b.n	801847e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 80184da:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80184de:	9b00      	ldr	r3, [sp, #0]
 80184e0:	455b      	cmp	r3, fp
 80184e2:	dd27      	ble.n	8018534 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 80184e4:	4618      	mov	r0, r3
 80184e6:	f7ff ff2b 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80184ea:	a903      	add	r1, sp, #12
 80184ec:	9003      	str	r0, [sp, #12]
 80184ee:	4650      	mov	r0, sl
 80184f0:	f7ff fefa 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80184f4:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80184f8:	4410      	add	r0, r2
 80184fa:	f8d9 2000 	ldr.w	r2, [r9]
 80184fe:	4282      	cmp	r2, r0
 8018500:	bfc8      	it	gt
 8018502:	f8c9 0000 	strgt.w	r0, [r9]
 8018506:	683a      	ldr	r2, [r7, #0]
 8018508:	4290      	cmp	r0, r2
 801850a:	bfc8      	it	gt
 801850c:	6038      	strgt	r0, [r7, #0]
 801850e:	9800      	ldr	r0, [sp, #0]
 8018510:	f7ff ff35 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018514:	a903      	add	r1, sp, #12
 8018516:	9003      	str	r0, [sp, #12]
 8018518:	4650      	mov	r0, sl
 801851a:	f7ff fee5 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801851e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8018522:	1a10      	subs	r0, r2, r0
 8018524:	6832      	ldr	r2, [r6, #0]
 8018526:	4282      	cmp	r2, r0
 8018528:	bfc8      	it	gt
 801852a:	6030      	strgt	r0, [r6, #0]
 801852c:	682a      	ldr	r2, [r5, #0]
 801852e:	4290      	cmp	r0, r2
 8018530:	bfc8      	it	gt
 8018532:	6028      	strgt	r0, [r5, #0]
 8018534:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8018538:	f8d9 1000 	ldr.w	r1, [r9]
 801853c:	4291      	cmp	r1, r2
 801853e:	bfc8      	it	gt
 8018540:	f8c9 2000 	strgt.w	r2, [r9]
 8018544:	683a      	ldr	r2, [r7, #0]
 8018546:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 801854a:	429a      	cmp	r2, r3
 801854c:	bfb8      	it	lt
 801854e:	603b      	strlt	r3, [r7, #0]
 8018550:	6832      	ldr	r2, [r6, #0]
 8018552:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8018556:	429a      	cmp	r2, r3
 8018558:	bfc8      	it	gt
 801855a:	6033      	strgt	r3, [r6, #0]
 801855c:	682a      	ldr	r2, [r5, #0]
 801855e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8018562:	429a      	cmp	r2, r3
 8018564:	da00      	bge.n	8018568 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8018566:	602b      	str	r3, [r5, #0]
 8018568:	b005      	add	sp, #20
 801856a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801856e:	2002      	movs	r0, #2
 8018570:	3401      	adds	r4, #1
 8018572:	9201      	str	r2, [sp, #4]
 8018574:	fb94 f4f0 	sdiv	r4, r4, r0
 8018578:	4610      	mov	r0, r2
 801857a:	f7ff fee1 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801857e:	a903      	add	r1, sp, #12
 8018580:	9003      	str	r0, [sp, #12]
 8018582:	4650      	mov	r0, sl
 8018584:	f7ff feb0 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018588:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 801858c:	9a01      	ldr	r2, [sp, #4]
 801858e:	4408      	add	r0, r1
 8018590:	f8d9 1000 	ldr.w	r1, [r9]
 8018594:	1b03      	subs	r3, r0, r4
 8018596:	4420      	add	r0, r4
 8018598:	4299      	cmp	r1, r3
 801859a:	bfc8      	it	gt
 801859c:	f8c9 3000 	strgt.w	r3, [r9]
 80185a0:	6839      	ldr	r1, [r7, #0]
 80185a2:	428b      	cmp	r3, r1
 80185a4:	bfc8      	it	gt
 80185a6:	603b      	strgt	r3, [r7, #0]
 80185a8:	f8d9 1000 	ldr.w	r1, [r9]
 80185ac:	4281      	cmp	r1, r0
 80185ae:	bfc8      	it	gt
 80185b0:	f8c9 0000 	strgt.w	r0, [r9]
 80185b4:	6839      	ldr	r1, [r7, #0]
 80185b6:	4288      	cmp	r0, r1
 80185b8:	bfc8      	it	gt
 80185ba:	6038      	strgt	r0, [r7, #0]
 80185bc:	4610      	mov	r0, r2
 80185be:	f7ff fede 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80185c2:	a903      	add	r1, sp, #12
 80185c4:	9003      	str	r0, [sp, #12]
 80185c6:	4650      	mov	r0, sl
 80185c8:	f7ff fe8e 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80185cc:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80185d0:	1a10      	subs	r0, r2, r0
 80185d2:	6832      	ldr	r2, [r6, #0]
 80185d4:	1b01      	subs	r1, r0, r4
 80185d6:	4420      	add	r0, r4
 80185d8:	428a      	cmp	r2, r1
 80185da:	bfc8      	it	gt
 80185dc:	6031      	strgt	r1, [r6, #0]
 80185de:	682a      	ldr	r2, [r5, #0]
 80185e0:	4291      	cmp	r1, r2
 80185e2:	bfc8      	it	gt
 80185e4:	6029      	strgt	r1, [r5, #0]
 80185e6:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80185ea:	6832      	ldr	r2, [r6, #0]
 80185ec:	4282      	cmp	r2, r0
 80185ee:	bfc8      	it	gt
 80185f0:	6030      	strgt	r0, [r6, #0]
 80185f2:	682a      	ldr	r2, [r5, #0]
 80185f4:	4290      	cmp	r0, r2
 80185f6:	fb9b f2f1 	sdiv	r2, fp, r1
 80185fa:	fb01 b212 	mls	r2, r1, r2, fp
 80185fe:	bfc8      	it	gt
 8018600:	6028      	strgt	r0, [r5, #0]
 8018602:	1a8a      	subs	r2, r1, r2
 8018604:	fb92 f0f1 	sdiv	r0, r2, r1
 8018608:	fb01 2210 	mls	r2, r1, r0, r2
 801860c:	4493      	add	fp, r2
 801860e:	9b00      	ldr	r3, [sp, #0]
 8018610:	455b      	cmp	r3, fp
 8018612:	db40      	blt.n	8018696 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 8018614:	4658      	mov	r0, fp
 8018616:	f7ff fe93 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801861a:	a903      	add	r1, sp, #12
 801861c:	9003      	str	r0, [sp, #12]
 801861e:	4650      	mov	r0, sl
 8018620:	f7ff fe62 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018624:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8018628:	4410      	add	r0, r2
 801862a:	f8d9 2000 	ldr.w	r2, [r9]
 801862e:	1b01      	subs	r1, r0, r4
 8018630:	4420      	add	r0, r4
 8018632:	428a      	cmp	r2, r1
 8018634:	bfc8      	it	gt
 8018636:	f8c9 1000 	strgt.w	r1, [r9]
 801863a:	683a      	ldr	r2, [r7, #0]
 801863c:	4291      	cmp	r1, r2
 801863e:	bfc8      	it	gt
 8018640:	6039      	strgt	r1, [r7, #0]
 8018642:	f8d9 2000 	ldr.w	r2, [r9]
 8018646:	4282      	cmp	r2, r0
 8018648:	bfc8      	it	gt
 801864a:	f8c9 0000 	strgt.w	r0, [r9]
 801864e:	683a      	ldr	r2, [r7, #0]
 8018650:	4290      	cmp	r0, r2
 8018652:	bfc8      	it	gt
 8018654:	6038      	strgt	r0, [r7, #0]
 8018656:	4658      	mov	r0, fp
 8018658:	f7ff fe91 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801865c:	a903      	add	r1, sp, #12
 801865e:	9003      	str	r0, [sp, #12]
 8018660:	4650      	mov	r0, sl
 8018662:	f7ff fe41 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018666:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801866a:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 801866e:	1a10      	subs	r0, r2, r0
 8018670:	6832      	ldr	r2, [r6, #0]
 8018672:	1b01      	subs	r1, r0, r4
 8018674:	4420      	add	r0, r4
 8018676:	428a      	cmp	r2, r1
 8018678:	bfc8      	it	gt
 801867a:	6031      	strgt	r1, [r6, #0]
 801867c:	682a      	ldr	r2, [r5, #0]
 801867e:	4291      	cmp	r1, r2
 8018680:	bfc8      	it	gt
 8018682:	6029      	strgt	r1, [r5, #0]
 8018684:	6832      	ldr	r2, [r6, #0]
 8018686:	4282      	cmp	r2, r0
 8018688:	bfc8      	it	gt
 801868a:	6030      	strgt	r0, [r6, #0]
 801868c:	682a      	ldr	r2, [r5, #0]
 801868e:	4290      	cmp	r0, r2
 8018690:	bfc8      	it	gt
 8018692:	6028      	strgt	r0, [r5, #0]
 8018694:	e7bb      	b.n	801860e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 8018696:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 801869a:	9b00      	ldr	r3, [sp, #0]
 801869c:	455b      	cmp	r3, fp
 801869e:	f77f af63 	ble.w	8018568 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7ff fe4c 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80186a8:	a903      	add	r1, sp, #12
 80186aa:	9003      	str	r0, [sp, #12]
 80186ac:	4650      	mov	r0, sl
 80186ae:	f7ff fe1b 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80186b2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80186b6:	4410      	add	r0, r2
 80186b8:	f8d9 2000 	ldr.w	r2, [r9]
 80186bc:	1b01      	subs	r1, r0, r4
 80186be:	4420      	add	r0, r4
 80186c0:	428a      	cmp	r2, r1
 80186c2:	bfc8      	it	gt
 80186c4:	f8c9 1000 	strgt.w	r1, [r9]
 80186c8:	683a      	ldr	r2, [r7, #0]
 80186ca:	4291      	cmp	r1, r2
 80186cc:	bfc8      	it	gt
 80186ce:	6039      	strgt	r1, [r7, #0]
 80186d0:	f8d9 2000 	ldr.w	r2, [r9]
 80186d4:	4282      	cmp	r2, r0
 80186d6:	bfc8      	it	gt
 80186d8:	f8c9 0000 	strgt.w	r0, [r9]
 80186dc:	683b      	ldr	r3, [r7, #0]
 80186de:	4298      	cmp	r0, r3
 80186e0:	bfc8      	it	gt
 80186e2:	6038      	strgt	r0, [r7, #0]
 80186e4:	9800      	ldr	r0, [sp, #0]
 80186e6:	f7ff fe4a 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80186ea:	a903      	add	r1, sp, #12
 80186ec:	9003      	str	r0, [sp, #12]
 80186ee:	4650      	mov	r0, sl
 80186f0:	f7ff fdfa 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80186f4:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80186f8:	6832      	ldr	r2, [r6, #0]
 80186fa:	1a18      	subs	r0, r3, r0
 80186fc:	1b03      	subs	r3, r0, r4
 80186fe:	4404      	add	r4, r0
 8018700:	429a      	cmp	r2, r3
 8018702:	bfc8      	it	gt
 8018704:	6033      	strgt	r3, [r6, #0]
 8018706:	682a      	ldr	r2, [r5, #0]
 8018708:	4293      	cmp	r3, r2
 801870a:	bfc8      	it	gt
 801870c:	602b      	strgt	r3, [r5, #0]
 801870e:	6833      	ldr	r3, [r6, #0]
 8018710:	42a3      	cmp	r3, r4
 8018712:	bfc8      	it	gt
 8018714:	6034      	strgt	r4, [r6, #0]
 8018716:	682b      	ldr	r3, [r5, #0]
 8018718:	429c      	cmp	r4, r3
 801871a:	bfc8      	it	gt
 801871c:	602c      	strgt	r4, [r5, #0]
 801871e:	e723      	b.n	8018568 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

08018720 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8018720:	b530      	push	{r4, r5, lr}
 8018722:	4604      	mov	r4, r0
 8018724:	4608      	mov	r0, r1
 8018726:	4611      	mov	r1, r2
 8018728:	461a      	mov	r2, r3
 801872a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801872e:	b089      	sub	sp, #36	; 0x24
 8018730:	2500      	movs	r5, #0
 8018732:	015b      	lsls	r3, r3, #5
 8018734:	9505      	str	r5, [sp, #20]
 8018736:	9304      	str	r3, [sp, #16]
 8018738:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801873c:	015b      	lsls	r3, r3, #5
 801873e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8018742:	ab07      	add	r3, sp, #28
 8018744:	2520      	movs	r5, #32
 8018746:	9302      	str	r3, [sp, #8]
 8018748:	ab06      	add	r3, sp, #24
 801874a:	9301      	str	r3, [sp, #4]
 801874c:	ab05      	add	r3, sp, #20
 801874e:	9300      	str	r3, [sp, #0]
 8018750:	ab04      	add	r3, sp, #16
 8018752:	f7ff fe3f 	bl	80183d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8018756:	9a04      	ldr	r2, [sp, #16]
 8018758:	9805      	ldr	r0, [sp, #20]
 801875a:	9b06      	ldr	r3, [sp, #24]
 801875c:	9907      	ldr	r1, [sp, #28]
 801875e:	fb92 f2f5 	sdiv	r2, r2, r5
 8018762:	fb90 f0f5 	sdiv	r0, r0, r5
 8018766:	fb93 f3f5 	sdiv	r3, r3, r5
 801876a:	fb91 f1f5 	sdiv	r1, r1, r5
 801876e:	b292      	uxth	r2, r2
 8018770:	3002      	adds	r0, #2
 8018772:	b29b      	uxth	r3, r3
 8018774:	3102      	adds	r1, #2
 8018776:	1a80      	subs	r0, r0, r2
 8018778:	3a01      	subs	r2, #1
 801877a:	1ac9      	subs	r1, r1, r3
 801877c:	3b01      	subs	r3, #1
 801877e:	80a0      	strh	r0, [r4, #4]
 8018780:	4620      	mov	r0, r4
 8018782:	8022      	strh	r2, [r4, #0]
 8018784:	8063      	strh	r3, [r4, #2]
 8018786:	80e1      	strh	r1, [r4, #6]
 8018788:	b009      	add	sp, #36	; 0x24
 801878a:	bd30      	pop	{r4, r5, pc}

0801878c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801878c:	b510      	push	{r4, lr}
 801878e:	4604      	mov	r4, r0
 8018790:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8018794:	f7ff ffc4 	bl	8018720 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018798:	4620      	mov	r0, r4
 801879a:	bd10      	pop	{r4, pc}

0801879c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 801879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801879e:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	; 0x38
 80187a2:	4606      	mov	r6, r0
 80187a4:	f891 0044 	ldrb.w	r0, [r1, #68]	; 0x44
 80187a8:	42a5      	cmp	r5, r4
 80187aa:	6813      	ldr	r3, [r2, #0]
 80187ac:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80187b0:	da2b      	bge.n	801880a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 80187b2:	42a3      	cmp	r3, r4
 80187b4:	dd14      	ble.n	80187e0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 80187b6:	b168      	cbz	r0, 80187d4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80187b8:	4267      	negs	r7, r4
 80187ba:	fb97 f2f0 	sdiv	r2, r7, r0
 80187be:	fb00 7212 	mls	r2, r0, r2, r7
 80187c2:	1a82      	subs	r2, r0, r2
 80187c4:	fb92 f7f0 	sdiv	r7, r2, r0
 80187c8:	fb00 2017 	mls	r0, r0, r7, r2
 80187cc:	1a24      	subs	r4, r4, r0
 80187ce:	42ac      	cmp	r4, r5
 80187d0:	bfb8      	it	lt
 80187d2:	462c      	movlt	r4, r5
 80187d4:	4630      	mov	r0, r6
 80187d6:	4622      	mov	r2, r4
 80187d8:	f7ff ffa2 	bl	8018720 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80187dc:	4630      	mov	r0, r6
 80187de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187e0:	42ab      	cmp	r3, r5
 80187e2:	dd0e      	ble.n	8018802 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80187e4:	b168      	cbz	r0, 8018802 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80187e6:	425f      	negs	r7, r3
 80187e8:	fb97 f2f0 	sdiv	r2, r7, r0
 80187ec:	fb00 7212 	mls	r2, r0, r2, r7
 80187f0:	1a82      	subs	r2, r0, r2
 80187f2:	fb92 f7f0 	sdiv	r7, r2, r0
 80187f6:	fb00 2017 	mls	r0, r0, r7, r2
 80187fa:	1a1b      	subs	r3, r3, r0
 80187fc:	42ab      	cmp	r3, r5
 80187fe:	bfb8      	it	lt
 8018800:	462b      	movlt	r3, r5
 8018802:	4622      	mov	r2, r4
 8018804:	461c      	mov	r4, r3
 8018806:	4613      	mov	r3, r2
 8018808:	e7e4      	b.n	80187d4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801880a:	42a3      	cmp	r3, r4
 801880c:	da10      	bge.n	8018830 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 801880e:	b148      	cbz	r0, 8018824 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8018810:	fb94 f2f0 	sdiv	r2, r4, r0
 8018814:	fb00 4212 	mls	r2, r0, r2, r4
 8018818:	1a82      	subs	r2, r0, r2
 801881a:	fb92 f7f0 	sdiv	r7, r2, r0
 801881e:	fb00 2017 	mls	r0, r0, r7, r2
 8018822:	4404      	add	r4, r0
 8018824:	42a5      	cmp	r5, r4
 8018826:	bfa8      	it	ge
 8018828:	4625      	movge	r5, r4
 801882a:	461c      	mov	r4, r3
 801882c:	462b      	mov	r3, r5
 801882e:	e7d1      	b.n	80187d4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018830:	42ab      	cmp	r3, r5
 8018832:	dacf      	bge.n	80187d4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018834:	2800      	cmp	r0, #0
 8018836:	d0cd      	beq.n	80187d4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018838:	fb93 f2f0 	sdiv	r2, r3, r0
 801883c:	fb00 3212 	mls	r2, r0, r2, r3
 8018840:	1a82      	subs	r2, r0, r2
 8018842:	fb92 f7f0 	sdiv	r7, r2, r0
 8018846:	fb00 2017 	mls	r0, r0, r7, r2
 801884a:	4403      	add	r3, r0
 801884c:	42ab      	cmp	r3, r5
 801884e:	bfa8      	it	ge
 8018850:	462b      	movge	r3, r5
 8018852:	e7bf      	b.n	80187d4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08018854 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8018854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018858:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 801885c:	2220      	movs	r2, #32
 801885e:	468b      	mov	fp, r1
 8018860:	42ae      	cmp	r6, r5
 8018862:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 8018866:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 801886a:	b0ab      	sub	sp, #172	; 0xac
 801886c:	bfa4      	itt	ge
 801886e:	4633      	movge	r3, r6
 8018870:	462e      	movge	r6, r5
 8018872:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8018874:	4604      	mov	r4, r0
 8018876:	bfa8      	it	ge
 8018878:	461d      	movge	r5, r3
 801887a:	1bab      	subs	r3, r5, r6
 801887c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018880:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018882:	bfa4      	itt	ge
 8018884:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 8018888:	2600      	movge	r6, #0
 801888a:	fb99 f9f2 	sdiv	r9, r9, r2
 801888e:	fb9a faf2 	sdiv	sl, sl, r2
 8018892:	2900      	cmp	r1, #0
 8018894:	f000 80f1 	beq.w	8018a7a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x226>
 8018898:	f9bb 0000 	ldrsh.w	r0, [fp]
 801889c:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 80188a0:	eba9 0700 	sub.w	r7, r9, r0
 80188a4:	ebaa 0802 	sub.w	r8, sl, r2
 80188a8:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 80188ac:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 80188b0:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 80188b4:	4407      	add	r7, r0
 80188b6:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 80188ba:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80188be:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 80188c2:	b23f      	sxth	r7, r7
 80188c4:	4490      	add	r8, r2
 80188c6:	2202      	movs	r2, #2
 80188c8:	eba9 0707 	sub.w	r7, r9, r7
 80188cc:	fa0f f888 	sxth.w	r8, r8
 80188d0:	9201      	str	r2, [sp, #4]
 80188d2:	2f00      	cmp	r7, #0
 80188d4:	ebaa 0808 	sub.w	r8, sl, r8
 80188d8:	bfb8      	it	lt
 80188da:	427f      	neglt	r7, r7
 80188dc:	f1b8 0f00 	cmp.w	r8, #0
 80188e0:	bfb8      	it	lt
 80188e2:	f1c8 0800 	rsblt	r8, r8, #0
 80188e6:	45bc      	cmp	ip, r7
 80188e8:	bfcc      	ite	gt
 80188ea:	f10c 0701 	addgt.w	r7, ip, #1
 80188ee:	3701      	addle	r7, #1
 80188f0:	4540      	cmp	r0, r8
 80188f2:	bfc8      	it	gt
 80188f4:	f100 0801 	addgt.w	r8, r0, #1
 80188f8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80188fc:	bfd8      	it	le
 80188fe:	f108 0801 	addle.w	r8, r8, #1
 8018902:	3001      	adds	r0, #1
 8018904:	fb08 f808 	mul.w	r8, r8, r8
 8018908:	1040      	asrs	r0, r0, #1
 801890a:	fb07 8707 	mla	r7, r7, r7, r8
 801890e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018912:	fb91 f1f2 	sdiv	r1, r1, r2
 8018916:	1a5b      	subs	r3, r3, r1
 8018918:	930d      	str	r3, [sp, #52]	; 0x34
 801891a:	f7ff fcf1 	bl	8018300 <_ZN8touchgfx7CWRUtil4sineEi>
 801891e:	a92a      	add	r1, sp, #168	; 0xa8
 8018920:	f841 0d70 	str.w	r0, [r1, #-112]!
 8018924:	a80d      	add	r0, sp, #52	; 0x34
 8018926:	f7ff fcdf 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801892a:	f04f 0c20 	mov.w	ip, #32
 801892e:	9a01      	ldr	r2, [sp, #4]
 8018930:	fb90 f0fc 	sdiv	r0, r0, ip
 8018934:	4340      	muls	r0, r0
 8018936:	4287      	cmp	r7, r0
 8018938:	da04      	bge.n	8018944 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf0>
 801893a:	2401      	movs	r4, #1
 801893c:	4620      	mov	r0, r4
 801893e:	b02b      	add	sp, #172	; 0xac
 8018940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018944:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018946:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8018948:	fb91 f3f2 	sdiv	r3, r1, r2
 801894c:	4403      	add	r3, r0
 801894e:	fb93 f3fc 	sdiv	r3, r3, ip
 8018952:	f9bb 1000 	ldrsh.w	r1, [fp]
 8018956:	3301      	adds	r3, #1
 8018958:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 801895c:	435b      	muls	r3, r3
 801895e:	440a      	add	r2, r1
 8018960:	b212      	sxth	r2, r2
 8018962:	454a      	cmp	r2, r9
 8018964:	bfa8      	it	ge
 8018966:	464a      	movge	r2, r9
 8018968:	428a      	cmp	r2, r1
 801896a:	bfac      	ite	ge
 801896c:	eba9 0902 	subge.w	r9, r9, r2
 8018970:	eba9 0901 	sublt.w	r9, r9, r1
 8018974:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8018978:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801897c:	440a      	add	r2, r1
 801897e:	b212      	sxth	r2, r2
 8018980:	4552      	cmp	r2, sl
 8018982:	bfa8      	it	ge
 8018984:	4652      	movge	r2, sl
 8018986:	428a      	cmp	r2, r1
 8018988:	bfac      	ite	ge
 801898a:	ebaa 0a02 	subge.w	sl, sl, r2
 801898e:	ebaa 0a01 	sublt.w	sl, sl, r1
 8018992:	fb0a fa0a 	mul.w	sl, sl, sl
 8018996:	fb09 a909 	mla	r9, r9, r9, sl
 801899a:	4599      	cmp	r9, r3
 801899c:	dccd      	bgt.n	801893a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe6>
 801899e:	465a      	mov	r2, fp
 80189a0:	4621      	mov	r1, r4
 80189a2:	a80e      	add	r0, sp, #56	; 0x38
 80189a4:	f012 fa7e 	bl	802aea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80189a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80189aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80189ac:	9209      	str	r2, [sp, #36]	; 0x24
 80189ae:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80189b2:	930a      	str	r3, [sp, #40]	; 0x28
 80189b4:	dd07      	ble.n	80189c6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 80189b6:	2102      	movs	r1, #2
 80189b8:	fb93 f3f1 	sdiv	r3, r3, r1
 80189bc:	4413      	add	r3, r2
 80189be:	930a      	str	r3, [sp, #40]	; 0x28
 80189c0:	fb93 f3f1 	sdiv	r3, r3, r1
 80189c4:	9309      	str	r3, [sp, #36]	; 0x24
 80189c6:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 80189ca:	f04f 0a02 	mov.w	sl, #2
 80189ce:	4630      	mov	r0, r6
 80189d0:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 80189d4:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 80189d8:	017f      	lsls	r7, r7, #5
 80189da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80189de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80189e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80189e4:	f7ff fcac 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80189e8:	f849 0d74 	str.w	r0, [r9, #-116]!
 80189ec:	a80b      	add	r0, sp, #44	; 0x2c
 80189ee:	4649      	mov	r1, r9
 80189f0:	f7ff fc7a 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80189f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80189f6:	fb90 f0fa 	sdiv	r0, r0, sl
 80189fa:	eb00 0b03 	add.w	fp, r0, r3
 80189fe:	4630      	mov	r0, r6
 8018a00:	f7ff fcbd 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018a04:	f848 0d78 	str.w	r0, [r8, #-120]!
 8018a08:	a80b      	add	r0, sp, #44	; 0x2c
 8018a0a:	4641      	mov	r1, r8
 8018a0c:	f7ff fc6c 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018a12:	4659      	mov	r1, fp
 8018a14:	fb90 f0fa 	sdiv	r0, r0, sl
 8018a18:	1a12      	subs	r2, r2, r0
 8018a1a:	a80e      	add	r0, sp, #56	; 0x38
 8018a1c:	f012 fbbc 	bl	802b198 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018a20:	f106 0a20 	add.w	sl, r6, #32
 8018a24:	bb67      	cbnz	r7, 8018a80 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8018a26:	46b3      	mov	fp, r6
 8018a28:	45aa      	cmp	sl, r5
 8018a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a2c:	dc33      	bgt.n	8018a96 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 8018a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018a30:	4650      	mov	r0, sl
 8018a32:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8018a36:	920b      	str	r2, [sp, #44]	; 0x2c
 8018a38:	f7ff fc82 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018a3c:	4641      	mov	r1, r8
 8018a3e:	900c      	str	r0, [sp, #48]	; 0x30
 8018a40:	a80b      	add	r0, sp, #44	; 0x2c
 8018a42:	f7ff fc51 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a46:	2302      	movs	r3, #2
 8018a48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018a4a:	fb90 f0f3 	sdiv	r0, r0, r3
 8018a4e:	eb00 0b02 	add.w	fp, r0, r2
 8018a52:	4650      	mov	r0, sl
 8018a54:	f7ff fc93 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018a58:	4649      	mov	r1, r9
 8018a5a:	900d      	str	r0, [sp, #52]	; 0x34
 8018a5c:	a80b      	add	r0, sp, #44	; 0x2c
 8018a5e:	f7ff fc43 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a62:	2302      	movs	r3, #2
 8018a64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018a66:	4659      	mov	r1, fp
 8018a68:	46d3      	mov	fp, sl
 8018a6a:	44ba      	add	sl, r7
 8018a6c:	fb90 f0f3 	sdiv	r0, r0, r3
 8018a70:	1a12      	subs	r2, r2, r0
 8018a72:	a80e      	add	r0, sp, #56	; 0x38
 8018a74:	f012 fbdd 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018a78:	e7d6      	b.n	8018a28 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d4>
 8018a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a7e:	e768      	b.n	8018952 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xfe>
 8018a80:	fb9a f2f7 	sdiv	r2, sl, r7
 8018a84:	fb07 a212 	mls	r2, r7, r2, sl
 8018a88:	1aba      	subs	r2, r7, r2
 8018a8a:	fb92 f1f7 	sdiv	r1, r2, r7
 8018a8e:	fb07 2211 	mls	r2, r7, r1, r2
 8018a92:	4492      	add	sl, r2
 8018a94:	e7c7      	b.n	8018a26 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d2>
 8018a96:	45ab      	cmp	fp, r5
 8018a98:	da23      	bge.n	8018ae2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x28e>
 8018a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a9c:	f04f 0a02 	mov.w	sl, #2
 8018aa0:	4628      	mov	r0, r5
 8018aa2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8018aa6:	920b      	str	r2, [sp, #44]	; 0x2c
 8018aa8:	f7ff fc4a 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018aac:	4641      	mov	r1, r8
 8018aae:	900c      	str	r0, [sp, #48]	; 0x30
 8018ab0:	a80b      	add	r0, sp, #44	; 0x2c
 8018ab2:	f7ff fc19 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018ab8:	fb90 f0fa 	sdiv	r0, r0, sl
 8018abc:	4403      	add	r3, r0
 8018abe:	4628      	mov	r0, r5
 8018ac0:	9301      	str	r3, [sp, #4]
 8018ac2:	f7ff fc5c 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018ac6:	4649      	mov	r1, r9
 8018ac8:	900d      	str	r0, [sp, #52]	; 0x34
 8018aca:	a80b      	add	r0, sp, #44	; 0x2c
 8018acc:	f7ff fc0c 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ad0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018ad2:	9b01      	ldr	r3, [sp, #4]
 8018ad4:	fb90 f0fa 	sdiv	r0, r0, sl
 8018ad8:	4619      	mov	r1, r3
 8018ada:	1a12      	subs	r2, r2, r0
 8018adc:	a80e      	add	r0, sp, #56	; 0x38
 8018ade:	f012 fba8 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ae4:	b99b      	cbnz	r3, 8018b0e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8018ae6:	1bad      	subs	r5, r5, r6
 8018ae8:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8018aec:	da04      	bge.n	8018af8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8018aee:	a80e      	add	r0, sp, #56	; 0x38
 8018af0:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8018af4:	f012 fb9d 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018af8:	21ff      	movs	r1, #255	; 0xff
 8018afa:	a80e      	add	r0, sp, #56	; 0x38
 8018afc:	f012 fa8e 	bl	802b01c <_ZN8touchgfx6Canvas6renderEh>
 8018b00:	4604      	mov	r4, r0
 8018b02:	4b8a      	ldr	r3, [pc, #552]	; (8018d2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d8>)
 8018b04:	a816      	add	r0, sp, #88	; 0x58
 8018b06:	930e      	str	r3, [sp, #56]	; 0x38
 8018b08:	f000 fe86 	bl	8019818 <_ZN8touchgfx7OutlineD1Ev>
 8018b0c:	e716      	b.n	801893c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 8018b0e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8018b12:	429a      	cmp	r2, r3
 8018b14:	f0c0 8107 	bcc.w	8018d26 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 8018b18:	1bab      	subs	r3, r5, r6
 8018b1a:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8018b1e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018b22:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8018b26:	9301      	str	r3, [sp, #4]
 8018b28:	da43      	bge.n	8018bb2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8018b2a:	4628      	mov	r0, r5
 8018b2c:	f7ff fc08 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018b30:	4649      	mov	r1, r9
 8018b32:	900d      	str	r0, [sp, #52]	; 0x34
 8018b34:	a809      	add	r0, sp, #36	; 0x24
 8018b36:	f7ff fbd7 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018b3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018b3c:	18c3      	adds	r3, r0, r3
 8018b3e:	4628      	mov	r0, r5
 8018b40:	9303      	str	r3, [sp, #12]
 8018b42:	f7ff fc1c 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018b46:	4649      	mov	r1, r9
 8018b48:	900d      	str	r0, [sp, #52]	; 0x34
 8018b4a:	a809      	add	r0, sp, #36	; 0x24
 8018b4c:	f7ff fbcc 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018b50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018b52:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 8018b56:	1a1b      	subs	r3, r3, r0
 8018b58:	9204      	str	r2, [sp, #16]
 8018b5a:	9302      	str	r3, [sp, #8]
 8018b5c:	eb0a 0305 	add.w	r3, sl, r5
 8018b60:	9a04      	ldr	r2, [sp, #16]
 8018b62:	4293      	cmp	r3, r2
 8018b64:	da25      	bge.n	8018bb2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8018b66:	4618      	mov	r0, r3
 8018b68:	9306      	str	r3, [sp, #24]
 8018b6a:	f7ff fbe9 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018b6e:	4649      	mov	r1, r9
 8018b70:	900d      	str	r0, [sp, #52]	; 0x34
 8018b72:	a80a      	add	r0, sp, #40	; 0x28
 8018b74:	f7ff fbb8 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018b78:	2202      	movs	r2, #2
 8018b7a:	9b03      	ldr	r3, [sp, #12]
 8018b7c:	9207      	str	r2, [sp, #28]
 8018b7e:	fb90 f0f2 	sdiv	r0, r0, r2
 8018b82:	18c3      	adds	r3, r0, r3
 8018b84:	9305      	str	r3, [sp, #20]
 8018b86:	9b06      	ldr	r3, [sp, #24]
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7ff fbf8 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018b8e:	a92a      	add	r1, sp, #168	; 0xa8
 8018b90:	f841 0d78 	str.w	r0, [r1, #-120]!
 8018b94:	a80a      	add	r0, sp, #40	; 0x28
 8018b96:	f7ff fba7 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018b9a:	9a07      	ldr	r2, [sp, #28]
 8018b9c:	9b02      	ldr	r3, [sp, #8]
 8018b9e:	9905      	ldr	r1, [sp, #20]
 8018ba0:	fb90 f2f2 	sdiv	r2, r0, r2
 8018ba4:	a80e      	add	r0, sp, #56	; 0x38
 8018ba6:	1a9a      	subs	r2, r3, r2
 8018ba8:	f012 fb43 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018bac:	9b06      	ldr	r3, [sp, #24]
 8018bae:	4453      	add	r3, sl
 8018bb0:	e7d6      	b.n	8018b60 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 8018bb2:	45ab      	cmp	fp, r5
 8018bb4:	da25      	bge.n	8018c02 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018bbc:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8018bc2:	f7ff fbbd 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018bc6:	4641      	mov	r1, r8
 8018bc8:	900c      	str	r0, [sp, #48]	; 0x30
 8018bca:	a80b      	add	r0, sp, #44	; 0x2c
 8018bcc:	f7ff fb8c 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018bd0:	2202      	movs	r2, #2
 8018bd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018bd4:	9202      	str	r2, [sp, #8]
 8018bd6:	fb90 f0f2 	sdiv	r0, r0, r2
 8018bda:	eb00 0903 	add.w	r9, r0, r3
 8018bde:	4628      	mov	r0, r5
 8018be0:	f7ff fbcd 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018be4:	a92a      	add	r1, sp, #168	; 0xa8
 8018be6:	f841 0d74 	str.w	r0, [r1, #-116]!
 8018bea:	a80b      	add	r0, sp, #44	; 0x2c
 8018bec:	f7ff fb7c 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018bf0:	9a02      	ldr	r2, [sp, #8]
 8018bf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018bf4:	4649      	mov	r1, r9
 8018bf6:	fb90 f2f2 	sdiv	r2, r0, r2
 8018bfa:	a80e      	add	r0, sp, #56	; 0x38
 8018bfc:	1a9a      	subs	r2, r3, r2
 8018bfe:	f012 fb18 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018c02:	46d9      	mov	r9, fp
 8018c04:	2502      	movs	r5, #2
 8018c06:	45b1      	cmp	r9, r6
 8018c08:	db25      	blt.n	8018c56 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 8018c0a:	4648      	mov	r0, r9
 8018c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018c10:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c16:	f7ff fb93 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018c1a:	4641      	mov	r1, r8
 8018c1c:	900c      	str	r0, [sp, #48]	; 0x30
 8018c1e:	a80b      	add	r0, sp, #44	; 0x2c
 8018c20:	f7ff fb62 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018c26:	fb90 f0f5 	sdiv	r0, r0, r5
 8018c2a:	eb00 0b03 	add.w	fp, r0, r3
 8018c2e:	4648      	mov	r0, r9
 8018c30:	f7ff fba5 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018c34:	a90d      	add	r1, sp, #52	; 0x34
 8018c36:	900d      	str	r0, [sp, #52]	; 0x34
 8018c38:	a80b      	add	r0, sp, #44	; 0x2c
 8018c3a:	f7ff fb55 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018c40:	4659      	mov	r1, fp
 8018c42:	46cb      	mov	fp, r9
 8018c44:	eba9 0907 	sub.w	r9, r9, r7
 8018c48:	fb90 f0f5 	sdiv	r0, r0, r5
 8018c4c:	1a12      	subs	r2, r2, r0
 8018c4e:	a80e      	add	r0, sp, #56	; 0x38
 8018c50:	f012 faef 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018c54:	e7d7      	b.n	8018c06 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 8018c56:	455e      	cmp	r6, fp
 8018c58:	da22      	bge.n	8018ca0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 8018c5a:	2502      	movs	r5, #2
 8018c5c:	4630      	mov	r0, r6
 8018c5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018c62:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c68:	f7ff fb6a 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018c6c:	4641      	mov	r1, r8
 8018c6e:	900c      	str	r0, [sp, #48]	; 0x30
 8018c70:	a80b      	add	r0, sp, #44	; 0x2c
 8018c72:	f7ff fb39 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c76:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8018c78:	fb90 f0f5 	sdiv	r0, r0, r5
 8018c7c:	4407      	add	r7, r0
 8018c7e:	4630      	mov	r0, r6
 8018c80:	f7ff fb7d 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018c84:	a92a      	add	r1, sp, #168	; 0xa8
 8018c86:	f841 0d74 	str.w	r0, [r1, #-116]!
 8018c8a:	a80b      	add	r0, sp, #44	; 0x2c
 8018c8c:	f7ff fb2c 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018c92:	4639      	mov	r1, r7
 8018c94:	fb90 f0f5 	sdiv	r0, r0, r5
 8018c98:	1a12      	subs	r2, r2, r0
 8018c9a:	a80e      	add	r0, sp, #56	; 0x38
 8018c9c:	f012 fac9 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018ca0:	9b01      	ldr	r3, [sp, #4]
 8018ca2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018ca6:	f6bf af27 	bge.w	8018af8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8018caa:	ad2a      	add	r5, sp, #168	; 0xa8
 8018cac:	4630      	mov	r0, r6
 8018cae:	f7ff fb47 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018cb2:	f04f 0b02 	mov.w	fp, #2
 8018cb6:	f845 0d74 	str.w	r0, [r5, #-116]!
 8018cba:	a809      	add	r0, sp, #36	; 0x24
 8018cbc:	4629      	mov	r1, r5
 8018cbe:	f7ff fb13 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018cc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018cc4:	eb00 0903 	add.w	r9, r0, r3
 8018cc8:	4630      	mov	r0, r6
 8018cca:	f7ff fb58 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018cce:	4629      	mov	r1, r5
 8018cd0:	900d      	str	r0, [sp, #52]	; 0x34
 8018cd2:	a809      	add	r0, sp, #36	; 0x24
 8018cd4:	f7ff fb08 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018cd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018cda:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 8018cde:	eba3 0800 	sub.w	r8, r3, r0
 8018ce2:	4454      	add	r4, sl
 8018ce4:	42a6      	cmp	r6, r4
 8018ce6:	f77f af07 	ble.w	8018af8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8018cea:	4620      	mov	r0, r4
 8018cec:	f7ff fb28 	bl	8018340 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018cf0:	4629      	mov	r1, r5
 8018cf2:	900d      	str	r0, [sp, #52]	; 0x34
 8018cf4:	a80a      	add	r0, sp, #40	; 0x28
 8018cf6:	f7ff faf7 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018cfa:	fb90 f0fb 	sdiv	r0, r0, fp
 8018cfe:	eb00 0709 	add.w	r7, r0, r9
 8018d02:	4620      	mov	r0, r4
 8018d04:	f7ff fb3b 	bl	801837e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018d08:	a90c      	add	r1, sp, #48	; 0x30
 8018d0a:	900c      	str	r0, [sp, #48]	; 0x30
 8018d0c:	a80a      	add	r0, sp, #40	; 0x28
 8018d0e:	f7ff faeb 	bl	80182e8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d12:	4639      	mov	r1, r7
 8018d14:	4454      	add	r4, sl
 8018d16:	fb90 f2fb 	sdiv	r2, r0, fp
 8018d1a:	a80e      	add	r0, sp, #56	; 0x38
 8018d1c:	eba8 0202 	sub.w	r2, r8, r2
 8018d20:	f012 fa87 	bl	802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d24:	e7de      	b.n	8018ce4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 8018d26:	2400      	movs	r4, #0
 8018d28:	e6eb      	b.n	8018b02 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ae>
 8018d2a:	bf00      	nop
 8018d2c:	08031698 	.word	0x08031698

08018d30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018d30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018d32:	6803      	ldr	r3, [r0, #0]
 8018d34:	460d      	mov	r5, r1
 8018d36:	4604      	mov	r4, r0
 8018d38:	4601      	mov	r1, r0
 8018d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018d3c:	a802      	add	r0, sp, #8
 8018d3e:	4798      	blx	r3
 8018d40:	6828      	ldr	r0, [r5, #0]
 8018d42:	6869      	ldr	r1, [r5, #4]
 8018d44:	466b      	mov	r3, sp
 8018d46:	c303      	stmia	r3!, {r0, r1}
 8018d48:	4668      	mov	r0, sp
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	f7fe fa4e 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8018d50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018d52:	b1a8      	cbz	r0, 8018d80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8018d54:	6803      	ldr	r3, [r0, #0]
 8018d56:	1d21      	adds	r1, r4, #4
 8018d58:	68db      	ldr	r3, [r3, #12]
 8018d5a:	4798      	blx	r3
 8018d5c:	b180      	cbz	r0, 8018d80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8018d5e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	dd0c      	ble.n	8018d80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8018d66:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8018d6a:	2d00      	cmp	r5, #0
 8018d6c:	dd08      	ble.n	8018d80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8018d6e:	4a2d      	ldr	r2, [pc, #180]	; (8018e24 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8018d70:	7812      	ldrb	r2, [r2, #0]
 8018d72:	b13a      	cbz	r2, 8018d84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8018d74:	2a01      	cmp	r2, #1
 8018d76:	d02d      	beq.n	8018dd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8018d78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018d7a:	6803      	ldr	r3, [r0, #0]
 8018d7c:	691b      	ldr	r3, [r3, #16]
 8018d7e:	4798      	blx	r3
 8018d80:	b004      	add	sp, #16
 8018d82:	bd70      	pop	{r4, r5, r6, pc}
 8018d84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018d88:	441d      	add	r5, r3
 8018d8a:	b2ad      	uxth	r5, r5
 8018d8c:	b22e      	sxth	r6, r5
 8018d8e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8018d92:	42b3      	cmp	r3, r6
 8018d94:	daf0      	bge.n	8018d78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018d96:	6823      	ldr	r3, [r4, #0]
 8018d98:	4669      	mov	r1, sp
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018d9e:	4798      	blx	r3
 8018da0:	b940      	cbnz	r0, 8018db4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8018da2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8018da6:	2b01      	cmp	r3, #1
 8018da8:	d004      	beq.n	8018db4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8018daa:	3301      	adds	r3, #1
 8018dac:	105b      	asrs	r3, r3, #1
 8018dae:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018db2:	e7f0      	b.n	8018d96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8018db4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018db8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018dbc:	4413      	add	r3, r2
 8018dbe:	b29b      	uxth	r3, r3
 8018dc0:	441a      	add	r2, r3
 8018dc2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018dc6:	b212      	sxth	r2, r2
 8018dc8:	4296      	cmp	r6, r2
 8018dca:	dae0      	bge.n	8018d8e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018dcc:	1aeb      	subs	r3, r5, r3
 8018dce:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018dd2:	e7dc      	b.n	8018d8e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018dd4:	f8bd 5000 	ldrh.w	r5, [sp]
 8018dd8:	441d      	add	r5, r3
 8018dda:	b2ad      	uxth	r5, r5
 8018ddc:	b22e      	sxth	r6, r5
 8018dde:	f9bd 3000 	ldrsh.w	r3, [sp]
 8018de2:	42b3      	cmp	r3, r6
 8018de4:	dac8      	bge.n	8018d78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018de6:	6823      	ldr	r3, [r4, #0]
 8018de8:	4669      	mov	r1, sp
 8018dea:	4620      	mov	r0, r4
 8018dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018dee:	4798      	blx	r3
 8018df0:	b940      	cbnz	r0, 8018e04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8018df2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8018df6:	2b01      	cmp	r3, #1
 8018df8:	d004      	beq.n	8018e04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8018dfa:	3301      	adds	r3, #1
 8018dfc:	105b      	asrs	r3, r3, #1
 8018dfe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018e02:	e7f0      	b.n	8018de6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8018e04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018e08:	f8bd 3000 	ldrh.w	r3, [sp]
 8018e0c:	4413      	add	r3, r2
 8018e0e:	b29b      	uxth	r3, r3
 8018e10:	441a      	add	r2, r3
 8018e12:	f8ad 3000 	strh.w	r3, [sp]
 8018e16:	b212      	sxth	r2, r2
 8018e18:	4296      	cmp	r6, r2
 8018e1a:	dae0      	bge.n	8018dde <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8018e1c:	1aeb      	subs	r3, r5, r3
 8018e1e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018e22:	e7dc      	b.n	8018dde <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8018e24:	20016e80 	.word	0x20016e80

08018e28 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8018e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018e2a:	6803      	ldr	r3, [r0, #0]
 8018e2c:	4604      	mov	r4, r0
 8018e2e:	4601      	mov	r1, r0
 8018e30:	4668      	mov	r0, sp
 8018e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018e34:	4798      	blx	r3
 8018e36:	2100      	movs	r1, #0
 8018e38:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018e3c:	4668      	mov	r0, sp
 8018e3e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018e42:	9102      	str	r1, [sp, #8]
 8018e44:	a902      	add	r1, sp, #8
 8018e46:	f8ad 200c 	strh.w	r2, [sp, #12]
 8018e4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018e4e:	f7fe f9cd 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8018e52:	6823      	ldr	r3, [r4, #0]
 8018e54:	4669      	mov	r1, sp
 8018e56:	4620      	mov	r0, r4
 8018e58:	691b      	ldr	r3, [r3, #16]
 8018e5a:	4798      	blx	r3
 8018e5c:	b004      	add	sp, #16
 8018e5e:	bd10      	pop	{r4, pc}

08018e60 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8018e60:	2101      	movs	r1, #1
 8018e62:	2200      	movs	r2, #0
 8018e64:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8018e68:	490a      	ldr	r1, [pc, #40]	; (8018e94 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8018e6a:	8082      	strh	r2, [r0, #4]
 8018e6c:	6001      	str	r1, [r0, #0]
 8018e6e:	21ff      	movs	r1, #255	; 0xff
 8018e70:	80c2      	strh	r2, [r0, #6]
 8018e72:	8102      	strh	r2, [r0, #8]
 8018e74:	8142      	strh	r2, [r0, #10]
 8018e76:	8182      	strh	r2, [r0, #12]
 8018e78:	81c2      	strh	r2, [r0, #14]
 8018e7a:	8202      	strh	r2, [r0, #16]
 8018e7c:	8242      	strh	r2, [r0, #18]
 8018e7e:	61c2      	str	r2, [r0, #28]
 8018e80:	8402      	strh	r2, [r0, #32]
 8018e82:	8442      	strh	r2, [r0, #34]	; 0x22
 8018e84:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8018e88:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8018e8c:	6282      	str	r2, [r0, #40]	; 0x28
 8018e8e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018e92:	4770      	bx	lr
 8018e94:	080310a0 	.word	0x080310a0

08018e98 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8018e98:	2000      	movs	r0, #0
 8018e9a:	4770      	bx	lr

08018e9c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8018e9c:	4b07      	ldr	r3, [pc, #28]	; (8018ebc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8018e9e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018ea0:	881b      	ldrh	r3, [r3, #0]
 8018ea2:	4293      	cmp	r3, r2
 8018ea4:	bf81      	itttt	hi
 8018ea6:	4b06      	ldrhi	r3, [pc, #24]	; (8018ec0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8018ea8:	681b      	ldrhi	r3, [r3, #0]
 8018eaa:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8018eae:	7858      	ldrbhi	r0, [r3, #1]
 8018eb0:	bf8c      	ite	hi
 8018eb2:	f000 0003 	andhi.w	r0, r0, #3
 8018eb6:	2000      	movls	r0, #0
 8018eb8:	4770      	bx	lr
 8018eba:	bf00      	nop
 8018ebc:	20016ee4 	.word	0x20016ee4
 8018ec0:	20016ee0 	.word	0x20016ee0

08018ec4 <_ZN8touchgfx8TextAreaD1Ev>:
 8018ec4:	4770      	bx	lr
	...

08018ec8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8018ec8:	4b11      	ldr	r3, [pc, #68]	; (8018f10 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8018eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ece:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	881b      	ldrh	r3, [r3, #0]
 8018ed4:	428b      	cmp	r3, r1
 8018ed6:	d918      	bls.n	8018f0a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8018ed8:	6803      	ldr	r3, [r0, #0]
 8018eda:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8018edc:	4b0d      	ldr	r3, [pc, #52]	; (8018f14 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8018ede:	6818      	ldr	r0, [r3, #0]
 8018ee0:	f7eb f92c 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 8018ee4:	6823      	ldr	r3, [r4, #0]
 8018ee6:	4606      	mov	r6, r0
 8018ee8:	4620      	mov	r0, r4
 8018eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018eec:	4798      	blx	r3
 8018eee:	6823      	ldr	r3, [r4, #0]
 8018ef0:	4607      	mov	r7, r0
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018ef8:	4798      	blx	r3
 8018efa:	463a      	mov	r2, r7
 8018efc:	4603      	mov	r3, r0
 8018efe:	4631      	mov	r1, r6
 8018f00:	4620      	mov	r0, r4
 8018f02:	46ac      	mov	ip, r5
 8018f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f08:	4760      	bx	ip
 8018f0a:	2000      	movs	r0, #0
 8018f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f10:	20016ee4 	.word	0x20016ee4
 8018f14:	20016eec 	.word	0x20016eec

08018f18 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018f18:	4b18      	ldr	r3, [pc, #96]	; (8018f7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018f1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f1e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018f20:	4604      	mov	r4, r0
 8018f22:	881b      	ldrh	r3, [r3, #0]
 8018f24:	428b      	cmp	r3, r1
 8018f26:	d926      	bls.n	8018f76 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8018f28:	4b15      	ldr	r3, [pc, #84]	; (8018f80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018f30:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018f34:	4b13      	ldr	r3, [pc, #76]	; (8018f84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018f36:	7855      	ldrb	r5, [r2, #1]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8018f3e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018f42:	6833      	ldr	r3, [r6, #0]
 8018f44:	69df      	ldr	r7, [r3, #28]
 8018f46:	4b10      	ldr	r3, [pc, #64]	; (8018f88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018f48:	6818      	ldr	r0, [r3, #0]
 8018f4a:	f7eb f8f7 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 8018f4e:	6823      	ldr	r3, [r4, #0]
 8018f50:	4680      	mov	r8, r0
 8018f52:	4620      	mov	r0, r4
 8018f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f56:	4798      	blx	r3
 8018f58:	6823      	ldr	r3, [r4, #0]
 8018f5a:	4681      	mov	r9, r0
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018f62:	4798      	blx	r3
 8018f64:	464b      	mov	r3, r9
 8018f66:	9000      	str	r0, [sp, #0]
 8018f68:	4642      	mov	r2, r8
 8018f6a:	4629      	mov	r1, r5
 8018f6c:	4630      	mov	r0, r6
 8018f6e:	47b8      	blx	r7
 8018f70:	b003      	add	sp, #12
 8018f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f76:	2000      	movs	r0, #0
 8018f78:	e7fa      	b.n	8018f70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8018f7a:	bf00      	nop
 8018f7c:	20016ee4 	.word	0x20016ee4
 8018f80:	20016ee0 	.word	0x20016ee0
 8018f84:	20016ee8 	.word	0x20016ee8
 8018f88:	20016eec 	.word	0x20016eec

08018f8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018f8c:	b40e      	push	{r1, r2, r3}
 8018f8e:	4b30      	ldr	r3, [pc, #192]	; (8019050 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8018f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f94:	881a      	ldrh	r2, [r3, #0]
 8018f96:	b09d      	sub	sp, #116	; 0x74
 8018f98:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018f9a:	4604      	mov	r4, r0
 8018f9c:	429a      	cmp	r2, r3
 8018f9e:	d954      	bls.n	801904a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8018fa0:	aa26      	add	r2, sp, #152	; 0x98
 8018fa2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8019054 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8018fa6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8019058 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8018faa:	9202      	str	r2, [sp, #8]
 8018fac:	f8d9 2000 	ldr.w	r2, [r9]
 8018fb0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8018fb8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018fbc:	682b      	ldr	r3, [r5, #0]
 8018fbe:	4628      	mov	r0, r5
 8018fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fc2:	4798      	blx	r3
 8018fc4:	4606      	mov	r6, r0
 8018fc6:	b207      	sxth	r7, r0
 8018fc8:	a803      	add	r0, sp, #12
 8018fca:	f004 fd0e 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 8018fce:	682b      	ldr	r3, [r5, #0]
 8018fd0:	4628      	mov	r0, r5
 8018fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018fd4:	4798      	blx	r3
 8018fd6:	682b      	ldr	r3, [r5, #0]
 8018fd8:	4682      	mov	sl, r0
 8018fda:	4628      	mov	r0, r5
 8018fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fde:	4798      	blx	r3
 8018fe0:	4653      	mov	r3, sl
 8018fe2:	9000      	str	r0, [sp, #0]
 8018fe4:	a803      	add	r0, sp, #12
 8018fe6:	9a02      	ldr	r2, [sp, #8]
 8018fe8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8018fea:	f004 fd59 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018fee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018ff0:	f8d9 3000 	ldr.w	r3, [r9]
 8018ff4:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8018ff8:	8925      	ldrh	r5, [r4, #8]
 8018ffa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8018ffe:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019002:	eba5 050c 	sub.w	r5, r5, ip
 8019006:	784a      	ldrb	r2, [r1, #1]
 8019008:	f8d8 3000 	ldr.w	r3, [r8]
 801900c:	b22d      	sxth	r5, r5
 801900e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019012:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019016:	9500      	str	r5, [sp, #0]
 8019018:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801901c:	a803      	add	r0, sp, #12
 801901e:	f002 fad5 	bl	801b5cc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019022:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019026:	b203      	sxth	r3, r0
 8019028:	18b9      	adds	r1, r7, r2
 801902a:	2900      	cmp	r1, #0
 801902c:	dd0b      	ble.n	8019046 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801902e:	3b01      	subs	r3, #1
 8019030:	fb13 f302 	smulbb	r3, r3, r2
 8019034:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019038:	b21f      	sxth	r7, r3
 801903a:	4638      	mov	r0, r7
 801903c:	b01d      	add	sp, #116	; 0x74
 801903e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019042:	b003      	add	sp, #12
 8019044:	4770      	bx	lr
 8019046:	2b00      	cmp	r3, #0
 8019048:	dcf7      	bgt.n	801903a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801904a:	2700      	movs	r7, #0
 801904c:	e7f5      	b.n	801903a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801904e:	bf00      	nop
 8019050:	20016ee4 	.word	0x20016ee4
 8019054:	20016ee0 	.word	0x20016ee0
 8019058:	20016ee8 	.word	0x20016ee8

0801905c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801905c:	4bbd      	ldr	r3, [pc, #756]	; (8019354 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801905e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019062:	460c      	mov	r4, r1
 8019064:	881b      	ldrh	r3, [r3, #0]
 8019066:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8019068:	b0a9      	sub	sp, #164	; 0xa4
 801906a:	4680      	mov	r8, r0
 801906c:	428b      	cmp	r3, r1
 801906e:	d809      	bhi.n	8019084 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8019070:	2300      	movs	r3, #0
 8019072:	f04f 32ff 	mov.w	r2, #4294967295
 8019076:	6083      	str	r3, [r0, #8]
 8019078:	e9c0 3200 	strd	r3, r2, [r0]
 801907c:	4640      	mov	r0, r8
 801907e:	b029      	add	sp, #164	; 0xa4
 8019080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019084:	4eb4      	ldr	r6, [pc, #720]	; (8019358 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8019086:	6833      	ldr	r3, [r6, #0]
 8019088:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801908c:	4bb3      	ldr	r3, [pc, #716]	; (801935c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019094:	4bb2      	ldr	r3, [pc, #712]	; (8019360 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8019096:	6818      	ldr	r0, [r3, #0]
 8019098:	f7eb f850 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 801909c:	682b      	ldr	r3, [r5, #0]
 801909e:	4681      	mov	r9, r0
 80190a0:	4628      	mov	r0, r5
 80190a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190a4:	4798      	blx	r3
 80190a6:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 80190a8:	b203      	sxth	r3, r0
 80190aa:	4682      	mov	sl, r0
 80190ac:	4407      	add	r7, r0
 80190ae:	a80f      	add	r0, sp, #60	; 0x3c
 80190b0:	9304      	str	r3, [sp, #16]
 80190b2:	b2bb      	uxth	r3, r7
 80190b4:	9303      	str	r3, [sp, #12]
 80190b6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	f040 80a5 	bne.w	801920a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80190c0:	f004 fc93 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 80190c4:	682b      	ldr	r3, [r5, #0]
 80190c6:	4628      	mov	r0, r5
 80190c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190ca:	4798      	blx	r3
 80190cc:	682b      	ldr	r3, [r5, #0]
 80190ce:	4606      	mov	r6, r0
 80190d0:	4628      	mov	r0, r5
 80190d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190d4:	4798      	blx	r3
 80190d6:	6823      	ldr	r3, [r4, #0]
 80190d8:	4607      	mov	r7, r0
 80190da:	4620      	mov	r0, r4
 80190dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80190de:	4798      	blx	r3
 80190e0:	6823      	ldr	r3, [r4, #0]
 80190e2:	4683      	mov	fp, r0
 80190e4:	4620      	mov	r0, r4
 80190e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80190ea:	4798      	blx	r3
 80190ec:	463b      	mov	r3, r7
 80190ee:	4649      	mov	r1, r9
 80190f0:	4632      	mov	r2, r6
 80190f2:	2600      	movs	r6, #0
 80190f4:	e9cd b000 	strd	fp, r0, [sp]
 80190f8:	a80f      	add	r0, sp, #60	; 0x3c
 80190fa:	4637      	mov	r7, r6
 80190fc:	f004 fce5 	bl	801daca <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8019100:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019104:	f8df b250 	ldr.w	fp, [pc, #592]	; 8019358 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8019108:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801910c:	bf0c      	ite	eq
 801910e:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8019112:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8019116:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019118:	4629      	mov	r1, r5
 801911a:	f8db 3000 	ldr.w	r3, [fp]
 801911e:	a80f      	add	r0, sp, #60	; 0x3c
 8019120:	3701      	adds	r7, #1
 8019122:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019126:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801912a:	b2bf      	uxth	r7, r7
 801912c:	785b      	ldrb	r3, [r3, #1]
 801912e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019132:	f001 ff66 	bl	801b002 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019136:	9b03      	ldr	r3, [sp, #12]
 8019138:	4286      	cmp	r6, r0
 801913a:	eba9 0903 	sub.w	r9, r9, r3
 801913e:	bfb8      	it	lt
 8019140:	4606      	movlt	r6, r0
 8019142:	a80f      	add	r0, sp, #60	; 0x3c
 8019144:	fa0f f989 	sxth.w	r9, r9
 8019148:	b236      	sxth	r6, r6
 801914a:	f004 fc75 	bl	801da38 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801914e:	b918      	cbnz	r0, 8019158 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019150:	7a2b      	ldrb	r3, [r5, #8]
 8019152:	444b      	add	r3, r9
 8019154:	2b00      	cmp	r3, #0
 8019156:	dcde      	bgt.n	8019116 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8019158:	9b03      	ldr	r3, [sp, #12]
 801915a:	4620      	mov	r0, r4
 801915c:	9a04      	ldr	r2, [sp, #16]
 801915e:	fb13 f707 	smulbb	r7, r3, r7
 8019162:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019164:	f895 9009 	ldrb.w	r9, [r5, #9]
 8019168:	1aff      	subs	r7, r7, r3
 801916a:	b2bf      	uxth	r7, r7
 801916c:	b23b      	sxth	r3, r7
 801916e:	429a      	cmp	r2, r3
 8019170:	bfa8      	it	ge
 8019172:	4657      	movge	r7, sl
 8019174:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019178:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801917c:	6823      	ldr	r3, [r4, #0]
 801917e:	444f      	add	r7, r9
 8019180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019182:	bf08      	it	eq
 8019184:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8019188:	fa1f f987 	uxth.w	r9, r7
 801918c:	bf18      	it	ne
 801918e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8019192:	4798      	blx	r3
 8019194:	2801      	cmp	r0, #1
 8019196:	fa0f f789 	sxth.w	r7, r9
 801919a:	b2b3      	uxth	r3, r6
 801919c:	f000 80e2 	beq.w	8019364 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80191a0:	2802      	cmp	r0, #2
 80191a2:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 80191a6:	f000 80e3 	beq.w	8019370 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80191aa:	7aea      	ldrb	r2, [r5, #11]
 80191ac:	b236      	sxth	r6, r6
 80191ae:	7b2d      	ldrb	r5, [r5, #12]
 80191b0:	1ab6      	subs	r6, r6, r2
 80191b2:	442a      	add	r2, r5
 80191b4:	fa1f fa86 	uxth.w	sl, r6
 80191b8:	4413      	add	r3, r2
 80191ba:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80191be:	fa0f fb8a 	sxth.w	fp, sl
 80191c2:	b29b      	uxth	r3, r3
 80191c4:	2a02      	cmp	r2, #2
 80191c6:	b21e      	sxth	r6, r3
 80191c8:	f000 80d6 	beq.w	8019378 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80191cc:	2a03      	cmp	r2, #3
 80191ce:	f000 80de 	beq.w	801938e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80191d2:	2a01      	cmp	r2, #1
 80191d4:	f040 80e6 	bne.w	80193a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80191d8:	8925      	ldrh	r5, [r4, #8]
 80191da:	4633      	mov	r3, r6
 80191dc:	463e      	mov	r6, r7
 80191de:	eba5 0909 	sub.w	r9, r5, r9
 80191e2:	461f      	mov	r7, r3
 80191e4:	465d      	mov	r5, fp
 80191e6:	fa0f fb89 	sxth.w	fp, r9
 80191ea:	4b5d      	ldr	r3, [pc, #372]	; (8019360 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80191ec:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80191ee:	6818      	ldr	r0, [r3, #0]
 80191f0:	f7ea ffa4 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 80191f4:	f8a8 b000 	strh.w	fp, [r8]
 80191f8:	f8a8 5002 	strh.w	r5, [r8, #2]
 80191fc:	f8a8 6004 	strh.w	r6, [r8, #4]
 8019200:	f8a8 7006 	strh.w	r7, [r8, #6]
 8019204:	f8c8 0008 	str.w	r0, [r8, #8]
 8019208:	e738      	b.n	801907c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801920a:	f004 fbee 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 801920e:	682b      	ldr	r3, [r5, #0]
 8019210:	4628      	mov	r0, r5
 8019212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019214:	4798      	blx	r3
 8019216:	682b      	ldr	r3, [r5, #0]
 8019218:	4607      	mov	r7, r0
 801921a:	4628      	mov	r0, r5
 801921c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801921e:	4798      	blx	r3
 8019220:	6823      	ldr	r3, [r4, #0]
 8019222:	4683      	mov	fp, r0
 8019224:	4620      	mov	r0, r4
 8019226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019228:	4798      	blx	r3
 801922a:	6822      	ldr	r2, [r4, #0]
 801922c:	9005      	str	r0, [sp, #20]
 801922e:	4620      	mov	r0, r4
 8019230:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8019234:	4790      	blx	r2
 8019236:	9b05      	ldr	r3, [sp, #20]
 8019238:	463a      	mov	r2, r7
 801923a:	4649      	mov	r1, r9
 801923c:	9001      	str	r0, [sp, #4]
 801923e:	a80f      	add	r0, sp, #60	; 0x3c
 8019240:	9300      	str	r3, [sp, #0]
 8019242:	465b      	mov	r3, fp
 8019244:	f004 fc41 	bl	801daca <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8019248:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801924c:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8019250:	af0f      	add	r7, sp, #60	; 0x3c
 8019252:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019256:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801925a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801925c:	bf0a      	itet	eq
 801925e:	464a      	moveq	r2, r9
 8019260:	461a      	movne	r2, r3
 8019262:	4699      	moveq	r9, r3
 8019264:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019268:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801926c:	1ad2      	subs	r2, r2, r3
 801926e:	6833      	ldr	r3, [r6, #0]
 8019270:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8019274:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8019278:	7859      	ldrb	r1, [r3, #1]
 801927a:	2300      	movs	r3, #0
 801927c:	9707      	str	r7, [sp, #28]
 801927e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8019282:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019286:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801928a:	f88d 1020 	strb.w	r1, [sp, #32]
 801928e:	9509      	str	r5, [sp, #36]	; 0x24
 8019290:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019294:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8019298:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801929c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80192a0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80192a4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80192a8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80192ac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80192b0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80192b4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80192b8:	b350      	cbz	r0, 8019310 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80192ba:	682b      	ldr	r3, [r5, #0]
 80192bc:	4628      	mov	r0, r5
 80192be:	695b      	ldr	r3, [r3, #20]
 80192c0:	4798      	blx	r3
 80192c2:	4607      	mov	r7, r0
 80192c4:	b320      	cbz	r0, 8019310 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80192c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192c8:	4639      	mov	r1, r7
 80192ca:	6803      	ldr	r3, [r0, #0]
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	4798      	blx	r3
 80192d0:	4606      	mov	r6, r0
 80192d2:	b1e8      	cbz	r0, 8019310 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80192d4:	7b43      	ldrb	r3, [r0, #13]
 80192d6:	7a82      	ldrb	r2, [r0, #10]
 80192d8:	005b      	lsls	r3, r3, #1
 80192da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80192de:	4313      	orrs	r3, r2
 80192e0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80192e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80192e8:	2b06      	cmp	r3, #6
 80192ea:	d111      	bne.n	8019310 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80192ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192ee:	4632      	mov	r2, r6
 80192f0:	4639      	mov	r1, r7
 80192f2:	6803      	ldr	r3, [r0, #0]
 80192f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192f6:	4798      	blx	r3
 80192f8:	7b73      	ldrb	r3, [r6, #13]
 80192fa:	005b      	lsls	r3, r3, #1
 80192fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019300:	7ab3      	ldrb	r3, [r6, #10]
 8019302:	4313      	orrs	r3, r2
 8019304:	4418      	add	r0, r3
 8019306:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801930a:	4418      	add	r0, r3
 801930c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8019310:	2600      	movs	r6, #0
 8019312:	4637      	mov	r7, r6
 8019314:	a806      	add	r0, sp, #24
 8019316:	3701      	adds	r7, #1
 8019318:	f002 f855 	bl	801b3c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801931c:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8019320:	9b03      	ldr	r3, [sp, #12]
 8019322:	b2bf      	uxth	r7, r7
 8019324:	4286      	cmp	r6, r0
 8019326:	eba9 0903 	sub.w	r9, r9, r3
 801932a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801932e:	bfb8      	it	lt
 8019330:	4606      	movlt	r6, r0
 8019332:	fa0f f989 	sxth.w	r9, r9
 8019336:	b236      	sxth	r6, r6
 8019338:	2b00      	cmp	r3, #0
 801933a:	f43f af0d 	beq.w	8019158 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801933e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8019342:	2b00      	cmp	r3, #0
 8019344:	f47f af08 	bne.w	8019158 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019348:	7a2b      	ldrb	r3, [r5, #8]
 801934a:	444b      	add	r3, r9
 801934c:	2b00      	cmp	r3, #0
 801934e:	dce1      	bgt.n	8019314 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8019350:	e702      	b.n	8019158 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019352:	bf00      	nop
 8019354:	20016ee4 	.word	0x20016ee4
 8019358:	20016ee0 	.word	0x20016ee0
 801935c:	20016ee8 	.word	0x20016ee8
 8019360:	20016eec 	.word	0x20016eec
 8019364:	ebaa 0606 	sub.w	r6, sl, r6
 8019368:	2002      	movs	r0, #2
 801936a:	fb96 f6f0 	sdiv	r6, r6, r0
 801936e:	e71c      	b.n	80191aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8019370:	441e      	add	r6, r3
 8019372:	ebaa 0606 	sub.w	r6, sl, r6
 8019376:	e718      	b.n	80191aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8019378:	8925      	ldrh	r5, [r4, #8]
 801937a:	1aed      	subs	r5, r5, r3
 801937c:	eba5 050a 	sub.w	r5, r5, sl
 8019380:	fa0f fb85 	sxth.w	fp, r5
 8019384:	8965      	ldrh	r5, [r4, #10]
 8019386:	eba5 0509 	sub.w	r5, r5, r9
 801938a:	b22d      	sxth	r5, r5
 801938c:	e72d      	b.n	80191ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801938e:	8965      	ldrh	r5, [r4, #10]
 8019390:	f04f 0b00 	mov.w	fp, #0
 8019394:	1aed      	subs	r5, r5, r3
 8019396:	4633      	mov	r3, r6
 8019398:	463e      	mov	r6, r7
 801939a:	eba5 050a 	sub.w	r5, r5, sl
 801939e:	461f      	mov	r7, r3
 80193a0:	b22d      	sxth	r5, r5
 80193a2:	e722      	b.n	80191ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80193a4:	2500      	movs	r5, #0
 80193a6:	e720      	b.n	80191ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

080193a8 <_ZN8touchgfx8TextAreaD0Ev>:
 80193a8:	b510      	push	{r4, lr}
 80193aa:	4604      	mov	r4, r0
 80193ac:	2148      	movs	r1, #72	; 0x48
 80193ae:	f011 ffb4 	bl	802b31a <_ZdlPvj>
 80193b2:	4620      	mov	r0, r4
 80193b4:	bd10      	pop	{r4, pc}
	...

080193b8 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80193b8:	b513      	push	{r0, r1, r4, lr}
 80193ba:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80193be:	4604      	mov	r4, r0
 80193c0:	b1fb      	cbz	r3, 8019402 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80193c2:	4b16      	ldr	r3, [pc, #88]	; (801941c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80193c4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80193c6:	881b      	ldrh	r3, [r3, #0]
 80193c8:	428b      	cmp	r3, r1
 80193ca:	d91a      	bls.n	8019402 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80193cc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	dd16      	ble.n	8019402 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80193d4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	dd12      	ble.n	8019402 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80193dc:	4b10      	ldr	r3, [pc, #64]	; (8019420 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80193de:	6818      	ldr	r0, [r3, #0]
 80193e0:	f7ea feac 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 80193e4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80193e8:	6822      	ldr	r2, [r4, #0]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	db06      	blt.n	80193fc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80193ee:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	db02      	blt.n	80193fc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80193f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80193f8:	4298      	cmp	r0, r3
 80193fa:	d004      	beq.n	8019406 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80193fc:	6953      	ldr	r3, [r2, #20]
 80193fe:	4620      	mov	r0, r4
 8019400:	4798      	blx	r3
 8019402:	b002      	add	sp, #8
 8019404:	bd10      	pop	{r4, pc}
 8019406:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801940a:	466b      	mov	r3, sp
 801940c:	6912      	ldr	r2, [r2, #16]
 801940e:	c903      	ldmia	r1, {r0, r1}
 8019410:	e883 0003 	stmia.w	r3, {r0, r1}
 8019414:	4619      	mov	r1, r3
 8019416:	4620      	mov	r0, r4
 8019418:	4790      	blx	r2
 801941a:	e7f2      	b.n	8019402 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801941c:	20016ee4 	.word	0x20016ee4
 8019420:	20016eec 	.word	0x20016eec

08019424 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019424:	4b45      	ldr	r3, [pc, #276]	; (801953c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8019426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801942a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801942c:	b08e      	sub	sp, #56	; 0x38
 801942e:	881b      	ldrh	r3, [r3, #0]
 8019430:	4604      	mov	r4, r0
 8019432:	4293      	cmp	r3, r2
 8019434:	d97e      	bls.n	8019534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019436:	6808      	ldr	r0, [r1, #0]
 8019438:	ab05      	add	r3, sp, #20
 801943a:	6849      	ldr	r1, [r1, #4]
 801943c:	4d40      	ldr	r5, [pc, #256]	; (8019540 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801943e:	c303      	stmia	r3!, {r0, r1}
 8019440:	4611      	mov	r1, r2
 8019442:	6828      	ldr	r0, [r5, #0]
 8019444:	f7ea fe7a 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 8019448:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801944c:	2b00      	cmp	r3, #0
 801944e:	db11      	blt.n	8019474 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8019450:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8019454:	2b00      	cmp	r3, #0
 8019456:	db0d      	blt.n	8019474 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8019458:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801945a:	4298      	cmp	r0, r3
 801945c:	d10a      	bne.n	8019474 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801945e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8019462:	ab09      	add	r3, sp, #36	; 0x24
 8019464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019468:	e883 0003 	stmia.w	r3, {r0, r1}
 801946c:	4619      	mov	r1, r3
 801946e:	a805      	add	r0, sp, #20
 8019470:	f7fd febc 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8019474:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019478:	2b00      	cmp	r3, #0
 801947a:	dd5b      	ble.n	8019534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801947c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8019480:	2b00      	cmp	r3, #0
 8019482:	dd57      	ble.n	8019534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019484:	4f2f      	ldr	r7, [pc, #188]	; (8019544 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8019486:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801948e:	4b2e      	ldr	r3, [pc, #184]	; (8019548 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019496:	2e00      	cmp	r6, #0
 8019498:	d04c      	beq.n	8019534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801949a:	6823      	ldr	r3, [r4, #0]
 801949c:	4620      	mov	r0, r4
 801949e:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 80194a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194a4:	4798      	blx	r3
 80194a6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 80194ae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80194b2:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 80194b6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80194ba:	785b      	ldrb	r3, [r3, #1]
 80194bc:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 80194c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80194c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80194c6:	9609      	str	r6, [sp, #36]	; 0x24
 80194c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194cc:	4b1f      	ldr	r3, [pc, #124]	; (801954c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80194ce:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80194d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80194da:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80194de:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80194e2:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80194e6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80194ea:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80194ee:	b10a      	cbz	r2, 80194f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80194f0:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80194f2:	b906      	cbnz	r6, 80194f6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80194f4:	689e      	ldr	r6, [r3, #8]
 80194f6:	af07      	add	r7, sp, #28
 80194f8:	4621      	mov	r1, r4
 80194fa:	4638      	mov	r0, r7
 80194fc:	f003 fe02 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019500:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019502:	6828      	ldr	r0, [r5, #0]
 8019504:	f7ea fe1a 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 8019508:	6823      	ldr	r3, [r4, #0]
 801950a:	4605      	mov	r5, r0
 801950c:	4620      	mov	r0, r4
 801950e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019510:	4798      	blx	r3
 8019512:	6823      	ldr	r3, [r4, #0]
 8019514:	4680      	mov	r8, r0
 8019516:	4620      	mov	r0, r4
 8019518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801951c:	4798      	blx	r3
 801951e:	ab09      	add	r3, sp, #36	; 0x24
 8019520:	9501      	str	r5, [sp, #4]
 8019522:	9300      	str	r3, [sp, #0]
 8019524:	ab05      	add	r3, sp, #20
 8019526:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801952a:	4630      	mov	r0, r6
 801952c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8019530:	f7ea fdb6 	bl	80040a0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019534:	b00e      	add	sp, #56	; 0x38
 8019536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801953a:	bf00      	nop
 801953c:	20016ee4 	.word	0x20016ee4
 8019540:	20016eec 	.word	0x20016eec
 8019544:	20016ee0 	.word	0x20016ee0
 8019548:	20016ee8 	.word	0x20016ee8
 801954c:	20016e88 	.word	0x20016e88

08019550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019550:	b538      	push	{r3, r4, r5, lr}
 8019552:	4b0e      	ldr	r3, [pc, #56]	; (801958c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8019554:	4604      	mov	r4, r0
 8019556:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019558:	881b      	ldrh	r3, [r3, #0]
 801955a:	429a      	cmp	r2, r3
 801955c:	d214      	bcs.n	8019588 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801955e:	6803      	ldr	r3, [r0, #0]
 8019560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019562:	4798      	blx	r3
 8019564:	6823      	ldr	r3, [r4, #0]
 8019566:	4605      	mov	r5, r0
 8019568:	4620      	mov	r0, r4
 801956a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801956c:	4798      	blx	r3
 801956e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019572:	b22d      	sxth	r5, r5
 8019574:	4601      	mov	r1, r0
 8019576:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801957a:	bf06      	itte	eq
 801957c:	4602      	moveq	r2, r0
 801957e:	4629      	moveq	r1, r5
 8019580:	462a      	movne	r2, r5
 8019582:	4620      	mov	r0, r4
 8019584:	f7fd fa5f 	bl	8016a46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019588:	bd38      	pop	{r3, r4, r5, pc}
 801958a:	bf00      	nop
 801958c:	20016ee4 	.word	0x20016ee4

08019590 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019590:	b530      	push	{r4, r5, lr}
 8019592:	888b      	ldrh	r3, [r1, #4]
 8019594:	b085      	sub	sp, #20
 8019596:	4604      	mov	r4, r0
 8019598:	8583      	strh	r3, [r0, #44]	; 0x2c
 801959a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801959e:	b923      	cbnz	r3, 80195aa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80195a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80195a4:	b90b      	cbnz	r3, 80195aa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80195a6:	f7ff ffd3 	bl	8019550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80195aa:	6823      	ldr	r3, [r4, #0]
 80195ac:	466d      	mov	r5, sp
 80195ae:	4621      	mov	r1, r4
 80195b0:	343c      	adds	r4, #60	; 0x3c
 80195b2:	4628      	mov	r0, r5
 80195b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80195b8:	4798      	blx	r3
 80195ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80195c2:	b005      	add	sp, #20
 80195c4:	bd30      	pop	{r4, r5, pc}

080195c6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80195c6:	2300      	movs	r3, #0
 80195c8:	8083      	strh	r3, [r0, #4]
 80195ca:	80c3      	strh	r3, [r0, #6]
 80195cc:	8003      	strh	r3, [r0, #0]
 80195ce:	8043      	strh	r3, [r0, #2]
 80195d0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80195d4:	2bff      	cmp	r3, #255	; 0xff
 80195d6:	bf01      	itttt	eq
 80195d8:	890b      	ldrheq	r3, [r1, #8]
 80195da:	8083      	strheq	r3, [r0, #4]
 80195dc:	894b      	ldrheq	r3, [r1, #10]
 80195de:	80c3      	strheq	r3, [r0, #6]
 80195e0:	4770      	bx	lr
	...

080195e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80195e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80195e6:	4604      	mov	r4, r0
 80195e8:	466b      	mov	r3, sp
 80195ea:	6808      	ldr	r0, [r1, #0]
 80195ec:	6849      	ldr	r1, [r1, #4]
 80195ee:	c303      	stmia	r3!, {r0, r1}
 80195f0:	6823      	ldr	r3, [r4, #0]
 80195f2:	4669      	mov	r1, sp
 80195f4:	4620      	mov	r0, r4
 80195f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195f8:	4798      	blx	r3
 80195fa:	4b08      	ldr	r3, [pc, #32]	; (801961c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019602:	b10a      	cbz	r2, 8019608 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019604:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019606:	b900      	cbnz	r0, 801960a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019608:	6898      	ldr	r0, [r3, #8]
 801960a:	6803      	ldr	r3, [r0, #0]
 801960c:	4669      	mov	r1, sp
 801960e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019610:	6a1d      	ldr	r5, [r3, #32]
 8019612:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019616:	47a8      	blx	r5
 8019618:	b003      	add	sp, #12
 801961a:	bd30      	pop	{r4, r5, pc}
 801961c:	20016e88 	.word	0x20016e88

08019620 <_ZN8touchgfx3BoxD1Ev>:
 8019620:	4770      	bx	lr

08019622 <_ZN8touchgfx3BoxD0Ev>:
 8019622:	b510      	push	{r4, lr}
 8019624:	4604      	mov	r4, r0
 8019626:	212c      	movs	r1, #44	; 0x2c
 8019628:	f011 fe77 	bl	802b31a <_ZdlPvj>
 801962c:	4620      	mov	r0, r4
 801962e:	bd10      	pop	{r4, pc}

08019630 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8019630:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8019634:	b12a      	cbz	r2, 8019642 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8019636:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801963a:	b112      	cbz	r2, 8019642 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801963c:	6803      	ldr	r3, [r0, #0]
 801963e:	695b      	ldr	r3, [r3, #20]
 8019640:	4718      	bx	r3
 8019642:	4770      	bx	lr

08019644 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8019644:	4b30      	ldr	r3, [pc, #192]	; (8019708 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8019646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801964a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801964c:	b08d      	sub	sp, #52	; 0x34
 801964e:	881b      	ldrh	r3, [r3, #0]
 8019650:	4604      	mov	r4, r0
 8019652:	460f      	mov	r7, r1
 8019654:	4293      	cmp	r3, r2
 8019656:	d954      	bls.n	8019702 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8019658:	4b2c      	ldr	r3, [pc, #176]	; (801970c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801965a:	6819      	ldr	r1, [r3, #0]
 801965c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8019660:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8019664:	4a2a      	ldr	r2, [pc, #168]	; (8019710 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8019666:	6812      	ldr	r2, [r2, #0]
 8019668:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801966c:	2900      	cmp	r1, #0
 801966e:	d048      	beq.n	8019702 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8019670:	785a      	ldrb	r2, [r3, #1]
 8019672:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8019676:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801967a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801967e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8019682:	4b24      	ldr	r3, [pc, #144]	; (8019714 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8019684:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8019688:	681a      	ldr	r2, [r3, #0]
 801968a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 801968e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8019692:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8019696:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8019698:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 801969c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80196a0:	9107      	str	r1, [sp, #28]
 80196a2:	f88d 8020 	strb.w	r8, [sp, #32]
 80196a6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80196aa:	9609      	str	r6, [sp, #36]	; 0x24
 80196ac:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80196b0:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 80196b4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 80196b8:	b10b      	cbz	r3, 80196be <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80196ba:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 80196bc:	b905      	cbnz	r5, 80196c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80196be:	6895      	ldr	r5, [r2, #8]
 80196c0:	ae05      	add	r6, sp, #20
 80196c2:	4621      	mov	r1, r4
 80196c4:	4630      	mov	r0, r6
 80196c6:	f003 fd1d 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196ca:	4b13      	ldr	r3, [pc, #76]	; (8019718 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80196cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80196ce:	6818      	ldr	r0, [r3, #0]
 80196d0:	f7ea fd34 	bl	800413c <_ZNK8touchgfx5Texts7getTextEt>
 80196d4:	6823      	ldr	r3, [r4, #0]
 80196d6:	4680      	mov	r8, r0
 80196d8:	4620      	mov	r0, r4
 80196da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80196dc:	4798      	blx	r3
 80196de:	6823      	ldr	r3, [r4, #0]
 80196e0:	4681      	mov	r9, r0
 80196e2:	4620      	mov	r0, r4
 80196e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80196e8:	4798      	blx	r3
 80196ea:	ab07      	add	r3, sp, #28
 80196ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80196f0:	9300      	str	r3, [sp, #0]
 80196f2:	463b      	mov	r3, r7
 80196f4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80196f8:	4628      	mov	r0, r5
 80196fa:	e896 0006 	ldmia.w	r6, {r1, r2}
 80196fe:	f7ea fccf 	bl	80040a0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019702:	b00d      	add	sp, #52	; 0x34
 8019704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019708:	20016ee4 	.word	0x20016ee4
 801970c:	20016ee0 	.word	0x20016ee0
 8019710:	20016ee8 	.word	0x20016ee8
 8019714:	20016e88 	.word	0x20016e88
 8019718:	20016eec 	.word	0x20016eec

0801971c <_ZN8touchgfx5ImageD1Ev>:
 801971c:	4770      	bx	lr

0801971e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801971e:	b570      	push	{r4, r5, r6, lr}
 8019720:	880b      	ldrh	r3, [r1, #0]
 8019722:	460d      	mov	r5, r1
 8019724:	4604      	mov	r4, r0
 8019726:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019728:	4608      	mov	r0, r1
 801972a:	f005 fcf1 	bl	801f110 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801972e:	4606      	mov	r6, r0
 8019730:	4628      	mov	r0, r5
 8019732:	f005 fd21 	bl	801f178 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019736:	6823      	ldr	r3, [r4, #0]
 8019738:	4605      	mov	r5, r0
 801973a:	4631      	mov	r1, r6
 801973c:	4620      	mov	r0, r4
 801973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019740:	4798      	blx	r3
 8019742:	6823      	ldr	r3, [r4, #0]
 8019744:	4629      	mov	r1, r5
 8019746:	4620      	mov	r0, r4
 8019748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801974a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801974e:	4718      	bx	r3

08019750 <_ZN8touchgfx5ImageD0Ev>:
 8019750:	b510      	push	{r4, lr}
 8019752:	4604      	mov	r4, r0
 8019754:	212c      	movs	r1, #44	; 0x2c
 8019756:	f011 fde0 	bl	802b31a <_ZdlPvj>
 801975a:	4620      	mov	r0, r4
 801975c:	bd10      	pop	{r4, pc}

0801975e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801975e:	b510      	push	{r4, lr}
 8019760:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019764:	4604      	mov	r4, r0
 8019766:	2bff      	cmp	r3, #255	; 0xff
 8019768:	d006      	beq.n	8019778 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801976a:	2300      	movs	r3, #0
 801976c:	8003      	strh	r3, [r0, #0]
 801976e:	8043      	strh	r3, [r0, #2]
 8019770:	8083      	strh	r3, [r0, #4]
 8019772:	80c3      	strh	r3, [r0, #6]
 8019774:	4620      	mov	r0, r4
 8019776:	bd10      	pop	{r4, pc}
 8019778:	3126      	adds	r1, #38	; 0x26
 801977a:	f005 fd31 	bl	801f1e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801977e:	e7f9      	b.n	8019774 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08019780 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8019780:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8019784:	b12a      	cbz	r2, 8019792 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019786:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801978a:	b112      	cbz	r2, 8019792 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801978c:	6803      	ldr	r3, [r0, #0]
 801978e:	695b      	ldr	r3, [r3, #20]
 8019790:	4718      	bx	r3
 8019792:	4770      	bx	lr

08019794 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019798:	4604      	mov	r4, r0
 801979a:	b088      	sub	sp, #32
 801979c:	2500      	movs	r5, #0
 801979e:	460f      	mov	r7, r1
 80197a0:	f854 3b26 	ldr.w	r3, [r4], #38
 80197a4:	a904      	add	r1, sp, #16
 80197a6:	4606      	mov	r6, r0
 80197a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80197ae:	4798      	blx	r3
 80197b0:	4620      	mov	r0, r4
 80197b2:	f005 fcad 	bl	801f110 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80197b6:	4680      	mov	r8, r0
 80197b8:	4620      	mov	r0, r4
 80197ba:	f005 fcdd 	bl	801f178 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80197be:	9506      	str	r5, [sp, #24]
 80197c0:	ad06      	add	r5, sp, #24
 80197c2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80197c6:	4639      	mov	r1, r7
 80197c8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80197cc:	4628      	mov	r0, r5
 80197ce:	f7fd fd0d 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 80197d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	dd19      	ble.n	801980e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80197da:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	dd15      	ble.n	801980e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80197e2:	4b0c      	ldr	r3, [pc, #48]	; (8019814 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80197ea:	b10a      	cbz	r2, 80197f0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80197ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80197ee:	b900      	cbnz	r0, 80197f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80197f0:	6898      	ldr	r0, [r3, #8]
 80197f2:	2701      	movs	r7, #1
 80197f4:	6801      	ldr	r1, [r0, #0]
 80197f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80197fa:	9702      	str	r7, [sp, #8]
 80197fc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019800:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019804:	e9cd 5600 	strd	r5, r6, [sp]
 8019808:	688d      	ldr	r5, [r1, #8]
 801980a:	4621      	mov	r1, r4
 801980c:	47a8      	blx	r5
 801980e:	b008      	add	sp, #32
 8019810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019814:	20016e88 	.word	0x20016e88

08019818 <_ZN8touchgfx7OutlineD1Ev>:
 8019818:	4770      	bx	lr

0801981a <_ZN8touchgfx7OutlineD0Ev>:
 801981a:	b510      	push	{r4, lr}
 801981c:	4604      	mov	r4, r0
 801981e:	2130      	movs	r1, #48	; 0x30
 8019820:	f011 fd7b 	bl	802b31a <_ZdlPvj>
 8019824:	4620      	mov	r0, r4
 8019826:	bd10      	pop	{r4, pc}

08019828 <_ZN8touchgfx7Outline5resetEv>:
 8019828:	b510      	push	{r4, lr}
 801982a:	4604      	mov	r4, r0
 801982c:	f000 fe86 	bl	801a53c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8019830:	60e0      	str	r0, [r4, #12]
 8019832:	f000 fe89 	bl	801a548 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8019836:	68e3      	ldr	r3, [r4, #12]
 8019838:	08c0      	lsrs	r0, r0, #3
 801983a:	2200      	movs	r2, #0
 801983c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019840:	6123      	str	r3, [r4, #16]
 8019842:	3801      	subs	r0, #1
 8019844:	60a2      	str	r2, [r4, #8]
 8019846:	6060      	str	r0, [r4, #4]
 8019848:	8019      	strh	r1, [r3, #0]
 801984a:	8059      	strh	r1, [r3, #2]
 801984c:	809a      	strh	r2, [r3, #4]
 801984e:	80da      	strh	r2, [r3, #6]
 8019850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019852:	f023 0301 	bic.w	r3, r3, #1
 8019856:	f043 0302 	orr.w	r3, r3, #2
 801985a:	6263      	str	r3, [r4, #36]	; 0x24
 801985c:	bd10      	pop	{r4, pc}
	...

08019860 <_ZN8touchgfx7OutlineC1Ev>:
 8019860:	4b0a      	ldr	r3, [pc, #40]	; (801988c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8019862:	b510      	push	{r4, lr}
 8019864:	6003      	str	r3, [r0, #0]
 8019866:	2300      	movs	r3, #0
 8019868:	4604      	mov	r4, r0
 801986a:	6243      	str	r3, [r0, #36]	; 0x24
 801986c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8019870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019874:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8019878:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801987c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019880:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8019884:	f7ff ffd0 	bl	8019828 <_ZN8touchgfx7Outline5resetEv>
 8019888:	4620      	mov	r0, r4
 801988a:	bd10      	pop	{r4, pc}
 801988c:	0803127c 	.word	0x0803127c

08019890 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8019890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019894:	b093      	sub	sp, #76	; 0x4c
 8019896:	1156      	asrs	r6, r2, #5
 8019898:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801989a:	9305      	str	r3, [sp, #20]
 801989c:	1153      	asrs	r3, r2, #5
 801989e:	f004 051f 	and.w	r5, r4, #31
 80198a2:	9303      	str	r3, [sp, #12]
 80198a4:	1163      	asrs	r3, r4, #5
 80198a6:	9504      	str	r5, [sp, #16]
 80198a8:	1165      	asrs	r5, r4, #5
 80198aa:	9306      	str	r3, [sp, #24]
 80198ac:	f002 031f 	and.w	r3, r2, #31
 80198b0:	42ae      	cmp	r6, r5
 80198b2:	f040 80f4 	bne.w	8019a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80198b6:	9c04      	ldr	r4, [sp, #16]
 80198b8:	9a05      	ldr	r2, [sp, #20]
 80198ba:	42a3      	cmp	r3, r4
 80198bc:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80198c0:	6902      	ldr	r2, [r0, #16]
 80198c2:	d125      	bne.n	8019910 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80198c4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80198c8:	459e      	cmp	lr, r3
 80198ca:	d103      	bne.n	80198d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80198cc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80198d0:	429e      	cmp	r6, r3
 80198d2:	d035      	beq.n	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80198d4:	88d1      	ldrh	r1, [r2, #6]
 80198d6:	8893      	ldrh	r3, [r2, #4]
 80198d8:	430b      	orrs	r3, r1
 80198da:	d010      	beq.n	80198fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80198dc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	db0c      	blt.n	80198fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80198e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80198e6:	428b      	cmp	r3, r1
 80198e8:	da09      	bge.n	80198fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80198ea:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80198ee:	428b      	cmp	r3, r1
 80198f0:	f103 0301 	add.w	r3, r3, #1
 80198f4:	bf38      	it	cc
 80198f6:	3208      	addcc	r2, #8
 80198f8:	6083      	str	r3, [r0, #8]
 80198fa:	bf38      	it	cc
 80198fc:	6102      	strcc	r2, [r0, #16]
 80198fe:	6903      	ldr	r3, [r0, #16]
 8019900:	9a03      	ldr	r2, [sp, #12]
 8019902:	f8a3 e000 	strh.w	lr, [r3]
 8019906:	805a      	strh	r2, [r3, #2]
 8019908:	2200      	movs	r2, #0
 801990a:	809a      	strh	r2, [r3, #4]
 801990c:	80da      	strh	r2, [r3, #6]
 801990e:	e017      	b.n	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019910:	9c05      	ldr	r4, [sp, #20]
 8019912:	114e      	asrs	r6, r1, #5
 8019914:	f001 0c1f 	and.w	ip, r1, #31
 8019918:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801991c:	f004 041f 	and.w	r4, r4, #31
 8019920:	4576      	cmp	r6, lr
 8019922:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8019926:	9402      	str	r4, [sp, #8]
 8019928:	9c04      	ldr	r4, [sp, #16]
 801992a:	eba4 0403 	sub.w	r4, r4, r3
 801992e:	d10a      	bne.n	8019946 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8019930:	9b02      	ldr	r3, [sp, #8]
 8019932:	44a0      	add	r8, r4
 8019934:	449c      	add	ip, r3
 8019936:	f8a2 8004 	strh.w	r8, [r2, #4]
 801993a:	fb04 a40c 	mla	r4, r4, ip, sl
 801993e:	80d4      	strh	r4, [r2, #6]
 8019940:	b013      	add	sp, #76	; 0x4c
 8019942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019946:	9d05      	ldr	r5, [sp, #20]
 8019948:	1a69      	subs	r1, r5, r1
 801994a:	bf51      	iteee	pl
 801994c:	f1cc 0520 	rsbpl	r5, ip, #32
 8019950:	fb04 f40c 	mulmi.w	r4, r4, ip
 8019954:	4249      	negmi	r1, r1
 8019956:	2500      	movmi	r5, #0
 8019958:	bf5d      	ittte	pl
 801995a:	436c      	mulpl	r4, r5
 801995c:	2520      	movpl	r5, #32
 801995e:	f04f 0901 	movpl.w	r9, #1
 8019962:	f04f 39ff 	movmi.w	r9, #4294967295
 8019966:	9501      	str	r5, [sp, #4]
 8019968:	9f01      	ldr	r7, [sp, #4]
 801996a:	444e      	add	r6, r9
 801996c:	fb94 f5f1 	sdiv	r5, r4, r1
 8019970:	fb01 4415 	mls	r4, r1, r5, r4
 8019974:	44bc      	add	ip, r7
 8019976:	2c00      	cmp	r4, #0
 8019978:	bfbc      	itt	lt
 801997a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801997e:	1864      	addlt	r4, r4, r1
 8019980:	44a8      	add	r8, r5
 8019982:	fb05 ac0c 	mla	ip, r5, ip, sl
 8019986:	f8a2 8004 	strh.w	r8, [r2, #4]
 801998a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801998e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019992:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8019996:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801999a:	ea58 0202 	orrs.w	r2, r8, r2
 801999e:	d011      	beq.n	80199c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80199a0:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80199a4:	f1b8 0f00 	cmp.w	r8, #0
 80199a8:	db0c      	blt.n	80199c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80199aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80199ac:	4590      	cmp	r8, r2
 80199ae:	da09      	bge.n	80199c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80199b0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80199b4:	4590      	cmp	r8, r2
 80199b6:	bf3c      	itt	cc
 80199b8:	f10c 0208 	addcc.w	r2, ip, #8
 80199bc:	6102      	strcc	r2, [r0, #16]
 80199be:	f108 0201 	add.w	r2, r8, #1
 80199c2:	6082      	str	r2, [r0, #8]
 80199c4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80199c8:	2700      	movs	r7, #0
 80199ca:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80199ce:	45b6      	cmp	lr, r6
 80199d0:	f8ac 6000 	strh.w	r6, [ip]
 80199d4:	442b      	add	r3, r5
 80199d6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80199da:	f8ac 7004 	strh.w	r7, [ip, #4]
 80199de:	f8ac 7006 	strh.w	r7, [ip, #6]
 80199e2:	d04b      	beq.n	8019a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80199e4:	9f04      	ldr	r7, [sp, #16]
 80199e6:	1a64      	subs	r4, r4, r1
 80199e8:	f04f 0a00 	mov.w	sl, #0
 80199ec:	1aff      	subs	r7, r7, r3
 80199ee:	443d      	add	r5, r7
 80199f0:	016d      	lsls	r5, r5, #5
 80199f2:	fb95 f8f1 	sdiv	r8, r5, r1
 80199f6:	fb01 5518 	mls	r5, r1, r8, r5
 80199fa:	2d00      	cmp	r5, #0
 80199fc:	bfbc      	itt	lt
 80199fe:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019a02:	186d      	addlt	r5, r5, r1
 8019a04:	f108 0701 	add.w	r7, r8, #1
 8019a08:	9703      	str	r7, [sp, #12]
 8019a0a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019a0e:	1964      	adds	r4, r4, r5
 8019a10:	444e      	add	r6, r9
 8019a12:	bf54      	ite	pl
 8019a14:	9f03      	ldrpl	r7, [sp, #12]
 8019a16:	4647      	movmi	r7, r8
 8019a18:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019a1c:	bf58      	it	pl
 8019a1e:	1a64      	subpl	r4, r4, r1
 8019a20:	443b      	add	r3, r7
 8019a22:	44bb      	add	fp, r7
 8019a24:	f8ac b004 	strh.w	fp, [ip, #4]
 8019a28:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019a2c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019a30:	f8ac b006 	strh.w	fp, [ip, #6]
 8019a34:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019a38:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019a3c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019a40:	ea5b 0707 	orrs.w	r7, fp, r7
 8019a44:	d011      	beq.n	8019a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8019a46:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019a4a:	f1bb 0f00 	cmp.w	fp, #0
 8019a4e:	db0c      	blt.n	8019a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8019a50:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019a52:	45bb      	cmp	fp, r7
 8019a54:	da09      	bge.n	8019a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8019a56:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019a5a:	45bb      	cmp	fp, r7
 8019a5c:	bf3c      	itt	cc
 8019a5e:	f10c 0708 	addcc.w	r7, ip, #8
 8019a62:	6107      	strcc	r7, [r0, #16]
 8019a64:	f10b 0701 	add.w	r7, fp, #1
 8019a68:	6087      	str	r7, [r0, #8]
 8019a6a:	6907      	ldr	r7, [r0, #16]
 8019a6c:	45b6      	cmp	lr, r6
 8019a6e:	803e      	strh	r6, [r7, #0]
 8019a70:	807a      	strh	r2, [r7, #2]
 8019a72:	f8a7 a004 	strh.w	sl, [r7, #4]
 8019a76:	f8a7 a006 	strh.w	sl, [r7, #6]
 8019a7a:	d1c6      	bne.n	8019a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8019a7c:	9a04      	ldr	r2, [sp, #16]
 8019a7e:	1ad3      	subs	r3, r2, r3
 8019a80:	6902      	ldr	r2, [r0, #16]
 8019a82:	8891      	ldrh	r1, [r2, #4]
 8019a84:	88d6      	ldrh	r6, [r2, #6]
 8019a86:	4419      	add	r1, r3
 8019a88:	8091      	strh	r1, [r2, #4]
 8019a8a:	9902      	ldr	r1, [sp, #8]
 8019a8c:	f101 0c20 	add.w	ip, r1, #32
 8019a90:	9901      	ldr	r1, [sp, #4]
 8019a92:	ebac 0c01 	sub.w	ip, ip, r1
 8019a96:	fb03 630c 	mla	r3, r3, ip, r6
 8019a9a:	80d3      	strh	r3, [r2, #6]
 8019a9c:	e750      	b.n	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019a9e:	9d05      	ldr	r5, [sp, #20]
 8019aa0:	1aa2      	subs	r2, r4, r2
 8019aa2:	eba5 0501 	sub.w	r5, r5, r1
 8019aa6:	9202      	str	r2, [sp, #8]
 8019aa8:	9508      	str	r5, [sp, #32]
 8019aaa:	f140 8128 	bpl.w	8019cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8019aae:	9a03      	ldr	r2, [sp, #12]
 8019ab0:	2a00      	cmp	r2, #0
 8019ab2:	f6ff af45 	blt.w	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019ab6:	9a02      	ldr	r2, [sp, #8]
 8019ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8019abc:	4252      	negs	r2, r2
 8019abe:	940b      	str	r4, [sp, #44]	; 0x2c
 8019ac0:	2400      	movs	r4, #0
 8019ac2:	9202      	str	r2, [sp, #8]
 8019ac4:	9a06      	ldr	r2, [sp, #24]
 8019ac6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8019aca:	9206      	str	r2, [sp, #24]
 8019acc:	462a      	mov	r2, r5
 8019ace:	435a      	muls	r2, r3
 8019ad0:	9401      	str	r4, [sp, #4]
 8019ad2:	9c02      	ldr	r4, [sp, #8]
 8019ad4:	9d02      	ldr	r5, [sp, #8]
 8019ad6:	fb92 f4f4 	sdiv	r4, r2, r4
 8019ada:	fb05 2214 	mls	r2, r5, r4, r2
 8019ade:	2a00      	cmp	r2, #0
 8019ae0:	9207      	str	r2, [sp, #28]
 8019ae2:	bfbc      	itt	lt
 8019ae4:	1952      	addlt	r2, r2, r5
 8019ae6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8019aea:	6905      	ldr	r5, [r0, #16]
 8019aec:	bfb8      	it	lt
 8019aee:	9207      	strlt	r2, [sp, #28]
 8019af0:	eb04 0901 	add.w	r9, r4, r1
 8019af4:	9a01      	ldr	r2, [sp, #4]
 8019af6:	ea4f 1669 	mov.w	r6, r9, asr #5
 8019afa:	429a      	cmp	r2, r3
 8019afc:	f040 8111 	bne.w	8019d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8019b00:	f9b5 3000 	ldrsh.w	r3, [r5]
 8019b04:	429e      	cmp	r6, r3
 8019b06:	d104      	bne.n	8019b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8019b08:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019b0c:	9a03      	ldr	r2, [sp, #12]
 8019b0e:	429a      	cmp	r2, r3
 8019b10:	d01b      	beq.n	8019b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8019b12:	88ea      	ldrh	r2, [r5, #6]
 8019b14:	88ab      	ldrh	r3, [r5, #4]
 8019b16:	4313      	orrs	r3, r2
 8019b18:	d010      	beq.n	8019b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8019b1a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019b1e:	2a00      	cmp	r2, #0
 8019b20:	db0c      	blt.n	8019b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8019b22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019b24:	429a      	cmp	r2, r3
 8019b26:	da09      	bge.n	8019b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8019b28:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8019b2c:	429a      	cmp	r2, r3
 8019b2e:	f102 0201 	add.w	r2, r2, #1
 8019b32:	bf38      	it	cc
 8019b34:	3508      	addcc	r5, #8
 8019b36:	6082      	str	r2, [r0, #8]
 8019b38:	bf38      	it	cc
 8019b3a:	6105      	strcc	r5, [r0, #16]
 8019b3c:	6903      	ldr	r3, [r0, #16]
 8019b3e:	9a03      	ldr	r2, [sp, #12]
 8019b40:	801e      	strh	r6, [r3, #0]
 8019b42:	805a      	strh	r2, [r3, #2]
 8019b44:	2200      	movs	r2, #0
 8019b46:	809a      	strh	r2, [r3, #4]
 8019b48:	80da      	strh	r2, [r3, #6]
 8019b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b4c:	9a03      	ldr	r2, [sp, #12]
 8019b4e:	6901      	ldr	r1, [r0, #16]
 8019b50:	441a      	add	r2, r3
 8019b52:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019b56:	42b3      	cmp	r3, r6
 8019b58:	d103      	bne.n	8019b62 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8019b5a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d01a      	beq.n	8019b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8019b62:	88cc      	ldrh	r4, [r1, #6]
 8019b64:	888b      	ldrh	r3, [r1, #4]
 8019b66:	4323      	orrs	r3, r4
 8019b68:	d010      	beq.n	8019b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8019b6a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8019b6e:	2c00      	cmp	r4, #0
 8019b70:	db0c      	blt.n	8019b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8019b72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019b74:	429c      	cmp	r4, r3
 8019b76:	da09      	bge.n	8019b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8019b78:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8019b7c:	429c      	cmp	r4, r3
 8019b7e:	f104 0401 	add.w	r4, r4, #1
 8019b82:	bf38      	it	cc
 8019b84:	3108      	addcc	r1, #8
 8019b86:	6084      	str	r4, [r0, #8]
 8019b88:	bf38      	it	cc
 8019b8a:	6101      	strcc	r1, [r0, #16]
 8019b8c:	6903      	ldr	r3, [r0, #16]
 8019b8e:	2100      	movs	r1, #0
 8019b90:	801e      	strh	r6, [r3, #0]
 8019b92:	805a      	strh	r2, [r3, #2]
 8019b94:	8099      	strh	r1, [r3, #4]
 8019b96:	80d9      	strh	r1, [r3, #6]
 8019b98:	9b06      	ldr	r3, [sp, #24]
 8019b9a:	4293      	cmp	r3, r2
 8019b9c:	f000 8082 	beq.w	8019ca4 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8019ba0:	9b08      	ldr	r3, [sp, #32]
 8019ba2:	9902      	ldr	r1, [sp, #8]
 8019ba4:	015b      	lsls	r3, r3, #5
 8019ba6:	9c02      	ldr	r4, [sp, #8]
 8019ba8:	fb93 f1f1 	sdiv	r1, r3, r1
 8019bac:	fb04 3311 	mls	r3, r4, r1, r3
 8019bb0:	9103      	str	r1, [sp, #12]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	9308      	str	r3, [sp, #32]
 8019bb6:	da04      	bge.n	8019bc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8019bb8:	1e4b      	subs	r3, r1, #1
 8019bba:	9303      	str	r3, [sp, #12]
 8019bbc:	9b08      	ldr	r3, [sp, #32]
 8019bbe:	4423      	add	r3, r4
 8019bc0:	9308      	str	r3, [sp, #32]
 8019bc2:	9b07      	ldr	r3, [sp, #28]
 8019bc4:	464f      	mov	r7, r9
 8019bc6:	9902      	ldr	r1, [sp, #8]
 8019bc8:	2600      	movs	r6, #0
 8019bca:	1a5b      	subs	r3, r3, r1
 8019bcc:	9307      	str	r3, [sp, #28]
 8019bce:	9b01      	ldr	r3, [sp, #4]
 8019bd0:	f1c3 0320 	rsb	r3, r3, #32
 8019bd4:	930e      	str	r3, [sp, #56]	; 0x38
 8019bd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019bd8:	9b01      	ldr	r3, [sp, #4]
 8019bda:	1a5b      	subs	r3, r3, r1
 8019bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8019bde:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8019be2:	185b      	adds	r3, r3, r1
 8019be4:	bf58      	it	pl
 8019be6:	9902      	ldrpl	r1, [sp, #8]
 8019be8:	9307      	str	r3, [sp, #28]
 8019bea:	bf57      	itett	pl
 8019bec:	1a5b      	subpl	r3, r3, r1
 8019bee:	9903      	ldrmi	r1, [sp, #12]
 8019bf0:	9307      	strpl	r3, [sp, #28]
 8019bf2:	9b03      	ldrpl	r3, [sp, #12]
 8019bf4:	bf58      	it	pl
 8019bf6:	1c59      	addpl	r1, r3, #1
 8019bf8:	2a00      	cmp	r2, #0
 8019bfa:	4489      	add	r9, r1
 8019bfc:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8019c00:	db2e      	blt.n	8019c60 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019c02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019c04:	4293      	cmp	r3, r2
 8019c06:	dd2b      	ble.n	8019c60 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019c08:	9c01      	ldr	r4, [sp, #4]
 8019c0a:	6905      	ldr	r5, [r0, #16]
 8019c0c:	46a0      	mov	r8, r4
 8019c0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019c10:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8019c14:	45a0      	cmp	r8, r4
 8019c16:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8019c1a:	f040 814c 	bne.w	8019eb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8019c1e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8019c22:	4551      	cmp	r1, sl
 8019c24:	d103      	bne.n	8019c2e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8019c26:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8019c2a:	4291      	cmp	r1, r2
 8019c2c:	d018      	beq.n	8019c60 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019c2e:	ea5c 010e 	orrs.w	r1, ip, lr
 8019c32:	d00f      	beq.n	8019c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8019c34:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8019c38:	2900      	cmp	r1, #0
 8019c3a:	db0b      	blt.n	8019c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8019c3c:	428b      	cmp	r3, r1
 8019c3e:	dd09      	ble.n	8019c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8019c40:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8019c44:	4299      	cmp	r1, r3
 8019c46:	f101 0101 	add.w	r1, r1, #1
 8019c4a:	bf38      	it	cc
 8019c4c:	3508      	addcc	r5, #8
 8019c4e:	6081      	str	r1, [r0, #8]
 8019c50:	bf38      	it	cc
 8019c52:	6105      	strcc	r5, [r0, #16]
 8019c54:	6903      	ldr	r3, [r0, #16]
 8019c56:	f8a3 a000 	strh.w	sl, [r3]
 8019c5a:	805a      	strh	r2, [r3, #2]
 8019c5c:	809e      	strh	r6, [r3, #4]
 8019c5e:	80de      	strh	r6, [r3, #6]
 8019c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c62:	6901      	ldr	r1, [r0, #16]
 8019c64:	441a      	add	r2, r3
 8019c66:	88cc      	ldrh	r4, [r1, #6]
 8019c68:	888b      	ldrh	r3, [r1, #4]
 8019c6a:	4323      	orrs	r3, r4
 8019c6c:	d010      	beq.n	8019c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8019c6e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8019c72:	2c00      	cmp	r4, #0
 8019c74:	db0c      	blt.n	8019c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8019c76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019c78:	429c      	cmp	r4, r3
 8019c7a:	da09      	bge.n	8019c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8019c7c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8019c80:	429c      	cmp	r4, r3
 8019c82:	f104 0401 	add.w	r4, r4, #1
 8019c86:	bf38      	it	cc
 8019c88:	3108      	addcc	r1, #8
 8019c8a:	6084      	str	r4, [r0, #8]
 8019c8c:	bf38      	it	cc
 8019c8e:	6101      	strcc	r1, [r0, #16]
 8019c90:	6903      	ldr	r3, [r0, #16]
 8019c92:	464f      	mov	r7, r9
 8019c94:	f8a3 a000 	strh.w	sl, [r3]
 8019c98:	805a      	strh	r2, [r3, #2]
 8019c9a:	809e      	strh	r6, [r3, #4]
 8019c9c:	80de      	strh	r6, [r3, #6]
 8019c9e:	9b06      	ldr	r3, [sp, #24]
 8019ca0:	4293      	cmp	r3, r2
 8019ca2:	d19c      	bne.n	8019bde <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8019ca4:	9b01      	ldr	r3, [sp, #4]
 8019ca6:	6907      	ldr	r7, [r0, #16]
 8019ca8:	f1c3 0620 	rsb	r6, r3, #32
 8019cac:	9b05      	ldr	r3, [sp, #20]
 8019cae:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8019cb2:	9b04      	ldr	r3, [sp, #16]
 8019cb4:	429e      	cmp	r6, r3
 8019cb6:	f040 81c7 	bne.w	801a048 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8019cba:	f9b7 3000 	ldrsh.w	r3, [r7]
 8019cbe:	459e      	cmp	lr, r3
 8019cc0:	d104      	bne.n	8019ccc <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8019cc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	f43f ae3a 	beq.w	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019ccc:	88f9      	ldrh	r1, [r7, #6]
 8019cce:	88bb      	ldrh	r3, [r7, #4]
 8019cd0:	430b      	orrs	r3, r1
 8019cd2:	d010      	beq.n	8019cf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8019cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	db0c      	blt.n	8019cf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8019cdc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8019cde:	428b      	cmp	r3, r1
 8019ce0:	da09      	bge.n	8019cf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8019ce2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8019ce6:	428b      	cmp	r3, r1
 8019ce8:	f103 0301 	add.w	r3, r3, #1
 8019cec:	bf38      	it	cc
 8019cee:	3708      	addcc	r7, #8
 8019cf0:	6083      	str	r3, [r0, #8]
 8019cf2:	bf38      	it	cc
 8019cf4:	6107      	strcc	r7, [r0, #16]
 8019cf6:	6903      	ldr	r3, [r0, #16]
 8019cf8:	f8a3 e000 	strh.w	lr, [r3]
 8019cfc:	e603      	b.n	8019906 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8019cfe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8019d00:	9c03      	ldr	r4, [sp, #12]
 8019d02:	42a2      	cmp	r2, r4
 8019d04:	f6ff ae1c 	blt.w	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019d08:	9c06      	ldr	r4, [sp, #24]
 8019d0a:	42a2      	cmp	r2, r4
 8019d0c:	9c08      	ldr	r4, [sp, #32]
 8019d0e:	bfbc      	itt	lt
 8019d10:	3201      	addlt	r2, #1
 8019d12:	9206      	strlt	r2, [sp, #24]
 8019d14:	f1c3 0220 	rsb	r2, r3, #32
 8019d18:	4362      	muls	r2, r4
 8019d1a:	2401      	movs	r4, #1
 8019d1c:	940b      	str	r4, [sp, #44]	; 0x2c
 8019d1e:	2420      	movs	r4, #32
 8019d20:	e6d6      	b.n	8019ad0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8019d22:	ea4f 1861 	mov.w	r8, r1, asr #5
 8019d26:	f009 021f 	and.w	r2, r9, #31
 8019d2a:	f001 011f 	and.w	r1, r1, #31
 8019d2e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8019d32:	920c      	str	r2, [sp, #48]	; 0x30
 8019d34:	45b0      	cmp	r8, r6
 8019d36:	9a01      	ldr	r2, [sp, #4]
 8019d38:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8019d3c:	eba2 0203 	sub.w	r2, r2, r3
 8019d40:	d108      	bne.n	8019d54 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8019d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d44:	4496      	add	lr, r2
 8019d46:	4419      	add	r1, r3
 8019d48:	f8a5 e004 	strh.w	lr, [r5, #4]
 8019d4c:	fb02 a101 	mla	r1, r2, r1, sl
 8019d50:	80e9      	strh	r1, [r5, #6]
 8019d52:	e6fa      	b.n	8019b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8019d54:	2c00      	cmp	r4, #0
 8019d56:	f2c0 80a7 	blt.w	8019ea8 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8019d5a:	2701      	movs	r7, #1
 8019d5c:	f1c1 0c20 	rsb	ip, r1, #32
 8019d60:	970a      	str	r7, [sp, #40]	; 0x28
 8019d62:	2720      	movs	r7, #32
 8019d64:	fb02 f20c 	mul.w	r2, r2, ip
 8019d68:	9709      	str	r7, [sp, #36]	; 0x24
 8019d6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019d6c:	fb92 fcf4 	sdiv	ip, r2, r4
 8019d70:	fb04 221c 	mls	r2, r4, ip, r2
 8019d74:	4439      	add	r1, r7
 8019d76:	2a00      	cmp	r2, #0
 8019d78:	bfbc      	itt	lt
 8019d7a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8019d7e:	1912      	addlt	r2, r2, r4
 8019d80:	fb0c a101 	mla	r1, ip, r1, sl
 8019d84:	44e6      	add	lr, ip
 8019d86:	80e9      	strh	r1, [r5, #6]
 8019d88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019d8a:	f8a5 e004 	strh.w	lr, [r5, #4]
 8019d8e:	eb08 0501 	add.w	r5, r8, r1
 8019d92:	6901      	ldr	r1, [r0, #16]
 8019d94:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8019d98:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8019d9c:	ea58 070e 	orrs.w	r7, r8, lr
 8019da0:	d010      	beq.n	8019dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8019da2:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8019da6:	f1be 0f00 	cmp.w	lr, #0
 8019daa:	db0b      	blt.n	8019dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8019dac:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019dae:	45be      	cmp	lr, r7
 8019db0:	da08      	bge.n	8019dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8019db2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019db6:	45be      	cmp	lr, r7
 8019db8:	bf3c      	itt	cc
 8019dba:	3108      	addcc	r1, #8
 8019dbc:	6101      	strcc	r1, [r0, #16]
 8019dbe:	f10e 0101 	add.w	r1, lr, #1
 8019dc2:	6081      	str	r1, [r0, #8]
 8019dc4:	6901      	ldr	r1, [r0, #16]
 8019dc6:	f04f 0e00 	mov.w	lr, #0
 8019dca:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8019dce:	42ae      	cmp	r6, r5
 8019dd0:	800d      	strh	r5, [r1, #0]
 8019dd2:	4463      	add	r3, ip
 8019dd4:	f8a1 8002 	strh.w	r8, [r1, #2]
 8019dd8:	f8a1 e004 	strh.w	lr, [r1, #4]
 8019ddc:	f8a1 e006 	strh.w	lr, [r1, #6]
 8019de0:	d053      	beq.n	8019e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8019de2:	9901      	ldr	r1, [sp, #4]
 8019de4:	1b12      	subs	r2, r2, r4
 8019de6:	1ac9      	subs	r1, r1, r3
 8019de8:	4461      	add	r1, ip
 8019dea:	0149      	lsls	r1, r1, #5
 8019dec:	fb91 fef4 	sdiv	lr, r1, r4
 8019df0:	fb04 111e 	mls	r1, r4, lr, r1
 8019df4:	2900      	cmp	r1, #0
 8019df6:	bfbc      	itt	lt
 8019df8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8019dfc:	1909      	addlt	r1, r1, r4
 8019dfe:	f10e 0701 	add.w	r7, lr, #1
 8019e02:	970d      	str	r7, [sp, #52]	; 0x34
 8019e04:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8019e08:	1852      	adds	r2, r2, r1
 8019e0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019e0c:	bf54      	ite	pl
 8019e0e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8019e12:	46f4      	movmi	ip, lr
 8019e14:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8019e18:	bf58      	it	pl
 8019e1a:	1b12      	subpl	r2, r2, r4
 8019e1c:	4463      	add	r3, ip
 8019e1e:	443d      	add	r5, r7
 8019e20:	44e3      	add	fp, ip
 8019e22:	f8aa b004 	strh.w	fp, [sl, #4]
 8019e26:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8019e2a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8019e2e:	f8aa b006 	strh.w	fp, [sl, #6]
 8019e32:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019e36:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019e3a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8019e3e:	ea5b 070a 	orrs.w	r7, fp, sl
 8019e42:	d014      	beq.n	8019e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019e44:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8019e48:	f1ba 0f00 	cmp.w	sl, #0
 8019e4c:	db0f      	blt.n	8019e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019e4e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019e50:	45ba      	cmp	sl, r7
 8019e52:	da0c      	bge.n	8019e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019e54:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8019e58:	45ba      	cmp	sl, r7
 8019e5a:	f10a 0a01 	add.w	sl, sl, #1
 8019e5e:	bf38      	it	cc
 8019e60:	f10c 0c08 	addcc.w	ip, ip, #8
 8019e64:	f8c0 a008 	str.w	sl, [r0, #8]
 8019e68:	bf38      	it	cc
 8019e6a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8019e6e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019e72:	f04f 0700 	mov.w	r7, #0
 8019e76:	42ae      	cmp	r6, r5
 8019e78:	f8ac 5000 	strh.w	r5, [ip]
 8019e7c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8019e80:	f8ac 7004 	strh.w	r7, [ip, #4]
 8019e84:	f8ac 7006 	strh.w	r7, [ip, #6]
 8019e88:	d1bc      	bne.n	8019e04 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8019e8a:	6904      	ldr	r4, [r0, #16]
 8019e8c:	9a01      	ldr	r2, [sp, #4]
 8019e8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019e90:	1ad3      	subs	r3, r2, r3
 8019e92:	88a2      	ldrh	r2, [r4, #4]
 8019e94:	3120      	adds	r1, #32
 8019e96:	441a      	add	r2, r3
 8019e98:	80a2      	strh	r2, [r4, #4]
 8019e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e9c:	1a89      	subs	r1, r1, r2
 8019e9e:	88e2      	ldrh	r2, [r4, #6]
 8019ea0:	fb03 2301 	mla	r3, r3, r1, r2
 8019ea4:	80e3      	strh	r3, [r4, #6]
 8019ea6:	e650      	b.n	8019b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8019ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8019eac:	434a      	muls	r2, r1
 8019eae:	4264      	negs	r4, r4
 8019eb0:	970a      	str	r7, [sp, #40]	; 0x28
 8019eb2:	2700      	movs	r7, #0
 8019eb4:	e758      	b.n	8019d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8019eb6:	ea4f 1867 	mov.w	r8, r7, asr #5
 8019eba:	f009 031f 	and.w	r3, r9, #31
 8019ebe:	f007 071f 	and.w	r7, r7, #31
 8019ec2:	fa1f fc8c 	uxth.w	ip, ip
 8019ec6:	45d0      	cmp	r8, sl
 8019ec8:	930f      	str	r3, [sp, #60]	; 0x3c
 8019eca:	fa1f fe8e 	uxth.w	lr, lr
 8019ece:	d10a      	bne.n	8019ee6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8019ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ed2:	449c      	add	ip, r3
 8019ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ed6:	441f      	add	r7, r3
 8019ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eda:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019ede:	fb03 e707 	mla	r7, r3, r7, lr
 8019ee2:	80ef      	strh	r7, [r5, #6]
 8019ee4:	e6bc      	b.n	8019c60 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019ee6:	2900      	cmp	r1, #0
 8019ee8:	f2c0 80a6 	blt.w	801a038 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8019eec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019eee:	f1c7 0320 	rsb	r3, r7, #32
 8019ef2:	4363      	muls	r3, r4
 8019ef4:	2401      	movs	r4, #1
 8019ef6:	940d      	str	r4, [sp, #52]	; 0x34
 8019ef8:	2420      	movs	r4, #32
 8019efa:	940c      	str	r4, [sp, #48]	; 0x30
 8019efc:	fb93 f4f1 	sdiv	r4, r3, r1
 8019f00:	fb01 3b14 	mls	fp, r1, r4, r3
 8019f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f06:	f1bb 0f00 	cmp.w	fp, #0
 8019f0a:	441f      	add	r7, r3
 8019f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f0e:	bfbc      	itt	lt
 8019f10:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8019f14:	448b      	addlt	fp, r1
 8019f16:	fb04 e707 	mla	r7, r4, r7, lr
 8019f1a:	44a4      	add	ip, r4
 8019f1c:	80ef      	strh	r7, [r5, #6]
 8019f1e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019f22:	eb08 0503 	add.w	r5, r8, r3
 8019f26:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019f2a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8019f2e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019f32:	ea5e 0307 	orrs.w	r3, lr, r7
 8019f36:	d011      	beq.n	8019f5c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019f38:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8019f3c:	f1be 0f00 	cmp.w	lr, #0
 8019f40:	db0c      	blt.n	8019f5c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019f42:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019f44:	45be      	cmp	lr, r7
 8019f46:	da09      	bge.n	8019f5c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019f48:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019f4c:	45be      	cmp	lr, r7
 8019f4e:	bf3c      	itt	cc
 8019f50:	f10c 0708 	addcc.w	r7, ip, #8
 8019f54:	6107      	strcc	r7, [r0, #16]
 8019f56:	f10e 0701 	add.w	r7, lr, #1
 8019f5a:	6087      	str	r7, [r0, #8]
 8019f5c:	6907      	ldr	r7, [r0, #16]
 8019f5e:	b213      	sxth	r3, r2
 8019f60:	4555      	cmp	r5, sl
 8019f62:	9310      	str	r3, [sp, #64]	; 0x40
 8019f64:	807b      	strh	r3, [r7, #2]
 8019f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f68:	803d      	strh	r5, [r7, #0]
 8019f6a:	80be      	strh	r6, [r7, #4]
 8019f6c:	eb04 0c03 	add.w	ip, r4, r3
 8019f70:	80fe      	strh	r6, [r7, #6]
 8019f72:	d050      	beq.n	801a016 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8019f74:	9b01      	ldr	r3, [sp, #4]
 8019f76:	eba3 070c 	sub.w	r7, r3, ip
 8019f7a:	ebab 0301 	sub.w	r3, fp, r1
 8019f7e:	443c      	add	r4, r7
 8019f80:	9309      	str	r3, [sp, #36]	; 0x24
 8019f82:	0164      	lsls	r4, r4, #5
 8019f84:	fb94 f8f1 	sdiv	r8, r4, r1
 8019f88:	fb01 4418 	mls	r4, r1, r8, r4
 8019f8c:	2c00      	cmp	r4, #0
 8019f8e:	bfbc      	itt	lt
 8019f90:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019f94:	1864      	addlt	r4, r4, r1
 8019f96:	f108 0701 	add.w	r7, r8, #1
 8019f9a:	9711      	str	r7, [sp, #68]	; 0x44
 8019f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f9e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019fa2:	191b      	adds	r3, r3, r4
 8019fa4:	f8be b004 	ldrh.w	fp, [lr, #4]
 8019fa8:	bf54      	ite	pl
 8019faa:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8019fac:	4647      	movmi	r7, r8
 8019fae:	9309      	str	r3, [sp, #36]	; 0x24
 8019fb0:	bf58      	it	pl
 8019fb2:	1a5b      	subpl	r3, r3, r1
 8019fb4:	44bb      	add	fp, r7
 8019fb6:	44bc      	add	ip, r7
 8019fb8:	bf58      	it	pl
 8019fba:	9309      	strpl	r3, [sp, #36]	; 0x24
 8019fbc:	f8ae b004 	strh.w	fp, [lr, #4]
 8019fc0:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019fc4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019fc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019fca:	f8ae b006 	strh.w	fp, [lr, #6]
 8019fce:	443d      	add	r5, r7
 8019fd0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019fd4:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019fd8:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8019fdc:	ea5b 0307 	orrs.w	r3, fp, r7
 8019fe0:	d011      	beq.n	801a006 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019fe2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8019fe6:	f1bb 0f00 	cmp.w	fp, #0
 8019fea:	db0c      	blt.n	801a006 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019fec:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019fee:	45bb      	cmp	fp, r7
 8019ff0:	da09      	bge.n	801a006 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019ff2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019ff6:	45bb      	cmp	fp, r7
 8019ff8:	bf3c      	itt	cc
 8019ffa:	f10e 0708 	addcc.w	r7, lr, #8
 8019ffe:	6107      	strcc	r7, [r0, #16]
 801a000:	f10b 0701 	add.w	r7, fp, #1
 801a004:	6087      	str	r7, [r0, #8]
 801a006:	6907      	ldr	r7, [r0, #16]
 801a008:	4555      	cmp	r5, sl
 801a00a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a00c:	803d      	strh	r5, [r7, #0]
 801a00e:	807b      	strh	r3, [r7, #2]
 801a010:	80be      	strh	r6, [r7, #4]
 801a012:	80fe      	strh	r6, [r7, #6]
 801a014:	d1c2      	bne.n	8019f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801a016:	9b01      	ldr	r3, [sp, #4]
 801a018:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a01a:	eba3 0c0c 	sub.w	ip, r3, ip
 801a01e:	6903      	ldr	r3, [r0, #16]
 801a020:	3720      	adds	r7, #32
 801a022:	8899      	ldrh	r1, [r3, #4]
 801a024:	4461      	add	r1, ip
 801a026:	8099      	strh	r1, [r3, #4]
 801a028:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a02a:	1a7f      	subs	r7, r7, r1
 801a02c:	88d9      	ldrh	r1, [r3, #6]
 801a02e:	fb0c 1c07 	mla	ip, ip, r7, r1
 801a032:	f8a3 c006 	strh.w	ip, [r3, #6]
 801a036:	e613      	b.n	8019c60 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801a038:	f04f 34ff 	mov.w	r4, #4294967295
 801a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a03e:	4249      	negs	r1, r1
 801a040:	940d      	str	r4, [sp, #52]	; 0x34
 801a042:	2400      	movs	r4, #0
 801a044:	437b      	muls	r3, r7
 801a046:	e758      	b.n	8019efa <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801a048:	9905      	ldr	r1, [sp, #20]
 801a04a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801a04e:	f009 0c1f 	and.w	ip, r9, #31
 801a052:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801a056:	f001 011f 	and.w	r1, r1, #31
 801a05a:	45f3      	cmp	fp, lr
 801a05c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801a060:	9102      	str	r1, [sp, #8]
 801a062:	9904      	ldr	r1, [sp, #16]
 801a064:	eba1 0406 	sub.w	r4, r1, r6
 801a068:	d108      	bne.n	801a07c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801a06a:	9b02      	ldr	r3, [sp, #8]
 801a06c:	44a0      	add	r8, r4
 801a06e:	449c      	add	ip, r3
 801a070:	f8a7 8004 	strh.w	r8, [r7, #4]
 801a074:	fb04 a40c 	mla	r4, r4, ip, sl
 801a078:	80fc      	strh	r4, [r7, #6]
 801a07a:	e461      	b.n	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a07c:	9905      	ldr	r1, [sp, #20]
 801a07e:	ebb1 0109 	subs.w	r1, r1, r9
 801a082:	bf51      	iteee	pl
 801a084:	f1cc 0520 	rsbpl	r5, ip, #32
 801a088:	fb04 f40c 	mulmi.w	r4, r4, ip
 801a08c:	4249      	negmi	r1, r1
 801a08e:	2500      	movmi	r5, #0
 801a090:	bf5d      	ittte	pl
 801a092:	436c      	mulpl	r4, r5
 801a094:	2520      	movpl	r5, #32
 801a096:	f04f 0901 	movpl.w	r9, #1
 801a09a:	f04f 39ff 	movmi.w	r9, #4294967295
 801a09e:	9501      	str	r5, [sp, #4]
 801a0a0:	9b01      	ldr	r3, [sp, #4]
 801a0a2:	fb94 f5f1 	sdiv	r5, r4, r1
 801a0a6:	fb01 4415 	mls	r4, r1, r5, r4
 801a0aa:	449c      	add	ip, r3
 801a0ac:	eb0b 0309 	add.w	r3, fp, r9
 801a0b0:	2c00      	cmp	r4, #0
 801a0b2:	bfbc      	itt	lt
 801a0b4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801a0b8:	1864      	addlt	r4, r4, r1
 801a0ba:	44a8      	add	r8, r5
 801a0bc:	fb05 ac0c 	mla	ip, r5, ip, sl
 801a0c0:	f8a7 8004 	strh.w	r8, [r7, #4]
 801a0c4:	f8a7 c006 	strh.w	ip, [r7, #6]
 801a0c8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a0cc:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801a0d0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801a0d4:	ea58 0707 	orrs.w	r7, r8, r7
 801a0d8:	d011      	beq.n	801a0fe <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801a0da:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801a0de:	f1b8 0f00 	cmp.w	r8, #0
 801a0e2:	db0c      	blt.n	801a0fe <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801a0e4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801a0e6:	45b8      	cmp	r8, r7
 801a0e8:	da09      	bge.n	801a0fe <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801a0ea:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801a0ee:	45b8      	cmp	r8, r7
 801a0f0:	bf3c      	itt	cc
 801a0f2:	f10c 0708 	addcc.w	r7, ip, #8
 801a0f6:	6107      	strcc	r7, [r0, #16]
 801a0f8:	f108 0701 	add.w	r7, r8, #1
 801a0fc:	6087      	str	r7, [r0, #8]
 801a0fe:	6907      	ldr	r7, [r0, #16]
 801a100:	f04f 0c00 	mov.w	ip, #0
 801a104:	b212      	sxth	r2, r2
 801a106:	459e      	cmp	lr, r3
 801a108:	803b      	strh	r3, [r7, #0]
 801a10a:	442e      	add	r6, r5
 801a10c:	807a      	strh	r2, [r7, #2]
 801a10e:	f8a7 c004 	strh.w	ip, [r7, #4]
 801a112:	f8a7 c006 	strh.w	ip, [r7, #6]
 801a116:	d04b      	beq.n	801a1b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801a118:	9f04      	ldr	r7, [sp, #16]
 801a11a:	1a64      	subs	r4, r4, r1
 801a11c:	f04f 0a00 	mov.w	sl, #0
 801a120:	1bbf      	subs	r7, r7, r6
 801a122:	443d      	add	r5, r7
 801a124:	016d      	lsls	r5, r5, #5
 801a126:	fb95 f8f1 	sdiv	r8, r5, r1
 801a12a:	fb01 5518 	mls	r5, r1, r8, r5
 801a12e:	4565      	cmp	r5, ip
 801a130:	bfbc      	itt	lt
 801a132:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801a136:	186d      	addlt	r5, r5, r1
 801a138:	f108 0701 	add.w	r7, r8, #1
 801a13c:	9703      	str	r7, [sp, #12]
 801a13e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a142:	1964      	adds	r4, r4, r5
 801a144:	444b      	add	r3, r9
 801a146:	bf54      	ite	pl
 801a148:	9f03      	ldrpl	r7, [sp, #12]
 801a14a:	4647      	movmi	r7, r8
 801a14c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801a150:	bf58      	it	pl
 801a152:	1a64      	subpl	r4, r4, r1
 801a154:	443e      	add	r6, r7
 801a156:	44bb      	add	fp, r7
 801a158:	f8ac b004 	strh.w	fp, [ip, #4]
 801a15c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a160:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801a164:	f8ac b006 	strh.w	fp, [ip, #6]
 801a168:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a16c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a170:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801a174:	ea5b 0707 	orrs.w	r7, fp, r7
 801a178:	d011      	beq.n	801a19e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801a17a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801a17e:	f1bb 0f00 	cmp.w	fp, #0
 801a182:	db0c      	blt.n	801a19e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801a184:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801a186:	45bb      	cmp	fp, r7
 801a188:	da09      	bge.n	801a19e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801a18a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801a18e:	45bb      	cmp	fp, r7
 801a190:	bf3c      	itt	cc
 801a192:	f10c 0708 	addcc.w	r7, ip, #8
 801a196:	6107      	strcc	r7, [r0, #16]
 801a198:	f10b 0701 	add.w	r7, fp, #1
 801a19c:	6087      	str	r7, [r0, #8]
 801a19e:	6907      	ldr	r7, [r0, #16]
 801a1a0:	459e      	cmp	lr, r3
 801a1a2:	803b      	strh	r3, [r7, #0]
 801a1a4:	807a      	strh	r2, [r7, #2]
 801a1a6:	f8a7 a004 	strh.w	sl, [r7, #4]
 801a1aa:	f8a7 a006 	strh.w	sl, [r7, #6]
 801a1ae:	d1c6      	bne.n	801a13e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801a1b0:	9b04      	ldr	r3, [sp, #16]
 801a1b2:	1b9e      	subs	r6, r3, r6
 801a1b4:	6903      	ldr	r3, [r0, #16]
 801a1b6:	889a      	ldrh	r2, [r3, #4]
 801a1b8:	4432      	add	r2, r6
 801a1ba:	809a      	strh	r2, [r3, #4]
 801a1bc:	9a02      	ldr	r2, [sp, #8]
 801a1be:	f102 0c20 	add.w	ip, r2, #32
 801a1c2:	9a01      	ldr	r2, [sp, #4]
 801a1c4:	ebac 0c02 	sub.w	ip, ip, r2
 801a1c8:	88da      	ldrh	r2, [r3, #6]
 801a1ca:	fb06 260c 	mla	r6, r6, ip, r2
 801a1ce:	80de      	strh	r6, [r3, #6]
 801a1d0:	f7ff bbb6 	b.w	8019940 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801a1d4 <_ZN8touchgfx7Outline6lineToEii>:
 801a1d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a1d6:	079b      	lsls	r3, r3, #30
 801a1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a1da:	460e      	mov	r6, r1
 801a1dc:	4615      	mov	r5, r2
 801a1de:	d511      	bpl.n	801a204 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801a1e0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801a1e4:	ea86 0701 	eor.w	r7, r6, r1
 801a1e8:	ea85 0302 	eor.w	r3, r5, r2
 801a1ec:	433b      	orrs	r3, r7
 801a1ee:	d009      	beq.n	801a204 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801a1f0:	4633      	mov	r3, r6
 801a1f2:	9500      	str	r5, [sp, #0]
 801a1f4:	f7ff fb4c 	bl	8019890 <_ZN8touchgfx7Outline10renderLineEiiii>
 801a1f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a1fa:	f043 0301 	orr.w	r3, r3, #1
 801a1fe:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801a202:	6243      	str	r3, [r0, #36]	; 0x24
 801a204:	b003      	add	sp, #12
 801a206:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a208 <_ZN8touchgfx7Outline6moveToEii>:
 801a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a20a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a20c:	4615      	mov	r5, r2
 801a20e:	4604      	mov	r4, r0
 801a210:	460e      	mov	r6, r1
 801a212:	079a      	lsls	r2, r3, #30
 801a214:	d401      	bmi.n	801a21a <_ZN8touchgfx7Outline6moveToEii+0x12>
 801a216:	f7ff fb07 	bl	8019828 <_ZN8touchgfx7Outline5resetEv>
 801a21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a21c:	07db      	lsls	r3, r3, #31
 801a21e:	d504      	bpl.n	801a22a <_ZN8touchgfx7Outline6moveToEii+0x22>
 801a220:	4620      	mov	r0, r4
 801a222:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801a226:	f7ff ffd5 	bl	801a1d4 <_ZN8touchgfx7Outline6lineToEii>
 801a22a:	6923      	ldr	r3, [r4, #16]
 801a22c:	1170      	asrs	r0, r6, #5
 801a22e:	1169      	asrs	r1, r5, #5
 801a230:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a234:	4290      	cmp	r0, r2
 801a236:	d103      	bne.n	801a240 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801a238:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a23c:	4291      	cmp	r1, r2
 801a23e:	d01a      	beq.n	801a276 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801a240:	88df      	ldrh	r7, [r3, #6]
 801a242:	889a      	ldrh	r2, [r3, #4]
 801a244:	433a      	orrs	r2, r7
 801a246:	d010      	beq.n	801a26a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801a248:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a24c:	2a00      	cmp	r2, #0
 801a24e:	db0c      	blt.n	801a26a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801a250:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801a252:	42ba      	cmp	r2, r7
 801a254:	da09      	bge.n	801a26a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801a256:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801a25a:	42ba      	cmp	r2, r7
 801a25c:	f102 0201 	add.w	r2, r2, #1
 801a260:	bf38      	it	cc
 801a262:	3308      	addcc	r3, #8
 801a264:	60a2      	str	r2, [r4, #8]
 801a266:	bf38      	it	cc
 801a268:	6123      	strcc	r3, [r4, #16]
 801a26a:	6923      	ldr	r3, [r4, #16]
 801a26c:	2200      	movs	r2, #0
 801a26e:	8018      	strh	r0, [r3, #0]
 801a270:	8059      	strh	r1, [r3, #2]
 801a272:	809a      	strh	r2, [r3, #4]
 801a274:	80da      	strh	r2, [r3, #6]
 801a276:	6166      	str	r6, [r4, #20]
 801a278:	6225      	str	r5, [r4, #32]
 801a27a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a280 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801a280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a284:	b0d0      	sub	sp, #320	; 0x140
 801a286:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a28a:	466c      	mov	r4, sp
 801a28c:	4627      	mov	r7, r4
 801a28e:	1a0d      	subs	r5, r1, r0
 801a290:	f100 0308 	add.w	r3, r0, #8
 801a294:	2d48      	cmp	r5, #72	; 0x48
 801a296:	f340 80d5 	ble.w	801a444 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801a29a:	112d      	asrs	r5, r5, #4
 801a29c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801a2a0:	f9b0 9000 	ldrsh.w	r9, [r0]
 801a2a4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801a2a8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801a2ac:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801a2b0:	6816      	ldr	r6, [r2, #0]
 801a2b2:	6006      	str	r6, [r0, #0]
 801a2b4:	6856      	ldr	r6, [r2, #4]
 801a2b6:	6046      	str	r6, [r0, #4]
 801a2b8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801a2bc:	f8a2 8002 	strh.w	r8, [r2, #2]
 801a2c0:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a2c4:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a2c8:	f1a1 0208 	sub.w	r2, r1, #8
 801a2cc:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801a2d0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801a2d4:	4565      	cmp	r5, ip
 801a2d6:	db06      	blt.n	801a2e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801a2d8:	d119      	bne.n	801a30e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801a2da:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801a2de:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801a2e2:	42ae      	cmp	r6, r5
 801a2e4:	dd13      	ble.n	801a30e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801a2e6:	460e      	mov	r6, r1
 801a2e8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801a2ec:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801a2f0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801a2f4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801a2f8:	601d      	str	r5, [r3, #0]
 801a2fa:	6875      	ldr	r5, [r6, #4]
 801a2fc:	605d      	str	r5, [r3, #4]
 801a2fe:	f821 9c08 	strh.w	r9, [r1, #-8]
 801a302:	f821 cc06 	strh.w	ip, [r1, #-6]
 801a306:	f821 8c04 	strh.w	r8, [r1, #-4]
 801a30a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801a30e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801a312:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801a316:	42ae      	cmp	r6, r5
 801a318:	db06      	blt.n	801a328 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801a31a:	d116      	bne.n	801a34a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801a31c:	f9b0 c000 	ldrsh.w	ip, [r0]
 801a320:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801a324:	45ac      	cmp	ip, r5
 801a326:	da10      	bge.n	801a34a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801a328:	681d      	ldr	r5, [r3, #0]
 801a32a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a32e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801a332:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801a336:	6005      	str	r5, [r0, #0]
 801a338:	685d      	ldr	r5, [r3, #4]
 801a33a:	f8a0 8008 	strh.w	r8, [r0, #8]
 801a33e:	6045      	str	r5, [r0, #4]
 801a340:	8146      	strh	r6, [r0, #10]
 801a342:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801a346:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a34a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801a34e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801a352:	4565      	cmp	r5, ip
 801a354:	db06      	blt.n	801a364 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801a356:	d119      	bne.n	801a38c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a358:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801a35c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a360:	42ae      	cmp	r6, r5
 801a362:	da13      	bge.n	801a38c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a364:	460e      	mov	r6, r1
 801a366:	f9b0 9000 	ldrsh.w	r9, [r0]
 801a36a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801a36e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801a372:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801a376:	6005      	str	r5, [r0, #0]
 801a378:	6875      	ldr	r5, [r6, #4]
 801a37a:	6045      	str	r5, [r0, #4]
 801a37c:	f821 9c08 	strh.w	r9, [r1, #-8]
 801a380:	f821 cc06 	strh.w	ip, [r1, #-6]
 801a384:	f821 8c04 	strh.w	r8, [r1, #-4]
 801a388:	f821 ec02 	strh.w	lr, [r1, #-2]
 801a38c:	3308      	adds	r3, #8
 801a38e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801a392:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801a396:	45e6      	cmp	lr, ip
 801a398:	dbf8      	blt.n	801a38c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a39a:	d105      	bne.n	801a3a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a39c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a3a0:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a3a4:	42ae      	cmp	r6, r5
 801a3a6:	dbf1      	blt.n	801a38c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a3a8:	4615      	mov	r5, r2
 801a3aa:	3a08      	subs	r2, #8
 801a3ac:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801a3b0:	45b4      	cmp	ip, r6
 801a3b2:	dbf9      	blt.n	801a3a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a3b4:	d105      	bne.n	801a3c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801a3b6:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a3ba:	f9b2 6000 	ldrsh.w	r6, [r2]
 801a3be:	45b0      	cmp	r8, r6
 801a3c0:	dbf2      	blt.n	801a3a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	f1a5 0608 	sub.w	r6, r5, #8
 801a3c8:	d816      	bhi.n	801a3f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801a3ca:	f8d6 c000 	ldr.w	ip, [r6]
 801a3ce:	f9b3 a000 	ldrsh.w	sl, [r3]
 801a3d2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801a3d6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801a3da:	f8c3 c000 	str.w	ip, [r3]
 801a3de:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801a3e2:	f8c3 c004 	str.w	ip, [r3, #4]
 801a3e6:	f825 ac08 	strh.w	sl, [r5, #-8]
 801a3ea:	f825 ec06 	strh.w	lr, [r5, #-6]
 801a3ee:	f825 9c04 	strh.w	r9, [r5, #-4]
 801a3f2:	f825 8c02 	strh.w	r8, [r5, #-2]
 801a3f6:	e7c9      	b.n	801a38c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a3f8:	f8d6 e000 	ldr.w	lr, [r6]
 801a3fc:	f9b0 a000 	ldrsh.w	sl, [r0]
 801a400:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801a404:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801a408:	f8c0 e000 	str.w	lr, [r0]
 801a40c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801a410:	1a16      	subs	r6, r2, r0
 801a412:	f8c0 e004 	str.w	lr, [r0, #4]
 801a416:	f825 ac08 	strh.w	sl, [r5, #-8]
 801a41a:	f825 cc06 	strh.w	ip, [r5, #-6]
 801a41e:	f825 9c04 	strh.w	r9, [r5, #-4]
 801a422:	f825 8c02 	strh.w	r8, [r5, #-2]
 801a426:	1acd      	subs	r5, r1, r3
 801a428:	10ed      	asrs	r5, r5, #3
 801a42a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801a42e:	bfb5      	itete	lt
 801a430:	e9c4 0200 	strdlt	r0, r2, [r4]
 801a434:	e9c4 3100 	strdge	r3, r1, [r4]
 801a438:	460a      	movlt	r2, r1
 801a43a:	4603      	movge	r3, r0
 801a43c:	3408      	adds	r4, #8
 801a43e:	4618      	mov	r0, r3
 801a440:	4611      	mov	r1, r2
 801a442:	e724      	b.n	801a28e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801a444:	4299      	cmp	r1, r3
 801a446:	d927      	bls.n	801a498 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801a448:	f1a3 0210 	sub.w	r2, r3, #16
 801a44c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801a450:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801a454:	45ac      	cmp	ip, r5
 801a456:	db06      	blt.n	801a466 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801a458:	d11c      	bne.n	801a494 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801a45a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801a45e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801a462:	42ae      	cmp	r6, r5
 801a464:	da16      	bge.n	801a494 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801a466:	4615      	mov	r5, r2
 801a468:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801a46c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801a470:	3a08      	subs	r2, #8
 801a472:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801a476:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801a47a:	6196      	str	r6, [r2, #24]
 801a47c:	42a8      	cmp	r0, r5
 801a47e:	686e      	ldr	r6, [r5, #4]
 801a480:	f8a2 9010 	strh.w	r9, [r2, #16]
 801a484:	61d6      	str	r6, [r2, #28]
 801a486:	f8a2 c012 	strh.w	ip, [r2, #18]
 801a48a:	f8a2 8014 	strh.w	r8, [r2, #20]
 801a48e:	f8a2 e016 	strh.w	lr, [r2, #22]
 801a492:	d1db      	bne.n	801a44c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801a494:	3308      	adds	r3, #8
 801a496:	e7d5      	b.n	801a444 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801a498:	42bc      	cmp	r4, r7
 801a49a:	d903      	bls.n	801a4a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801a49c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801a4a0:	3c08      	subs	r4, #8
 801a4a2:	e6f4      	b.n	801a28e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801a4a4:	b050      	add	sp, #320	; 0x140
 801a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a4aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801a4aa:	b510      	push	{r4, lr}
 801a4ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a4ae:	4604      	mov	r4, r0
 801a4b0:	07da      	lsls	r2, r3, #31
 801a4b2:	d507      	bpl.n	801a4c4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801a4b4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801a4b8:	f7ff fe8c 	bl	801a1d4 <_ZN8touchgfx7Outline6lineToEii>
 801a4bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a4be:	f023 0301 	bic.w	r3, r3, #1
 801a4c2:	6243      	str	r3, [r0, #36]	; 0x24
 801a4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a4c6:	079b      	lsls	r3, r3, #30
 801a4c8:	d521      	bpl.n	801a50e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801a4ca:	6923      	ldr	r3, [r4, #16]
 801a4cc:	88d9      	ldrh	r1, [r3, #6]
 801a4ce:	889a      	ldrh	r2, [r3, #4]
 801a4d0:	430a      	orrs	r2, r1
 801a4d2:	d010      	beq.n	801a4f6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a4d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a4d8:	2a00      	cmp	r2, #0
 801a4da:	db0c      	blt.n	801a4f6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a4dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a4de:	428a      	cmp	r2, r1
 801a4e0:	da09      	bge.n	801a4f6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a4e2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801a4e6:	4291      	cmp	r1, r2
 801a4e8:	f102 0201 	add.w	r2, r2, #1
 801a4ec:	bf88      	it	hi
 801a4ee:	3308      	addhi	r3, #8
 801a4f0:	60a2      	str	r2, [r4, #8]
 801a4f2:	bf88      	it	hi
 801a4f4:	6123      	strhi	r3, [r4, #16]
 801a4f6:	68a1      	ldr	r1, [r4, #8]
 801a4f8:	b129      	cbz	r1, 801a506 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801a4fa:	6863      	ldr	r3, [r4, #4]
 801a4fc:	4299      	cmp	r1, r3
 801a4fe:	d802      	bhi.n	801a506 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801a500:	68e0      	ldr	r0, [r4, #12]
 801a502:	f7ff febd 	bl	801a280 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801a506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a508:	f023 0302 	bic.w	r3, r3, #2
 801a50c:	6263      	str	r3, [r4, #36]	; 0x24
 801a50e:	68e0      	ldr	r0, [r4, #12]
 801a510:	bd10      	pop	{r4, pc}
	...

0801a514 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801a514:	4b02      	ldr	r3, [pc, #8]	; (801a520 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801a516:	6018      	str	r0, [r3, #0]
 801a518:	4b02      	ldr	r3, [pc, #8]	; (801a524 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801a51a:	6019      	str	r1, [r3, #0]
 801a51c:	4770      	bx	lr
 801a51e:	bf00      	nop
 801a520:	20016e90 	.word	0x20016e90
 801a524:	20016e94 	.word	0x20016e94

0801a528 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 801a528:	2300      	movs	r3, #0
 801a52a:	4a02      	ldr	r2, [pc, #8]	; (801a534 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 801a52c:	6013      	str	r3, [r2, #0]
 801a52e:	4a02      	ldr	r2, [pc, #8]	; (801a538 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 801a530:	6013      	str	r3, [r2, #0]
 801a532:	4770      	bx	lr
 801a534:	20016e90 	.word	0x20016e90
 801a538:	20016e94 	.word	0x20016e94

0801a53c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801a53c:	4b01      	ldr	r3, [pc, #4]	; (801a544 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801a53e:	6818      	ldr	r0, [r3, #0]
 801a540:	4770      	bx	lr
 801a542:	bf00      	nop
 801a544:	20016e90 	.word	0x20016e90

0801a548 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801a548:	4b01      	ldr	r3, [pc, #4]	; (801a550 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801a54a:	6818      	ldr	r0, [r3, #0]
 801a54c:	4770      	bx	lr
 801a54e:	bf00      	nop
 801a550:	20016e94 	.word	0x20016e94

0801a554 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a554:	b510      	push	{r4, lr}
 801a556:	6803      	ldr	r3, [r0, #0]
 801a558:	460c      	mov	r4, r1
 801a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a55c:	4798      	blx	r3
 801a55e:	1b03      	subs	r3, r0, r4
 801a560:	4258      	negs	r0, r3
 801a562:	4158      	adcs	r0, r3
 801a564:	bd10      	pop	{r4, pc}
	...

0801a568 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a568:	4b01      	ldr	r3, [pc, #4]	; (801a570 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a56a:	6019      	str	r1, [r3, #0]
 801a56c:	4770      	bx	lr
 801a56e:	bf00      	nop
 801a570:	20016e98 	.word	0x20016e98

0801a574 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a578:	4696      	mov	lr, r2
 801a57a:	b097      	sub	sp, #92	; 0x5c
 801a57c:	4605      	mov	r5, r0
 801a57e:	4614      	mov	r4, r2
 801a580:	460e      	mov	r6, r1
 801a582:	461f      	mov	r7, r3
 801a584:	f10d 0c1c 	add.w	ip, sp, #28
 801a588:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a58c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a590:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a594:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a598:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a59c:	f8de 3000 	ldr.w	r3, [lr]
 801a5a0:	f104 0e14 	add.w	lr, r4, #20
 801a5a4:	f8cc 3000 	str.w	r3, [ip]
 801a5a8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a5ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a5b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a5b4:	f8de 3000 	ldr.w	r3, [lr]
 801a5b8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a5bc:	f8cc 3000 	str.w	r3, [ip]
 801a5c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a5c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a5c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a5cc:	f8de 3000 	ldr.w	r3, [lr]
 801a5d0:	4631      	mov	r1, r6
 801a5d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a5d4:	4628      	mov	r0, r5
 801a5d6:	f8cc 3000 	str.w	r3, [ip]
 801a5da:	682b      	ldr	r3, [r5, #0]
 801a5dc:	9201      	str	r2, [sp, #4]
 801a5de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a5e0:	f8cd 8008 	str.w	r8, [sp, #8]
 801a5e4:	9200      	str	r2, [sp, #0]
 801a5e6:	aa07      	add	r2, sp, #28
 801a5e8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a5ec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a5f0:	463b      	mov	r3, r7
 801a5f2:	47d8      	blx	fp
 801a5f4:	46a6      	mov	lr, r4
 801a5f6:	f10d 0c1c 	add.w	ip, sp, #28
 801a5fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a5fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a602:	f8de 3000 	ldr.w	r3, [lr]
 801a606:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a60a:	343c      	adds	r4, #60	; 0x3c
 801a60c:	f8cc 3000 	str.w	r3, [ip]
 801a610:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a614:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a618:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a61c:	f8de 3000 	ldr.w	r3, [lr]
 801a620:	f8cc 3000 	str.w	r3, [ip]
 801a624:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a62a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a62e:	6823      	ldr	r3, [r4, #0]
 801a630:	4631      	mov	r1, r6
 801a632:	4628      	mov	r0, r5
 801a634:	f8cc 3000 	str.w	r3, [ip]
 801a638:	682b      	ldr	r3, [r5, #0]
 801a63a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a63e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a640:	f8cd 8008 	str.w	r8, [sp, #8]
 801a644:	9201      	str	r2, [sp, #4]
 801a646:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a648:	9200      	str	r2, [sp, #0]
 801a64a:	aa07      	add	r2, sp, #28
 801a64c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a64e:	463b      	mov	r3, r7
 801a650:	47a0      	blx	r4
 801a652:	b017      	add	sp, #92	; 0x5c
 801a654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a658 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a65c:	b08d      	sub	sp, #52	; 0x34
 801a65e:	4688      	mov	r8, r1
 801a660:	f8d3 c000 	ldr.w	ip, [r3]
 801a664:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a666:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a66a:	680f      	ldr	r7, [r1, #0]
 801a66c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a670:	eba7 070c 	sub.w	r7, r7, ip
 801a674:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a678:	edd3 6a07 	vldr	s13, [r3, #28]
 801a67c:	42bc      	cmp	r4, r7
 801a67e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a680:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a684:	bfa8      	it	ge
 801a686:	463c      	movge	r4, r7
 801a688:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a68c:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a690:	ee07 4a90 	vmov	s15, r4
 801a694:	eb09 0e0c 	add.w	lr, r9, ip
 801a698:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a69c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a6a0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a6a4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a6a8:	4571      	cmp	r1, lr
 801a6aa:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a6ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a6b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a6b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a6ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a6be:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a6c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a6c6:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a6ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a6ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a6d2:	f340 808c 	ble.w	801a7ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a6d6:	eba1 060e 	sub.w	r6, r1, lr
 801a6da:	fb96 f5f4 	sdiv	r5, r6, r4
 801a6de:	ee07 5a10 	vmov	s14, r5
 801a6e2:	2d00      	cmp	r5, #0
 801a6e4:	fb04 6615 	mls	r6, r4, r5, r6
 801a6e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a6ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a6f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a6f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a6f8:	dd12      	ble.n	801a720 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a6fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a6fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a702:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a706:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a70e:	bf14      	ite	ne
 801a710:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a714:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a718:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a71c:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a720:	fb05 f204 	mul.w	r2, r5, r4
 801a724:	1abf      	subs	r7, r7, r2
 801a726:	4494      	add	ip, r2
 801a728:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a72c:	4411      	add	r1, r2
 801a72e:	eb09 020c 	add.w	r2, r9, ip
 801a732:	b209      	sxth	r1, r1
 801a734:	443a      	add	r2, r7
 801a736:	428a      	cmp	r2, r1
 801a738:	bfc4      	itt	gt
 801a73a:	eba1 0209 	subgt.w	r2, r1, r9
 801a73e:	eba2 070c 	subgt.w	r7, r2, ip
 801a742:	2f00      	cmp	r7, #0
 801a744:	dd50      	ble.n	801a7e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a746:	fb97 f1f4 	sdiv	r1, r7, r4
 801a74a:	fb04 7211 	mls	r2, r4, r1, r7
 801a74e:	b90a      	cbnz	r2, 801a754 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a750:	3901      	subs	r1, #1
 801a752:	4622      	mov	r2, r4
 801a754:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a758:	6840      	ldr	r0, [r0, #4]
 801a75a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a75e:	44b6      	add	lr, r6
 801a760:	f8d0 a000 	ldr.w	sl, [r0]
 801a764:	2900      	cmp	r1, #0
 801a766:	bfcc      	ite	gt
 801a768:	46a1      	movgt	r9, r4
 801a76a:	4691      	movle	r9, r2
 801a76c:	900b      	str	r0, [sp, #44]	; 0x2c
 801a76e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a770:	fb04 e505 	mla	r5, r4, r5, lr
 801a774:	eef0 6a42 	vmov.f32	s13, s4
 801a778:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a77c:	9008      	str	r0, [sp, #32]
 801a77e:	eeb0 7a61 	vmov.f32	s14, s3
 801a782:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a784:	695b      	ldr	r3, [r3, #20]
 801a786:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a78a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a78e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a792:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a794:	445b      	add	r3, fp
 801a796:	9307      	str	r3, [sp, #28]
 801a798:	ee16 3a90 	vmov	r3, s13
 801a79c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a7a0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a7a4:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a7a8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a7ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a7b0:	ee17 7a90 	vmov	r7, s15
 801a7b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a7b8:	fb97 f7f4 	sdiv	r7, r7, r4
 801a7bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a7c0:	ee17 ca90 	vmov	ip, s15
 801a7c4:	fb9c fcf4 	sdiv	ip, ip, r4
 801a7c8:	fb0c 3306 	mla	r3, ip, r6, r3
 801a7cc:	9302      	str	r3, [sp, #8]
 801a7ce:	ee17 3a10 	vmov	r3, s14
 801a7d2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a7d6:	fb07 3706 	mla	r7, r7, r6, r3
 801a7da:	eba9 0306 	sub.w	r3, r9, r6
 801a7de:	e9cd 4700 	strd	r4, r7, [sp]
 801a7e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a7e6:	47a0      	blx	r4
 801a7e8:	b00d      	add	sp, #52	; 0x34
 801a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ee:	2500      	movs	r5, #0
 801a7f0:	462e      	mov	r6, r5
 801a7f2:	e799      	b.n	801a728 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a7f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7f8:	b0db      	sub	sp, #364	; 0x16c
 801a7fa:	461d      	mov	r5, r3
 801a7fc:	4614      	mov	r4, r2
 801a7fe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a802:	910f      	str	r1, [sp, #60]	; 0x3c
 801a804:	4629      	mov	r1, r5
 801a806:	930a      	str	r3, [sp, #40]	; 0x28
 801a808:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a80c:	9009      	str	r0, [sp, #36]	; 0x24
 801a80e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a810:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a814:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a818:	9310      	str	r3, [sp, #64]	; 0x40
 801a81a:	6803      	ldr	r3, [r0, #0]
 801a81c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a81e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a822:	47b8      	blx	r7
 801a824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a826:	6058      	str	r0, [r3, #4]
 801a828:	2800      	cmp	r0, #0
 801a82a:	f000 83a1 	beq.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a82e:	682b      	ldr	r3, [r5, #0]
 801a830:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a834:	ed94 7a02 	vldr	s14, [r4, #8]
 801a838:	9314      	str	r3, [sp, #80]	; 0x50
 801a83a:	686b      	ldr	r3, [r5, #4]
 801a83c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a840:	9315      	str	r3, [sp, #84]	; 0x54
 801a842:	4bc1      	ldr	r3, [pc, #772]	; (801ab48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a844:	7819      	ldrb	r1, [r3, #0]
 801a846:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a84a:	2900      	cmp	r1, #0
 801a84c:	bf16      	itet	ne
 801a84e:	4619      	movne	r1, r3
 801a850:	4611      	moveq	r1, r2
 801a852:	4613      	movne	r3, r2
 801a854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a858:	9116      	str	r1, [sp, #88]	; 0x58
 801a85a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a85e:	f240 8387 	bls.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a862:	ed94 7a07 	vldr	s14, [r4, #28]
 801a866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a86e:	f240 837f 	bls.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a872:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a87e:	f240 8377 	bls.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a882:	6822      	ldr	r2, [r4, #0]
 801a884:	4bb1      	ldr	r3, [pc, #708]	; (801ab4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a886:	429a      	cmp	r2, r3
 801a888:	f2c0 8372 	blt.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a88c:	49b0      	ldr	r1, [pc, #704]	; (801ab50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a88e:	6963      	ldr	r3, [r4, #20]
 801a890:	428a      	cmp	r2, r1
 801a892:	f300 836d 	bgt.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a896:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a89a:	48ae      	ldr	r0, [pc, #696]	; (801ab54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a89c:	33ff      	adds	r3, #255	; 0xff
 801a89e:	4283      	cmp	r3, r0
 801a8a0:	f200 8366 	bhi.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a8a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a8a6:	4dac      	ldr	r5, [pc, #688]	; (801ab58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a8a8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a8ac:	33ff      	adds	r3, #255	; 0xff
 801a8ae:	42ab      	cmp	r3, r5
 801a8b0:	f200 835e 	bhi.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a8b4:	6862      	ldr	r2, [r4, #4]
 801a8b6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a8ba:	33ff      	adds	r3, #255	; 0xff
 801a8bc:	4283      	cmp	r3, r0
 801a8be:	f200 8357 	bhi.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a8c2:	69a1      	ldr	r1, [r4, #24]
 801a8c4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a8c8:	33ff      	adds	r3, #255	; 0xff
 801a8ca:	4283      	cmp	r3, r0
 801a8cc:	f200 8350 	bhi.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a8d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a8d2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a8d6:	30ff      	adds	r0, #255	; 0xff
 801a8d8:	42a8      	cmp	r0, r5
 801a8da:	f200 8349 	bhi.w	801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a8de:	428a      	cmp	r2, r1
 801a8e0:	f280 8110 	bge.w	801ab04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a8e4:	429a      	cmp	r2, r3
 801a8e6:	f300 8119 	bgt.w	801ab1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a8ea:	4299      	cmp	r1, r3
 801a8ec:	f280 811d 	bge.w	801ab2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a8f0:	2502      	movs	r5, #2
 801a8f2:	2701      	movs	r7, #1
 801a8f4:	46a9      	mov	r9, r5
 801a8f6:	46b8      	mov	r8, r7
 801a8f8:	f04f 0a00 	mov.w	sl, #0
 801a8fc:	4621      	mov	r1, r4
 801a8fe:	a849      	add	r0, sp, #292	; 0x124
 801a900:	f003 fdbe 	bl	801e480 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a904:	4622      	mov	r2, r4
 801a906:	4653      	mov	r3, sl
 801a908:	a949      	add	r1, sp, #292	; 0x124
 801a90a:	f8cd 9000 	str.w	r9, [sp]
 801a90e:	a819      	add	r0, sp, #100	; 0x64
 801a910:	f003 fee6 	bl	801e6e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a914:	4622      	mov	r2, r4
 801a916:	4653      	mov	r3, sl
 801a918:	a949      	add	r1, sp, #292	; 0x124
 801a91a:	f8cd 8000 	str.w	r8, [sp]
 801a91e:	a829      	add	r0, sp, #164	; 0xa4
 801a920:	f003 fede 	bl	801e6e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a924:	4643      	mov	r3, r8
 801a926:	4622      	mov	r2, r4
 801a928:	a949      	add	r1, sp, #292	; 0x124
 801a92a:	f8cd 9000 	str.w	r9, [sp]
 801a92e:	a839      	add	r0, sp, #228	; 0xe4
 801a930:	f003 fed6 	bl	801e6e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a934:	42af      	cmp	r7, r5
 801a936:	af12      	add	r7, sp, #72	; 0x48
 801a938:	bfb7      	itett	lt
 801a93a:	2300      	movlt	r3, #0
 801a93c:	2301      	movge	r3, #1
 801a93e:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a940:	ac19      	addlt	r4, sp, #100	; 0x64
 801a942:	bfb1      	iteee	lt
 801a944:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a946:	ad19      	addge	r5, sp, #100	; 0x64
 801a948:	930e      	strge	r3, [sp, #56]	; 0x38
 801a94a:	ac29      	addge	r4, sp, #164	; 0xa4
 801a94c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a94e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a952:	e887 0003 	stmia.w	r7, {r0, r1}
 801a956:	b928      	cbnz	r0, 801a964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a958:	4b80      	ldr	r3, [pc, #512]	; (801ab5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a95a:	6818      	ldr	r0, [r3, #0]
 801a95c:	6803      	ldr	r3, [r0, #0]
 801a95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a960:	4798      	blx	r3
 801a962:	6038      	str	r0, [r7, #0]
 801a964:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a966:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a96a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a96e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a970:	930c      	str	r3, [sp, #48]	; 0x30
 801a972:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a974:	6963      	ldr	r3, [r4, #20]
 801a976:	440b      	add	r3, r1
 801a978:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a97c:	4408      	add	r0, r1
 801a97e:	b200      	sxth	r0, r0
 801a980:	4283      	cmp	r3, r0
 801a982:	900d      	str	r0, [sp, #52]	; 0x34
 801a984:	f280 80dd 	bge.w	801ab42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a988:	428b      	cmp	r3, r1
 801a98a:	da08      	bge.n	801a99e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a98c:	2a00      	cmp	r2, #0
 801a98e:	dd06      	ble.n	801a99e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a990:	1acb      	subs	r3, r1, r3
 801a992:	429a      	cmp	r2, r3
 801a994:	f2c0 80e4 	blt.w	801ab60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a998:	2b00      	cmp	r3, #0
 801a99a:	f300 80e2 	bgt.w	801ab62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a99e:	6967      	ldr	r7, [r4, #20]
 801a9a0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a9a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a9a6:	443b      	add	r3, r7
 801a9a8:	461f      	mov	r7, r3
 801a9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9ac:	1bdf      	subs	r7, r3, r7
 801a9ae:	4297      	cmp	r7, r2
 801a9b0:	bfa8      	it	ge
 801a9b2:	4617      	movge	r7, r2
 801a9b4:	2f00      	cmp	r7, #0
 801a9b6:	f340 8166 	ble.w	801ac86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a9ba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a9bc:	6829      	ldr	r1, [r5, #0]
 801a9be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a9c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a9c6:	4411      	add	r1, r2
 801a9c8:	6820      	ldr	r0, [r4, #0]
 801a9ca:	4299      	cmp	r1, r3
 801a9cc:	dd1a      	ble.n	801aa04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a9ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a9d2:	4402      	add	r2, r0
 801a9d4:	440b      	add	r3, r1
 801a9d6:	b21b      	sxth	r3, r3
 801a9d8:	429a      	cmp	r2, r3
 801a9da:	dc13      	bgt.n	801aa04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a9dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a9de:	a912      	add	r1, sp, #72	; 0x48
 801a9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	9206      	str	r2, [sp, #24]
 801a9e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a9ea:	9500      	str	r5, [sp, #0]
 801a9ec:	9205      	str	r2, [sp, #20]
 801a9ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a9f4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a9f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a9fa:	aa49      	add	r2, sp, #292	; 0x124
 801a9fc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801aa00:	4623      	mov	r3, r4
 801aa02:	47c8      	blx	r9
 801aa04:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801aa08:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801aa0c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aa10:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa14:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801aa18:	68a1      	ldr	r1, [r4, #8]
 801aa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa1e:	ed94 6a08 	vldr	s12, [r4, #32]
 801aa22:	edd4 6a07 	vldr	s13, [r4, #28]
 801aa26:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aa2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aa2e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aa32:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aa36:	edc4 6a07 	vstr	s13, [r4, #28]
 801aa3a:	441a      	add	r2, r3
 801aa3c:	6963      	ldr	r3, [r4, #20]
 801aa3e:	3301      	adds	r3, #1
 801aa40:	6022      	str	r2, [r4, #0]
 801aa42:	6163      	str	r3, [r4, #20]
 801aa44:	69a3      	ldr	r3, [r4, #24]
 801aa46:	3b01      	subs	r3, #1
 801aa48:	61a3      	str	r3, [r4, #24]
 801aa4a:	6923      	ldr	r3, [r4, #16]
 801aa4c:	440b      	add	r3, r1
 801aa4e:	68e1      	ldr	r1, [r4, #12]
 801aa50:	428b      	cmp	r3, r1
 801aa52:	6123      	str	r3, [r4, #16]
 801aa54:	db15      	blt.n	801aa82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801aa56:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801aa5a:	3201      	adds	r2, #1
 801aa5c:	1a5b      	subs	r3, r3, r1
 801aa5e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aa62:	6022      	str	r2, [r4, #0]
 801aa64:	6123      	str	r3, [r4, #16]
 801aa66:	edc4 6a07 	vstr	s13, [r4, #28]
 801aa6a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801aa6e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801aa72:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aa76:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801aa7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aa7e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aa82:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801aa86:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801aa8a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801aa8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa92:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801aa96:	68a9      	ldr	r1, [r5, #8]
 801aa98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa9c:	ed95 6a08 	vldr	s12, [r5, #32]
 801aaa0:	edd5 6a07 	vldr	s13, [r5, #28]
 801aaa4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801aaa8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aaac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801aab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aab4:	edc5 6a07 	vstr	s13, [r5, #28]
 801aab8:	441a      	add	r2, r3
 801aaba:	696b      	ldr	r3, [r5, #20]
 801aabc:	3301      	adds	r3, #1
 801aabe:	602a      	str	r2, [r5, #0]
 801aac0:	616b      	str	r3, [r5, #20]
 801aac2:	69ab      	ldr	r3, [r5, #24]
 801aac4:	3b01      	subs	r3, #1
 801aac6:	61ab      	str	r3, [r5, #24]
 801aac8:	692b      	ldr	r3, [r5, #16]
 801aaca:	440b      	add	r3, r1
 801aacc:	68e9      	ldr	r1, [r5, #12]
 801aace:	428b      	cmp	r3, r1
 801aad0:	612b      	str	r3, [r5, #16]
 801aad2:	db15      	blt.n	801ab00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801aad4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801aad8:	3201      	adds	r2, #1
 801aada:	1a5b      	subs	r3, r3, r1
 801aadc:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aae0:	602a      	str	r2, [r5, #0]
 801aae2:	612b      	str	r3, [r5, #16]
 801aae4:	edc5 6a07 	vstr	s13, [r5, #28]
 801aae8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801aaec:	ee36 7a87 	vadd.f32	s14, s13, s14
 801aaf0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801aaf4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801aaf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aafc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ab00:	3f01      	subs	r7, #1
 801ab02:	e757      	b.n	801a9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801ab04:	4299      	cmp	r1, r3
 801ab06:	dc13      	bgt.n	801ab30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801ab08:	429a      	cmp	r2, r3
 801ab0a:	da14      	bge.n	801ab36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801ab0c:	2502      	movs	r5, #2
 801ab0e:	2703      	movs	r7, #3
 801ab10:	f04f 0800 	mov.w	r8, #0
 801ab14:	46a9      	mov	r9, r5
 801ab16:	f04f 0a01 	mov.w	sl, #1
 801ab1a:	e6ef      	b.n	801a8fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ab1c:	2501      	movs	r5, #1
 801ab1e:	2700      	movs	r7, #0
 801ab20:	46a9      	mov	r9, r5
 801ab22:	46b8      	mov	r8, r7
 801ab24:	f04f 0a02 	mov.w	sl, #2
 801ab28:	e6e8      	b.n	801a8fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ab2a:	2501      	movs	r5, #1
 801ab2c:	2702      	movs	r7, #2
 801ab2e:	e6e1      	b.n	801a8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801ab30:	2500      	movs	r5, #0
 801ab32:	2701      	movs	r7, #1
 801ab34:	e7f4      	b.n	801ab20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801ab36:	2702      	movs	r7, #2
 801ab38:	2503      	movs	r5, #3
 801ab3a:	f04f 0900 	mov.w	r9, #0
 801ab3e:	46b8      	mov	r8, r7
 801ab40:	e7e9      	b.n	801ab16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801ab42:	4613      	mov	r3, r2
 801ab44:	e728      	b.n	801a998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801ab46:	bf00      	nop
 801ab48:	20016e80 	.word	0x20016e80
 801ab4c:	fffd8f01 	.word	0xfffd8f01
 801ab50:	00027100 	.word	0x00027100
 801ab54:	0004e1ff 	.word	0x0004e1ff
 801ab58:	0004e1fe 	.word	0x0004e1fe
 801ab5c:	20016e88 	.word	0x20016e88
 801ab60:	4613      	mov	r3, r2
 801ab62:	992b      	ldr	r1, [sp, #172]	; 0xac
 801ab64:	469e      	mov	lr, r3
 801ab66:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801ab68:	469c      	mov	ip, r3
 801ab6a:	9111      	str	r1, [sp, #68]	; 0x44
 801ab6c:	f04f 0900 	mov.w	r9, #0
 801ab70:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801ab74:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801ab78:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801ab7c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801ab80:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801ab84:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ab88:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801ab8c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801ab90:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801ab94:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801ab98:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801ab9c:	f1bc 0f00 	cmp.w	ip, #0
 801aba0:	d147      	bne.n	801ac32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801aba2:	eb03 0c07 	add.w	ip, r3, r7
 801aba6:	1ad7      	subs	r7, r2, r3
 801aba8:	f1b9 0f00 	cmp.w	r9, #0
 801abac:	d009      	beq.n	801abc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801abae:	9029      	str	r0, [sp, #164]	; 0xa4
 801abb0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801abb4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801abb8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801abbc:	912d      	str	r1, [sp, #180]	; 0xb4
 801abbe:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801abc2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801abc4:	f04f 0800 	mov.w	r8, #0
 801abc8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801abcc:	9111      	str	r1, [sp, #68]	; 0x44
 801abce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801abd2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801abd6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801abda:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801abde:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801abe2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801abe6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801abea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801abee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801abf2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801abf6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801abfa:	f1be 0f00 	cmp.w	lr, #0
 801abfe:	d031      	beq.n	801ac64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801ac00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ac02:	4450      	add	r0, sl
 801ac04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ac08:	4431      	add	r1, r6
 801ac0a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ac0e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ac12:	4549      	cmp	r1, r9
 801ac14:	db08      	blt.n	801ac28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801ac16:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ac1a:	3001      	adds	r0, #1
 801ac1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ac20:	eba1 0109 	sub.w	r1, r1, r9
 801ac24:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ac28:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ac2c:	f04f 0801 	mov.w	r8, #1
 801ac30:	e7e3      	b.n	801abfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801ac32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ac34:	4450      	add	r0, sl
 801ac36:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ac3a:	4431      	add	r1, r6
 801ac3c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ac40:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ac44:	4541      	cmp	r1, r8
 801ac46:	db08      	blt.n	801ac5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801ac48:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ac4c:	3001      	adds	r0, #1
 801ac4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ac52:	eba1 0108 	sub.w	r1, r1, r8
 801ac56:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ac5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ac5e:	f04f 0901 	mov.w	r9, #1
 801ac62:	e79b      	b.n	801ab9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801ac64:	449c      	add	ip, r3
 801ac66:	1aff      	subs	r7, r7, r3
 801ac68:	f1b8 0f00 	cmp.w	r8, #0
 801ac6c:	d009      	beq.n	801ac82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801ac6e:	9019      	str	r0, [sp, #100]	; 0x64
 801ac70:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ac74:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ac78:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ac7c:	911d      	str	r1, [sp, #116]	; 0x74
 801ac7e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ac82:	1ad2      	subs	r2, r2, r3
 801ac84:	e68b      	b.n	801a99e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ac86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac88:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	f000 80d1 	beq.w	801ae32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801ac90:	ad19      	add	r5, sp, #100	; 0x64
 801ac92:	ac39      	add	r4, sp, #228	; 0xe4
 801ac94:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ac96:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ac9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ac9e:	930c      	str	r3, [sp, #48]	; 0x30
 801aca0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aca2:	6963      	ldr	r3, [r4, #20]
 801aca4:	440b      	add	r3, r1
 801aca6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801acaa:	4408      	add	r0, r1
 801acac:	b200      	sxth	r0, r0
 801acae:	4283      	cmp	r3, r0
 801acb0:	900d      	str	r0, [sp, #52]	; 0x34
 801acb2:	f280 80c1 	bge.w	801ae38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801acb6:	428b      	cmp	r3, r1
 801acb8:	da08      	bge.n	801accc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801acba:	2a00      	cmp	r2, #0
 801acbc:	dd06      	ble.n	801accc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801acbe:	1acb      	subs	r3, r1, r3
 801acc0:	429a      	cmp	r2, r3
 801acc2:	f2c0 80bb 	blt.w	801ae3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	f300 80b9 	bgt.w	801ae3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801accc:	6967      	ldr	r7, [r4, #20]
 801acce:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801acd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801acd4:	443b      	add	r3, r7
 801acd6:	461f      	mov	r7, r3
 801acd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acda:	1bdf      	subs	r7, r3, r7
 801acdc:	4297      	cmp	r7, r2
 801acde:	bfa8      	it	ge
 801ace0:	4617      	movge	r7, r2
 801ace2:	2f00      	cmp	r7, #0
 801ace4:	f340 813c 	ble.w	801af60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801ace8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801acea:	6829      	ldr	r1, [r5, #0]
 801acec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acf0:	f9bb 3000 	ldrsh.w	r3, [fp]
 801acf4:	4411      	add	r1, r2
 801acf6:	6820      	ldr	r0, [r4, #0]
 801acf8:	4299      	cmp	r1, r3
 801acfa:	dd1a      	ble.n	801ad32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801acfc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801ad00:	4402      	add	r2, r0
 801ad02:	440b      	add	r3, r1
 801ad04:	b21b      	sxth	r3, r3
 801ad06:	429a      	cmp	r2, r3
 801ad08:	dc13      	bgt.n	801ad32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ad0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad0c:	a912      	add	r1, sp, #72	; 0x48
 801ad0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	9206      	str	r2, [sp, #24]
 801ad16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ad18:	9500      	str	r5, [sp, #0]
 801ad1a:	9205      	str	r2, [sp, #20]
 801ad1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad1e:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ad22:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ad24:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ad28:	aa49      	add	r2, sp, #292	; 0x124
 801ad2a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801ad2e:	4623      	mov	r3, r4
 801ad30:	47c8      	blx	r9
 801ad32:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801ad36:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801ad3a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801ad3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ad42:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801ad46:	68a1      	ldr	r1, [r4, #8]
 801ad48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ad4c:	ed94 6a08 	vldr	s12, [r4, #32]
 801ad50:	edd4 6a07 	vldr	s13, [r4, #28]
 801ad54:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ad58:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ad5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ad60:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ad64:	edc4 6a07 	vstr	s13, [r4, #28]
 801ad68:	441a      	add	r2, r3
 801ad6a:	6963      	ldr	r3, [r4, #20]
 801ad6c:	3301      	adds	r3, #1
 801ad6e:	6022      	str	r2, [r4, #0]
 801ad70:	6163      	str	r3, [r4, #20]
 801ad72:	69a3      	ldr	r3, [r4, #24]
 801ad74:	3b01      	subs	r3, #1
 801ad76:	61a3      	str	r3, [r4, #24]
 801ad78:	6923      	ldr	r3, [r4, #16]
 801ad7a:	440b      	add	r3, r1
 801ad7c:	68e1      	ldr	r1, [r4, #12]
 801ad7e:	428b      	cmp	r3, r1
 801ad80:	6123      	str	r3, [r4, #16]
 801ad82:	db15      	blt.n	801adb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801ad84:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801ad88:	3201      	adds	r2, #1
 801ad8a:	1a5b      	subs	r3, r3, r1
 801ad8c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ad90:	6022      	str	r2, [r4, #0]
 801ad92:	6123      	str	r3, [r4, #16]
 801ad94:	edc4 6a07 	vstr	s13, [r4, #28]
 801ad98:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ad9c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ada0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ada4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ada8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801adac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801adb0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801adb4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801adb8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801adbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801adc0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801adc4:	68a9      	ldr	r1, [r5, #8]
 801adc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801adca:	ed95 6a08 	vldr	s12, [r5, #32]
 801adce:	edd5 6a07 	vldr	s13, [r5, #28]
 801add2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801add6:	ee76 6a86 	vadd.f32	s13, s13, s12
 801adda:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801adde:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ade2:	edc5 6a07 	vstr	s13, [r5, #28]
 801ade6:	441a      	add	r2, r3
 801ade8:	696b      	ldr	r3, [r5, #20]
 801adea:	3301      	adds	r3, #1
 801adec:	602a      	str	r2, [r5, #0]
 801adee:	616b      	str	r3, [r5, #20]
 801adf0:	69ab      	ldr	r3, [r5, #24]
 801adf2:	3b01      	subs	r3, #1
 801adf4:	61ab      	str	r3, [r5, #24]
 801adf6:	692b      	ldr	r3, [r5, #16]
 801adf8:	440b      	add	r3, r1
 801adfa:	68e9      	ldr	r1, [r5, #12]
 801adfc:	428b      	cmp	r3, r1
 801adfe:	612b      	str	r3, [r5, #16]
 801ae00:	db15      	blt.n	801ae2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801ae02:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ae06:	3201      	adds	r2, #1
 801ae08:	1a5b      	subs	r3, r3, r1
 801ae0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ae0e:	602a      	str	r2, [r5, #0]
 801ae10:	612b      	str	r3, [r5, #16]
 801ae12:	edc5 6a07 	vstr	s13, [r5, #28]
 801ae16:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ae1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ae1e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ae22:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801ae26:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ae2a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ae2e:	3f01      	subs	r7, #1
 801ae30:	e757      	b.n	801ace2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801ae32:	ad39      	add	r5, sp, #228	; 0xe4
 801ae34:	ac19      	add	r4, sp, #100	; 0x64
 801ae36:	e72d      	b.n	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801ae38:	4613      	mov	r3, r2
 801ae3a:	e744      	b.n	801acc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801ae3c:	4613      	mov	r3, r2
 801ae3e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801ae40:	469e      	mov	lr, r3
 801ae42:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801ae46:	461f      	mov	r7, r3
 801ae48:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801ae4c:	f04f 0900 	mov.w	r9, #0
 801ae50:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801ae54:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801ae58:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801ae5c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801ae60:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801ae64:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801ae66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801ae6a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ae6e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ae72:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ae76:	960e      	str	r6, [sp, #56]	; 0x38
 801ae78:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ae7c:	2f00      	cmp	r7, #0
 801ae7e:	d146      	bne.n	801af0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ae80:	449c      	add	ip, r3
 801ae82:	1ad7      	subs	r7, r2, r3
 801ae84:	f1b9 0f00 	cmp.w	r9, #0
 801ae88:	d009      	beq.n	801ae9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ae8a:	9039      	str	r0, [sp, #228]	; 0xe4
 801ae8c:	913d      	str	r1, [sp, #244]	; 0xf4
 801ae8e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801ae92:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801ae96:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801ae9a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ae9e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801aea0:	f04f 0800 	mov.w	r8, #0
 801aea4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801aea8:	910e      	str	r1, [sp, #56]	; 0x38
 801aeaa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801aeae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801aeb2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801aeb6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801aeba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801aebe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801aec2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801aec6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801aeca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801aece:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801aed2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801aed6:	f1be 0f00 	cmp.w	lr, #0
 801aeda:	d030      	beq.n	801af3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801aedc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801aede:	4450      	add	r0, sl
 801aee0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801aee4:	4431      	add	r1, r6
 801aee6:	ee37 7a04 	vadd.f32	s14, s14, s8
 801aeea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801aeee:	4549      	cmp	r1, r9
 801aef0:	db08      	blt.n	801af04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801aef2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801aef6:	3001      	adds	r0, #1
 801aef8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801aefc:	eba1 0109 	sub.w	r1, r1, r9
 801af00:	ee37 7a06 	vadd.f32	s14, s14, s12
 801af04:	f10e 3eff 	add.w	lr, lr, #4294967295
 801af08:	f04f 0801 	mov.w	r8, #1
 801af0c:	e7e3      	b.n	801aed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801af0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801af10:	4450      	add	r0, sl
 801af12:	ee37 7a24 	vadd.f32	s14, s14, s9
 801af16:	4431      	add	r1, r6
 801af18:	ee77 7a84 	vadd.f32	s15, s15, s8
 801af1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801af20:	4541      	cmp	r1, r8
 801af22:	db08      	blt.n	801af36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801af24:	ee76 6a85 	vadd.f32	s13, s13, s10
 801af28:	3001      	adds	r0, #1
 801af2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801af2e:	eba1 0108 	sub.w	r1, r1, r8
 801af32:	ee77 7a86 	vadd.f32	s15, s15, s12
 801af36:	3f01      	subs	r7, #1
 801af38:	f04f 0901 	mov.w	r9, #1
 801af3c:	e79e      	b.n	801ae7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801af3e:	449c      	add	ip, r3
 801af40:	1aff      	subs	r7, r7, r3
 801af42:	f1b8 0f00 	cmp.w	r8, #0
 801af46:	d009      	beq.n	801af5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801af48:	9019      	str	r0, [sp, #100]	; 0x64
 801af4a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801af4e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801af52:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801af56:	911d      	str	r1, [sp, #116]	; 0x74
 801af58:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801af5c:	1ad2      	subs	r2, r2, r3
 801af5e:	e6b5      	b.n	801accc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801af60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	b923      	cbnz	r3, 801af70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801af66:	4b04      	ldr	r3, [pc, #16]	; (801af78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801af68:	6818      	ldr	r0, [r3, #0]
 801af6a:	6803      	ldr	r3, [r0, #0]
 801af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af6e:	4798      	blx	r3
 801af70:	b05b      	add	sp, #364	; 0x16c
 801af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af76:	bf00      	nop
 801af78:	20016e88 	.word	0x20016e88

0801af7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801af7c:	b570      	push	{r4, r5, r6, lr}
 801af7e:	4604      	mov	r4, r0
 801af80:	2500      	movs	r5, #0
 801af82:	9805      	ldr	r0, [sp, #20]
 801af84:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801af88:	6061      	str	r1, [r4, #4]
 801af8a:	8263      	strh	r3, [r4, #18]
 801af8c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801af90:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801af94:	8025      	strh	r5, [r4, #0]
 801af96:	7221      	strb	r1, [r4, #8]
 801af98:	7266      	strb	r6, [r4, #9]
 801af9a:	60e0      	str	r0, [r4, #12]
 801af9c:	8222      	strh	r2, [r4, #16]
 801af9e:	82a3      	strh	r3, [r4, #20]
 801afa0:	82e5      	strh	r5, [r4, #22]
 801afa2:	8325      	strh	r5, [r4, #24]
 801afa4:	8365      	strh	r5, [r4, #26]
 801afa6:	83a5      	strh	r5, [r4, #28]
 801afa8:	83e5      	strh	r5, [r4, #30]
 801afaa:	8425      	strh	r5, [r4, #32]
 801afac:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801afb0:	b32e      	cbz	r6, 801affe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801afb2:	6803      	ldr	r3, [r0, #0]
 801afb4:	695b      	ldr	r3, [r3, #20]
 801afb6:	4798      	blx	r3
 801afb8:	4606      	mov	r6, r0
 801afba:	b300      	cbz	r0, 801affe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801afbc:	68e0      	ldr	r0, [r4, #12]
 801afbe:	4631      	mov	r1, r6
 801afc0:	6803      	ldr	r3, [r0, #0]
 801afc2:	68db      	ldr	r3, [r3, #12]
 801afc4:	4798      	blx	r3
 801afc6:	4605      	mov	r5, r0
 801afc8:	b1c8      	cbz	r0, 801affe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801afca:	7b43      	ldrb	r3, [r0, #13]
 801afcc:	7a82      	ldrb	r2, [r0, #10]
 801afce:	005b      	lsls	r3, r3, #1
 801afd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801afd4:	4313      	orrs	r3, r2
 801afd6:	8423      	strh	r3, [r4, #32]
 801afd8:	7a63      	ldrb	r3, [r4, #9]
 801afda:	2b06      	cmp	r3, #6
 801afdc:	d10f      	bne.n	801affe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801afde:	68e0      	ldr	r0, [r4, #12]
 801afe0:	462a      	mov	r2, r5
 801afe2:	4631      	mov	r1, r6
 801afe4:	6803      	ldr	r3, [r0, #0]
 801afe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801afe8:	4798      	blx	r3
 801afea:	7b6b      	ldrb	r3, [r5, #13]
 801afec:	005b      	lsls	r3, r3, #1
 801afee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aff2:	7aab      	ldrb	r3, [r5, #10]
 801aff4:	4313      	orrs	r3, r2
 801aff6:	4418      	add	r0, r3
 801aff8:	8c23      	ldrh	r3, [r4, #32]
 801affa:	4418      	add	r0, r3
 801affc:	8420      	strh	r0, [r4, #32]
 801affe:	4620      	mov	r0, r4
 801b000:	bd70      	pop	{r4, r5, r6, pc}

0801b002 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b006:	2400      	movs	r4, #0
 801b008:	b085      	sub	sp, #20
 801b00a:	4681      	mov	r9, r0
 801b00c:	4688      	mov	r8, r1
 801b00e:	4692      	mov	sl, r2
 801b010:	469b      	mov	fp, r3
 801b012:	4627      	mov	r7, r4
 801b014:	4625      	mov	r5, r4
 801b016:	4626      	mov	r6, r4
 801b018:	4554      	cmp	r4, sl
 801b01a:	da2a      	bge.n	801b072 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b01c:	2300      	movs	r3, #0
 801b01e:	9303      	str	r3, [sp, #12]
 801b020:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b024:	429d      	cmp	r5, r3
 801b026:	d004      	beq.n	801b032 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801b028:	f242 030b 	movw	r3, #8203	; 0x200b
 801b02c:	429d      	cmp	r5, r3
 801b02e:	bf18      	it	ne
 801b030:	462f      	movne	r7, r5
 801b032:	ab03      	add	r3, sp, #12
 801b034:	4642      	mov	r2, r8
 801b036:	4659      	mov	r1, fp
 801b038:	4648      	mov	r0, r9
 801b03a:	f003 f837 	bl	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b03e:	4605      	mov	r5, r0
 801b040:	b1b8      	cbz	r0, 801b072 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b042:	280a      	cmp	r0, #10
 801b044:	d015      	beq.n	801b072 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b046:	9a03      	ldr	r2, [sp, #12]
 801b048:	b18a      	cbz	r2, 801b06e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801b04a:	7b50      	ldrb	r0, [r2, #13]
 801b04c:	4639      	mov	r1, r7
 801b04e:	7a93      	ldrb	r3, [r2, #10]
 801b050:	0040      	lsls	r0, r0, #1
 801b052:	8895      	ldrh	r5, [r2, #4]
 801b054:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b058:	4303      	orrs	r3, r0
 801b05a:	4640      	mov	r0, r8
 801b05c:	9301      	str	r3, [sp, #4]
 801b05e:	f8d8 3000 	ldr.w	r3, [r8]
 801b062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b064:	4798      	blx	r3
 801b066:	9b01      	ldr	r3, [sp, #4]
 801b068:	4418      	add	r0, r3
 801b06a:	4406      	add	r6, r0
 801b06c:	b2b6      	uxth	r6, r6
 801b06e:	3401      	adds	r4, #1
 801b070:	e7d2      	b.n	801b018 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801b072:	4630      	mov	r0, r6
 801b074:	b005      	add	sp, #20
 801b076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b07a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b07a:	2a02      	cmp	r2, #2
 801b07c:	b530      	push	{r4, r5, lr}
 801b07e:	d011      	beq.n	801b0a4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b080:	2a03      	cmp	r2, #3
 801b082:	d01c      	beq.n	801b0be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b084:	2a01      	cmp	r2, #1
 801b086:	d10c      	bne.n	801b0a2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b088:	888b      	ldrh	r3, [r1, #4]
 801b08a:	8801      	ldrh	r1, [r0, #0]
 801b08c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b090:	1a5b      	subs	r3, r3, r1
 801b092:	8844      	ldrh	r4, [r0, #2]
 801b094:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b098:	1a9b      	subs	r3, r3, r2
 801b09a:	8004      	strh	r4, [r0, #0]
 801b09c:	8081      	strh	r1, [r0, #4]
 801b09e:	8043      	strh	r3, [r0, #2]
 801b0a0:	80c2      	strh	r2, [r0, #6]
 801b0a2:	bd30      	pop	{r4, r5, pc}
 801b0a4:	88cb      	ldrh	r3, [r1, #6]
 801b0a6:	8842      	ldrh	r2, [r0, #2]
 801b0a8:	1a9b      	subs	r3, r3, r2
 801b0aa:	88c2      	ldrh	r2, [r0, #6]
 801b0ac:	1a9b      	subs	r3, r3, r2
 801b0ae:	888a      	ldrh	r2, [r1, #4]
 801b0b0:	8801      	ldrh	r1, [r0, #0]
 801b0b2:	8043      	strh	r3, [r0, #2]
 801b0b4:	1a52      	subs	r2, r2, r1
 801b0b6:	8881      	ldrh	r1, [r0, #4]
 801b0b8:	1a52      	subs	r2, r2, r1
 801b0ba:	8002      	strh	r2, [r0, #0]
 801b0bc:	e7f1      	b.n	801b0a2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b0be:	88cb      	ldrh	r3, [r1, #6]
 801b0c0:	8841      	ldrh	r1, [r0, #2]
 801b0c2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b0c6:	1a5b      	subs	r3, r3, r1
 801b0c8:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b0cc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b0d0:	1a9b      	subs	r3, r3, r2
 801b0d2:	8045      	strh	r5, [r0, #2]
 801b0d4:	8082      	strh	r2, [r0, #4]
 801b0d6:	8003      	strh	r3, [r0, #0]
 801b0d8:	80c4      	strh	r4, [r0, #6]
 801b0da:	e7e2      	b.n	801b0a2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801b0dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0e0:	b09f      	sub	sp, #124	; 0x7c
 801b0e2:	9116      	str	r1, [sp, #88]	; 0x58
 801b0e4:	9317      	str	r3, [sp, #92]	; 0x5c
 801b0e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b0e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b0ea:	8809      	ldrh	r1, [r1, #0]
 801b0ec:	889b      	ldrh	r3, [r3, #4]
 801b0ee:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801b0f2:	440b      	add	r3, r1
 801b0f4:	9212      	str	r2, [sp, #72]	; 0x48
 801b0f6:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801b0fa:	b21b      	sxth	r3, r3
 801b0fc:	9011      	str	r0, [sp, #68]	; 0x44
 801b0fe:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801b102:	9310      	str	r3, [sp, #64]	; 0x40
 801b104:	f8d8 3000 	ldr.w	r3, [r8]
 801b108:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801b10c:	7b19      	ldrb	r1, [r3, #12]
 801b10e:	7adb      	ldrb	r3, [r3, #11]
 801b110:	9114      	str	r1, [sp, #80]	; 0x50
 801b112:	9315      	str	r3, [sp, #84]	; 0x54
 801b114:	2a00      	cmp	r2, #0
 801b116:	d06a      	beq.n	801b1ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801b118:	f898 3010 	ldrb.w	r3, [r8, #16]
 801b11c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b11e:	2b06      	cmp	r3, #6
 801b120:	bf14      	ite	ne
 801b122:	2301      	movne	r3, #1
 801b124:	2302      	moveq	r3, #2
 801b126:	4413      	add	r3, r2
 801b128:	f04f 0900 	mov.w	r9, #0
 801b12c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b12e:	464c      	mov	r4, r9
 801b130:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b134:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b138:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801b13c:	4293      	cmp	r3, r2
 801b13e:	f280 808f 	bge.w	801b260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801b142:	2300      	movs	r3, #0
 801b144:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801b148:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801b14c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b150:	429c      	cmp	r4, r3
 801b152:	d006      	beq.n	801b162 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801b154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b156:	f242 020b 	movw	r2, #8203	; 0x200b
 801b15a:	4294      	cmp	r4, r2
 801b15c:	bf18      	it	ne
 801b15e:	4623      	movne	r3, r4
 801b160:	930d      	str	r3, [sp, #52]	; 0x34
 801b162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b164:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801b166:	f8d8 2000 	ldr.w	r2, [r8]
 801b16a:	428b      	cmp	r3, r1
 801b16c:	db41      	blt.n	801b1f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801b16e:	6813      	ldr	r3, [r2, #0]
 801b170:	4610      	mov	r0, r2
 801b172:	695b      	ldr	r3, [r3, #20]
 801b174:	4798      	blx	r3
 801b176:	4604      	mov	r4, r0
 801b178:	f8d8 0000 	ldr.w	r0, [r8]
 801b17c:	aa1d      	add	r2, sp, #116	; 0x74
 801b17e:	4621      	mov	r1, r4
 801b180:	6803      	ldr	r3, [r0, #0]
 801b182:	689d      	ldr	r5, [r3, #8]
 801b184:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b188:	47a8      	blx	r5
 801b18a:	901c      	str	r0, [sp, #112]	; 0x70
 801b18c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b190:	429c      	cmp	r4, r3
 801b192:	f000 80ec 	beq.w	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b196:	f242 030b 	movw	r3, #8203	; 0x200b
 801b19a:	429c      	cmp	r4, r3
 801b19c:	f000 80e7 	beq.w	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b1a0:	2c00      	cmp	r4, #0
 801b1a2:	f000 80f9 	beq.w	801b398 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801b1a6:	2c0a      	cmp	r4, #10
 801b1a8:	d060      	beq.n	801b26c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801b1aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b1ac:	b36a      	cbz	r2, 801b20a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801b1ae:	8894      	ldrh	r4, [r2, #4]
 801b1b0:	f1bb 0f00 	cmp.w	fp, #0
 801b1b4:	d03b      	beq.n	801b22e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801b1b6:	f892 900d 	ldrb.w	r9, [r2, #13]
 801b1ba:	f1bb 0f01 	cmp.w	fp, #1
 801b1be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b1c2:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b1c6:	f892 900a 	ldrb.w	r9, [r2, #10]
 801b1ca:	ea49 0903 	orr.w	r9, r9, r3
 801b1ce:	d134      	bne.n	801b23a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801b1d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1d2:	eba6 0609 	sub.w	r6, r6, r9
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d14f      	bne.n	801b27a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801b1da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b1dc:	eb09 0306 	add.w	r3, r9, r6
 801b1e0:	4413      	add	r3, r2
 801b1e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b1e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b1e8:	4293      	cmp	r3, r2
 801b1ea:	da51      	bge.n	801b290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801b1ec:	e038      	b.n	801b260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801b1ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b1f0:	e79a      	b.n	801b128 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801b1f2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b1f6:	4659      	mov	r1, fp
 801b1f8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b1fa:	9301      	str	r3, [sp, #4]
 801b1fc:	ab1d      	add	r3, sp, #116	; 0x74
 801b1fe:	9300      	str	r3, [sp, #0]
 801b200:	ab1c      	add	r3, sp, #112	; 0x70
 801b202:	f002 ff9c 	bl	801e13e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b206:	4604      	mov	r4, r0
 801b208:	e7c0      	b.n	801b18c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801b20a:	f8d8 0000 	ldr.w	r0, [r8]
 801b20e:	6803      	ldr	r3, [r0, #0]
 801b210:	691b      	ldr	r3, [r3, #16]
 801b212:	4798      	blx	r3
 801b214:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b218:	4298      	cmp	r0, r3
 801b21a:	f000 80a8 	beq.w	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b21e:	f242 030b 	movw	r3, #8203	; 0x200b
 801b222:	4298      	cmp	r0, r3
 801b224:	f000 80a3 	beq.w	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b228:	f1bb 0f00 	cmp.w	fp, #0
 801b22c:	d100      	bne.n	801b230 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801b22e:	444e      	add	r6, r9
 801b230:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b232:	2a00      	cmp	r2, #0
 801b234:	d1bf      	bne.n	801b1b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801b236:	4691      	mov	r9, r2
 801b238:	e099      	b.n	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b23a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	f000 80ad 	beq.w	801b39c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801b242:	f1bb 0f00 	cmp.w	fp, #0
 801b246:	d118      	bne.n	801b27a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801b248:	f8d8 0000 	ldr.w	r0, [r8]
 801b24c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b24e:	6803      	ldr	r3, [r0, #0]
 801b250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b252:	4798      	blx	r3
 801b254:	4406      	add	r6, r0
 801b256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b258:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b25a:	1af3      	subs	r3, r6, r3
 801b25c:	4293      	cmp	r3, r2
 801b25e:	dd17      	ble.n	801b290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801b260:	2c00      	cmp	r4, #0
 801b262:	f000 8099 	beq.w	801b398 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801b266:	2c0a      	cmp	r4, #10
 801b268:	f040 8087 	bne.w	801b37a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801b26c:	240a      	movs	r4, #10
 801b26e:	fab4 f084 	clz	r0, r4
 801b272:	0940      	lsrs	r0, r0, #5
 801b274:	b01f      	add	sp, #124	; 0x7c
 801b276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b27a:	f8d8 0000 	ldr.w	r0, [r8]
 801b27e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b280:	6803      	ldr	r3, [r0, #0]
 801b282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b284:	4798      	blx	r3
 801b286:	f1bb 0f01 	cmp.w	fp, #1
 801b28a:	eba6 0600 	sub.w	r6, r6, r0
 801b28e:	d0a4      	beq.n	801b1da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801b290:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b292:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b294:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b298:	f9b3 7000 	ldrsh.w	r7, [r3]
 801b29c:	7b43      	ldrb	r3, [r0, #13]
 801b29e:	4431      	add	r1, r6
 801b2a0:	015b      	lsls	r3, r3, #5
 801b2a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b2a6:	7983      	ldrb	r3, [r0, #6]
 801b2a8:	4313      	orrs	r3, r2
 801b2aa:	440b      	add	r3, r1
 801b2ac:	42bb      	cmp	r3, r7
 801b2ae:	db5e      	blt.n	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b2b2:	4299      	cmp	r1, r3
 801b2b4:	da5b      	bge.n	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b2b6:	f8d8 0000 	ldr.w	r0, [r8]
 801b2ba:	42b7      	cmp	r7, r6
 801b2bc:	6803      	ldr	r3, [r0, #0]
 801b2be:	bfcc      	ite	gt
 801b2c0:	1bbf      	subgt	r7, r7, r6
 801b2c2:	2700      	movle	r7, #0
 801b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2c6:	bfc8      	it	gt
 801b2c8:	b2bf      	uxthgt	r7, r7
 801b2ca:	4798      	blx	r3
 801b2cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b2ce:	7b5a      	ldrb	r2, [r3, #13]
 801b2d0:	00d1      	lsls	r1, r2, #3
 801b2d2:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801b2d6:	7a19      	ldrb	r1, [r3, #8]
 801b2d8:	4329      	orrs	r1, r5
 801b2da:	0655      	lsls	r5, r2, #25
 801b2dc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801b2de:	bf48      	it	mi
 801b2e0:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b2e4:	4405      	add	r5, r0
 801b2e6:	bf48      	it	mi
 801b2e8:	b209      	sxthmi	r1, r1
 801b2ea:	1a6d      	subs	r5, r5, r1
 801b2ec:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b2ee:	b2ad      	uxth	r5, r5
 801b2f0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b2f4:	fa0f fa85 	sxth.w	sl, r5
 801b2f8:	4551      	cmp	r1, sl
 801b2fa:	dd3c      	ble.n	801b376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801b2fc:	0112      	lsls	r2, r2, #4
 801b2fe:	79d8      	ldrb	r0, [r3, #7]
 801b300:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b304:	4302      	orrs	r2, r0
 801b306:	4492      	add	sl, r2
 801b308:	4551      	cmp	r1, sl
 801b30a:	dc30      	bgt.n	801b36e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b30c:	1b4d      	subs	r5, r1, r5
 801b30e:	468a      	mov	sl, r1
 801b310:	b22d      	sxth	r5, r5
 801b312:	9319      	str	r3, [sp, #100]	; 0x64
 801b314:	b2ad      	uxth	r5, r5
 801b316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b318:	f8d8 0000 	ldr.w	r0, [r8]
 801b31c:	681a      	ldr	r2, [r3, #0]
 801b31e:	6801      	ldr	r1, [r0, #0]
 801b320:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801b322:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b324:	9313      	str	r3, [sp, #76]	; 0x4c
 801b326:	9218      	str	r2, [sp, #96]	; 0x60
 801b328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801b32a:	4788      	blx	r1
 801b32c:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b332:	910b      	str	r1, [sp, #44]	; 0x2c
 801b334:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b338:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b33a:	910a      	str	r1, [sp, #40]	; 0x28
 801b33c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b340:	9109      	str	r1, [sp, #36]	; 0x24
 801b342:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b346:	9305      	str	r3, [sp, #20]
 801b348:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b34a:	9206      	str	r2, [sp, #24]
 801b34c:	9304      	str	r3, [sp, #16]
 801b34e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b350:	f8cd a004 	str.w	sl, [sp, #4]
 801b354:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801b358:	4437      	add	r7, r6
 801b35a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b35c:	b23f      	sxth	r7, r7
 801b35e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b362:	9700      	str	r7, [sp, #0]
 801b364:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b366:	681a      	ldr	r2, [r3, #0]
 801b368:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b36a:	685b      	ldr	r3, [r3, #4]
 801b36c:	47a8      	blx	r5
 801b36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b370:	3301      	adds	r3, #1
 801b372:	930e      	str	r3, [sp, #56]	; 0x38
 801b374:	e6e0      	b.n	801b138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801b376:	2500      	movs	r5, #0
 801b378:	e7cb      	b.n	801b312 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801b37a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b37c:	3501      	adds	r5, #1
 801b37e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b380:	429d      	cmp	r5, r3
 801b382:	f6bf af74 	bge.w	801b26e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801b386:	4659      	mov	r1, fp
 801b388:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b38a:	f7e8 fe45 	bl	8004018 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b38e:	4604      	mov	r4, r0
 801b390:	b110      	cbz	r0, 801b398 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801b392:	280a      	cmp	r0, #10
 801b394:	d1f2      	bne.n	801b37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801b396:	e769      	b.n	801b26c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801b398:	2400      	movs	r4, #0
 801b39a:	e768      	b.n	801b26e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801b39c:	f1bb 0f00 	cmp.w	fp, #0
 801b3a0:	f43f af59 	beq.w	801b256 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801b3a4:	e774      	b.n	801b290 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801b3a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b3a6:	b530      	push	{r4, r5, lr}
 801b3a8:	8ac4      	ldrh	r4, [r0, #22]
 801b3aa:	8b45      	ldrh	r5, [r0, #26]
 801b3ac:	8343      	strh	r3, [r0, #26]
 801b3ae:	442c      	add	r4, r5
 801b3b0:	1ae4      	subs	r4, r4, r3
 801b3b2:	8b83      	ldrh	r3, [r0, #28]
 801b3b4:	82c4      	strh	r4, [r0, #22]
 801b3b6:	8b04      	ldrh	r4, [r0, #24]
 801b3b8:	4422      	add	r2, r4
 801b3ba:	440c      	add	r4, r1
 801b3bc:	1a59      	subs	r1, r3, r1
 801b3be:	83c2      	strh	r2, [r0, #30]
 801b3c0:	8304      	strh	r4, [r0, #24]
 801b3c2:	8381      	strh	r1, [r0, #28]
 801b3c4:	bd30      	pop	{r4, r5, pc}

0801b3c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801b3c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ca:	4604      	mov	r4, r0
 801b3cc:	8a47      	ldrh	r7, [r0, #18]
 801b3ce:	68c0      	ldr	r0, [r0, #12]
 801b3d0:	b085      	sub	sp, #20
 801b3d2:	6803      	ldr	r3, [r0, #0]
 801b3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3d6:	4798      	blx	r3
 801b3d8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801b3dc:	7a63      	ldrb	r3, [r4, #9]
 801b3de:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801b3e2:	3b01      	subs	r3, #1
 801b3e4:	42b7      	cmp	r7, r6
 801b3e6:	bfac      	ite	ge
 801b3e8:	f04f 0900 	movge.w	r9, #0
 801b3ec:	f04f 0901 	movlt.w	r9, #1
 801b3f0:	2b05      	cmp	r3, #5
 801b3f2:	d804      	bhi.n	801b3fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801b3f4:	e8df f003 	tbb	[pc, r3]
 801b3f8:	470f0854 	.word	0x470f0854
 801b3fc:	4c4c      	.short	0x4c4c
 801b3fe:	2500      	movs	r5, #0
 801b400:	46a9      	mov	r9, r5
 801b402:	462e      	mov	r6, r5
 801b404:	462f      	mov	r7, r5
 801b406:	e00e      	b.n	801b426 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801b408:	42b7      	cmp	r7, r6
 801b40a:	f04f 0500 	mov.w	r5, #0
 801b40e:	bfb4      	ite	lt
 801b410:	2600      	movlt	r6, #0
 801b412:	2601      	movge	r6, #1
 801b414:	e7f6      	b.n	801b404 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801b416:	42b7      	cmp	r7, r6
 801b418:	464d      	mov	r5, r9
 801b41a:	f04f 0900 	mov.w	r9, #0
 801b41e:	bfb4      	ite	lt
 801b420:	2600      	movlt	r6, #0
 801b422:	2601      	movge	r6, #1
 801b424:	464f      	mov	r7, r9
 801b426:	f04f 0800 	mov.w	r8, #0
 801b42a:	f8a4 8016 	strh.w	r8, [r4, #22]
 801b42e:	f8a4 8018 	strh.w	r8, [r4, #24]
 801b432:	f8cd 8004 	str.w	r8, [sp, #4]
 801b436:	2300      	movs	r3, #0
 801b438:	9303      	str	r3, [sp, #12]
 801b43a:	8823      	ldrh	r3, [r4, #0]
 801b43c:	2b20      	cmp	r3, #32
 801b43e:	d033      	beq.n	801b4a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801b440:	f242 010b 	movw	r1, #8203	; 0x200b
 801b444:	1a5a      	subs	r2, r3, r1
 801b446:	f1d2 0a00 	rsbs	sl, r2, #0
 801b44a:	eb4a 0a02 	adc.w	sl, sl, r2
 801b44e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b452:	4293      	cmp	r3, r2
 801b454:	d008      	beq.n	801b468 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801b456:	428b      	cmp	r3, r1
 801b458:	9a01      	ldr	r2, [sp, #4]
 801b45a:	bf0e      	itee	eq
 801b45c:	f04f 0a01 	moveq.w	sl, #1
 801b460:	461a      	movne	r2, r3
 801b462:	f04f 0a00 	movne.w	sl, #0
 801b466:	9201      	str	r2, [sp, #4]
 801b468:	ab03      	add	r3, sp, #12
 801b46a:	68e2      	ldr	r2, [r4, #12]
 801b46c:	7a21      	ldrb	r1, [r4, #8]
 801b46e:	6860      	ldr	r0, [r4, #4]
 801b470:	f002 fe1c 	bl	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b474:	8020      	strh	r0, [r4, #0]
 801b476:	b9d8      	cbnz	r0, 801b4b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801b478:	8ba2      	ldrh	r2, [r4, #28]
 801b47a:	2300      	movs	r3, #0
 801b47c:	4611      	mov	r1, r2
 801b47e:	4620      	mov	r0, r4
 801b480:	f7ff ff91 	bl	801b3a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b484:	e06e      	b.n	801b564 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801b486:	2500      	movs	r5, #0
 801b488:	2701      	movs	r7, #1
 801b48a:	46a9      	mov	r9, r5
 801b48c:	462e      	mov	r6, r5
 801b48e:	e7ca      	b.n	801b426 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801b490:	42b7      	cmp	r7, r6
 801b492:	f04f 0500 	mov.w	r5, #0
 801b496:	bfb4      	ite	lt
 801b498:	2700      	movlt	r7, #0
 801b49a:	2701      	movge	r7, #1
 801b49c:	462e      	mov	r6, r5
 801b49e:	e7c2      	b.n	801b426 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801b4a0:	2500      	movs	r5, #0
 801b4a2:	2601      	movs	r6, #1
 801b4a4:	46a9      	mov	r9, r5
 801b4a6:	e7ad      	b.n	801b404 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801b4a8:	9301      	str	r3, [sp, #4]
 801b4aa:	f04f 0a01 	mov.w	sl, #1
 801b4ae:	e7db      	b.n	801b468 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801b4b0:	8b63      	ldrh	r3, [r4, #26]
 801b4b2:	280a      	cmp	r0, #10
 801b4b4:	f103 0301 	add.w	r3, r3, #1
 801b4b8:	8363      	strh	r3, [r4, #26]
 801b4ba:	d0dd      	beq.n	801b478 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801b4bc:	9a03      	ldr	r2, [sp, #12]
 801b4be:	bb62      	cbnz	r2, 801b51a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801b4c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b4c4:	4298      	cmp	r0, r3
 801b4c6:	d003      	beq.n	801b4d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801b4c8:	f242 030b 	movw	r3, #8203	; 0x200b
 801b4cc:	4298      	cmp	r0, r3
 801b4ce:	d1b2      	bne.n	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b4d0:	8823      	ldrh	r3, [r4, #0]
 801b4d2:	8ba1      	ldrh	r1, [r4, #28]
 801b4d4:	2b20      	cmp	r3, #32
 801b4d6:	d003      	beq.n	801b4e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801b4d8:	f242 000b 	movw	r0, #8203	; 0x200b
 801b4dc:	4283      	cmp	r3, r0
 801b4de:	d131      	bne.n	801b544 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801b4e0:	f1ba 0f00 	cmp.w	sl, #0
 801b4e4:	bf0a      	itet	eq
 801b4e6:	4688      	moveq	r8, r1
 801b4e8:	4650      	movne	r0, sl
 801b4ea:	2001      	moveq	r0, #1
 801b4ec:	440a      	add	r2, r1
 801b4ee:	8b23      	ldrh	r3, [r4, #24]
 801b4f0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b4f4:	b292      	uxth	r2, r2
 801b4f6:	83a2      	strh	r2, [r4, #28]
 801b4f8:	4413      	add	r3, r2
 801b4fa:	f1b9 0f00 	cmp.w	r9, #0
 801b4fe:	d102      	bne.n	801b506 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801b500:	2d00      	cmp	r5, #0
 801b502:	d042      	beq.n	801b58a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801b504:	b300      	cbz	r0, 801b548 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801b506:	8c21      	ldrh	r1, [r4, #32]
 801b508:	4419      	add	r1, r3
 801b50a:	458c      	cmp	ip, r1
 801b50c:	da37      	bge.n	801b57e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801b50e:	8ae1      	ldrh	r1, [r4, #22]
 801b510:	2900      	cmp	r1, #0
 801b512:	d034      	beq.n	801b57e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801b514:	4563      	cmp	r3, ip
 801b516:	dd8e      	ble.n	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b518:	e01d      	b.n	801b556 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801b51a:	8893      	ldrh	r3, [r2, #4]
 801b51c:	9901      	ldr	r1, [sp, #4]
 801b51e:	8023      	strh	r3, [r4, #0]
 801b520:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801b524:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801b528:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801b52c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801b530:	ea4b 0b00 	orr.w	fp, fp, r0
 801b534:	68e0      	ldr	r0, [r4, #12]
 801b536:	6803      	ldr	r3, [r0, #0]
 801b538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b53a:	4798      	blx	r3
 801b53c:	eb0b 0200 	add.w	r2, fp, r0
 801b540:	b292      	uxth	r2, r2
 801b542:	e7c5      	b.n	801b4d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801b544:	2000      	movs	r0, #0
 801b546:	e7d1      	b.n	801b4ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801b548:	4563      	cmp	r3, ip
 801b54a:	f77f af74 	ble.w	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b54e:	8ae3      	ldrh	r3, [r4, #22]
 801b550:	2b00      	cmp	r3, #0
 801b552:	f43f af70 	beq.w	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b556:	2301      	movs	r3, #1
 801b558:	8c22      	ldrh	r2, [r4, #32]
 801b55a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801b55e:	8be3      	ldrh	r3, [r4, #30]
 801b560:	4413      	add	r3, r2
 801b562:	83e3      	strh	r3, [r4, #30]
 801b564:	68e0      	ldr	r0, [r4, #12]
 801b566:	6803      	ldr	r3, [r0, #0]
 801b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b56a:	4798      	blx	r3
 801b56c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801b570:	4418      	add	r0, r3
 801b572:	8a63      	ldrh	r3, [r4, #18]
 801b574:	1a18      	subs	r0, r3, r0
 801b576:	8260      	strh	r0, [r4, #18]
 801b578:	b005      	add	sp, #20
 801b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b57e:	2300      	movs	r3, #0
 801b580:	4611      	mov	r1, r2
 801b582:	4620      	mov	r0, r4
 801b584:	f7ff ff0f 	bl	801b3a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b588:	e755      	b.n	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b58a:	4563      	cmp	r3, ip
 801b58c:	dd14      	ble.n	801b5b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801b58e:	b117      	cbz	r7, 801b596 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801b590:	2301      	movs	r3, #1
 801b592:	460a      	mov	r2, r1
 801b594:	e772      	b.n	801b47c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801b596:	2e00      	cmp	r6, #0
 801b598:	f43f af4d 	beq.w	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b59c:	2800      	cmp	r0, #0
 801b59e:	f47f af4a 	bne.w	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b5a2:	f1ba 0f00 	cmp.w	sl, #0
 801b5a6:	d002      	beq.n	801b5ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801b5a8:	2301      	movs	r3, #1
 801b5aa:	4642      	mov	r2, r8
 801b5ac:	e767      	b.n	801b47e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801b5ae:	8ae3      	ldrh	r3, [r4, #22]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	f43f af40 	beq.w	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b5b6:	e7d5      	b.n	801b564 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	f47f af3c 	bne.w	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b5be:	f1ba 0f00 	cmp.w	sl, #0
 801b5c2:	f43f af38 	beq.w	801b436 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b5c6:	2301      	movs	r3, #1
 801b5c8:	4642      	mov	r2, r8
 801b5ca:	e7da      	b.n	801b582 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801b5cc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5ce:	4605      	mov	r5, r0
 801b5d0:	b08f      	sub	sp, #60	; 0x3c
 801b5d2:	4617      	mov	r7, r2
 801b5d4:	461c      	mov	r4, r3
 801b5d6:	460e      	mov	r6, r1
 801b5d8:	b1d1      	cbz	r1, 801b610 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	4620      	mov	r0, r4
 801b5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5e0:	4798      	blx	r3
 801b5e2:	4240      	negs	r0, r0
 801b5e4:	9603      	str	r6, [sp, #12]
 801b5e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b5ea:	b200      	sxth	r0, r0
 801b5ec:	9700      	str	r7, [sp, #0]
 801b5ee:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b5f2:	4629      	mov	r1, r5
 801b5f4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801b5f8:	2401      	movs	r4, #1
 801b5fa:	a805      	add	r0, sp, #20
 801b5fc:	f7ff fcbe 	bl	801af7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801b600:	a805      	add	r0, sp, #20
 801b602:	f7ff fee0 	bl	801b3c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b606:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b60a:	b163      	cbz	r3, 801b626 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801b60c:	3401      	adds	r4, #1
 801b60e:	e7f7      	b.n	801b600 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b610:	2401      	movs	r4, #1
 801b612:	f002 fe17 	bl	801e244 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b616:	280a      	cmp	r0, #10
 801b618:	4628      	mov	r0, r5
 801b61a:	bf08      	it	eq
 801b61c:	3401      	addeq	r4, #1
 801b61e:	f002 fe11 	bl	801e244 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b622:	2800      	cmp	r0, #0
 801b624:	d1f7      	bne.n	801b616 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801b626:	b2a0      	uxth	r0, r4
 801b628:	b00f      	add	sp, #60	; 0x3c
 801b62a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b62c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b630:	b0e3      	sub	sp, #396	; 0x18c
 801b632:	461c      	mov	r4, r3
 801b634:	4683      	mov	fp, r0
 801b636:	4688      	mov	r8, r1
 801b638:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	f000 810f 	beq.w	801b85e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b640:	6823      	ldr	r3, [r4, #0]
 801b642:	2b00      	cmp	r3, #0
 801b644:	f000 810b 	beq.w	801b85e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b648:	7ba3      	ldrb	r3, [r4, #14]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	f000 8107 	beq.w	801b85e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b650:	ad0a      	add	r5, sp, #40	; 0x28
 801b652:	6810      	ldr	r0, [r2, #0]
 801b654:	6851      	ldr	r1, [r2, #4]
 801b656:	462b      	mov	r3, r5
 801b658:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801b65c:	c303      	stmia	r3!, {r0, r1}
 801b65e:	2100      	movs	r1, #0
 801b660:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b664:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801b668:	4628      	mov	r0, r5
 801b66a:	910c      	str	r1, [sp, #48]	; 0x30
 801b66c:	a90c      	add	r1, sp, #48	; 0x30
 801b66e:	79a2      	ldrb	r2, [r4, #6]
 801b670:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b674:	f7ff fd01 	bl	801b07a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b678:	a90c      	add	r1, sp, #48	; 0x30
 801b67a:	79a2      	ldrb	r2, [r4, #6]
 801b67c:	4608      	mov	r0, r1
 801b67e:	f7ff fcfc 	bl	801b07a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b682:	a817      	add	r0, sp, #92	; 0x5c
 801b684:	f002 f9b1 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 801b688:	6820      	ldr	r0, [r4, #0]
 801b68a:	6803      	ldr	r3, [r0, #0]
 801b68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b68e:	4798      	blx	r3
 801b690:	4606      	mov	r6, r0
 801b692:	6820      	ldr	r0, [r4, #0]
 801b694:	6803      	ldr	r3, [r0, #0]
 801b696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b698:	4798      	blx	r3
 801b69a:	4633      	mov	r3, r6
 801b69c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801b69e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801b6a0:	9000      	str	r0, [sp, #0]
 801b6a2:	a817      	add	r0, sp, #92	; 0x5c
 801b6a4:	f002 f9fc 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b6a8:	6820      	ldr	r0, [r4, #0]
 801b6aa:	f894 a004 	ldrb.w	sl, [r4, #4]
 801b6ae:	6803      	ldr	r3, [r0, #0]
 801b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6b2:	4798      	blx	r3
 801b6b4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801b6b8:	6823      	ldr	r3, [r4, #0]
 801b6ba:	4607      	mov	r7, r0
 801b6bc:	4406      	add	r6, r0
 801b6be:	a830      	add	r0, sp, #192	; 0xc0
 801b6c0:	f893 9009 	ldrb.w	r9, [r3, #9]
 801b6c4:	f002 f991 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 801b6c8:	7c23      	ldrb	r3, [r4, #16]
 801b6ca:	b17b      	cbz	r3, 801b6ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801b6cc:	6820      	ldr	r0, [r4, #0]
 801b6ce:	6803      	ldr	r3, [r0, #0]
 801b6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b6d2:	4798      	blx	r3
 801b6d4:	9009      	str	r0, [sp, #36]	; 0x24
 801b6d6:	6820      	ldr	r0, [r4, #0]
 801b6d8:	6802      	ldr	r2, [r0, #0]
 801b6da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b6dc:	4790      	blx	r2
 801b6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6e0:	9000      	str	r0, [sp, #0]
 801b6e2:	a830      	add	r0, sp, #192	; 0xc0
 801b6e4:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801b6e6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801b6e8:	f002 f9da 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b6ec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b6f0:	a80e      	add	r0, sp, #56	; 0x38
 801b6f2:	7be2      	ldrb	r2, [r4, #15]
 801b6f4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b6f8:	1a8a      	subs	r2, r1, r2
 801b6fa:	7c21      	ldrb	r1, [r4, #16]
 801b6fc:	9103      	str	r1, [sp, #12]
 801b6fe:	b292      	uxth	r2, r2
 801b700:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801b704:	9102      	str	r1, [sp, #8]
 801b706:	6821      	ldr	r1, [r4, #0]
 801b708:	9101      	str	r1, [sp, #4]
 801b70a:	7961      	ldrb	r1, [r4, #5]
 801b70c:	9100      	str	r1, [sp, #0]
 801b70e:	a930      	add	r1, sp, #192	; 0xc0
 801b710:	f7ff fc34 	bl	801af7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801b714:	2e00      	cmp	r6, #0
 801b716:	dc5b      	bgt.n	801b7d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801b718:	af17      	add	r7, sp, #92	; 0x5c
 801b71a:	f04f 0900 	mov.w	r9, #0
 801b71e:	7c23      	ldrb	r3, [r4, #16]
 801b720:	2b00      	cmp	r3, #0
 801b722:	f000 80ae 	beq.w	801b882 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801b726:	a80e      	add	r0, sp, #56	; 0x38
 801b728:	f7ff fe4d 	bl	801b3c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b72c:	f1ba 0f00 	cmp.w	sl, #0
 801b730:	f000 80a2 	beq.w	801b878 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801b734:	7c23      	ldrb	r3, [r4, #16]
 801b736:	2264      	movs	r2, #100	; 0x64
 801b738:	4639      	mov	r1, r7
 801b73a:	a849      	add	r0, sp, #292	; 0x124
 801b73c:	9309      	str	r3, [sp, #36]	; 0x24
 801b73e:	f00f fe9d 	bl	802b47c <memcpy>
 801b742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b744:	2b00      	cmp	r3, #0
 801b746:	f000 80a4 	beq.w	801b892 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b74a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801b74e:	7922      	ldrb	r2, [r4, #4]
 801b750:	2a01      	cmp	r2, #1
 801b752:	f040 8087 	bne.w	801b864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b756:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801b75a:	1ac0      	subs	r0, r0, r3
 801b75c:	2302      	movs	r3, #2
 801b75e:	fb90 f0f3 	sdiv	r0, r0, r3
 801b762:	b200      	sxth	r0, r0
 801b764:	7c23      	ldrb	r3, [r4, #16]
 801b766:	2b00      	cmp	r3, #0
 801b768:	f000 8088 	beq.w	801b87c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 801b76c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801b770:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801b774:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b778:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b77c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801b780:	2100      	movs	r1, #0
 801b782:	4410      	add	r0, r2
 801b784:	4642      	mov	r2, r8
 801b786:	b200      	sxth	r0, r0
 801b788:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801b78c:	9000      	str	r0, [sp, #0]
 801b78e:	4658      	mov	r0, fp
 801b790:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801b794:	f7ff fca2 	bl	801b0dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b798:	2800      	cmp	r0, #0
 801b79a:	d160      	bne.n	801b85e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b79c:	b2b2      	uxth	r2, r6
 801b79e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b7a2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b7a6:	4413      	add	r3, r2
 801b7a8:	1a8a      	subs	r2, r1, r2
 801b7aa:	b21b      	sxth	r3, r3
 801b7ac:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801b7b0:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801b7b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b7b8:	2a00      	cmp	r2, #0
 801b7ba:	d150      	bne.n	801b85e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b7bc:	6822      	ldr	r2, [r4, #0]
 801b7be:	8869      	ldrh	r1, [r5, #2]
 801b7c0:	7a12      	ldrb	r2, [r2, #8]
 801b7c2:	1a9b      	subs	r3, r3, r2
 801b7c4:	88ea      	ldrh	r2, [r5, #6]
 801b7c6:	440a      	add	r2, r1
 801b7c8:	b212      	sxth	r2, r2
 801b7ca:	4293      	cmp	r3, r2
 801b7cc:	dda7      	ble.n	801b71e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801b7ce:	e046      	b.n	801b85e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b7d0:	7c23      	ldrb	r3, [r4, #16]
 801b7d2:	444f      	add	r7, r9
 801b7d4:	b1c3      	cbz	r3, 801b808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801b7d6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801b7da:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b7de:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b7e2:	443b      	add	r3, r7
 801b7e4:	4293      	cmp	r3, r2
 801b7e6:	da97      	bge.n	801b718 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801b7e8:	a80e      	add	r0, sp, #56	; 0x38
 801b7ea:	f7ff fdec 	bl	801b3c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b7ee:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801b7f2:	3b01      	subs	r3, #1
 801b7f4:	b29b      	uxth	r3, r3
 801b7f6:	454b      	cmp	r3, r9
 801b7f8:	9309      	str	r3, [sp, #36]	; 0x24
 801b7fa:	d021      	beq.n	801b840 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801b7fc:	7961      	ldrb	r1, [r4, #5]
 801b7fe:	a817      	add	r0, sp, #92	; 0x5c
 801b800:	f7e8 fc0a 	bl	8004018 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b806:	e7f4      	b.n	801b7f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801b808:	fa1f f986 	uxth.w	r9, r6
 801b80c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b810:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b814:	443b      	add	r3, r7
 801b816:	4293      	cmp	r3, r2
 801b818:	f6bf af7e 	bge.w	801b718 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801b81c:	a817      	add	r0, sp, #92	; 0x5c
 801b81e:	f002 fd11 	bl	801e244 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b822:	b1e0      	cbz	r0, 801b85e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801b824:	280a      	cmp	r0, #10
 801b826:	d1f1      	bne.n	801b80c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801b828:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b82c:	444b      	add	r3, r9
 801b82e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b832:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b836:	eba3 0309 	sub.w	r3, r3, r9
 801b83a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b83e:	e7e5      	b.n	801b80c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801b840:	b2b3      	uxth	r3, r6
 801b842:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b846:	441a      	add	r2, r3
 801b848:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801b84c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801b850:	1ad3      	subs	r3, r2, r3
 801b852:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b856:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d1bd      	bne.n	801b7da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801b85e:	b063      	add	sp, #396	; 0x18c
 801b860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b864:	2a02      	cmp	r2, #2
 801b866:	d105      	bne.n	801b874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b868:	7be2      	ldrb	r2, [r4, #15]
 801b86a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b86e:	1a80      	subs	r0, r0, r2
 801b870:	1ac0      	subs	r0, r0, r3
 801b872:	e776      	b.n	801b762 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801b874:	2000      	movs	r0, #0
 801b876:	e775      	b.n	801b764 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801b878:	7be0      	ldrb	r0, [r4, #15]
 801b87a:	e773      	b.n	801b764 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801b87c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b880:	e776      	b.n	801b770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801b882:	f1ba 0f00 	cmp.w	sl, #0
 801b886:	d0f7      	beq.n	801b878 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 801b888:	2264      	movs	r2, #100	; 0x64
 801b88a:	4639      	mov	r1, r7
 801b88c:	a849      	add	r0, sp, #292	; 0x124
 801b88e:	f00f fdf5 	bl	802b47c <memcpy>
 801b892:	2300      	movs	r3, #0
 801b894:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b898:	6821      	ldr	r1, [r4, #0]
 801b89a:	a849      	add	r0, sp, #292	; 0x124
 801b89c:	f7ff fbb1 	bl	801b002 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b8a0:	b203      	sxth	r3, r0
 801b8a2:	e754      	b.n	801b74e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801b8a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b8a4:	2b03      	cmp	r3, #3
 801b8a6:	d818      	bhi.n	801b8da <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801b8a8:	e8df f003 	tbb	[pc, r3]
 801b8ac:	130d0602 	.word	0x130d0602
 801b8b0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b8b4:	1850      	adds	r0, r2, r1
 801b8b6:	4770      	bx	lr
 801b8b8:	8803      	ldrh	r3, [r0, #0]
 801b8ba:	8880      	ldrh	r0, [r0, #4]
 801b8bc:	4418      	add	r0, r3
 801b8be:	b200      	sxth	r0, r0
 801b8c0:	1a80      	subs	r0, r0, r2
 801b8c2:	3801      	subs	r0, #1
 801b8c4:	4770      	bx	lr
 801b8c6:	8803      	ldrh	r3, [r0, #0]
 801b8c8:	8880      	ldrh	r0, [r0, #4]
 801b8ca:	4418      	add	r0, r3
 801b8cc:	b200      	sxth	r0, r0
 801b8ce:	1a40      	subs	r0, r0, r1
 801b8d0:	e7f7      	b.n	801b8c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b8d2:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b8d6:	4410      	add	r0, r2
 801b8d8:	4770      	bx	lr
 801b8da:	2000      	movs	r0, #0
 801b8dc:	4770      	bx	lr

0801b8de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b8de:	2b03      	cmp	r3, #3
 801b8e0:	d817      	bhi.n	801b912 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801b8e2:	e8df f003 	tbb	[pc, r3]
 801b8e6:	0602      	.short	0x0602
 801b8e8:	1009      	.short	0x1009
 801b8ea:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b8ee:	1850      	adds	r0, r2, r1
 801b8f0:	4770      	bx	lr
 801b8f2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b8f6:	e7fa      	b.n	801b8ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801b8f8:	8843      	ldrh	r3, [r0, #2]
 801b8fa:	88c0      	ldrh	r0, [r0, #6]
 801b8fc:	4418      	add	r0, r3
 801b8fe:	b200      	sxth	r0, r0
 801b900:	1a80      	subs	r0, r0, r2
 801b902:	3801      	subs	r0, #1
 801b904:	4770      	bx	lr
 801b906:	8843      	ldrh	r3, [r0, #2]
 801b908:	88c0      	ldrh	r0, [r0, #6]
 801b90a:	4418      	add	r0, r3
 801b90c:	b200      	sxth	r0, r0
 801b90e:	1a40      	subs	r0, r0, r1
 801b910:	e7f7      	b.n	801b902 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b912:	2000      	movs	r0, #0
 801b914:	4770      	bx	lr
	...

0801b918 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b918:	4b01      	ldr	r3, [pc, #4]	; (801b920 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b91a:	2200      	movs	r2, #0
 801b91c:	601a      	str	r2, [r3, #0]
 801b91e:	4770      	bx	lr
 801b920:	20016e98 	.word	0x20016e98

0801b924 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b924:	4603      	mov	r3, r0
 801b926:	b1c8      	cbz	r0, 801b95c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b928:	0c02      	lsrs	r2, r0, #16
 801b92a:	0412      	lsls	r2, r2, #16
 801b92c:	b9a2      	cbnz	r2, 801b958 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b92e:	0403      	lsls	r3, r0, #16
 801b930:	2010      	movs	r0, #16
 801b932:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b936:	bf04      	itt	eq
 801b938:	021b      	lsleq	r3, r3, #8
 801b93a:	3008      	addeq	r0, #8
 801b93c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b940:	bf04      	itt	eq
 801b942:	011b      	lsleq	r3, r3, #4
 801b944:	3004      	addeq	r0, #4
 801b946:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b94a:	bf04      	itt	eq
 801b94c:	009b      	lsleq	r3, r3, #2
 801b94e:	3002      	addeq	r0, #2
 801b950:	2b00      	cmp	r3, #0
 801b952:	db04      	blt.n	801b95e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b954:	3001      	adds	r0, #1
 801b956:	4770      	bx	lr
 801b958:	2000      	movs	r0, #0
 801b95a:	e7ea      	b.n	801b932 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b95c:	2020      	movs	r0, #32
 801b95e:	4770      	bx	lr

0801b960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b964:	b087      	sub	sp, #28
 801b966:	4681      	mov	r9, r0
 801b968:	4698      	mov	r8, r3
 801b96a:	4610      	mov	r0, r2
 801b96c:	460d      	mov	r5, r1
 801b96e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b972:	b981      	cbnz	r1, 801b996 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b974:	b14b      	cbz	r3, 801b98a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b976:	460b      	mov	r3, r1
 801b978:	464a      	mov	r2, r9
 801b97a:	4641      	mov	r1, r8
 801b97c:	e9cd 4700 	strd	r4, r7, [sp]
 801b980:	f7ff ffee 	bl	801b960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b984:	b007      	add	sp, #28
 801b986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b98a:	f04f 33ff 	mov.w	r3, #4294967295
 801b98e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b992:	603b      	str	r3, [r7, #0]
 801b994:	e7f6      	b.n	801b984 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b996:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b99a:	d107      	bne.n	801b9ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b99c:	fb09 f602 	mul.w	r6, r9, r2
 801b9a0:	fbb6 f0f4 	udiv	r0, r6, r4
 801b9a4:	fb04 6610 	mls	r6, r4, r0, r6
 801b9a8:	603e      	str	r6, [r7, #0]
 801b9aa:	e7eb      	b.n	801b984 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b9ac:	2601      	movs	r6, #1
 801b9ae:	fa09 fb01 	lsl.w	fp, r9, r1
 801b9b2:	408e      	lsls	r6, r1
 801b9b4:	fbbb f3f4 	udiv	r3, fp, r4
 801b9b8:	3e01      	subs	r6, #1
 801b9ba:	9302      	str	r3, [sp, #8]
 801b9bc:	fb0a f303 	mul.w	r3, sl, r3
 801b9c0:	4016      	ands	r6, r2
 801b9c2:	9303      	str	r3, [sp, #12]
 801b9c4:	4630      	mov	r0, r6
 801b9c6:	f7ff ffad 	bl	801b924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b9ca:	464a      	mov	r2, r9
 801b9cc:	460b      	mov	r3, r1
 801b9ce:	4601      	mov	r1, r0
 801b9d0:	4630      	mov	r0, r6
 801b9d2:	e9cd 4700 	strd	r4, r7, [sp]
 801b9d6:	f7ff ffc3 	bl	801b960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b9da:	9b02      	ldr	r3, [sp, #8]
 801b9dc:	4606      	mov	r6, r0
 801b9de:	eb05 0108 	add.w	r1, r5, r8
 801b9e2:	fb04 bb13 	mls	fp, r4, r3, fp
 801b9e6:	4658      	mov	r0, fp
 801b9e8:	f7ff ff9c 	bl	801b924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b9ec:	ab05      	add	r3, sp, #20
 801b9ee:	465a      	mov	r2, fp
 801b9f0:	e9cd 4300 	strd	r4, r3, [sp]
 801b9f4:	4603      	mov	r3, r0
 801b9f6:	4650      	mov	r0, sl
 801b9f8:	f7ff ffb2 	bl	801b960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b9fc:	6839      	ldr	r1, [r7, #0]
 801b9fe:	9a05      	ldr	r2, [sp, #20]
 801ba00:	9b03      	ldr	r3, [sp, #12]
 801ba02:	4411      	add	r1, r2
 801ba04:	fbb1 f2f4 	udiv	r2, r1, r4
 801ba08:	18d3      	adds	r3, r2, r3
 801ba0a:	fb04 1412 	mls	r4, r4, r2, r1
 801ba0e:	441e      	add	r6, r3
 801ba10:	603c      	str	r4, [r7, #0]
 801ba12:	4430      	add	r0, r6
 801ba14:	e7b6      	b.n	801b984 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801ba16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ba16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba1a:	b085      	sub	sp, #20
 801ba1c:	f1b0 0900 	subs.w	r9, r0, #0
 801ba20:	461d      	mov	r5, r3
 801ba22:	4617      	mov	r7, r2
 801ba24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ba26:	bfbb      	ittet	lt
 801ba28:	f1c9 0900 	rsblt	r9, r9, #0
 801ba2c:	f04f 36ff 	movlt.w	r6, #4294967295
 801ba30:	2601      	movge	r6, #1
 801ba32:	6823      	ldrlt	r3, [r4, #0]
 801ba34:	bfbc      	itt	lt
 801ba36:	425b      	neglt	r3, r3
 801ba38:	6023      	strlt	r3, [r4, #0]
 801ba3a:	2a00      	cmp	r2, #0
 801ba3c:	da04      	bge.n	801ba48 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801ba3e:	6823      	ldr	r3, [r4, #0]
 801ba40:	4257      	negs	r7, r2
 801ba42:	4276      	negs	r6, r6
 801ba44:	425b      	negs	r3, r3
 801ba46:	6023      	str	r3, [r4, #0]
 801ba48:	2d00      	cmp	r5, #0
 801ba4a:	4638      	mov	r0, r7
 801ba4c:	bfba      	itte	lt
 801ba4e:	426d      	neglt	r5, r5
 801ba50:	f04f 38ff 	movlt.w	r8, #4294967295
 801ba54:	f04f 0801 	movge.w	r8, #1
 801ba58:	f7ff ff64 	bl	801b924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ba5c:	ab03      	add	r3, sp, #12
 801ba5e:	463a      	mov	r2, r7
 801ba60:	e9cd 5300 	strd	r5, r3, [sp]
 801ba64:	4603      	mov	r3, r0
 801ba66:	4648      	mov	r0, r9
 801ba68:	f7ff ff7a 	bl	801b960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ba6c:	6823      	ldr	r3, [r4, #0]
 801ba6e:	9a03      	ldr	r2, [sp, #12]
 801ba70:	4546      	cmp	r6, r8
 801ba72:	441a      	add	r2, r3
 801ba74:	fb92 f3f5 	sdiv	r3, r2, r5
 801ba78:	4418      	add	r0, r3
 801ba7a:	fb05 2313 	mls	r3, r5, r3, r2
 801ba7e:	bf18      	it	ne
 801ba80:	4240      	negne	r0, r0
 801ba82:	1c72      	adds	r2, r6, #1
 801ba84:	6023      	str	r3, [r4, #0]
 801ba86:	d105      	bne.n	801ba94 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	f1c3 0200 	rsb	r2, r3, #0
 801ba8e:	db0b      	blt.n	801baa8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ba90:	6022      	str	r2, [r4, #0]
 801ba92:	e006      	b.n	801baa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ba94:	2e01      	cmp	r6, #1
 801ba96:	d104      	bne.n	801baa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	da02      	bge.n	801baa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ba9c:	442b      	add	r3, r5
 801ba9e:	3801      	subs	r0, #1
 801baa0:	6023      	str	r3, [r4, #0]
 801baa2:	b005      	add	sp, #20
 801baa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801baa8:	3801      	subs	r0, #1
 801baaa:	1b52      	subs	r2, r2, r5
 801baac:	e7f0      	b.n	801ba90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801bab0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bab0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bab4:	4c1c      	ldr	r4, [pc, #112]	; (801bb28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801bab6:	4605      	mov	r5, r0
 801bab8:	6807      	ldr	r7, [r0, #0]
 801baba:	69a3      	ldr	r3, [r4, #24]
 801babc:	b92b      	cbnz	r3, 801baca <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801babe:	6840      	ldr	r0, [r0, #4]
 801bac0:	e9c5 7000 	strd	r7, r0, [r5]
 801bac4:	b004      	add	sp, #16
 801bac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baca:	f04f 0802 	mov.w	r8, #2
 801bace:	68a2      	ldr	r2, [r4, #8]
 801bad0:	ae04      	add	r6, sp, #16
 801bad2:	6820      	ldr	r0, [r4, #0]
 801bad4:	fb93 f1f8 	sdiv	r1, r3, r8
 801bad8:	440a      	add	r2, r1
 801bada:	69e1      	ldr	r1, [r4, #28]
 801badc:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bae0:	463a      	mov	r2, r7
 801bae2:	9600      	str	r6, [sp, #0]
 801bae4:	f7ff ff97 	bl	801ba16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bae8:	69a3      	ldr	r3, [r4, #24]
 801baea:	4607      	mov	r7, r0
 801baec:	686a      	ldr	r2, [r5, #4]
 801baee:	6a21      	ldr	r1, [r4, #32]
 801baf0:	9600      	str	r6, [sp, #0]
 801baf2:	6860      	ldr	r0, [r4, #4]
 801baf4:	f7ff ff8f 	bl	801ba16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801baf8:	69a3      	ldr	r3, [r4, #24]
 801bafa:	6962      	ldr	r2, [r4, #20]
 801bafc:	4407      	add	r7, r0
 801bafe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bb00:	9600      	str	r6, [sp, #0]
 801bb02:	68e0      	ldr	r0, [r4, #12]
 801bb04:	fb93 f8f8 	sdiv	r8, r3, r8
 801bb08:	4442      	add	r2, r8
 801bb0a:	9203      	str	r2, [sp, #12]
 801bb0c:	682a      	ldr	r2, [r5, #0]
 801bb0e:	f7ff ff82 	bl	801ba16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bb12:	4680      	mov	r8, r0
 801bb14:	9600      	str	r6, [sp, #0]
 801bb16:	69a3      	ldr	r3, [r4, #24]
 801bb18:	686a      	ldr	r2, [r5, #4]
 801bb1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801bb1c:	6920      	ldr	r0, [r4, #16]
 801bb1e:	f7ff ff7a 	bl	801ba16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bb22:	4440      	add	r0, r8
 801bb24:	e7cc      	b.n	801bac0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801bb26:	bf00      	nop
 801bb28:	20016e9c 	.word	0x20016e9c

0801bb2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801bb2c:	4b07      	ldr	r3, [pc, #28]	; (801bb4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801bb2e:	781b      	ldrb	r3, [r3, #0]
 801bb30:	2b01      	cmp	r3, #1
 801bb32:	d109      	bne.n	801bb48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801bb34:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bb38:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bb3c:	8003      	strh	r3, [r0, #0]
 801bb3e:	4b04      	ldr	r3, [pc, #16]	; (801bb50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801bb40:	881b      	ldrh	r3, [r3, #0]
 801bb42:	3b01      	subs	r3, #1
 801bb44:	1a9b      	subs	r3, r3, r2
 801bb46:	800b      	strh	r3, [r1, #0]
 801bb48:	4770      	bx	lr
 801bb4a:	bf00      	nop
 801bb4c:	20016e80 	.word	0x20016e80
 801bb50:	20016e7c 	.word	0x20016e7c

0801bb54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801bb54:	4b07      	ldr	r3, [pc, #28]	; (801bb74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801bb56:	b510      	push	{r4, lr}
 801bb58:	781b      	ldrb	r3, [r3, #0]
 801bb5a:	2b01      	cmp	r3, #1
 801bb5c:	d108      	bne.n	801bb70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801bb5e:	4b06      	ldr	r3, [pc, #24]	; (801bb78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801bb60:	880c      	ldrh	r4, [r1, #0]
 801bb62:	881b      	ldrh	r3, [r3, #0]
 801bb64:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bb68:	3b01      	subs	r3, #1
 801bb6a:	1b1b      	subs	r3, r3, r4
 801bb6c:	8003      	strh	r3, [r0, #0]
 801bb6e:	800a      	strh	r2, [r1, #0]
 801bb70:	bd10      	pop	{r4, pc}
 801bb72:	bf00      	nop
 801bb74:	20016e80 	.word	0x20016e80
 801bb78:	20016e7c 	.word	0x20016e7c

0801bb7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801bb7c:	4b0a      	ldr	r3, [pc, #40]	; (801bba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801bb7e:	b510      	push	{r4, lr}
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	2b01      	cmp	r3, #1
 801bb84:	d10e      	bne.n	801bba4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801bb86:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801bb8a:	8843      	ldrh	r3, [r0, #2]
 801bb8c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bb90:	18ca      	adds	r2, r1, r3
 801bb92:	4b06      	ldr	r3, [pc, #24]	; (801bbac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801bb94:	8044      	strh	r4, [r0, #2]
 801bb96:	881b      	ldrh	r3, [r3, #0]
 801bb98:	1a9b      	subs	r3, r3, r2
 801bb9a:	8003      	strh	r3, [r0, #0]
 801bb9c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bba0:	8081      	strh	r1, [r0, #4]
 801bba2:	80c3      	strh	r3, [r0, #6]
 801bba4:	bd10      	pop	{r4, pc}
 801bba6:	bf00      	nop
 801bba8:	20016e80 	.word	0x20016e80
 801bbac:	20016e7c 	.word	0x20016e7c

0801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801bbb0:	4b08      	ldr	r3, [pc, #32]	; (801bbd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801bbb2:	781b      	ldrb	r3, [r3, #0]
 801bbb4:	2b01      	cmp	r3, #1
 801bbb6:	d10c      	bne.n	801bbd2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801bbb8:	8803      	ldrh	r3, [r0, #0]
 801bbba:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801bbbe:	8842      	ldrh	r2, [r0, #2]
 801bbc0:	8002      	strh	r2, [r0, #0]
 801bbc2:	185a      	adds	r2, r3, r1
 801bbc4:	4b04      	ldr	r3, [pc, #16]	; (801bbd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801bbc6:	881b      	ldrh	r3, [r3, #0]
 801bbc8:	1a9b      	subs	r3, r3, r2
 801bbca:	8043      	strh	r3, [r0, #2]
 801bbcc:	88c3      	ldrh	r3, [r0, #6]
 801bbce:	80c1      	strh	r1, [r0, #6]
 801bbd0:	8083      	strh	r3, [r0, #4]
 801bbd2:	4770      	bx	lr
 801bbd4:	20016e80 	.word	0x20016e80
 801bbd8:	20016e7c 	.word	0x20016e7c

0801bbdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801bbdc:	4b07      	ldr	r3, [pc, #28]	; (801bbfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801bbde:	b510      	push	{r4, lr}
 801bbe0:	781b      	ldrb	r3, [r3, #0]
 801bbe2:	2b01      	cmp	r3, #1
 801bbe4:	d108      	bne.n	801bbf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801bbe6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bbea:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bbee:	8003      	strh	r3, [r0, #0]
 801bbf0:	8893      	ldrh	r3, [r2, #4]
 801bbf2:	3b01      	subs	r3, #1
 801bbf4:	1b1b      	subs	r3, r3, r4
 801bbf6:	800b      	strh	r3, [r1, #0]
 801bbf8:	bd10      	pop	{r4, pc}
 801bbfa:	bf00      	nop
 801bbfc:	20016e80 	.word	0x20016e80

0801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801bc00:	4b0a      	ldr	r3, [pc, #40]	; (801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bc02:	460a      	mov	r2, r1
 801bc04:	b510      	push	{r4, lr}
 801bc06:	781b      	ldrb	r3, [r3, #0]
 801bc08:	2b01      	cmp	r3, #1
 801bc0a:	d10d      	bne.n	801bc28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801bc0c:	8881      	ldrh	r1, [r0, #4]
 801bc0e:	8803      	ldrh	r3, [r0, #0]
 801bc10:	440b      	add	r3, r1
 801bc12:	4601      	mov	r1, r0
 801bc14:	3b01      	subs	r3, #1
 801bc16:	f821 3b02 	strh.w	r3, [r1], #2
 801bc1a:	f7ff ffdf 	bl	801bbdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bc1e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bc22:	88c2      	ldrh	r2, [r0, #6]
 801bc24:	80c3      	strh	r3, [r0, #6]
 801bc26:	8082      	strh	r2, [r0, #4]
 801bc28:	bd10      	pop	{r4, pc}
 801bc2a:	bf00      	nop
 801bc2c:	20016e80 	.word	0x20016e80

0801bc30 <_ZN8touchgfx11Application13requestRedrawEv>:
 801bc30:	4b06      	ldr	r3, [pc, #24]	; (801bc4c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801bc32:	2100      	movs	r1, #0
 801bc34:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc38:	4b05      	ldr	r3, [pc, #20]	; (801bc50 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801bc3a:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801bc3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc42:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801bc46:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801bc4a:	4770      	bx	lr
 801bc4c:	20016e7c 	.word	0x20016e7c
 801bc50:	20016e7e 	.word	0x20016e7e

0801bc54 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801bc54:	4b03      	ldr	r3, [pc, #12]	; (801bc64 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801bc56:	6818      	ldr	r0, [r3, #0]
 801bc58:	b110      	cbz	r0, 801bc60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801bc5a:	6803      	ldr	r3, [r0, #0]
 801bc5c:	699b      	ldr	r3, [r3, #24]
 801bc5e:	4718      	bx	r3
 801bc60:	4770      	bx	lr
 801bc62:	bf00      	nop
 801bc64:	20016ecc 	.word	0x20016ecc

0801bc68 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801bc68:	4770      	bx	lr
	...

0801bc6c <_ZN8touchgfx11Application4drawEv>:
 801bc6c:	4b09      	ldr	r3, [pc, #36]	; (801bc94 <_ZN8touchgfx11Application4drawEv+0x28>)
 801bc6e:	b507      	push	{r0, r1, r2, lr}
 801bc70:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc74:	2100      	movs	r1, #0
 801bc76:	4b08      	ldr	r3, [pc, #32]	; (801bc98 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801bc78:	9100      	str	r1, [sp, #0]
 801bc7a:	4669      	mov	r1, sp
 801bc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc80:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bc84:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bc88:	6803      	ldr	r3, [r0, #0]
 801bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc8c:	4798      	blx	r3
 801bc8e:	b003      	add	sp, #12
 801bc90:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc94:	20016e7c 	.word	0x20016e7c
 801bc98:	20016e7e 	.word	0x20016e7e

0801bc9c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801bc9c:	4b03      	ldr	r3, [pc, #12]	; (801bcac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801bc9e:	6818      	ldr	r0, [r3, #0]
 801bca0:	b110      	cbz	r0, 801bca8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801bca2:	6803      	ldr	r3, [r0, #0]
 801bca4:	69db      	ldr	r3, [r3, #28]
 801bca6:	4718      	bx	r3
 801bca8:	4770      	bx	lr
 801bcaa:	bf00      	nop
 801bcac:	20016ecc 	.word	0x20016ecc

0801bcb0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bcb0:	4b03      	ldr	r3, [pc, #12]	; (801bcc0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801bcb2:	6818      	ldr	r0, [r3, #0]
 801bcb4:	b110      	cbz	r0, 801bcbc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801bcb6:	6803      	ldr	r3, [r0, #0]
 801bcb8:	6a1b      	ldr	r3, [r3, #32]
 801bcba:	4718      	bx	r3
 801bcbc:	4770      	bx	lr
 801bcbe:	bf00      	nop
 801bcc0:	20016ecc 	.word	0x20016ecc

0801bcc4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801bcca:	4770      	bx	lr

0801bccc <_ZN8touchgfx11Application14handleKeyEventEh>:
 801bccc:	4b03      	ldr	r3, [pc, #12]	; (801bcdc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bcce:	6818      	ldr	r0, [r3, #0]
 801bcd0:	b110      	cbz	r0, 801bcd8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bcd2:	6803      	ldr	r3, [r0, #0]
 801bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcd6:	4718      	bx	r3
 801bcd8:	4770      	bx	lr
 801bcda:	bf00      	nop
 801bcdc:	20016ecc 	.word	0x20016ecc

0801bce0 <_ZN8touchgfx11ApplicationD1Ev>:
 801bce0:	4770      	bx	lr

0801bce2 <_ZN8touchgfx11ApplicationD0Ev>:
 801bce2:	b510      	push	{r4, lr}
 801bce4:	4604      	mov	r4, r0
 801bce6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801bcea:	f00f fb16 	bl	802b31a <_ZdlPvj>
 801bcee:	4620      	mov	r0, r4
 801bcf0:	bd10      	pop	{r4, pc}

0801bcf2 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801bcf2:	b510      	push	{r4, lr}
 801bcf4:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bcf8:	888a      	ldrh	r2, [r1, #4]
 801bcfa:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bcfe:	4422      	add	r2, r4
 801bd00:	b212      	sxth	r2, r2
 801bd02:	4293      	cmp	r3, r2
 801bd04:	da15      	bge.n	801bd32 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bd06:	8882      	ldrh	r2, [r0, #4]
 801bd08:	4413      	add	r3, r2
 801bd0a:	b21b      	sxth	r3, r3
 801bd0c:	429c      	cmp	r4, r3
 801bd0e:	da10      	bge.n	801bd32 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bd10:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801bd14:	88c9      	ldrh	r1, [r1, #6]
 801bd16:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bd1a:	4419      	add	r1, r3
 801bd1c:	b209      	sxth	r1, r1
 801bd1e:	428a      	cmp	r2, r1
 801bd20:	da07      	bge.n	801bd32 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bd22:	88c0      	ldrh	r0, [r0, #6]
 801bd24:	4410      	add	r0, r2
 801bd26:	b200      	sxth	r0, r0
 801bd28:	4283      	cmp	r3, r0
 801bd2a:	bfac      	ite	ge
 801bd2c:	2000      	movge	r0, #0
 801bd2e:	2001      	movlt	r0, #1
 801bd30:	bd10      	pop	{r4, pc}
 801bd32:	2000      	movs	r0, #0
 801bd34:	e7fc      	b.n	801bd30 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801bd36 <_ZN8touchgfx4Rect10restrictToEss>:
 801bd36:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	b510      	push	{r4, lr}
 801bd3e:	da04      	bge.n	801bd4a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801bd40:	8884      	ldrh	r4, [r0, #4]
 801bd42:	4423      	add	r3, r4
 801bd44:	8083      	strh	r3, [r0, #4]
 801bd46:	2300      	movs	r3, #0
 801bd48:	8003      	strh	r3, [r0, #0]
 801bd4a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bd4e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bd52:	1b09      	subs	r1, r1, r4
 801bd54:	428b      	cmp	r3, r1
 801bd56:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bd5a:	bfc8      	it	gt
 801bd5c:	8081      	strhgt	r1, [r0, #4]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	da04      	bge.n	801bd6c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801bd62:	88c1      	ldrh	r1, [r0, #6]
 801bd64:	440b      	add	r3, r1
 801bd66:	80c3      	strh	r3, [r0, #6]
 801bd68:	2300      	movs	r3, #0
 801bd6a:	8043      	strh	r3, [r0, #2]
 801bd6c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801bd70:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801bd74:	1a52      	subs	r2, r2, r1
 801bd76:	4293      	cmp	r3, r2
 801bd78:	bfc8      	it	gt
 801bd7a:	80c2      	strhgt	r2, [r0, #6]
 801bd7c:	bd10      	pop	{r4, pc}
	...

0801bd80 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801bd80:	4b10      	ldr	r3, [pc, #64]	; (801bdc4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801bd82:	b510      	push	{r4, lr}
 801bd84:	460c      	mov	r4, r1
 801bd86:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bd8a:	4b0f      	ldr	r3, [pc, #60]	; (801bdc8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801bd8c:	4620      	mov	r0, r4
 801bd8e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bd92:	f7ff ffd0 	bl	801bd36 <_ZN8touchgfx4Rect10restrictToEss>
 801bd96:	4b0d      	ldr	r3, [pc, #52]	; (801bdcc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801bd98:	6818      	ldr	r0, [r3, #0]
 801bd9a:	b190      	cbz	r0, 801bdc2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801bd9c:	6803      	ldr	r3, [r0, #0]
 801bd9e:	4621      	mov	r1, r4
 801bda0:	689b      	ldr	r3, [r3, #8]
 801bda2:	4798      	blx	r3
 801bda4:	4b0a      	ldr	r3, [pc, #40]	; (801bdd0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801bda6:	6818      	ldr	r0, [r3, #0]
 801bda8:	b118      	cbz	r0, 801bdb2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801bdaa:	6803      	ldr	r3, [r0, #0]
 801bdac:	4621      	mov	r1, r4
 801bdae:	689b      	ldr	r3, [r3, #8]
 801bdb0:	4798      	blx	r3
 801bdb2:	4b08      	ldr	r3, [pc, #32]	; (801bdd4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801bdb4:	4621      	mov	r1, r4
 801bdb6:	6818      	ldr	r0, [r3, #0]
 801bdb8:	6803      	ldr	r3, [r0, #0]
 801bdba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdbe:	69db      	ldr	r3, [r3, #28]
 801bdc0:	4718      	bx	r3
 801bdc2:	bd10      	pop	{r4, pc}
 801bdc4:	20016e7e 	.word	0x20016e7e
 801bdc8:	20016e7c 	.word	0x20016e7c
 801bdcc:	20016ecc 	.word	0x20016ecc
 801bdd0:	20016ec8 	.word	0x20016ec8
 801bdd4:	20016e88 	.word	0x20016e88

0801bdd8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdda:	4606      	mov	r6, r0
 801bddc:	4608      	mov	r0, r1
 801bdde:	460f      	mov	r7, r1
 801bde0:	f7fb fa47 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bde4:	b9e8      	cbnz	r0, 801be22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bde6:	f9b7 5000 	ldrsh.w	r5, [r7]
 801bdea:	f9b6 4000 	ldrsh.w	r4, [r6]
 801bdee:	42a5      	cmp	r5, r4
 801bdf0:	db17      	blt.n	801be22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bdf2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801bdf6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	db11      	blt.n	801be22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bdfe:	88b9      	ldrh	r1, [r7, #4]
 801be00:	440d      	add	r5, r1
 801be02:	88b1      	ldrh	r1, [r6, #4]
 801be04:	440c      	add	r4, r1
 801be06:	b22d      	sxth	r5, r5
 801be08:	b224      	sxth	r4, r4
 801be0a:	42a5      	cmp	r5, r4
 801be0c:	dc09      	bgt.n	801be22 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801be0e:	88f8      	ldrh	r0, [r7, #6]
 801be10:	4410      	add	r0, r2
 801be12:	88f2      	ldrh	r2, [r6, #6]
 801be14:	4413      	add	r3, r2
 801be16:	b200      	sxth	r0, r0
 801be18:	b21b      	sxth	r3, r3
 801be1a:	4298      	cmp	r0, r3
 801be1c:	bfcc      	ite	gt
 801be1e:	2000      	movgt	r0, #0
 801be20:	2001      	movle	r0, #1
 801be22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801be24 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be26:	4604      	mov	r4, r0
 801be28:	4608      	mov	r0, r1
 801be2a:	460d      	mov	r5, r1
 801be2c:	f7fb fa21 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801be30:	b978      	cbnz	r0, 801be52 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801be32:	4620      	mov	r0, r4
 801be34:	f7fb fa1d 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801be38:	f9b5 6000 	ldrsh.w	r6, [r5]
 801be3c:	b150      	cbz	r0, 801be54 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801be3e:	8026      	strh	r6, [r4, #0]
 801be40:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801be44:	8063      	strh	r3, [r4, #2]
 801be46:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801be4a:	80a3      	strh	r3, [r4, #4]
 801be4c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801be50:	80e3      	strh	r3, [r4, #6]
 801be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be54:	f9b4 1000 	ldrsh.w	r1, [r4]
 801be58:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801be5c:	42b1      	cmp	r1, r6
 801be5e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801be62:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801be66:	460f      	mov	r7, r1
 801be68:	88ed      	ldrh	r5, [r5, #6]
 801be6a:	bfa8      	it	ge
 801be6c:	4637      	movge	r7, r6
 801be6e:	4293      	cmp	r3, r2
 801be70:	4618      	mov	r0, r3
 801be72:	4466      	add	r6, ip
 801be74:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801be78:	bfa8      	it	ge
 801be7a:	4610      	movge	r0, r2
 801be7c:	442a      	add	r2, r5
 801be7e:	88e5      	ldrh	r5, [r4, #6]
 801be80:	4461      	add	r1, ip
 801be82:	b236      	sxth	r6, r6
 801be84:	8027      	strh	r7, [r4, #0]
 801be86:	442b      	add	r3, r5
 801be88:	b209      	sxth	r1, r1
 801be8a:	b212      	sxth	r2, r2
 801be8c:	8060      	strh	r0, [r4, #2]
 801be8e:	b21b      	sxth	r3, r3
 801be90:	428e      	cmp	r6, r1
 801be92:	bfac      	ite	ge
 801be94:	ebc7 0106 	rsbge	r1, r7, r6
 801be98:	ebc7 0101 	rsblt	r1, r7, r1
 801be9c:	429a      	cmp	r2, r3
 801be9e:	bfac      	ite	ge
 801bea0:	ebc0 0202 	rsbge	r2, r0, r2
 801bea4:	ebc0 0203 	rsblt	r2, r0, r3
 801bea8:	80a1      	strh	r1, [r4, #4]
 801beaa:	80e2      	strh	r2, [r4, #6]
 801beac:	e7d1      	b.n	801be52 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801beb0 <_ZN8touchgfx11Application11getInstanceEv>:
 801beb0:	4b01      	ldr	r3, [pc, #4]	; (801beb8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801beb2:	6818      	ldr	r0, [r3, #0]
 801beb4:	4770      	bx	lr
 801beb6:	bf00      	nop
 801beb8:	20016edc 	.word	0x20016edc

0801bebc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801bebc:	2300      	movs	r3, #0
 801bebe:	b510      	push	{r4, lr}
 801bec0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801bec4:	4604      	mov	r4, r0
 801bec6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801beca:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801bece:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801bed2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801bed6:	429a      	cmp	r2, r3
 801bed8:	d90e      	bls.n	801bef8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801beda:	18e2      	adds	r2, r4, r3
 801bedc:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801bee0:	b122      	cbz	r2, 801beec <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801bee2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801bee6:	6803      	ldr	r3, [r0, #0]
 801bee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801beea:	4798      	blx	r3
 801beec:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801bef0:	3301      	adds	r3, #1
 801bef2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801bef6:	e7ea      	b.n	801bece <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801bef8:	bd10      	pop	{r4, pc}

0801befa <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801befa:	b530      	push	{r4, r5, lr}
 801befc:	2200      	movs	r2, #0
 801befe:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801bf02:	b293      	uxth	r3, r2
 801bf04:	429d      	cmp	r5, r3
 801bf06:	d90e      	bls.n	801bf26 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801bf08:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801bf0c:	428b      	cmp	r3, r1
 801bf0e:	d10b      	bne.n	801bf28 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801bf10:	1884      	adds	r4, r0, r2
 801bf12:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801bf16:	b13b      	cbz	r3, 801bf28 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801bf18:	3b01      	subs	r3, #1
 801bf1a:	b2db      	uxtb	r3, r3
 801bf1c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 801bf20:	b90b      	cbnz	r3, 801bf26 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801bf22:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801bf26:	bd30      	pop	{r4, r5, pc}
 801bf28:	3201      	adds	r2, #1
 801bf2a:	e7ea      	b.n	801bf02 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801bf2c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801bf32:	30a4      	adds	r0, #164	; 0xa4
 801bf34:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bf38:	f802 3b01 	strb.w	r3, [r2], #1
 801bf3c:	4282      	cmp	r2, r0
 801bf3e:	d1fb      	bne.n	801bf38 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801bf40:	4770      	bx	lr
	...

0801bf44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bf44:	b570      	push	{r4, r5, r6, lr}
 801bf46:	4c0b      	ldr	r4, [pc, #44]	; (801bf74 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801bf48:	4605      	mov	r5, r0
 801bf4a:	460e      	mov	r6, r1
 801bf4c:	6820      	ldr	r0, [r4, #0]
 801bf4e:	b110      	cbz	r0, 801bf56 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801bf50:	6803      	ldr	r3, [r0, #0]
 801bf52:	695b      	ldr	r3, [r3, #20]
 801bf54:	4798      	blx	r3
 801bf56:	1d28      	adds	r0, r5, #4
 801bf58:	f7ff ffe8 	bl	801bf2c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801bf5c:	6026      	str	r6, [r4, #0]
 801bf5e:	6833      	ldr	r3, [r6, #0]
 801bf60:	4630      	mov	r0, r6
 801bf62:	68db      	ldr	r3, [r3, #12]
 801bf64:	4798      	blx	r3
 801bf66:	682b      	ldr	r3, [r5, #0]
 801bf68:	4628      	mov	r0, r5
 801bf6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bf6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf70:	4718      	bx	r3
 801bf72:	bf00      	nop
 801bf74:	20016ecc 	.word	0x20016ecc

0801bf78 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801bf78:	2300      	movs	r3, #0
 801bf7a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801bf7e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801bf82:	461a      	mov	r2, r3
 801bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf86:	461c      	mov	r4, r3
 801bf88:	461d      	mov	r5, r3
 801bf8a:	459c      	cmp	ip, r3
 801bf8c:	dd1a      	ble.n	801bfc4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801bf8e:	18c6      	adds	r6, r0, r3
 801bf90:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801bf94:	b16e      	cbz	r6, 801bfb2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801bf96:	429a      	cmp	r2, r3
 801bf98:	d008      	beq.n	801bfac <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801bf9a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801bf9e:	fa1f fe82 	uxth.w	lr, r2
 801bfa2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801bfa6:	1887      	adds	r7, r0, r2
 801bfa8:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801bfac:	3201      	adds	r2, #1
 801bfae:	3301      	adds	r3, #1
 801bfb0:	e7eb      	b.n	801bf8a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801bfb2:	4299      	cmp	r1, r3
 801bfb4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801bfb8:	bfa8      	it	ge
 801bfba:	3501      	addge	r5, #1
 801bfbc:	429e      	cmp	r6, r3
 801bfbe:	bfc8      	it	gt
 801bfc0:	3401      	addgt	r4, #1
 801bfc2:	e7f4      	b.n	801bfae <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801bfc4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801bfc8:	1b49      	subs	r1, r1, r5
 801bfca:	1b1b      	subs	r3, r3, r4
 801bfcc:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801bfd0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801bfd4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801bfd8:	4293      	cmp	r3, r2
 801bfda:	dd03      	ble.n	801bfe4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801bfdc:	3b01      	subs	r3, #1
 801bfde:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801bfe2:	e7f7      	b.n	801bfd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801bfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bfe8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801bfe8:	b570      	push	{r4, r5, r6, lr}
 801bfea:	4d16      	ldr	r5, [pc, #88]	; (801c044 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801bfec:	4604      	mov	r4, r0
 801bfee:	6828      	ldr	r0, [r5, #0]
 801bff0:	b140      	cbz	r0, 801c004 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801bff2:	7a03      	ldrb	r3, [r0, #8]
 801bff4:	b933      	cbnz	r3, 801c004 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801bff6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801bffa:	6803      	ldr	r3, [r0, #0]
 801bffc:	689b      	ldr	r3, [r3, #8]
 801bffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c002:	4718      	bx	r3
 801c004:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801c008:	4e0f      	ldr	r6, [pc, #60]	; (801c048 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801c00a:	b973      	cbnz	r3, 801c02a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c00c:	b168      	cbz	r0, 801c02a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c00e:	7a03      	ldrb	r3, [r0, #8]
 801c010:	b15b      	cbz	r3, 801c02a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c012:	6830      	ldr	r0, [r6, #0]
 801c014:	b110      	cbz	r0, 801c01c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801c016:	6803      	ldr	r3, [r0, #0]
 801c018:	691b      	ldr	r3, [r3, #16]
 801c01a:	4798      	blx	r3
 801c01c:	6828      	ldr	r0, [r5, #0]
 801c01e:	6803      	ldr	r3, [r0, #0]
 801c020:	68db      	ldr	r3, [r3, #12]
 801c022:	4798      	blx	r3
 801c024:	2301      	movs	r3, #1
 801c026:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801c02a:	3404      	adds	r4, #4
 801c02c:	4620      	mov	r0, r4
 801c02e:	f7ff ff45 	bl	801bebc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801c032:	4620      	mov	r0, r4
 801c034:	f7ff ffa0 	bl	801bf78 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801c038:	6830      	ldr	r0, [r6, #0]
 801c03a:	b110      	cbz	r0, 801c042 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801c03c:	6803      	ldr	r3, [r0, #0]
 801c03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c040:	e7dd      	b.n	801bffe <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801c042:	bd70      	pop	{r4, r5, r6, pc}
 801c044:	20016ed0 	.word	0x20016ed0
 801c048:	20016ecc 	.word	0x20016ecc

0801c04c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c04e:	2300      	movs	r3, #0
 801c050:	4604      	mov	r4, r0
 801c052:	460d      	mov	r5, r1
 801c054:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 801c058:	4618      	mov	r0, r3
 801c05a:	b29a      	uxth	r2, r3
 801c05c:	4291      	cmp	r1, r2
 801c05e:	d912      	bls.n	801c086 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801c060:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801c064:	18e6      	adds	r6, r4, r3
 801c066:	42af      	cmp	r7, r5
 801c068:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 801c06c:	d105      	bne.n	801c07a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801c06e:	2aff      	cmp	r2, #255	; 0xff
 801c070:	d002      	beq.n	801c078 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801c072:	3201      	adds	r2, #1
 801c074:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 801c078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c07a:	2a00      	cmp	r2, #0
 801c07c:	f103 0301 	add.w	r3, r3, #1
 801c080:	bf08      	it	eq
 801c082:	2001      	moveq	r0, #1
 801c084:	e7e9      	b.n	801c05a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801c086:	b120      	cbz	r0, 801c092 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801c088:	2920      	cmp	r1, #32
 801c08a:	d102      	bne.n	801c092 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801c08c:	4620      	mov	r0, r4
 801c08e:	f7ff ff73 	bl	801bf78 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801c092:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 801c096:	2b1f      	cmp	r3, #31
 801c098:	d8ee      	bhi.n	801c078 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801c09a:	18e2      	adds	r2, r4, r3
 801c09c:	2101      	movs	r1, #1
 801c09e:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801c0a2:	185a      	adds	r2, r3, r1
 801c0a4:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 801c0a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801c0ac:	e7e4      	b.n	801c078 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801c0ae <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c0ae:	4603      	mov	r3, r0
 801c0b0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c0b4:	2200      	movs	r2, #0
 801c0b6:	801a      	strh	r2, [r3, #0]
 801c0b8:	3308      	adds	r3, #8
 801c0ba:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c0be:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c0c2:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c0c6:	428b      	cmp	r3, r1
 801c0c8:	d1f5      	bne.n	801c0b6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c0ca:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c0ce:	4770      	bx	lr

0801c0d0 <_ZN8touchgfx11ApplicationC1Ev>:
 801c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0d2:	4b1d      	ldr	r3, [pc, #116]	; (801c148 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c0d4:	4606      	mov	r6, r0
 801c0d6:	4604      	mov	r4, r0
 801c0d8:	2500      	movs	r5, #0
 801c0da:	f846 3b04 	str.w	r3, [r6], #4
 801c0de:	22a8      	movs	r2, #168	; 0xa8
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	f00f f9d8 	bl	802b498 <memset>
 801c0e8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801c0ec:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801c0f0:	4f16      	ldr	r7, [pc, #88]	; (801c14c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801c0f2:	f7ff ffdc 	bl	801c0ae <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c0f6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801c0fa:	f7ff ffd8 	bl	801c0ae <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c0fe:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801c102:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801c106:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801c10a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801c10e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801c112:	490f      	ldr	r1, [pc, #60]	; (801c150 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801c114:	480f      	ldr	r0, [pc, #60]	; (801c154 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801c116:	f00e fcd5 	bl	802aac4 <CRC_Lock>
 801c11a:	4b0f      	ldr	r3, [pc, #60]	; (801c158 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801c11c:	b158      	cbz	r0, 801c136 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801c11e:	801d      	strh	r5, [r3, #0]
 801c120:	2300      	movs	r3, #0
 801c122:	4a0e      	ldr	r2, [pc, #56]	; (801c15c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801c124:	4630      	mov	r0, r6
 801c126:	6013      	str	r3, [r2, #0]
 801c128:	4a0d      	ldr	r2, [pc, #52]	; (801c160 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801c12a:	603b      	str	r3, [r7, #0]
 801c12c:	6013      	str	r3, [r2, #0]
 801c12e:	f7ff fefd 	bl	801bf2c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801c132:	4620      	mov	r0, r4
 801c134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c13a:	2002      	movs	r0, #2
 801c13c:	801a      	strh	r2, [r3, #0]
 801c13e:	6038      	str	r0, [r7, #0]
 801c140:	f001 faac 	bl	801d69c <_ZN8touchgfx6Screen4drawEv>
 801c144:	e7ec      	b.n	801c120 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801c146:	bf00      	nop
 801c148:	0803128c 	.word	0x0803128c
 801c14c:	20016ecc 	.word	0x20016ecc
 801c150:	b5e8b5cd 	.word	0xb5e8b5cd
 801c154:	f407a5c2 	.word	0xf407a5c2
 801c158:	20000044 	.word	0x20000044
 801c15c:	20016edc 	.word	0x20016edc
 801c160:	20016ed0 	.word	0x20016ed0

0801c164 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c164:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801c168:	3b01      	subs	r3, #1
 801c16a:	b29b      	uxth	r3, r3
 801c16c:	428b      	cmp	r3, r1
 801c16e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801c172:	b510      	push	{r4, lr}
 801c174:	d908      	bls.n	801c188 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801c176:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801c17a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801c17e:	681a      	ldr	r2, [r3, #0]
 801c180:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801c184:	685a      	ldr	r2, [r3, #4]
 801c186:	6062      	str	r2, [r4, #4]
 801c188:	bd10      	pop	{r4, pc}
	...

0801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c190:	b08f      	sub	sp, #60	; 0x3c
 801c192:	4b8f      	ldr	r3, [pc, #572]	; (801c3d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801c194:	4683      	mov	fp, r0
 801c196:	ac0a      	add	r4, sp, #40	; 0x28
 801c198:	e884 0006 	stmia.w	r4, {r1, r2}
 801c19c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c1a0:	4620      	mov	r0, r4
 801c1a2:	4b8c      	ldr	r3, [pc, #560]	; (801c3d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801c1a4:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c1a8:	f7ff fdc5 	bl	801bd36 <_ZN8touchgfx4Rect10restrictToEss>
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	f7fb f860 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c1b2:	2800      	cmp	r0, #0
 801c1b4:	d16a      	bne.n	801c28c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c1b6:	9403      	str	r4, [sp, #12]
 801c1b8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801c1bc:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801c1c0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801c1c4:	9301      	str	r3, [sp, #4]
 801c1c6:	35a4      	adds	r5, #164	; 0xa4
 801c1c8:	b15c      	cbz	r4, 801c1e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c1ca:	4629      	mov	r1, r5
 801c1cc:	9803      	ldr	r0, [sp, #12]
 801c1ce:	f7ff fe03 	bl	801bdd8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c1d2:	3c01      	subs	r4, #1
 801c1d4:	b118      	cbz	r0, 801c1de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801c1d6:	b2a1      	uxth	r1, r4
 801c1d8:	9801      	ldr	r0, [sp, #4]
 801c1da:	f7ff ffc3 	bl	801c164 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c1de:	3d08      	subs	r5, #8
 801c1e0:	e7f2      	b.n	801c1c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801c1e2:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801c1e6:	f108 33ff 	add.w	r3, r8, #4294967295
 801c1ea:	f8cd 8010 	str.w	r8, [sp, #16]
 801c1ee:	9302      	str	r3, [sp, #8]
 801c1f0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801c1f4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801c1f8:	9306      	str	r3, [sp, #24]
 801c1fa:	445c      	add	r4, fp
 801c1fc:	2500      	movs	r5, #0
 801c1fe:	4626      	mov	r6, r4
 801c200:	f8cd 8014 	str.w	r8, [sp, #20]
 801c204:	462f      	mov	r7, r5
 801c206:	9b05      	ldr	r3, [sp, #20]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d073      	beq.n	801c2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801c20c:	9903      	ldr	r1, [sp, #12]
 801c20e:	4630      	mov	r0, r6
 801c210:	f7ff fd6f 	bl	801bcf2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c214:	b350      	cbz	r0, 801c26c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c216:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801c21a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801c21e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801c222:	45e6      	cmp	lr, ip
 801c224:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801c228:	db33      	blt.n	801c292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c22a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c22e:	88b3      	ldrh	r3, [r6, #4]
 801c230:	4472      	add	r2, lr
 801c232:	4463      	add	r3, ip
 801c234:	b212      	sxth	r2, r2
 801c236:	b21b      	sxth	r3, r3
 801c238:	429a      	cmp	r2, r3
 801c23a:	dc2a      	bgt.n	801c292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c23c:	fa1f f289 	uxth.w	r2, r9
 801c240:	88f3      	ldrh	r3, [r6, #6]
 801c242:	45ca      	cmp	sl, r9
 801c244:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c248:	4413      	add	r3, r2
 801c24a:	fa1f fc8a 	uxth.w	ip, sl
 801c24e:	b29b      	uxth	r3, r3
 801c250:	fa0f fe83 	sxth.w	lr, r3
 801c254:	db0f      	blt.n	801c276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c256:	eba3 030c 	sub.w	r3, r3, ip
 801c25a:	1ac9      	subs	r1, r1, r3
 801c25c:	b209      	sxth	r1, r1
 801c25e:	2900      	cmp	r1, #0
 801c260:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c264:	dd12      	ble.n	801c28c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c266:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801c26a:	4605      	mov	r5, r0
 801c26c:	9b05      	ldr	r3, [sp, #20]
 801c26e:	3e08      	subs	r6, #8
 801c270:	3b01      	subs	r3, #1
 801c272:	9305      	str	r3, [sp, #20]
 801c274:	e7c7      	b.n	801c206 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c276:	4461      	add	r1, ip
 801c278:	b209      	sxth	r1, r1
 801c27a:	4571      	cmp	r1, lr
 801c27c:	dc38      	bgt.n	801c2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c27e:	eba2 020c 	sub.w	r2, r2, ip
 801c282:	b212      	sxth	r2, r2
 801c284:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801c288:	2a00      	cmp	r2, #0
 801c28a:	dcee      	bgt.n	801c26a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c28c:	b00f      	add	sp, #60	; 0x3c
 801c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c292:	45ca      	cmp	sl, r9
 801c294:	db2c      	blt.n	801c2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c296:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801c29a:	449a      	add	sl, r3
 801c29c:	88f3      	ldrh	r3, [r6, #6]
 801c29e:	4499      	add	r9, r3
 801c2a0:	fa0f fa8a 	sxth.w	sl, sl
 801c2a4:	fa0f f989 	sxth.w	r9, r9
 801c2a8:	45ca      	cmp	sl, r9
 801c2aa:	dc21      	bgt.n	801c2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c2ac:	fa1f f28c 	uxth.w	r2, ip
 801c2b0:	88b3      	ldrh	r3, [r6, #4]
 801c2b2:	45e6      	cmp	lr, ip
 801c2b4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c2b8:	4413      	add	r3, r2
 801c2ba:	fa1f f98e 	uxth.w	r9, lr
 801c2be:	b29b      	uxth	r3, r3
 801c2c0:	fa0f fa83 	sxth.w	sl, r3
 801c2c4:	db0a      	blt.n	801c2dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801c2c6:	eba3 0309 	sub.w	r3, r3, r9
 801c2ca:	1ac9      	subs	r1, r1, r3
 801c2cc:	b209      	sxth	r1, r1
 801c2ce:	2900      	cmp	r1, #0
 801c2d0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801c2d4:	ddda      	ble.n	801c28c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c2d6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c2da:	e7c6      	b.n	801c26a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c2dc:	4449      	add	r1, r9
 801c2de:	b209      	sxth	r1, r1
 801c2e0:	4551      	cmp	r1, sl
 801c2e2:	dc05      	bgt.n	801c2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c2e4:	eba2 0209 	sub.w	r2, r2, r9
 801c2e8:	b212      	sxth	r2, r2
 801c2ea:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801c2ee:	e7cb      	b.n	801c288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801c2f0:	4607      	mov	r7, r0
 801c2f2:	e7bb      	b.n	801c26c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c2f4:	2d00      	cmp	r5, #0
 801c2f6:	d181      	bne.n	801c1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801c2f8:	2f00      	cmp	r7, #0
 801c2fa:	f000 81dd 	beq.w	801c6b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c2fe:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801c302:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801c306:	b2b3      	uxth	r3, r6
 801c308:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c30c:	b2b9      	uxth	r1, r7
 801c30e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801c312:	441a      	add	r2, r3
 801c314:	448a      	add	sl, r1
 801c316:	9105      	str	r1, [sp, #20]
 801c318:	b292      	uxth	r2, r2
 801c31a:	fa1f fa8a 	uxth.w	sl, sl
 801c31e:	fa0f f882 	sxth.w	r8, r2
 801c322:	fa0f f98a 	sxth.w	r9, sl
 801c326:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801c32a:	9b04      	ldr	r3, [sp, #16]
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d053      	beq.n	801c3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c330:	9903      	ldr	r1, [sp, #12]
 801c332:	4620      	mov	r0, r4
 801c334:	f7ff fcdd 	bl	801bcf2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c338:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c33c:	b1c0      	cbz	r0, 801c370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c33e:	f9b4 e000 	ldrsh.w	lr, [r4]
 801c342:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801c346:	4576      	cmp	r6, lr
 801c348:	dc23      	bgt.n	801c392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c34a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c34e:	44f4      	add	ip, lr
 801c350:	fa0f fc8c 	sxth.w	ip, ip
 801c354:	45e0      	cmp	r8, ip
 801c356:	db1c      	blt.n	801c392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c358:	428f      	cmp	r7, r1
 801c35a:	fa1f fc81 	uxth.w	ip, r1
 801c35e:	88e1      	ldrh	r1, [r4, #6]
 801c360:	dc0d      	bgt.n	801c37e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801c362:	ebaa 0c0c 	sub.w	ip, sl, ip
 801c366:	f8a4 9002 	strh.w	r9, [r4, #2]
 801c36a:	eba1 010c 	sub.w	r1, r1, ip
 801c36e:	80e1      	strh	r1, [r4, #6]
 801c370:	4628      	mov	r0, r5
 801c372:	9904      	ldr	r1, [sp, #16]
 801c374:	3c08      	subs	r4, #8
 801c376:	4605      	mov	r5, r0
 801c378:	3901      	subs	r1, #1
 801c37a:	9104      	str	r1, [sp, #16]
 801c37c:	e7d3      	b.n	801c326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801c37e:	4461      	add	r1, ip
 801c380:	b209      	sxth	r1, r1
 801c382:	4549      	cmp	r1, r9
 801c384:	dcf5      	bgt.n	801c372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c386:	9905      	ldr	r1, [sp, #20]
 801c388:	eba1 0c0c 	sub.w	ip, r1, ip
 801c38c:	f8a4 c006 	strh.w	ip, [r4, #6]
 801c390:	e7ee      	b.n	801c370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c392:	428f      	cmp	r7, r1
 801c394:	dced      	bgt.n	801c372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c396:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801c39a:	4461      	add	r1, ip
 801c39c:	b209      	sxth	r1, r1
 801c39e:	4589      	cmp	r9, r1
 801c3a0:	dbe7      	blt.n	801c372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c3a2:	4576      	cmp	r6, lr
 801c3a4:	fa1f fc8e 	uxth.w	ip, lr
 801c3a8:	88a1      	ldrh	r1, [r4, #4]
 801c3aa:	dc07      	bgt.n	801c3bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801c3ac:	eba2 0c0c 	sub.w	ip, r2, ip
 801c3b0:	f8a4 8000 	strh.w	r8, [r4]
 801c3b4:	eba1 010c 	sub.w	r1, r1, ip
 801c3b8:	80a1      	strh	r1, [r4, #4]
 801c3ba:	e7d9      	b.n	801c370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c3bc:	4461      	add	r1, ip
 801c3be:	b209      	sxth	r1, r1
 801c3c0:	4588      	cmp	r8, r1
 801c3c2:	dbd6      	blt.n	801c372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c3c4:	eba3 0c0c 	sub.w	ip, r3, ip
 801c3c8:	f8a4 c004 	strh.w	ip, [r4, #4]
 801c3cc:	e7d0      	b.n	801c370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c3ce:	bf00      	nop
 801c3d0:	20016e7e 	.word	0x20016e7e
 801c3d4:	20016e7c 	.word	0x20016e7c
 801c3d8:	2d00      	cmp	r5, #0
 801c3da:	f000 816d 	beq.w	801c6b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c3de:	9b06      	ldr	r3, [sp, #24]
 801c3e0:	445b      	add	r3, fp
 801c3e2:	461c      	mov	r4, r3
 801c3e4:	9b02      	ldr	r3, [sp, #8]
 801c3e6:	3301      	adds	r3, #1
 801c3e8:	f000 8166 	beq.w	801c6b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c3ec:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801c3f0:	9803      	ldr	r0, [sp, #12]
 801c3f2:	4629      	mov	r1, r5
 801c3f4:	f7ff fcf0 	bl	801bdd8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c3f8:	b120      	cbz	r0, 801c404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801c3fa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c3fe:	9801      	ldr	r0, [sp, #4]
 801c400:	f7ff feb0 	bl	801c164 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c404:	9903      	ldr	r1, [sp, #12]
 801c406:	4628      	mov	r0, r5
 801c408:	f7ff fc73 	bl	801bcf2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c40c:	2800      	cmp	r0, #0
 801c40e:	f000 809c 	beq.w	801c54a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c412:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801c416:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801c41a:	fa1f f189 	uxth.w	r1, r9
 801c41e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801c422:	9309      	str	r3, [sp, #36]	; 0x24
 801c424:	eb01 0c03 	add.w	ip, r1, r3
 801c428:	b283      	uxth	r3, r0
 801c42a:	4548      	cmp	r0, r9
 801c42c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801c430:	fa1f fa8c 	uxth.w	sl, ip
 801c434:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c438:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801c43c:	eb03 050c 	add.w	r5, r3, ip
 801c440:	b2ad      	uxth	r5, r5
 801c442:	9505      	str	r5, [sp, #20]
 801c444:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801c448:	9504      	str	r5, [sp, #16]
 801c44a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801c44e:	f340 8099 	ble.w	801c584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801c452:	1a5b      	subs	r3, r3, r1
 801c454:	4596      	cmp	lr, r2
 801c456:	fa0f f08a 	sxth.w	r0, sl
 801c45a:	b29b      	uxth	r3, r3
 801c45c:	b21e      	sxth	r6, r3
 801c45e:	dd2e      	ble.n	801c4be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801c460:	9f02      	ldr	r7, [sp, #8]
 801c462:	fa1f fe8e 	uxth.w	lr, lr
 801c466:	b292      	uxth	r2, r2
 801c468:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801c46c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801c470:	9f04      	ldr	r7, [sp, #16]
 801c472:	ebae 0102 	sub.w	r1, lr, r2
 801c476:	44a6      	add	lr, r4
 801c478:	1a3f      	subs	r7, r7, r0
 801c47a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801c47e:	b289      	uxth	r1, r1
 801c480:	4402      	add	r2, r0
 801c482:	fa0f fe8e 	sxth.w	lr, lr
 801c486:	b20d      	sxth	r5, r1
 801c488:	b212      	sxth	r2, r2
 801c48a:	436f      	muls	r7, r5
 801c48c:	ebae 0202 	sub.w	r2, lr, r2
 801c490:	4372      	muls	r2, r6
 801c492:	4297      	cmp	r7, r2
 801c494:	db09      	blt.n	801c4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801c496:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801c49a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801c49e:	449c      	add	ip, r3
 801c4a0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c4a4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801c4a8:	e686      	b.n	801c1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c4aa:	4421      	add	r1, r4
 801c4ac:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801c4b0:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801c4b4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c4b8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c4bc:	e67c      	b.n	801c1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c4be:	9f04      	ldr	r7, [sp, #16]
 801c4c0:	42b8      	cmp	r0, r7
 801c4c2:	da27      	bge.n	801c514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801c4c4:	9902      	ldr	r1, [sp, #8]
 801c4c6:	1a3f      	subs	r7, r7, r0
 801c4c8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801c4cc:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801c4d0:	eb05 010e 	add.w	r1, r5, lr
 801c4d4:	fa1f f881 	uxth.w	r8, r1
 801c4d8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801c4dc:	4411      	add	r1, r2
 801c4de:	fa0f f988 	sxth.w	r9, r8
 801c4e2:	eba2 020e 	sub.w	r2, r2, lr
 801c4e6:	eba1 0108 	sub.w	r1, r1, r8
 801c4ea:	4372      	muls	r2, r6
 801c4ec:	b289      	uxth	r1, r1
 801c4ee:	fa0f f881 	sxth.w	r8, r1
 801c4f2:	fb08 f707 	mul.w	r7, r8, r7
 801c4f6:	42ba      	cmp	r2, r7
 801c4f8:	dc06      	bgt.n	801c508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801c4fa:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801c4fe:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801c502:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801c506:	e7ca      	b.n	801c49e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801c508:	4429      	add	r1, r5
 801c50a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801c50e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c512:	e651      	b.n	801c1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c514:	9805      	ldr	r0, [sp, #20]
 801c516:	2d06      	cmp	r5, #6
 801c518:	ebaa 0000 	sub.w	r0, sl, r0
 801c51c:	b280      	uxth	r0, r0
 801c51e:	fa0f fe80 	sxth.w	lr, r0
 801c522:	d817      	bhi.n	801c554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801c524:	9b04      	ldr	r3, [sp, #16]
 801c526:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801c52a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801c52e:	1c6b      	adds	r3, r5, #1
 801c530:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801c534:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801c538:	9b01      	ldr	r3, [sp, #4]
 801c53a:	9801      	ldr	r0, [sp, #4]
 801c53c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c540:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801c544:	805a      	strh	r2, [r3, #2]
 801c546:	809e      	strh	r6, [r3, #4]
 801c548:	80d9      	strh	r1, [r3, #6]
 801c54a:	9b02      	ldr	r3, [sp, #8]
 801c54c:	3c08      	subs	r4, #8
 801c54e:	3b01      	subs	r3, #1
 801c550:	9302      	str	r3, [sp, #8]
 801c552:	e747      	b.n	801c3e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801c554:	9a02      	ldr	r2, [sp, #8]
 801c556:	45b6      	cmp	lr, r6
 801c558:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c55c:	db0d      	blt.n	801c57a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c55e:	449c      	add	ip, r3
 801c560:	445a      	add	r2, fp
 801c562:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801c566:	fa1f fc8c 	uxth.w	ip, ip
 801c56a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801c56e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801c572:	448c      	add	ip, r1
 801c574:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801c578:	e61e      	b.n	801c1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c57a:	445a      	add	r2, fp
 801c57c:	4484      	add	ip, r0
 801c57e:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801c582:	e78f      	b.n	801c4a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c584:	fa1f f18e 	uxth.w	r1, lr
 801c588:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801c58c:	b293      	uxth	r3, r2
 801c58e:	4596      	cmp	lr, r2
 801c590:	eb01 0806 	add.w	r8, r1, r6
 801c594:	9306      	str	r3, [sp, #24]
 801c596:	fa1f f888 	uxth.w	r8, r8
 801c59a:	9f06      	ldr	r7, [sp, #24]
 801c59c:	fa0f f388 	sxth.w	r3, r8
 801c5a0:	9307      	str	r3, [sp, #28]
 801c5a2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801c5a6:	443b      	add	r3, r7
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	9308      	str	r3, [sp, #32]
 801c5ac:	da24      	bge.n	801c5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801c5ae:	9905      	ldr	r1, [sp, #20]
 801c5b0:	eba3 0308 	sub.w	r3, r3, r8
 801c5b4:	eba2 020e 	sub.w	r2, r2, lr
 801c5b8:	eba9 0000 	sub.w	r0, r9, r0
 801c5bc:	ebaa 0401 	sub.w	r4, sl, r1
 801c5c0:	b29b      	uxth	r3, r3
 801c5c2:	b2a4      	uxth	r4, r4
 801c5c4:	b219      	sxth	r1, r3
 801c5c6:	b225      	sxth	r5, r4
 801c5c8:	4348      	muls	r0, r1
 801c5ca:	436a      	muls	r2, r5
 801c5cc:	4282      	cmp	r2, r0
 801c5ce:	9a02      	ldr	r2, [sp, #8]
 801c5d0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c5d4:	445a      	add	r2, fp
 801c5d6:	dc06      	bgt.n	801c5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801c5d8:	9b07      	ldr	r3, [sp, #28]
 801c5da:	44a4      	add	ip, r4
 801c5dc:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801c5e0:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801c5e4:	e75e      	b.n	801c4a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c5e6:	9904      	ldr	r1, [sp, #16]
 801c5e8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801c5ec:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801c5f0:	4433      	add	r3, r6
 801c5f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c5f6:	e5df      	b.n	801c1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c5f8:	9f06      	ldr	r7, [sp, #24]
 801c5fa:	9b04      	ldr	r3, [sp, #16]
 801c5fc:	1bc9      	subs	r1, r1, r7
 801c5fe:	fa0f f78a 	sxth.w	r7, sl
 801c602:	b289      	uxth	r1, r1
 801c604:	429f      	cmp	r7, r3
 801c606:	fa0f fe81 	sxth.w	lr, r1
 801c60a:	dd23      	ble.n	801c654 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801c60c:	9a05      	ldr	r2, [sp, #20]
 801c60e:	eba9 0000 	sub.w	r0, r9, r0
 801c612:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c616:	ebaa 0202 	sub.w	r2, sl, r2
 801c61a:	9d07      	ldr	r5, [sp, #28]
 801c61c:	fb0e f000 	mul.w	r0, lr, r0
 801c620:	b292      	uxth	r2, r2
 801c622:	eba5 0a03 	sub.w	sl, r5, r3
 801c626:	9b02      	ldr	r3, [sp, #8]
 801c628:	b214      	sxth	r4, r2
 801c62a:	00db      	lsls	r3, r3, #3
 801c62c:	fb04 fa0a 	mul.w	sl, r4, sl
 801c630:	445b      	add	r3, fp
 801c632:	4550      	cmp	r0, sl
 801c634:	db03      	blt.n	801c63e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801c636:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801c63a:	4494      	add	ip, r2
 801c63c:	e732      	b.n	801c4a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c63e:	9a04      	ldr	r2, [sp, #16]
 801c640:	4431      	add	r1, r6
 801c642:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801c646:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801c64a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801c64e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c652:	e75c      	b.n	801c50e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801c654:	9b08      	ldr	r3, [sp, #32]
 801c656:	2d06      	cmp	r5, #6
 801c658:	eba3 0308 	sub.w	r3, r3, r8
 801c65c:	b29b      	uxth	r3, r3
 801c65e:	b218      	sxth	r0, r3
 801c660:	d813      	bhi.n	801c68a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801c662:	9b07      	ldr	r3, [sp, #28]
 801c664:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801c668:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801c66c:	1c6b      	adds	r3, r5, #1
 801c66e:	9901      	ldr	r1, [sp, #4]
 801c670:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801c674:	9b01      	ldr	r3, [sp, #4]
 801c676:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801c67a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c67e:	805a      	strh	r2, [r3, #2]
 801c680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c682:	f8a3 e006 	strh.w	lr, [r3, #6]
 801c686:	809a      	strh	r2, [r3, #4]
 801c688:	e75f      	b.n	801c54a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c68a:	9c02      	ldr	r4, [sp, #8]
 801c68c:	4570      	cmp	r0, lr
 801c68e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c692:	db0d      	blt.n	801c6b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801c694:	4431      	add	r1, r6
 801c696:	9b06      	ldr	r3, [sp, #24]
 801c698:	445c      	add	r4, fp
 801c69a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c69e:	b289      	uxth	r1, r1
 801c6a0:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801c6a4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c6a8:	4419      	add	r1, r3
 801c6aa:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801c6ae:	e583      	b.n	801c1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c6b0:	445c      	add	r4, fp
 801c6b2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801c6b6:	e79b      	b.n	801c5f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801c6b8:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801c6bc:	2e07      	cmp	r6, #7
 801c6be:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801c6c2:	d812      	bhi.n	801c6ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 801c6c4:	1c75      	adds	r5, r6, #1
 801c6c6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801c6ca:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801c6ce:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801c6d2:	9d01      	ldr	r5, [sp, #4]
 801c6d4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c6d8:	442c      	add	r4, r5
 801c6da:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801c6de:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801c6e2:	8061      	strh	r1, [r4, #2]
 801c6e4:	80a2      	strh	r2, [r4, #4]
 801c6e6:	80e3      	strh	r3, [r4, #6]
 801c6e8:	e5d0      	b.n	801c28c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c6ea:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801c6ee:	3e01      	subs	r6, #1
 801c6f0:	445c      	add	r4, fp
 801c6f2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c6f6:	f04f 37ff 	mov.w	r7, #4294967295
 801c6fa:	2500      	movs	r5, #0
 801c6fc:	9305      	str	r3, [sp, #20]
 801c6fe:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801c702:	1e72      	subs	r2, r6, #1
 801c704:	9302      	str	r3, [sp, #8]
 801c706:	4691      	mov	r9, r2
 801c708:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801c70c:	9304      	str	r3, [sp, #16]
 801c70e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801c712:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c716:	6818      	ldr	r0, [r3, #0]
 801c718:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c71c:	9207      	str	r2, [sp, #28]
 801c71e:	bf16      	itet	ne
 801c720:	9905      	ldrne	r1, [sp, #20]
 801c722:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801c726:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801c72a:	9306      	str	r3, [sp, #24]
 801c72c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c730:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801c734:	fb18 f801 	smulbb	r8, r8, r1
 801c738:	6859      	ldr	r1, [r3, #4]
 801c73a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c73e:	4671      	mov	r1, lr
 801c740:	a80c      	add	r0, sp, #48	; 0x30
 801c742:	f7ff fb6f 	bl	801be24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c746:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801c74a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c74e:	f04f 0c08 	mov.w	ip, #8
 801c752:	9b04      	ldr	r3, [sp, #16]
 801c754:	9a02      	ldr	r2, [sp, #8]
 801c756:	fb10 f001 	smulbb	r0, r0, r1
 801c75a:	fb02 8803 	mla	r8, r2, r3, r8
 801c75e:	eba0 0108 	sub.w	r1, r0, r8
 801c762:	fb90 f0fc 	sdiv	r0, r0, ip
 801c766:	4288      	cmp	r0, r1
 801c768:	dc20      	bgt.n	801c7ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801c76a:	4551      	cmp	r1, sl
 801c76c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c770:	da03      	bge.n	801c77a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801c772:	b1d9      	cbz	r1, 801c7ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801c774:	468a      	mov	sl, r1
 801c776:	464f      	mov	r7, r9
 801c778:	4635      	mov	r5, r6
 801c77a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c77e:	f119 0f02 	cmn.w	r9, #2
 801c782:	d1c6      	bne.n	801c712 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801c784:	4616      	mov	r6, r2
 801c786:	3201      	adds	r2, #1
 801c788:	f1a4 0408 	sub.w	r4, r4, #8
 801c78c:	d1b7      	bne.n	801c6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801c78e:	9b01      	ldr	r3, [sp, #4]
 801c790:	b2ac      	uxth	r4, r5
 801c792:	00ed      	lsls	r5, r5, #3
 801c794:	1958      	adds	r0, r3, r5
 801c796:	1c7b      	adds	r3, r7, #1
 801c798:	d10b      	bne.n	801c7b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801c79a:	4601      	mov	r1, r0
 801c79c:	9803      	ldr	r0, [sp, #12]
 801c79e:	f7ff fb41 	bl	801be24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c7a2:	4621      	mov	r1, r4
 801c7a4:	9801      	ldr	r0, [sp, #4]
 801c7a6:	f7ff fcdd 	bl	801c164 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c7aa:	e505      	b.n	801c1b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c7ac:	464f      	mov	r7, r9
 801c7ae:	4635      	mov	r5, r6
 801c7b0:	e7ed      	b.n	801c78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801c7b2:	9b01      	ldr	r3, [sp, #4]
 801c7b4:	00ff      	lsls	r7, r7, #3
 801c7b6:	445d      	add	r5, fp
 801c7b8:	19d9      	adds	r1, r3, r7
 801c7ba:	445f      	add	r7, fp
 801c7bc:	f7ff fb32 	bl	801be24 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c7c0:	9b03      	ldr	r3, [sp, #12]
 801c7c2:	cb03      	ldmia	r3!, {r0, r1}
 801c7c4:	9b03      	ldr	r3, [sp, #12]
 801c7c6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801c7ca:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801c7ce:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801c7d2:	6869      	ldr	r1, [r5, #4]
 801c7d4:	c303      	stmia	r3!, {r0, r1}
 801c7d6:	e7e4      	b.n	801c7a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0801c7d8 <_ZN8touchgfx11Application10invalidateEv>:
 801c7d8:	4b09      	ldr	r3, [pc, #36]	; (801c800 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801c7da:	b082      	sub	sp, #8
 801c7dc:	2100      	movs	r1, #0
 801c7de:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c7e2:	4b08      	ldr	r3, [pc, #32]	; (801c804 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801c7e4:	9100      	str	r1, [sp, #0]
 801c7e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7ea:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c7ee:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c7f2:	ab02      	add	r3, sp, #8
 801c7f4:	e913 0006 	ldmdb	r3, {r1, r2}
 801c7f8:	b002      	add	sp, #8
 801c7fa:	f7ff bcc7 	b.w	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c7fe:	bf00      	nop
 801c800:	20016e7c 	.word	0x20016e7c
 801c804:	20016e7e 	.word	0x20016e7e

0801c808 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c80c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801c810:	b09b      	sub	sp, #108	; 0x6c
 801c812:	4604      	mov	r4, r0
 801c814:	4630      	mov	r0, r6
 801c816:	f7fa fd2c 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c81a:	4605      	mov	r5, r0
 801c81c:	b940      	cbnz	r0, 801c830 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801c81e:	4620      	mov	r0, r4
 801c820:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c824:	f7ff fcb2 	bl	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c828:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c82c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801c830:	4bc8      	ldr	r3, [pc, #800]	; (801cb54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	2b00      	cmp	r3, #0
 801c836:	d03e      	beq.n	801c8b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801c838:	4dc7      	ldr	r5, [pc, #796]	; (801cb58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801c83a:	4628      	mov	r0, r5
 801c83c:	f7fa fd19 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c840:	4606      	mov	r6, r0
 801c842:	2800      	cmp	r0, #0
 801c844:	d137      	bne.n	801c8b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801c846:	4628      	mov	r0, r5
 801c848:	f7ff f998 	bl	801bb7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c84c:	6829      	ldr	r1, [r5, #0]
 801c84e:	686a      	ldr	r2, [r5, #4]
 801c850:	4620      	mov	r0, r4
 801c852:	f7ff fc9b 	bl	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c856:	802e      	strh	r6, [r5, #0]
 801c858:	806e      	strh	r6, [r5, #2]
 801c85a:	80ae      	strh	r6, [r5, #4]
 801c85c:	80ee      	strh	r6, [r5, #6]
 801c85e:	ae09      	add	r6, sp, #36	; 0x24
 801c860:	4630      	mov	r0, r6
 801c862:	f7ff fc24 	bl	801c0ae <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c866:	4abd      	ldr	r2, [pc, #756]	; (801cb5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801c868:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801c86c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801c870:	8815      	ldrh	r5, [r2, #0]
 801c872:	9202      	str	r2, [sp, #8]
 801c874:	462b      	mov	r3, r5
 801c876:	429f      	cmp	r7, r3
 801c878:	d924      	bls.n	801c8c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801c87a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801c87e:	2907      	cmp	r1, #7
 801c880:	d816      	bhi.n	801c8b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801c882:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801c886:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801c88a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801c88e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801c892:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801c896:	1c4a      	adds	r2, r1, #1
 801c898:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801c89c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801c8a0:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801c8a4:	f8a2 9002 	strh.w	r9, [r2, #2]
 801c8a8:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c8ac:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c8b0:	3301      	adds	r3, #1
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	e7df      	b.n	801c876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801c8b6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d1cf      	bne.n	801c85e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801c8be:	b01b      	add	sp, #108	; 0x6c
 801c8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8c4:	462f      	mov	r7, r5
 801c8c6:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801c8ca:	42bb      	cmp	r3, r7
 801c8cc:	d90b      	bls.n	801c8e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801c8ce:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801c8d2:	3701      	adds	r7, #1
 801c8d4:	4620      	mov	r0, r4
 801c8d6:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801c8da:	b2bf      	uxth	r7, r7
 801c8dc:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801c8e0:	f7ff fc54 	bl	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c8e4:	e7ef      	b.n	801c8c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801c8e6:	4a9e      	ldr	r2, [pc, #632]	; (801cb60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801c8e8:	6813      	ldr	r3, [r2, #0]
 801c8ea:	4690      	mov	r8, r2
 801c8ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c8f0:	2b01      	cmp	r3, #1
 801c8f2:	f040 80e4 	bne.w	801cabe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801c8f6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c8fa:	4629      	mov	r1, r5
 801c8fc:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801c900:	2500      	movs	r5, #0
 801c902:	33ae      	adds	r3, #174	; 0xae
 801c904:	428f      	cmp	r7, r1
 801c906:	f103 0308 	add.w	r3, r3, #8
 801c90a:	dd0a      	ble.n	801c922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801c90c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c910:	3101      	adds	r1, #1
 801c912:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801c916:	4402      	add	r2, r0
 801c918:	b212      	sxth	r2, r2
 801c91a:	4295      	cmp	r5, r2
 801c91c:	bfb8      	it	lt
 801c91e:	4615      	movlt	r5, r2
 801c920:	e7f0      	b.n	801c904 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801c922:	4b90      	ldr	r3, [pc, #576]	; (801cb64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801c924:	f8df b238 	ldr.w	fp, [pc, #568]	; 801cb60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801c928:	881b      	ldrh	r3, [r3, #0]
 801c92a:	46d8      	mov	r8, fp
 801c92c:	2b0f      	cmp	r3, #15
 801c92e:	bf8c      	ite	hi
 801c930:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801c934:	f04f 0a01 	movls.w	sl, #1
 801c938:	2300      	movs	r3, #0
 801c93a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c93e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801c942:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801c946:	4438      	add	r0, r7
 801c948:	b207      	sxth	r7, r0
 801c94a:	f8db 0000 	ldr.w	r0, [fp]
 801c94e:	42bd      	cmp	r5, r7
 801c950:	6803      	ldr	r3, [r0, #0]
 801c952:	f340 8084 	ble.w	801ca5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801c956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c95a:	4798      	blx	r3
 801c95c:	eb07 030a 	add.w	r3, r7, sl
 801c960:	4298      	cmp	r0, r3
 801c962:	da07      	bge.n	801c974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c964:	4285      	cmp	r5, r0
 801c966:	dd05      	ble.n	801c974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801c968:	4287      	cmp	r7, r0
 801c96a:	dd6d      	ble.n	801ca48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c96c:	2f00      	cmp	r7, #0
 801c96e:	dd6b      	ble.n	801ca48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c970:	4628      	mov	r0, r5
 801c972:	e004      	b.n	801c97e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801c974:	4287      	cmp	r7, r0
 801c976:	dcfb      	bgt.n	801c970 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801c978:	42a8      	cmp	r0, r5
 801c97a:	bfa8      	it	ge
 801c97c:	4628      	movge	r0, r5
 801c97e:	4b7a      	ldr	r3, [pc, #488]	; (801cb68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801c980:	1bc0      	subs	r0, r0, r7
 801c982:	2200      	movs	r2, #0
 801c984:	f8ad 7016 	strh.w	r7, [sp, #22]
 801c988:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c98c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c990:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c994:	9b02      	ldr	r3, [sp, #8]
 801c996:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c99a:	881f      	ldrh	r7, [r3, #0]
 801c99c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c9a0:	42bb      	cmp	r3, r7
 801c9a2:	d9cc      	bls.n	801c93e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801c9a4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801c9a8:	ab07      	add	r3, sp, #28
 801c9aa:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c9ae:	6851      	ldr	r1, [r2, #4]
 801c9b0:	c303      	stmia	r3!, {r0, r1}
 801c9b2:	a905      	add	r1, sp, #20
 801c9b4:	a807      	add	r0, sp, #28
 801c9b6:	f7ff f99c 	bl	801bcf2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c9ba:	2800      	cmp	r0, #0
 801c9bc:	d04c      	beq.n	801ca58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801c9be:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801c9c2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c9c6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801c9ca:	4686      	mov	lr, r0
 801c9cc:	4290      	cmp	r0, r2
 801c9ce:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801c9d2:	4448      	add	r0, r9
 801c9d4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801c9d8:	bfb8      	it	lt
 801c9da:	4696      	movlt	lr, r2
 801c9dc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c9e0:	444a      	add	r2, r9
 801c9e2:	b280      	uxth	r0, r0
 801c9e4:	4299      	cmp	r1, r3
 801c9e6:	468c      	mov	ip, r1
 801c9e8:	b292      	uxth	r2, r2
 801c9ea:	9303      	str	r3, [sp, #12]
 801c9ec:	bfb8      	it	lt
 801c9ee:	469c      	movlt	ip, r3
 801c9f0:	b203      	sxth	r3, r0
 801c9f2:	fa0f f982 	sxth.w	r9, r2
 801c9f6:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c9fa:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c9fe:	454b      	cmp	r3, r9
 801ca00:	bfb8      	it	lt
 801ca02:	4602      	movlt	r2, r0
 801ca04:	9b03      	ldr	r3, [sp, #12]
 801ca06:	eba2 020e 	sub.w	r2, r2, lr
 801ca0a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ca0e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ca12:	4411      	add	r1, r2
 801ca14:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ca18:	4413      	add	r3, r2
 801ca1a:	b289      	uxth	r1, r1
 801ca1c:	b29b      	uxth	r3, r3
 801ca1e:	b208      	sxth	r0, r1
 801ca20:	b21a      	sxth	r2, r3
 801ca22:	4290      	cmp	r0, r2
 801ca24:	bfb8      	it	lt
 801ca26:	460b      	movlt	r3, r1
 801ca28:	eba3 030c 	sub.w	r3, r3, ip
 801ca2c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ca30:	a807      	add	r0, sp, #28
 801ca32:	f7fa fc1e 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca36:	b920      	cbnz	r0, 801ca42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801ca38:	6823      	ldr	r3, [r4, #0]
 801ca3a:	a907      	add	r1, sp, #28
 801ca3c:	4620      	mov	r0, r4
 801ca3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca40:	4798      	blx	r3
 801ca42:	3701      	adds	r7, #1
 801ca44:	b2bf      	uxth	r7, r7
 801ca46:	e7a9      	b.n	801c99c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801ca48:	f8d8 0000 	ldr.w	r0, [r8]
 801ca4c:	2101      	movs	r1, #1
 801ca4e:	6803      	ldr	r3, [r0, #0]
 801ca50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ca54:	4798      	blx	r3
 801ca56:	e772      	b.n	801c93e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801ca58:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801ca5c:	e7e8      	b.n	801ca30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801ca5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca60:	4798      	blx	r3
 801ca62:	4b42      	ldr	r3, [pc, #264]	; (801cb6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801ca64:	781b      	ldrb	r3, [r3, #0]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	f43f af29 	beq.w	801c8be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801ca72:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801ca76:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801ca7a:	9b02      	ldr	r3, [sp, #8]
 801ca7c:	881b      	ldrh	r3, [r3, #0]
 801ca7e:	429d      	cmp	r5, r3
 801ca80:	f67f af1d 	bls.w	801c8be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801ca84:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801ca88:	2907      	cmp	r1, #7
 801ca8a:	d815      	bhi.n	801cab8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801ca8c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801ca90:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801ca94:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801ca98:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801ca9c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801caa0:	1c4a      	adds	r2, r1, #1
 801caa2:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801caa6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801caaa:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801caae:	f8a2 e002 	strh.w	lr, [r2, #2]
 801cab2:	f8a2 c004 	strh.w	ip, [r2, #4]
 801cab6:	80d7      	strh	r7, [r2, #6]
 801cab8:	3301      	adds	r3, #1
 801caba:	b29b      	uxth	r3, r3
 801cabc:	e7df      	b.n	801ca7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801cabe:	2b02      	cmp	r3, #2
 801cac0:	f040 8135 	bne.w	801cd2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801cac4:	4b2a      	ldr	r3, [pc, #168]	; (801cb70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801cac6:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801caca:	781b      	ldrb	r3, [r3, #0]
 801cacc:	2b01      	cmp	r3, #1
 801cace:	f000 809c 	beq.w	801cc0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801cad2:	9b02      	ldr	r3, [sp, #8]
 801cad4:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801cad8:	f8b3 b000 	ldrh.w	fp, [r3]
 801cadc:	f10b 0b01 	add.w	fp, fp, #1
 801cae0:	fa1f fb8b 	uxth.w	fp, fp
 801cae4:	2a00      	cmp	r2, #0
 801cae6:	d0bc      	beq.n	801ca62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801cae8:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801caec:	4659      	mov	r1, fp
 801caee:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801caf2:	f04f 0800 	mov.w	r8, #0
 801caf6:	441d      	add	r5, r3
 801caf8:	b22d      	sxth	r5, r5
 801cafa:	b28b      	uxth	r3, r1
 801cafc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801cb00:	429a      	cmp	r2, r3
 801cb02:	f240 80c0 	bls.w	801cc86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801cb06:	4427      	add	r7, r4
 801cb08:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801cb0c:	4608      	mov	r0, r1
 801cb0e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801cb12:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801cb16:	4563      	cmp	r3, ip
 801cb18:	f340 80a2 	ble.w	801cc60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801cb1c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 801cb20:	4465      	add	r5, ip
 801cb22:	b22d      	sxth	r5, r5
 801cb24:	429d      	cmp	r5, r3
 801cb26:	bfa8      	it	ge
 801cb28:	461d      	movge	r5, r3
 801cb2a:	3101      	adds	r1, #1
 801cb2c:	4680      	mov	r8, r0
 801cb2e:	e7e4      	b.n	801cafa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801cb30:	d10b      	bne.n	801cb4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801cb32:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801cb36:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801cb3a:	458c      	cmp	ip, r1
 801cb3c:	bfb4      	ite	lt
 801cb3e:	469c      	movlt	ip, r3
 801cb40:	46bc      	movge	ip, r7
 801cb42:	4572      	cmp	r2, lr
 801cb44:	bfb8      	it	lt
 801cb46:	4672      	movlt	r2, lr
 801cb48:	e087      	b.n	801cc5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801cb4a:	428a      	cmp	r2, r1
 801cb4c:	46bc      	mov	ip, r7
 801cb4e:	bfb8      	it	lt
 801cb50:	460a      	movlt	r2, r1
 801cb52:	e082      	b.n	801cc5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801cb54:	20016ec8 	.word	0x20016ec8
 801cb58:	20016ed4 	.word	0x20016ed4
 801cb5c:	20000044 	.word	0x20000044
 801cb60:	20016e88 	.word	0x20016e88
 801cb64:	20016e7e 	.word	0x20016e7e
 801cb68:	20016e7c 	.word	0x20016e7c
 801cb6c:	20016e86 	.word	0x20016e86
 801cb70:	20016e80 	.word	0x20016e80
 801cb74:	1961      	adds	r1, r4, r5
 801cb76:	ab07      	add	r3, sp, #28
 801cb78:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801cb7c:	6849      	ldr	r1, [r1, #4]
 801cb7e:	c303      	stmia	r3!, {r0, r1}
 801cb80:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cb84:	a807      	add	r0, sp, #28
 801cb86:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cb8a:	2b13      	cmp	r3, #19
 801cb8c:	440b      	add	r3, r1
 801cb8e:	bfd8      	it	le
 801cb90:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801cb94:	1a9b      	subs	r3, r3, r2
 801cb96:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cb9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cb9e:	f7ff f807 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cba2:	a807      	add	r0, sp, #28
 801cba4:	f7fa fb65 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cba8:	bb78      	cbnz	r0, 801cc0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801cbaa:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801cbae:	4425      	add	r5, r4
 801cbb0:	f8d8 0000 	ldr.w	r0, [r8]
 801cbb4:	f1bc 0f14 	cmp.w	ip, #20
 801cbb8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cbbc:	f8d0 e000 	ldr.w	lr, [r0]
 801cbc0:	bfa8      	it	ge
 801cbc2:	f04f 0c14 	movge.w	ip, #20
 801cbc6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801cbca:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cbce:	fa1f fc8c 	uxth.w	ip, ip
 801cbd2:	f8cd c000 	str.w	ip, [sp]
 801cbd6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801cbda:	47d0      	blx	sl
 801cbdc:	4682      	mov	sl, r0
 801cbde:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cbe2:	a807      	add	r0, sp, #28
 801cbe4:	f7fe ffca 	bl	801bb7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801cbe8:	6823      	ldr	r3, [r4, #0]
 801cbea:	4620      	mov	r0, r4
 801cbec:	a907      	add	r1, sp, #28
 801cbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbf0:	4798      	blx	r3
 801cbf2:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801cbf6:	eba0 000a 	sub.w	r0, r0, sl
 801cbfa:	b200      	sxth	r0, r0
 801cbfc:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801cc00:	b918      	cbnz	r0, 801cc0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801cc02:	b2b9      	uxth	r1, r7
 801cc04:	4648      	mov	r0, r9
 801cc06:	f7ff faad 	bl	801c164 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cc0a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801cc0e:	f1bb 0f00 	cmp.w	fp, #0
 801cc12:	f43f af26 	beq.w	801ca62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801cc16:	9b02      	ldr	r3, [sp, #8]
 801cc18:	2700      	movs	r7, #0
 801cc1a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801cc1e:	881b      	ldrh	r3, [r3, #0]
 801cc20:	3301      	adds	r3, #1
 801cc22:	b29b      	uxth	r3, r3
 801cc24:	b299      	uxth	r1, r3
 801cc26:	00fd      	lsls	r5, r7, #3
 801cc28:	458b      	cmp	fp, r1
 801cc2a:	d9a3      	bls.n	801cb74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801cc2c:	4425      	add	r5, r4
 801cc2e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801cc32:	469c      	mov	ip, r3
 801cc34:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801cc38:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801cc3c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801cc40:	4408      	add	r0, r1
 801cc42:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801cc46:	4471      	add	r1, lr
 801cc48:	b200      	sxth	r0, r0
 801cc4a:	b209      	sxth	r1, r1
 801cc4c:	4288      	cmp	r0, r1
 801cc4e:	f6bf af6f 	bge.w	801cb30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801cc52:	4586      	cmp	lr, r0
 801cc54:	4672      	mov	r2, lr
 801cc56:	bfb8      	it	lt
 801cc58:	4602      	movlt	r2, r0
 801cc5a:	3301      	adds	r3, #1
 801cc5c:	4667      	mov	r7, ip
 801cc5e:	e7e1      	b.n	801cc24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801cc60:	d10c      	bne.n	801cc7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801cc62:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801cc66:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801cc6a:	4287      	cmp	r7, r0
 801cc6c:	bfb4      	ite	lt
 801cc6e:	4608      	movlt	r0, r1
 801cc70:	4640      	movge	r0, r8
 801cc72:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801cc76:	443b      	add	r3, r7
 801cc78:	b21b      	sxth	r3, r3
 801cc7a:	e753      	b.n	801cb24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801cc7c:	4565      	cmp	r5, ip
 801cc7e:	4640      	mov	r0, r8
 801cc80:	bfa8      	it	ge
 801cc82:	4665      	movge	r5, ip
 801cc84:	e751      	b.n	801cb2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801cc86:	eb09 0007 	add.w	r0, r9, r7
 801cc8a:	4427      	add	r7, r4
 801cc8c:	9203      	str	r2, [sp, #12]
 801cc8e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801cc92:	f1ba 0f13 	cmp.w	sl, #19
 801cc96:	bfde      	ittt	le
 801cc98:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801cc9c:	4455      	addle	r5, sl
 801cc9e:	b22d      	sxthle	r5, r5
 801cca0:	f7fa fae7 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cca4:	9a03      	ldr	r2, [sp, #12]
 801cca6:	2800      	cmp	r0, #0
 801cca8:	f47f af1c 	bne.w	801cae4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801ccac:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801ccb0:	fa1f fa8a 	uxth.w	sl, sl
 801ccb4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ccb8:	1aad      	subs	r5, r5, r2
 801ccba:	4829      	ldr	r0, [pc, #164]	; (801cd60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801ccbc:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801ccc0:	2d14      	cmp	r5, #20
 801ccc2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801ccc6:	6800      	ldr	r0, [r0, #0]
 801ccc8:	bfa8      	it	ge
 801ccca:	2514      	movge	r5, #20
 801cccc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ccd0:	f8ad 201e 	strh.w	r2, [sp, #30]
 801ccd4:	b289      	uxth	r1, r1
 801ccd6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ccda:	b2ad      	uxth	r5, r5
 801ccdc:	f8d0 c000 	ldr.w	ip, [r0]
 801cce0:	b292      	uxth	r2, r2
 801cce2:	4555      	cmp	r5, sl
 801cce4:	bf94      	ite	ls
 801cce6:	9500      	strls	r5, [sp, #0]
 801cce8:	f8cd a000 	strhi.w	sl, [sp]
 801ccec:	b29b      	uxth	r3, r3
 801ccee:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801ccf2:	47a8      	blx	r5
 801ccf4:	6823      	ldr	r3, [r4, #0]
 801ccf6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ccfa:	a907      	add	r1, sp, #28
 801ccfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ccfe:	4620      	mov	r0, r4
 801cd00:	4798      	blx	r3
 801cd02:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cd06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cd0a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801cd0e:	1a5b      	subs	r3, r3, r1
 801cd10:	440a      	add	r2, r1
 801cd12:	b21b      	sxth	r3, r3
 801cd14:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801cd18:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	f47f aed8 	bne.w	801cad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801cd22:	fa1f f188 	uxth.w	r1, r8
 801cd26:	4648      	mov	r0, r9
 801cd28:	f7ff fa1c 	bl	801c164 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cd2c:	e6d1      	b.n	801cad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801cd2e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801cd32:	42ab      	cmp	r3, r5
 801cd34:	f67f ae95 	bls.w	801ca62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801cd38:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801cd3c:	ab07      	add	r3, sp, #28
 801cd3e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801cd42:	6851      	ldr	r1, [r2, #4]
 801cd44:	c303      	stmia	r3!, {r0, r1}
 801cd46:	a807      	add	r0, sp, #28
 801cd48:	f7fa fa93 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd4c:	b920      	cbnz	r0, 801cd58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801cd4e:	6823      	ldr	r3, [r4, #0]
 801cd50:	a907      	add	r1, sp, #28
 801cd52:	4620      	mov	r0, r4
 801cd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd56:	4798      	blx	r3
 801cd58:	3501      	adds	r5, #1
 801cd5a:	b2ad      	uxth	r5, r5
 801cd5c:	e7e7      	b.n	801cd2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801cd5e:	bf00      	nop
 801cd60:	20016e88 	.word	0x20016e88

0801cd64 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801cd64:	4b03      	ldr	r3, [pc, #12]	; (801cd74 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801cd66:	2200      	movs	r2, #0
 801cd68:	801a      	strh	r2, [r3, #0]
 801cd6a:	805a      	strh	r2, [r3, #2]
 801cd6c:	809a      	strh	r2, [r3, #4]
 801cd6e:	80da      	strh	r2, [r3, #6]
 801cd70:	4770      	bx	lr
 801cd72:	bf00      	nop
 801cd74:	20016ed4 	.word	0x20016ed4

0801cd78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd7c:	b09d      	sub	sp, #116	; 0x74
 801cd7e:	4606      	mov	r6, r0
 801cd80:	4614      	mov	r4, r2
 801cd82:	468a      	mov	sl, r1
 801cd84:	a803      	add	r0, sp, #12
 801cd86:	461d      	mov	r5, r3
 801cd88:	f000 fe2f 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 801cd8c:	6833      	ldr	r3, [r6, #0]
 801cd8e:	4630      	mov	r0, r6
 801cd90:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801cd94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd96:	4798      	blx	r3
 801cd98:	6833      	ldr	r3, [r6, #0]
 801cd9a:	4607      	mov	r7, r0
 801cd9c:	4630      	mov	r0, r6
 801cd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cda0:	4798      	blx	r3
 801cda2:	462a      	mov	r2, r5
 801cda4:	2500      	movs	r5, #0
 801cda6:	4621      	mov	r1, r4
 801cda8:	9000      	str	r0, [sp, #0]
 801cdaa:	463b      	mov	r3, r7
 801cdac:	462c      	mov	r4, r5
 801cdae:	46a9      	mov	r9, r5
 801cdb0:	46a8      	mov	r8, r5
 801cdb2:	a803      	add	r0, sp, #12
 801cdb4:	f000 fe74 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cdb8:	2300      	movs	r3, #0
 801cdba:	9302      	str	r3, [sp, #8]
 801cdbc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801cdc0:	429c      	cmp	r4, r3
 801cdc2:	d002      	beq.n	801cdca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801cdc4:	455c      	cmp	r4, fp
 801cdc6:	bf18      	it	ne
 801cdc8:	4625      	movne	r5, r4
 801cdca:	ab02      	add	r3, sp, #8
 801cdcc:	4632      	mov	r2, r6
 801cdce:	4651      	mov	r1, sl
 801cdd0:	a803      	add	r0, sp, #12
 801cdd2:	f001 f96b 	bl	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cdd6:	4604      	mov	r4, r0
 801cdd8:	b108      	cbz	r0, 801cdde <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801cdda:	280a      	cmp	r0, #10
 801cddc:	d10a      	bne.n	801cdf4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801cdde:	45c1      	cmp	r9, r8
 801cde0:	bf38      	it	cc
 801cde2:	46c1      	movcc	r9, r8
 801cde4:	f04f 0800 	mov.w	r8, #0
 801cde8:	2c00      	cmp	r4, #0
 801cdea:	d1e5      	bne.n	801cdb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801cdec:	4648      	mov	r0, r9
 801cdee:	b01d      	add	sp, #116	; 0x74
 801cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdf4:	9a02      	ldr	r2, [sp, #8]
 801cdf6:	2a00      	cmp	r2, #0
 801cdf8:	d0de      	beq.n	801cdb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801cdfa:	7b57      	ldrb	r7, [r2, #13]
 801cdfc:	4629      	mov	r1, r5
 801cdfe:	6833      	ldr	r3, [r6, #0]
 801ce00:	007f      	lsls	r7, r7, #1
 801ce02:	8894      	ldrh	r4, [r2, #4]
 801ce04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce06:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ce0a:	7a97      	ldrb	r7, [r2, #10]
 801ce0c:	4307      	orrs	r7, r0
 801ce0e:	4630      	mov	r0, r6
 801ce10:	4798      	blx	r3
 801ce12:	4438      	add	r0, r7
 801ce14:	4480      	add	r8, r0
 801ce16:	fa1f f888 	uxth.w	r8, r8
 801ce1a:	e7e5      	b.n	801cde8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ce1c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ce1c:	b508      	push	{r3, lr}
 801ce1e:	6803      	ldr	r3, [r0, #0]
 801ce20:	68db      	ldr	r3, [r3, #12]
 801ce22:	4798      	blx	r3
 801ce24:	b128      	cbz	r0, 801ce32 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ce26:	7b43      	ldrb	r3, [r0, #13]
 801ce28:	7a80      	ldrb	r0, [r0, #10]
 801ce2a:	005b      	lsls	r3, r3, #1
 801ce2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce30:	4318      	orrs	r0, r3
 801ce32:	bd08      	pop	{r3, pc}

0801ce34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ce34:	b40e      	push	{r1, r2, r3}
 801ce36:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce38:	b09e      	sub	sp, #120	; 0x78
 801ce3a:	4605      	mov	r5, r0
 801ce3c:	ab23      	add	r3, sp, #140	; 0x8c
 801ce3e:	a805      	add	r0, sp, #20
 801ce40:	f853 4b04 	ldr.w	r4, [r3], #4
 801ce44:	9303      	str	r3, [sp, #12]
 801ce46:	f000 fdd0 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 801ce4a:	682b      	ldr	r3, [r5, #0]
 801ce4c:	4628      	mov	r0, r5
 801ce4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce50:	4798      	blx	r3
 801ce52:	682b      	ldr	r3, [r5, #0]
 801ce54:	4606      	mov	r6, r0
 801ce56:	4628      	mov	r0, r5
 801ce58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce5a:	4798      	blx	r3
 801ce5c:	4633      	mov	r3, r6
 801ce5e:	4621      	mov	r1, r4
 801ce60:	ae1e      	add	r6, sp, #120	; 0x78
 801ce62:	2400      	movs	r4, #0
 801ce64:	9000      	str	r0, [sp, #0]
 801ce66:	9a03      	ldr	r2, [sp, #12]
 801ce68:	a805      	add	r0, sp, #20
 801ce6a:	f000 fe19 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ce6e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ce72:	462a      	mov	r2, r5
 801ce74:	4633      	mov	r3, r6
 801ce76:	4621      	mov	r1, r4
 801ce78:	a805      	add	r0, sp, #20
 801ce7a:	f001 f917 	bl	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ce7e:	b300      	cbz	r0, 801cec2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ce80:	280a      	cmp	r0, #10
 801ce82:	d01a      	beq.n	801ceba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ce84:	9f04      	ldr	r7, [sp, #16]
 801ce86:	b1c7      	cbz	r7, 801ceba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ce88:	7b78      	ldrb	r0, [r7, #13]
 801ce8a:	7a3b      	ldrb	r3, [r7, #8]
 801ce8c:	00c1      	lsls	r1, r0, #3
 801ce8e:	88ea      	ldrh	r2, [r5, #6]
 801ce90:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ce94:	4319      	orrs	r1, r3
 801ce96:	0643      	lsls	r3, r0, #25
 801ce98:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ce9c:	bf48      	it	mi
 801ce9e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801cea2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801cea6:	bf48      	it	mi
 801cea8:	b219      	sxthmi	r1, r3
 801ceaa:	79fb      	ldrb	r3, [r7, #7]
 801ceac:	4303      	orrs	r3, r0
 801ceae:	4413      	add	r3, r2
 801ceb0:	1a5b      	subs	r3, r3, r1
 801ceb2:	b21b      	sxth	r3, r3
 801ceb4:	429c      	cmp	r4, r3
 801ceb6:	bfb8      	it	lt
 801ceb8:	461c      	movlt	r4, r3
 801ceba:	4633      	mov	r3, r6
 801cebc:	462a      	mov	r2, r5
 801cebe:	2100      	movs	r1, #0
 801cec0:	e7da      	b.n	801ce78 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801cec2:	b2a0      	uxth	r0, r4
 801cec4:	b01e      	add	sp, #120	; 0x78
 801cec6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ceca:	b003      	add	sp, #12
 801cecc:	4770      	bx	lr

0801cece <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801cece:	7a43      	ldrb	r3, [r0, #9]
 801ced0:	8880      	ldrh	r0, [r0, #4]
 801ced2:	4418      	add	r0, r3
 801ced4:	b280      	uxth	r0, r0
 801ced6:	4770      	bx	lr

0801ced8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ced8:	6803      	ldr	r3, [r0, #0]
 801ceda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cedc:	4718      	bx	r3

0801cede <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cede:	b40e      	push	{r1, r2, r3}
 801cee0:	b570      	push	{r4, r5, r6, lr}
 801cee2:	b09d      	sub	sp, #116	; 0x74
 801cee4:	4604      	mov	r4, r0
 801cee6:	ab21      	add	r3, sp, #132	; 0x84
 801cee8:	a803      	add	r0, sp, #12
 801ceea:	f853 5b04 	ldr.w	r5, [r3], #4
 801ceee:	9302      	str	r3, [sp, #8]
 801cef0:	f000 fd7b 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 801cef4:	6823      	ldr	r3, [r4, #0]
 801cef6:	4620      	mov	r0, r4
 801cef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cefa:	4798      	blx	r3
 801cefc:	6823      	ldr	r3, [r4, #0]
 801cefe:	4606      	mov	r6, r0
 801cf00:	4620      	mov	r0, r4
 801cf02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf04:	2401      	movs	r4, #1
 801cf06:	4798      	blx	r3
 801cf08:	4633      	mov	r3, r6
 801cf0a:	9000      	str	r0, [sp, #0]
 801cf0c:	4629      	mov	r1, r5
 801cf0e:	9a02      	ldr	r2, [sp, #8]
 801cf10:	a803      	add	r0, sp, #12
 801cf12:	f000 fdc5 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cf16:	a803      	add	r0, sp, #12
 801cf18:	f001 f994 	bl	801e244 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cf1c:	b2a3      	uxth	r3, r4
 801cf1e:	b138      	cbz	r0, 801cf30 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801cf20:	280a      	cmp	r0, #10
 801cf22:	a803      	add	r0, sp, #12
 801cf24:	bf04      	itt	eq
 801cf26:	3301      	addeq	r3, #1
 801cf28:	b21c      	sxtheq	r4, r3
 801cf2a:	f001 f98b 	bl	801e244 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cf2e:	e7f5      	b.n	801cf1c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cf30:	4618      	mov	r0, r3
 801cf32:	b01d      	add	sp, #116	; 0x74
 801cf34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf38:	b003      	add	sp, #12
 801cf3a:	4770      	bx	lr

0801cf3c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cf3c:	b40e      	push	{r1, r2, r3}
 801cf3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf40:	b09e      	sub	sp, #120	; 0x78
 801cf42:	4604      	mov	r4, r0
 801cf44:	ab23      	add	r3, sp, #140	; 0x8c
 801cf46:	a805      	add	r0, sp, #20
 801cf48:	f853 5b04 	ldr.w	r5, [r3], #4
 801cf4c:	9303      	str	r3, [sp, #12]
 801cf4e:	f000 fd4c 	bl	801d9ea <_ZN8touchgfx12TextProviderC1Ev>
 801cf52:	6823      	ldr	r3, [r4, #0]
 801cf54:	4620      	mov	r0, r4
 801cf56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf58:	4798      	blx	r3
 801cf5a:	6823      	ldr	r3, [r4, #0]
 801cf5c:	4606      	mov	r6, r0
 801cf5e:	4620      	mov	r0, r4
 801cf60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf62:	4798      	blx	r3
 801cf64:	4633      	mov	r3, r6
 801cf66:	4629      	mov	r1, r5
 801cf68:	9000      	str	r0, [sp, #0]
 801cf6a:	9a03      	ldr	r2, [sp, #12]
 801cf6c:	a805      	add	r0, sp, #20
 801cf6e:	f000 fd97 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cf72:	ad1e      	add	r5, sp, #120	; 0x78
 801cf74:	2100      	movs	r1, #0
 801cf76:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801cf7a:	4622      	mov	r2, r4
 801cf7c:	a805      	add	r0, sp, #20
 801cf7e:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cf82:	462b      	mov	r3, r5
 801cf84:	f001 f892 	bl	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cf88:	b1d8      	cbz	r0, 801cfc2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801cf8a:	280a      	cmp	r0, #10
 801cf8c:	d012      	beq.n	801cfb4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801cf8e:	9804      	ldr	r0, [sp, #16]
 801cf90:	b180      	cbz	r0, 801cfb4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801cf92:	7b47      	ldrb	r7, [r0, #13]
 801cf94:	88e2      	ldrh	r2, [r4, #6]
 801cf96:	00fb      	lsls	r3, r7, #3
 801cf98:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cf9c:	7a03      	ldrb	r3, [r0, #8]
 801cf9e:	430b      	orrs	r3, r1
 801cfa0:	0679      	lsls	r1, r7, #25
 801cfa2:	bf44      	itt	mi
 801cfa4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cfa8:	b21b      	sxthmi	r3, r3
 801cfaa:	1ad3      	subs	r3, r2, r3
 801cfac:	b21b      	sxth	r3, r3
 801cfae:	429e      	cmp	r6, r3
 801cfb0:	bfa8      	it	ge
 801cfb2:	461e      	movge	r6, r3
 801cfb4:	462b      	mov	r3, r5
 801cfb6:	4622      	mov	r2, r4
 801cfb8:	2100      	movs	r1, #0
 801cfba:	a805      	add	r0, sp, #20
 801cfbc:	f001 f876 	bl	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cfc0:	e7e2      	b.n	801cf88 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801cfc2:	4630      	mov	r0, r6
 801cfc4:	b01e      	add	sp, #120	; 0x78
 801cfc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cfca:	b003      	add	sp, #12
 801cfcc:	4770      	bx	lr

0801cfce <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cfce:	b513      	push	{r0, r1, r4, lr}
 801cfd0:	6803      	ldr	r3, [r0, #0]
 801cfd2:	2400      	movs	r4, #0
 801cfd4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cfd8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cfdc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cfe0:	4669      	mov	r1, sp
 801cfe2:	691b      	ldr	r3, [r3, #16]
 801cfe4:	9400      	str	r4, [sp, #0]
 801cfe6:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cfea:	4798      	blx	r3
 801cfec:	b002      	add	sp, #8
 801cfee:	bd10      	pop	{r4, pc}

0801cff0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cff0:	b538      	push	{r3, r4, r5, lr}
 801cff2:	680b      	ldr	r3, [r1, #0]
 801cff4:	460c      	mov	r4, r1
 801cff6:	4605      	mov	r5, r0
 801cff8:	68db      	ldr	r3, [r3, #12]
 801cffa:	4798      	blx	r3
 801cffc:	6823      	ldr	r3, [r4, #0]
 801cffe:	4620      	mov	r0, r4
 801d000:	4629      	mov	r1, r5
 801d002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d004:	4798      	blx	r3
 801d006:	4628      	mov	r0, r5
 801d008:	bd38      	pop	{r3, r4, r5, pc}

0801d00a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801d00a:	b410      	push	{r4}
 801d00c:	880a      	ldrh	r2, [r1, #0]
 801d00e:	8884      	ldrh	r4, [r0, #4]
 801d010:	4422      	add	r2, r4
 801d012:	800a      	strh	r2, [r1, #0]
 801d014:	884a      	ldrh	r2, [r1, #2]
 801d016:	88c4      	ldrh	r4, [r0, #6]
 801d018:	4422      	add	r2, r4
 801d01a:	804a      	strh	r2, [r1, #2]
 801d01c:	6940      	ldr	r0, [r0, #20]
 801d01e:	b120      	cbz	r0, 801d02a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801d020:	6803      	ldr	r3, [r0, #0]
 801d022:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d028:	4718      	bx	r3
 801d02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d02e:	4770      	bx	lr

0801d030 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d030:	b570      	push	{r4, r5, r6, lr}
 801d032:	8882      	ldrh	r2, [r0, #4]
 801d034:	460c      	mov	r4, r1
 801d036:	880b      	ldrh	r3, [r1, #0]
 801d038:	4605      	mov	r5, r0
 801d03a:	4413      	add	r3, r2
 801d03c:	800b      	strh	r3, [r1, #0]
 801d03e:	884b      	ldrh	r3, [r1, #2]
 801d040:	88c2      	ldrh	r2, [r0, #6]
 801d042:	4413      	add	r3, r2
 801d044:	804b      	strh	r3, [r1, #2]
 801d046:	1d01      	adds	r1, r0, #4
 801d048:	4620      	mov	r0, r4
 801d04a:	f7fa f8cf 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 801d04e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d052:	2b00      	cmp	r3, #0
 801d054:	dd0b      	ble.n	801d06e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d056:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	dd07      	ble.n	801d06e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d05e:	6968      	ldr	r0, [r5, #20]
 801d060:	b128      	cbz	r0, 801d06e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d062:	6803      	ldr	r3, [r0, #0]
 801d064:	4621      	mov	r1, r4
 801d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d06c:	4718      	bx	r3
 801d06e:	bd70      	pop	{r4, r5, r6, pc}

0801d070 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d070:	b570      	push	{r4, r5, r6, lr}
 801d072:	8882      	ldrh	r2, [r0, #4]
 801d074:	460c      	mov	r4, r1
 801d076:	880b      	ldrh	r3, [r1, #0]
 801d078:	4605      	mov	r5, r0
 801d07a:	4413      	add	r3, r2
 801d07c:	800b      	strh	r3, [r1, #0]
 801d07e:	884b      	ldrh	r3, [r1, #2]
 801d080:	88c2      	ldrh	r2, [r0, #6]
 801d082:	4413      	add	r3, r2
 801d084:	804b      	strh	r3, [r1, #2]
 801d086:	1d01      	adds	r1, r0, #4
 801d088:	4620      	mov	r0, r4
 801d08a:	f7fa f8af 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 801d08e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d092:	2b00      	cmp	r3, #0
 801d094:	dd18      	ble.n	801d0c8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801d096:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	dd14      	ble.n	801d0c8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801d09e:	6968      	ldr	r0, [r5, #20]
 801d0a0:	b128      	cbz	r0, 801d0ae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801d0a2:	6803      	ldr	r3, [r0, #0]
 801d0a4:	4621      	mov	r1, r4
 801d0a6:	691b      	ldr	r3, [r3, #16]
 801d0a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0ac:	4718      	bx	r3
 801d0ae:	4b07      	ldr	r3, [pc, #28]	; (801d0cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	3304      	adds	r3, #4
 801d0b4:	429d      	cmp	r5, r3
 801d0b6:	d107      	bne.n	801d0c8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801d0b8:	f7fe fefa 	bl	801beb0 <_ZN8touchgfx11Application11getInstanceEv>
 801d0bc:	6821      	ldr	r1, [r4, #0]
 801d0be:	6862      	ldr	r2, [r4, #4]
 801d0c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0c4:	f7ff b862 	b.w	801c18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801d0c8:	bd70      	pop	{r4, r5, r6, pc}
 801d0ca:	bf00      	nop
 801d0cc:	20016ecc 	.word	0x20016ecc

0801d0d0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801d0d0:	b570      	push	{r4, r5, r6, lr}
 801d0d2:	4604      	mov	r4, r0
 801d0d4:	4616      	mov	r6, r2
 801d0d6:	460d      	mov	r5, r1
 801d0d8:	b901      	cbnz	r1, 801d0dc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801d0da:	b192      	cbz	r2, 801d102 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801d0dc:	6823      	ldr	r3, [r4, #0]
 801d0de:	4620      	mov	r0, r4
 801d0e0:	699b      	ldr	r3, [r3, #24]
 801d0e2:	4798      	blx	r3
 801d0e4:	88e2      	ldrh	r2, [r4, #6]
 801d0e6:	88a1      	ldrh	r1, [r4, #4]
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	4432      	add	r2, r6
 801d0ec:	4429      	add	r1, r5
 801d0ee:	b212      	sxth	r2, r2
 801d0f0:	b209      	sxth	r1, r1
 801d0f2:	f7e6 fca8 	bl	8003a46 <_ZN8touchgfx8Drawable5setXYEss>
 801d0f6:	6823      	ldr	r3, [r4, #0]
 801d0f8:	4620      	mov	r0, r4
 801d0fa:	699b      	ldr	r3, [r3, #24]
 801d0fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d100:	4718      	bx	r3
 801d102:	bd70      	pop	{r4, r5, r6, pc}

0801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801d104:	b510      	push	{r4, lr}
 801d106:	2300      	movs	r3, #0
 801d108:	4604      	mov	r4, r0
 801d10a:	4608      	mov	r0, r1
 801d10c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801d110:	8023      	strh	r3, [r4, #0]
 801d112:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d116:	8063      	strh	r3, [r4, #2]
 801d118:	6803      	ldr	r3, [r0, #0]
 801d11a:	80a1      	strh	r1, [r4, #4]
 801d11c:	4621      	mov	r1, r4
 801d11e:	80e2      	strh	r2, [r4, #6]
 801d120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d122:	4798      	blx	r3
 801d124:	4620      	mov	r0, r4
 801d126:	bd10      	pop	{r4, pc}

0801d128 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801d128:	b530      	push	{r4, r5, lr}
 801d12a:	8083      	strh	r3, [r0, #4]
 801d12c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d130:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801d134:	80c3      	strh	r3, [r0, #6]
 801d136:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801d13a:	6141      	str	r1, [r0, #20]
 801d13c:	7203      	strb	r3, [r0, #8]
 801d13e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d142:	8302      	strh	r2, [r0, #24]
 801d144:	7243      	strb	r3, [r0, #9]
 801d146:	7a83      	ldrb	r3, [r0, #10]
 801d148:	f365 0306 	bfi	r3, r5, #0, #7
 801d14c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801d150:	f365 13c7 	bfi	r3, r5, #7, #1
 801d154:	7283      	strb	r3, [r0, #10]
 801d156:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801d15a:	72c3      	strb	r3, [r0, #11]
 801d15c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801d160:	7303      	strb	r3, [r0, #12]
 801d162:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801d166:	81c3      	strh	r3, [r0, #14]
 801d168:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801d16c:	8203      	strh	r3, [r0, #16]
 801d16e:	4b01      	ldr	r3, [pc, #4]	; (801d174 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801d170:	6003      	str	r3, [r0, #0]
 801d172:	bd30      	pop	{r4, r5, pc}
 801d174:	08031340 	.word	0x08031340

0801d178 <_ZNK8touchgfx9ConstFont4findEt>:
 801d178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d17a:	6944      	ldr	r4, [r0, #20]
 801d17c:	b3bc      	cbz	r4, 801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d17e:	88a3      	ldrh	r3, [r4, #4]
 801d180:	8b02      	ldrh	r2, [r0, #24]
 801d182:	1acb      	subs	r3, r1, r3
 801d184:	f102 32ff 	add.w	r2, r2, #4294967295
 801d188:	d431      	bmi.n	801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d18a:	4293      	cmp	r3, r2
 801d18c:	dd0c      	ble.n	801d1a8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801d18e:	230e      	movs	r3, #14
 801d190:	fb03 4302 	mla	r3, r3, r2, r4
 801d194:	889b      	ldrh	r3, [r3, #4]
 801d196:	1a5b      	subs	r3, r3, r1
 801d198:	1ad3      	subs	r3, r2, r3
 801d19a:	429a      	cmp	r2, r3
 801d19c:	db27      	blt.n	801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	bfbc      	itt	lt
 801d1a2:	2302      	movlt	r3, #2
 801d1a4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801d1a8:	2500      	movs	r5, #0
 801d1aa:	260e      	movs	r6, #14
 801d1ac:	4295      	cmp	r5, r2
 801d1ae:	dc1e      	bgt.n	801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1b0:	fb06 4003 	mla	r0, r6, r3, r4
 801d1b4:	8887      	ldrh	r7, [r0, #4]
 801d1b6:	42b9      	cmp	r1, r7
 801d1b8:	d01a      	beq.n	801d1f0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801d1ba:	d20d      	bcs.n	801d1d8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801d1bc:	1e5a      	subs	r2, r3, #1
 801d1be:	4295      	cmp	r5, r2
 801d1c0:	dc15      	bgt.n	801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1c2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801d1c6:	1a5b      	subs	r3, r3, r1
 801d1c8:	1ad3      	subs	r3, r2, r3
 801d1ca:	429a      	cmp	r2, r3
 801d1cc:	db0f      	blt.n	801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1ce:	429d      	cmp	r5, r3
 801d1d0:	ddec      	ble.n	801d1ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d1d2:	1953      	adds	r3, r2, r5
 801d1d4:	105b      	asrs	r3, r3, #1
 801d1d6:	e7e9      	b.n	801d1ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d1d8:	1c5d      	adds	r5, r3, #1
 801d1da:	42aa      	cmp	r2, r5
 801d1dc:	db07      	blt.n	801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1de:	8a43      	ldrh	r3, [r0, #18]
 801d1e0:	1acb      	subs	r3, r1, r3
 801d1e2:	442b      	add	r3, r5
 801d1e4:	429d      	cmp	r5, r3
 801d1e6:	dc02      	bgt.n	801d1ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1e8:	429a      	cmp	r2, r3
 801d1ea:	dadf      	bge.n	801d1ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d1ec:	e7f1      	b.n	801d1d2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801d1ee:	2000      	movs	r0, #0
 801d1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d1f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1f4:	4604      	mov	r4, r0
 801d1f6:	4617      	mov	r7, r2
 801d1f8:	461e      	mov	r6, r3
 801d1fa:	b911      	cbnz	r1, 801d202 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d1fc:	2500      	movs	r5, #0
 801d1fe:	4628      	mov	r0, r5
 801d200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d202:	290a      	cmp	r1, #10
 801d204:	d0fa      	beq.n	801d1fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d206:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d20a:	4291      	cmp	r1, r2
 801d20c:	d0f6      	beq.n	801d1fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d20e:	f242 020b 	movw	r2, #8203	; 0x200b
 801d212:	4291      	cmp	r1, r2
 801d214:	d0f2      	beq.n	801d1fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d216:	f7ff ffaf 	bl	801d178 <_ZNK8touchgfx9ConstFont4findEt>
 801d21a:	4605      	mov	r5, r0
 801d21c:	b950      	cbnz	r0, 801d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801d21e:	6823      	ldr	r3, [r4, #0]
 801d220:	4620      	mov	r0, r4
 801d222:	691b      	ldr	r3, [r3, #16]
 801d224:	4798      	blx	r3
 801d226:	4601      	mov	r1, r0
 801d228:	4620      	mov	r0, r4
 801d22a:	f7ff ffa5 	bl	801d178 <_ZNK8touchgfx9ConstFont4findEt>
 801d22e:	4605      	mov	r5, r0
 801d230:	2800      	cmp	r0, #0
 801d232:	d0e3      	beq.n	801d1fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d234:	6823      	ldr	r3, [r4, #0]
 801d236:	4629      	mov	r1, r5
 801d238:	4620      	mov	r0, r4
 801d23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d23c:	4798      	blx	r3
 801d23e:	6038      	str	r0, [r7, #0]
 801d240:	6823      	ldr	r3, [r4, #0]
 801d242:	4620      	mov	r0, r4
 801d244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d246:	4798      	blx	r3
 801d248:	7030      	strb	r0, [r6, #0]
 801d24a:	e7d8      	b.n	801d1fe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801d24c <_ZN8touchgfx4clzuEm>:
 801d24c:	4603      	mov	r3, r0
 801d24e:	b1c8      	cbz	r0, 801d284 <_ZN8touchgfx4clzuEm+0x38>
 801d250:	0c02      	lsrs	r2, r0, #16
 801d252:	0412      	lsls	r2, r2, #16
 801d254:	b9a2      	cbnz	r2, 801d280 <_ZN8touchgfx4clzuEm+0x34>
 801d256:	0403      	lsls	r3, r0, #16
 801d258:	2010      	movs	r0, #16
 801d25a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d25e:	bf04      	itt	eq
 801d260:	021b      	lsleq	r3, r3, #8
 801d262:	3008      	addeq	r0, #8
 801d264:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d268:	bf04      	itt	eq
 801d26a:	011b      	lsleq	r3, r3, #4
 801d26c:	3004      	addeq	r0, #4
 801d26e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d272:	bf04      	itt	eq
 801d274:	009b      	lsleq	r3, r3, #2
 801d276:	3002      	addeq	r0, #2
 801d278:	2b00      	cmp	r3, #0
 801d27a:	db04      	blt.n	801d286 <_ZN8touchgfx4clzuEm+0x3a>
 801d27c:	3001      	adds	r0, #1
 801d27e:	4770      	bx	lr
 801d280:	2000      	movs	r0, #0
 801d282:	e7ea      	b.n	801d25a <_ZN8touchgfx4clzuEm+0xe>
 801d284:	2020      	movs	r0, #32
 801d286:	4770      	bx	lr

0801d288 <_ZN8touchgfx7muldivuEmmmRm>:
 801d288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d28c:	4680      	mov	r8, r0
 801d28e:	460f      	mov	r7, r1
 801d290:	4615      	mov	r5, r2
 801d292:	461e      	mov	r6, r3
 801d294:	f7ff ffda 	bl	801d24c <_ZN8touchgfx4clzuEm>
 801d298:	b998      	cbnz	r0, 801d2c2 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801d29a:	4608      	mov	r0, r1
 801d29c:	f7ff ffd6 	bl	801d24c <_ZN8touchgfx4clzuEm>
 801d2a0:	2800      	cmp	r0, #0
 801d2a2:	dd08      	ble.n	801d2b6 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801d2a4:	4633      	mov	r3, r6
 801d2a6:	462a      	mov	r2, r5
 801d2a8:	4641      	mov	r1, r8
 801d2aa:	4638      	mov	r0, r7
 801d2ac:	f7ff ffec 	bl	801d288 <_ZN8touchgfx7muldivuEmmmRm>
 801d2b0:	b003      	add	sp, #12
 801d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d2ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d2be:	6033      	str	r3, [r6, #0]
 801d2c0:	e7f6      	b.n	801d2b0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d2c2:	fa31 f900 	lsrs.w	r9, r1, r0
 801d2c6:	fb01 f308 	mul.w	r3, r1, r8
 801d2ca:	d105      	bne.n	801d2d8 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801d2cc:	fbb3 f0f5 	udiv	r0, r3, r5
 801d2d0:	fb05 3510 	mls	r5, r5, r0, r3
 801d2d4:	6035      	str	r5, [r6, #0]
 801d2d6:	e7eb      	b.n	801d2b0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d2d8:	2301      	movs	r3, #1
 801d2da:	fa08 fb00 	lsl.w	fp, r8, r0
 801d2de:	462a      	mov	r2, r5
 801d2e0:	4641      	mov	r1, r8
 801d2e2:	fa03 f000 	lsl.w	r0, r3, r0
 801d2e6:	4633      	mov	r3, r6
 801d2e8:	fbbb faf5 	udiv	sl, fp, r5
 801d2ec:	3801      	subs	r0, #1
 801d2ee:	fb09 f40a 	mul.w	r4, r9, sl
 801d2f2:	4038      	ands	r0, r7
 801d2f4:	f7ff ffc8 	bl	801d288 <_ZN8touchgfx7muldivuEmmmRm>
 801d2f8:	462a      	mov	r2, r5
 801d2fa:	4607      	mov	r7, r0
 801d2fc:	ab01      	add	r3, sp, #4
 801d2fe:	fb05 b11a 	mls	r1, r5, sl, fp
 801d302:	4648      	mov	r0, r9
 801d304:	f7ff ffc0 	bl	801d288 <_ZN8touchgfx7muldivuEmmmRm>
 801d308:	9b01      	ldr	r3, [sp, #4]
 801d30a:	6832      	ldr	r2, [r6, #0]
 801d30c:	441a      	add	r2, r3
 801d30e:	fbb2 f3f5 	udiv	r3, r2, r5
 801d312:	441c      	add	r4, r3
 801d314:	fb05 2513 	mls	r5, r5, r3, r2
 801d318:	443c      	add	r4, r7
 801d31a:	4420      	add	r0, r4
 801d31c:	e7da      	b.n	801d2d4 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801d31e <_ZN8touchgfx6muldivElllRl>:
 801d31e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d320:	2800      	cmp	r0, #0
 801d322:	461e      	mov	r6, r3
 801d324:	bfba      	itte	lt
 801d326:	4240      	neglt	r0, r0
 801d328:	f04f 34ff 	movlt.w	r4, #4294967295
 801d32c:	2401      	movge	r4, #1
 801d32e:	2900      	cmp	r1, #0
 801d330:	bfbc      	itt	lt
 801d332:	4249      	neglt	r1, r1
 801d334:	4264      	neglt	r4, r4
 801d336:	2a00      	cmp	r2, #0
 801d338:	bfb6      	itet	lt
 801d33a:	4265      	neglt	r5, r4
 801d33c:	4625      	movge	r5, r4
 801d33e:	4252      	neglt	r2, r2
 801d340:	4288      	cmp	r0, r1
 801d342:	bfc2      	ittt	gt
 801d344:	4603      	movgt	r3, r0
 801d346:	4608      	movgt	r0, r1
 801d348:	4619      	movgt	r1, r3
 801d34a:	ab01      	add	r3, sp, #4
 801d34c:	f7ff ff9c 	bl	801d288 <_ZN8touchgfx7muldivuEmmmRm>
 801d350:	9b01      	ldr	r3, [sp, #4]
 801d352:	4368      	muls	r0, r5
 801d354:	435c      	muls	r4, r3
 801d356:	6034      	str	r4, [r6, #0]
 801d358:	b002      	add	sp, #8
 801d35a:	bd70      	pop	{r4, r5, r6, pc}

0801d35c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801d35c:	2000      	movs	r0, #0
 801d35e:	4770      	bx	lr

0801d360 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801d360:	2001      	movs	r0, #1
 801d362:	4770      	bx	lr

0801d364 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801d364:	2002      	movs	r0, #2
 801d366:	4770      	bx	lr

0801d368 <_ZN8touchgfx6ScreenD1Ev>:
 801d368:	4770      	bx	lr

0801d36a <_ZN8touchgfx12GestureEventD1Ev>:
 801d36a:	4770      	bx	lr

0801d36c <_ZN8touchgfx9DragEventD1Ev>:
 801d36c:	4770      	bx	lr

0801d36e <_ZN8touchgfx10ClickEventD1Ev>:
 801d36e:	4770      	bx	lr

0801d370 <_ZN8touchgfx10ClickEventD0Ev>:
 801d370:	b510      	push	{r4, lr}
 801d372:	4604      	mov	r4, r0
 801d374:	210c      	movs	r1, #12
 801d376:	f00d ffd0 	bl	802b31a <_ZdlPvj>
 801d37a:	4620      	mov	r0, r4
 801d37c:	bd10      	pop	{r4, pc}

0801d37e <_ZN8touchgfx9DragEventD0Ev>:
 801d37e:	b510      	push	{r4, lr}
 801d380:	4604      	mov	r4, r0
 801d382:	2110      	movs	r1, #16
 801d384:	f00d ffc9 	bl	802b31a <_ZdlPvj>
 801d388:	4620      	mov	r0, r4
 801d38a:	bd10      	pop	{r4, pc}

0801d38c <_ZN8touchgfx12GestureEventD0Ev>:
 801d38c:	b510      	push	{r4, lr}
 801d38e:	4604      	mov	r4, r0
 801d390:	210c      	movs	r1, #12
 801d392:	f00d ffc2 	bl	802b31a <_ZdlPvj>
 801d396:	4620      	mov	r0, r4
 801d398:	bd10      	pop	{r4, pc}

0801d39a <_ZN8touchgfx6ScreenD0Ev>:
 801d39a:	b510      	push	{r4, lr}
 801d39c:	4604      	mov	r4, r0
 801d39e:	213c      	movs	r1, #60	; 0x3c
 801d3a0:	f00d ffbb 	bl	802b31a <_ZdlPvj>
 801d3a4:	4620      	mov	r0, r4
 801d3a6:	bd10      	pop	{r4, pc}

0801d3a8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d3a8:	b530      	push	{r4, r5, lr}
 801d3aa:	460d      	mov	r5, r1
 801d3ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d3ae:	b087      	sub	sp, #28
 801d3b0:	4604      	mov	r4, r0
 801d3b2:	b301      	cbz	r1, 801d3f6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d3b4:	a801      	add	r0, sp, #4
 801d3b6:	f7ff fea5 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d3ba:	892a      	ldrh	r2, [r5, #8]
 801d3bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d3c0:	7928      	ldrb	r0, [r5, #4]
 801d3c2:	1ad2      	subs	r2, r2, r3
 801d3c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d3c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d3ca:	441a      	add	r2, r3
 801d3cc:	896b      	ldrh	r3, [r5, #10]
 801d3ce:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d3d2:	f88d 0010 	strb.w	r0, [sp, #16]
 801d3d6:	1b5b      	subs	r3, r3, r5
 801d3d8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d3da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d3dc:	442b      	add	r3, r5
 801d3de:	4d07      	ldr	r5, [pc, #28]	; (801d3fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d3e0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d3e4:	a903      	add	r1, sp, #12
 801d3e6:	9503      	str	r5, [sp, #12]
 801d3e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d3ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d3f0:	6803      	ldr	r3, [r0, #0]
 801d3f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d3f4:	4798      	blx	r3
 801d3f6:	b007      	add	sp, #28
 801d3f8:	bd30      	pop	{r4, r5, pc}
 801d3fa:	bf00      	nop
 801d3fc:	080313c8 	.word	0x080313c8

0801d400 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d404:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d406:	b08a      	sub	sp, #40	; 0x28
 801d408:	4604      	mov	r4, r0
 801d40a:	460d      	mov	r5, r1
 801d40c:	b113      	cbz	r3, 801d414 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d40e:	790b      	ldrb	r3, [r1, #4]
 801d410:	2b00      	cmp	r3, #0
 801d412:	d044      	beq.n	801d49e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d414:	f104 0804 	add.w	r8, r4, #4
 801d418:	a803      	add	r0, sp, #12
 801d41a:	4641      	mov	r1, r8
 801d41c:	f7ff fe72 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d420:	792b      	ldrb	r3, [r5, #4]
 801d422:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d426:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d42a:	b983      	cbnz	r3, 801d44e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d42c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d430:	892a      	ldrh	r2, [r5, #8]
 801d432:	88e9      	ldrh	r1, [r5, #6]
 801d434:	4640      	mov	r0, r8
 801d436:	1b92      	subs	r2, r2, r6
 801d438:	9301      	str	r3, [sp, #4]
 801d43a:	1bc9      	subs	r1, r1, r7
 801d43c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d440:	b212      	sxth	r2, r2
 801d442:	9300      	str	r3, [sp, #0]
 801d444:	b209      	sxth	r1, r1
 801d446:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d44a:	f7f9 fded 	bl	8017028 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d44e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d450:	b329      	cbz	r1, 801d49e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d452:	a805      	add	r0, sp, #20
 801d454:	f7ff fe56 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d458:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d45c:	792b      	ldrb	r3, [r5, #4]
 801d45e:	a907      	add	r1, sp, #28
 801d460:	1abf      	subs	r7, r7, r2
 801d462:	88ea      	ldrh	r2, [r5, #6]
 801d464:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d466:	4417      	add	r7, r2
 801d468:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d46a:	f88d 3020 	strb.w	r3, [sp, #32]
 801d46e:	4417      	add	r7, r2
 801d470:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d474:	1ab6      	subs	r6, r6, r2
 801d476:	892a      	ldrh	r2, [r5, #8]
 801d478:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d47c:	4416      	add	r6, r2
 801d47e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d480:	4416      	add	r6, r2
 801d482:	4a08      	ldr	r2, [pc, #32]	; (801d4a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d484:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d488:	2600      	movs	r6, #0
 801d48a:	9207      	str	r2, [sp, #28]
 801d48c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d490:	6803      	ldr	r3, [r0, #0]
 801d492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d494:	4798      	blx	r3
 801d496:	792b      	ldrb	r3, [r5, #4]
 801d498:	b10b      	cbz	r3, 801d49e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d49a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d49e:	b00a      	add	sp, #40	; 0x28
 801d4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4a4:	080313a0 	.word	0x080313a0

0801d4a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4ac:	460c      	mov	r4, r1
 801d4ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d4b0:	b088      	sub	sp, #32
 801d4b2:	4605      	mov	r5, r0
 801d4b4:	2900      	cmp	r1, #0
 801d4b6:	d06d      	beq.n	801d594 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d4b8:	4668      	mov	r0, sp
 801d4ba:	f7ff fe23 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4be:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d4c0:	88e3      	ldrh	r3, [r4, #6]
 801d4c2:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d4c6:	440b      	add	r3, r1
 801d4c8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d4cc:	b21b      	sxth	r3, r3
 801d4ce:	4543      	cmp	r3, r8
 801d4d0:	db31      	blt.n	801d536 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d4d2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d4d6:	44c4      	add	ip, r8
 801d4d8:	fa0f fc8c 	sxth.w	ip, ip
 801d4dc:	4563      	cmp	r3, ip
 801d4de:	da2a      	bge.n	801d536 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d4e0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d4e2:	8926      	ldrh	r6, [r4, #8]
 801d4e4:	4416      	add	r6, r2
 801d4e6:	b236      	sxth	r6, r6
 801d4e8:	42be      	cmp	r6, r7
 801d4ea:	db24      	blt.n	801d536 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d4ec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d4f0:	4438      	add	r0, r7
 801d4f2:	b200      	sxth	r0, r0
 801d4f4:	4286      	cmp	r6, r0
 801d4f6:	da1e      	bge.n	801d536 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d4f8:	8963      	ldrh	r3, [r4, #10]
 801d4fa:	4419      	add	r1, r3
 801d4fc:	b209      	sxth	r1, r1
 801d4fe:	4541      	cmp	r1, r8
 801d500:	db08      	blt.n	801d514 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d502:	4561      	cmp	r1, ip
 801d504:	da06      	bge.n	801d514 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d506:	89a3      	ldrh	r3, [r4, #12]
 801d508:	441a      	add	r2, r3
 801d50a:	b212      	sxth	r2, r2
 801d50c:	42ba      	cmp	r2, r7
 801d50e:	db01      	blt.n	801d514 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d510:	4282      	cmp	r2, r0
 801d512:	db10      	blt.n	801d536 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d514:	4b21      	ldr	r3, [pc, #132]	; (801d59c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d516:	a904      	add	r1, sp, #16
 801d518:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d51a:	9304      	str	r3, [sp, #16]
 801d51c:	2302      	movs	r3, #2
 801d51e:	f88d 3014 	strb.w	r3, [sp, #20]
 801d522:	2300      	movs	r3, #0
 801d524:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d528:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d52c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d530:	6803      	ldr	r3, [r0, #0]
 801d532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d534:	4798      	blx	r3
 801d536:	1d29      	adds	r1, r5, #4
 801d538:	a802      	add	r0, sp, #8
 801d53a:	f7ff fde3 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d53e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d542:	88e0      	ldrh	r0, [r4, #6]
 801d544:	eba3 0808 	sub.w	r8, r3, r8
 801d548:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d54c:	7921      	ldrb	r1, [r4, #4]
 801d54e:	fa1f f888 	uxth.w	r8, r8
 801d552:	1bdf      	subs	r7, r3, r7
 801d554:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d558:	b2bb      	uxth	r3, r7
 801d55a:	4440      	add	r0, r8
 801d55c:	8922      	ldrh	r2, [r4, #8]
 801d55e:	8967      	ldrh	r7, [r4, #10]
 801d560:	4460      	add	r0, ip
 801d562:	89a4      	ldrh	r4, [r4, #12]
 801d564:	441a      	add	r2, r3
 801d566:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d568:	44b8      	add	r8, r7
 801d56a:	4423      	add	r3, r4
 801d56c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d570:	4432      	add	r2, r6
 801d572:	44e0      	add	r8, ip
 801d574:	4433      	add	r3, r6
 801d576:	4c0a      	ldr	r4, [pc, #40]	; (801d5a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d578:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d57a:	f88d 1014 	strb.w	r1, [sp, #20]
 801d57e:	a904      	add	r1, sp, #16
 801d580:	9404      	str	r4, [sp, #16]
 801d582:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d586:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d58a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d58e:	6803      	ldr	r3, [r0, #0]
 801d590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d592:	4798      	blx	r3
 801d594:	b008      	add	sp, #32
 801d596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d59a:	bf00      	nop
 801d59c:	080313a0 	.word	0x080313a0
 801d5a0:	080313b4 	.word	0x080313b4

0801d5a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d5a6:	4604      	mov	r4, r0
 801d5a8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d5ac:	3201      	adds	r2, #1
 801d5ae:	d112      	bne.n	801d5d6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d5b0:	2500      	movs	r5, #0
 801d5b2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d5b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d5ba:	6803      	ldr	r3, [r0, #0]
 801d5bc:	9500      	str	r5, [sp, #0]
 801d5be:	466d      	mov	r5, sp
 801d5c0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d5c4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d5c8:	4629      	mov	r1, r5
 801d5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5cc:	4798      	blx	r3
 801d5ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d5d2:	e884 0003 	stmia.w	r4, {r0, r1}
 801d5d6:	4620      	mov	r0, r4
 801d5d8:	b003      	add	sp, #12
 801d5da:	bd30      	pop	{r4, r5, pc}

0801d5dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d5dc:	b513      	push	{r0, r1, r4, lr}
 801d5de:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d5e2:	4604      	mov	r4, r0
 801d5e4:	3301      	adds	r3, #1
 801d5e6:	d109      	bne.n	801d5fc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d5e8:	4601      	mov	r1, r0
 801d5ea:	4668      	mov	r0, sp
 801d5ec:	f7ff fd8a 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d5f0:	f8bd 3000 	ldrh.w	r3, [sp]
 801d5f4:	8423      	strh	r3, [r4, #32]
 801d5f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d5fa:	8463      	strh	r3, [r4, #34]	; 0x22
 801d5fc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d600:	b002      	add	sp, #8
 801d602:	bd10      	pop	{r4, pc}

0801d604 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d604:	b513      	push	{r0, r1, r4, lr}
 801d606:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d60a:	4604      	mov	r4, r0
 801d60c:	3301      	adds	r3, #1
 801d60e:	d109      	bne.n	801d624 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d610:	4601      	mov	r1, r0
 801d612:	4668      	mov	r0, sp
 801d614:	f7ff fd76 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d618:	f8bd 3000 	ldrh.w	r3, [sp]
 801d61c:	8423      	strh	r3, [r4, #32]
 801d61e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d622:	8463      	strh	r3, [r4, #34]	; 0x22
 801d624:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d628:	b002      	add	sp, #8
 801d62a:	bd10      	pop	{r4, pc}

0801d62c <_ZN8touchgfx6ScreenC1Ev>:
 801d62c:	b570      	push	{r4, r5, r6, lr}
 801d62e:	4b17      	ldr	r3, [pc, #92]	; (801d68c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d630:	4605      	mov	r5, r0
 801d632:	4a17      	ldr	r2, [pc, #92]	; (801d690 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d634:	2101      	movs	r1, #1
 801d636:	f845 3b04 	str.w	r3, [r5], #4
 801d63a:	2300      	movs	r3, #0
 801d63c:	6042      	str	r2, [r0, #4]
 801d63e:	4604      	mov	r4, r0
 801d640:	8103      	strh	r3, [r0, #8]
 801d642:	8143      	strh	r3, [r0, #10]
 801d644:	8183      	strh	r3, [r0, #12]
 801d646:	81c3      	strh	r3, [r0, #14]
 801d648:	8203      	strh	r3, [r0, #16]
 801d64a:	8243      	strh	r3, [r0, #18]
 801d64c:	8283      	strh	r3, [r0, #20]
 801d64e:	82c3      	strh	r3, [r0, #22]
 801d650:	6203      	str	r3, [r0, #32]
 801d652:	8483      	strh	r3, [r0, #36]	; 0x24
 801d654:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d656:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d65a:	6343      	str	r3, [r0, #52]	; 0x34
 801d65c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d660:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d664:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d668:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d66c:	4b09      	ldr	r3, [pc, #36]	; (801d694 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d66e:	4628      	mov	r0, r5
 801d670:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d674:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801d676:	4a08      	ldr	r2, [pc, #32]	; (801d698 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d678:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d67c:	4798      	blx	r3
 801d67e:	6863      	ldr	r3, [r4, #4]
 801d680:	4628      	mov	r0, r5
 801d682:	4631      	mov	r1, r6
 801d684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d686:	4798      	blx	r3
 801d688:	4620      	mov	r0, r4
 801d68a:	bd70      	pop	{r4, r5, r6, pc}
 801d68c:	080313dc 	.word	0x080313dc
 801d690:	08030e78 	.word	0x08030e78
 801d694:	20016e7e 	.word	0x20016e7e
 801d698:	20016e7c 	.word	0x20016e7c

0801d69c <_ZN8touchgfx6Screen4drawEv>:
 801d69c:	4b09      	ldr	r3, [pc, #36]	; (801d6c4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d69e:	b507      	push	{r0, r1, r2, lr}
 801d6a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d6a4:	2100      	movs	r1, #0
 801d6a6:	4b08      	ldr	r3, [pc, #32]	; (801d6c8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d6a8:	9100      	str	r1, [sp, #0]
 801d6aa:	4669      	mov	r1, sp
 801d6ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d6b0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d6b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d6b8:	6803      	ldr	r3, [r0, #0]
 801d6ba:	689b      	ldr	r3, [r3, #8]
 801d6bc:	4798      	blx	r3
 801d6be:	b003      	add	sp, #12
 801d6c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d6c4:	20016e7c 	.word	0x20016e7c
 801d6c8:	20016e7e 	.word	0x20016e7e

0801d6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d6d4:	b089      	sub	sp, #36	; 0x24
 801d6d6:	4680      	mov	r8, r0
 801d6d8:	460c      	mov	r4, r1
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	4615      	mov	r5, r2
 801d6de:	dd0e      	ble.n	801d6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d6e0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	dd0a      	ble.n	801d6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d6e8:	4628      	mov	r0, r5
 801d6ea:	f7ff ff5b 	bl	801d5a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d6ee:	4621      	mov	r1, r4
 801d6f0:	f7fe faff 	bl	801bcf2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d6f4:	69eb      	ldr	r3, [r5, #28]
 801d6f6:	b928      	cbnz	r0, 801d704 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d6f8:	461d      	mov	r5, r3
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d1f4      	bne.n	801d6e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d6fe:	b009      	add	sp, #36	; 0x24
 801d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d704:	ae04      	add	r6, sp, #16
 801d706:	2b00      	cmp	r3, #0
 801d708:	f000 80b5 	beq.w	801d876 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d70c:	682b      	ldr	r3, [r5, #0]
 801d70e:	4629      	mov	r1, r5
 801d710:	a802      	add	r0, sp, #8
 801d712:	68db      	ldr	r3, [r3, #12]
 801d714:	4798      	blx	r3
 801d716:	4628      	mov	r0, r5
 801d718:	f7ff ff60 	bl	801d5dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d71c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d720:	4407      	add	r7, r0
 801d722:	4628      	mov	r0, r5
 801d724:	f7ff ff6e 	bl	801d604 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d728:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d72c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d730:	b23f      	sxth	r7, r7
 801d732:	4418      	add	r0, r3
 801d734:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d738:	4621      	mov	r1, r4
 801d73a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d73e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d742:	4630      	mov	r0, r6
 801d744:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d748:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d74c:	f7f9 fd4e 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 801d750:	4628      	mov	r0, r5
 801d752:	f7ff ff27 	bl	801d5a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d756:	ab06      	add	r3, sp, #24
 801d758:	4602      	mov	r2, r0
 801d75a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d75e:	e883 0003 	stmia.w	r3, {r0, r1}
 801d762:	4611      	mov	r1, r2
 801d764:	4618      	mov	r0, r3
 801d766:	f7f9 fd41 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 801d76a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d76e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d772:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d776:	4299      	cmp	r1, r3
 801d778:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d77c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d780:	d10b      	bne.n	801d79a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d782:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d786:	4552      	cmp	r2, sl
 801d788:	d107      	bne.n	801d79a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d78a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d78e:	455a      	cmp	r2, fp
 801d790:	d103      	bne.n	801d79a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d792:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d796:	454a      	cmp	r2, r9
 801d798:	d06d      	beq.n	801d876 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d79a:	f1bb 0f00 	cmp.w	fp, #0
 801d79e:	dd65      	ble.n	801d86c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d7a0:	f1b9 0f00 	cmp.w	r9, #0
 801d7a4:	dd62      	ble.n	801d86c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d7a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d7aa:	fa1f f08a 	uxth.w	r0, sl
 801d7ae:	4552      	cmp	r2, sl
 801d7b0:	9000      	str	r0, [sp, #0]
 801d7b2:	da12      	bge.n	801d7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d7b4:	9301      	str	r3, [sp, #4]
 801d7b6:	9b00      	ldr	r3, [sp, #0]
 801d7b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d7bc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d7c0:	1a9a      	subs	r2, r3, r2
 801d7c2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d7c6:	4631      	mov	r1, r6
 801d7c8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d7cc:	4640      	mov	r0, r8
 801d7ce:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d7d2:	69ea      	ldr	r2, [r5, #28]
 801d7d4:	f7ff ff7a 	bl	801d6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d7d8:	9b01      	ldr	r3, [sp, #4]
 801d7da:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d7de:	b29f      	uxth	r7, r3
 801d7e0:	429a      	cmp	r2, r3
 801d7e2:	da0d      	bge.n	801d800 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d7e4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d7e8:	1aba      	subs	r2, r7, r2
 801d7ea:	f8ad a012 	strh.w	sl, [sp, #18]
 801d7ee:	4631      	mov	r1, r6
 801d7f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d7f4:	4640      	mov	r0, r8
 801d7f6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d7fa:	69ea      	ldr	r2, [r5, #28]
 801d7fc:	f7ff ff66 	bl	801d6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d800:	8822      	ldrh	r2, [r4, #0]
 801d802:	445f      	add	r7, fp
 801d804:	88a3      	ldrh	r3, [r4, #4]
 801d806:	b2bf      	uxth	r7, r7
 801d808:	4413      	add	r3, r2
 801d80a:	b23a      	sxth	r2, r7
 801d80c:	b29b      	uxth	r3, r3
 801d80e:	b219      	sxth	r1, r3
 801d810:	4291      	cmp	r1, r2
 801d812:	dd0d      	ble.n	801d830 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d814:	1bdb      	subs	r3, r3, r7
 801d816:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d81a:	f8ad a012 	strh.w	sl, [sp, #18]
 801d81e:	4631      	mov	r1, r6
 801d820:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d824:	4640      	mov	r0, r8
 801d826:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d82a:	69ea      	ldr	r2, [r5, #28]
 801d82c:	f7ff ff4e 	bl	801d6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d830:	88e2      	ldrh	r2, [r4, #6]
 801d832:	8863      	ldrh	r3, [r4, #2]
 801d834:	4413      	add	r3, r2
 801d836:	9a00      	ldr	r2, [sp, #0]
 801d838:	444a      	add	r2, r9
 801d83a:	b29b      	uxth	r3, r3
 801d83c:	fa1f f982 	uxth.w	r9, r2
 801d840:	b219      	sxth	r1, r3
 801d842:	fa0f f289 	sxth.w	r2, r9
 801d846:	428a      	cmp	r2, r1
 801d848:	da15      	bge.n	801d876 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d84a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d84e:	eba3 0309 	sub.w	r3, r3, r9
 801d852:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d856:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d85a:	4631      	mov	r1, r6
 801d85c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d860:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d864:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d868:	69ea      	ldr	r2, [r5, #28]
 801d86a:	e001      	b.n	801d870 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d86c:	69ea      	ldr	r2, [r5, #28]
 801d86e:	4621      	mov	r1, r4
 801d870:	4640      	mov	r0, r8
 801d872:	f7ff ff2b 	bl	801d6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d876:	4628      	mov	r0, r5
 801d878:	f7ff fe94 	bl	801d5a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d87c:	6861      	ldr	r1, [r4, #4]
 801d87e:	4602      	mov	r2, r0
 801d880:	4633      	mov	r3, r6
 801d882:	6820      	ldr	r0, [r4, #0]
 801d884:	c303      	stmia	r3!, {r0, r1}
 801d886:	4611      	mov	r1, r2
 801d888:	4630      	mov	r0, r6
 801d88a:	f7f9 fcaf 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 801d88e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d892:	2b00      	cmp	r3, #0
 801d894:	f77f af33 	ble.w	801d6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d898:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	f77f af2e 	ble.w	801d6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d8a2:	4628      	mov	r0, r5
 801d8a4:	f7ff fe9a 	bl	801d5dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d8a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d8ac:	1a18      	subs	r0, r3, r0
 801d8ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d8b2:	4628      	mov	r0, r5
 801d8b4:	f7ff fea6 	bl	801d604 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d8b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d8bc:	4631      	mov	r1, r6
 801d8be:	1a18      	subs	r0, r3, r0
 801d8c0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d8c4:	4628      	mov	r0, r5
 801d8c6:	682b      	ldr	r3, [r5, #0]
 801d8c8:	689b      	ldr	r3, [r3, #8]
 801d8ca:	4798      	blx	r3
 801d8cc:	e717      	b.n	801d6fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d8ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d8ce:	b570      	push	{r4, r5, r6, lr}
 801d8d0:	1d06      	adds	r6, r0, #4
 801d8d2:	b086      	sub	sp, #24
 801d8d4:	460c      	mov	r4, r1
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	4631      	mov	r1, r6
 801d8da:	4605      	mov	r5, r0
 801d8dc:	a802      	add	r0, sp, #8
 801d8de:	9301      	str	r3, [sp, #4]
 801d8e0:	f7ff fc10 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d8e4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d8e8:	8822      	ldrh	r2, [r4, #0]
 801d8ea:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d8ee:	1ad2      	subs	r2, r2, r3
 801d8f0:	8863      	ldrh	r3, [r4, #2]
 801d8f2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d8f6:	1a5b      	subs	r3, r3, r1
 801d8f8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d8fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d900:	aa01      	add	r2, sp, #4
 801d902:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d906:	4630      	mov	r0, r6
 801d908:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d90c:	a904      	add	r1, sp, #16
 801d90e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d912:	f7f9 fd43 	bl	801739c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d916:	9a01      	ldr	r2, [sp, #4]
 801d918:	b11a      	cbz	r2, 801d922 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d91a:	4621      	mov	r1, r4
 801d91c:	4628      	mov	r0, r5
 801d91e:	f7ff fed5 	bl	801d6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d922:	b006      	add	sp, #24
 801d924:	bd70      	pop	{r4, r5, r6, pc}

0801d926 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d926:	4602      	mov	r2, r0
 801d928:	b530      	push	{r4, r5, lr}
 801d92a:	4604      	mov	r4, r0
 801d92c:	b085      	sub	sp, #20
 801d92e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d932:	460d      	mov	r5, r1
 801d934:	466b      	mov	r3, sp
 801d936:	6851      	ldr	r1, [r2, #4]
 801d938:	c303      	stmia	r3!, {r0, r1}
 801d93a:	4629      	mov	r1, r5
 801d93c:	4668      	mov	r0, sp
 801d93e:	f7f9 fc55 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 801d942:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d946:	b12b      	cbz	r3, 801d954 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d948:	4669      	mov	r1, sp
 801d94a:	4620      	mov	r0, r4
 801d94c:	f7ff ffbf 	bl	801d8ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d950:	b005      	add	sp, #20
 801d952:	bd30      	pop	{r4, r5, pc}
 801d954:	3404      	adds	r4, #4
 801d956:	a802      	add	r0, sp, #8
 801d958:	4621      	mov	r1, r4
 801d95a:	f7ff fbd3 	bl	801d104 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d95e:	f8bd 3000 	ldrh.w	r3, [sp]
 801d962:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d966:	4669      	mov	r1, sp
 801d968:	4620      	mov	r0, r4
 801d96a:	1a9b      	subs	r3, r3, r2
 801d96c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d970:	f8ad 3000 	strh.w	r3, [sp]
 801d974:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d978:	1a9b      	subs	r3, r3, r2
 801d97a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d97e:	f7f9 fcd4 	bl	801732a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d982:	e7e5      	b.n	801d950 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d984 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d984:	460b      	mov	r3, r1
 801d986:	680a      	ldr	r2, [r1, #0]
 801d988:	1d01      	adds	r1, r0, #4
 801d98a:	6992      	ldr	r2, [r2, #24]
 801d98c:	4618      	mov	r0, r3
 801d98e:	4710      	bx	r2

0801d990 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801d990:	4298      	cmp	r0, r3
 801d992:	d200      	bcs.n	801d996 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801d994:	b913      	cbnz	r3, 801d99c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801d996:	440a      	add	r2, r1
 801d998:	b210      	sxth	r0, r2
 801d99a:	4770      	bx	lr
 801d99c:	ee07 2a90 	vmov	s15, r2
 801d9a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d9a4:	ee07 0a90 	vmov	s15, r0
 801d9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d9b0:	ee07 3a10 	vmov	s14, r3
 801d9b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801d9b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d9bc:	ee07 1a90 	vmov	s15, r1
 801d9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d9c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d9c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d9cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9d4:	bfcc      	ite	gt
 801d9d6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d9da:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d9de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d9e2:	ee17 3a90 	vmov	r3, s15
 801d9e6:	b218      	sxth	r0, r3
 801d9e8:	4770      	bx	lr

0801d9ea <_ZN8touchgfx12TextProviderC1Ev>:
 801d9ea:	b538      	push	{r3, r4, r5, lr}
 801d9ec:	2500      	movs	r5, #0
 801d9ee:	2302      	movs	r3, #2
 801d9f0:	4604      	mov	r4, r0
 801d9f2:	220e      	movs	r2, #14
 801d9f4:	7403      	strb	r3, [r0, #16]
 801d9f6:	4629      	mov	r1, r5
 801d9f8:	6145      	str	r5, [r0, #20]
 801d9fa:	7605      	strb	r5, [r0, #24]
 801d9fc:	83c5      	strh	r5, [r0, #30]
 801d9fe:	8405      	strh	r5, [r0, #32]
 801da00:	86c5      	strh	r5, [r0, #54]	; 0x36
 801da02:	8705      	strh	r5, [r0, #56]	; 0x38
 801da04:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801da06:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801da0a:	e9c0 5500 	strd	r5, r5, [r0]
 801da0e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801da12:	304c      	adds	r0, #76	; 0x4c
 801da14:	f00d fd40 	bl	802b498 <memset>
 801da18:	2301      	movs	r3, #1
 801da1a:	4620      	mov	r0, r4
 801da1c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801da20:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801da24:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801da28:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801da2c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801da30:	f7e6 fb34 	bl	800409c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801da34:	4620      	mov	r0, r4
 801da36:	bd38      	pop	{r3, r4, r5, pc}

0801da38 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801da38:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801da3a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801da3e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801da40:	fab0 f080 	clz	r0, r0
 801da44:	0940      	lsrs	r0, r0, #5
 801da46:	4770      	bx	lr

0801da48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801da48:	b530      	push	{r4, r5, lr}
 801da4a:	2500      	movs	r5, #0
 801da4c:	2401      	movs	r4, #1
 801da4e:	6843      	ldr	r3, [r0, #4]
 801da50:	b913      	cbnz	r3, 801da58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801da52:	6803      	ldr	r3, [r0, #0]
 801da54:	b313      	cbz	r3, 801da9c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801da56:	6043      	str	r3, [r0, #4]
 801da58:	7e03      	ldrb	r3, [r0, #24]
 801da5a:	b143      	cbz	r3, 801da6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801da5c:	6943      	ldr	r3, [r0, #20]
 801da5e:	b12b      	cbz	r3, 801da6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801da60:	881a      	ldrh	r2, [r3, #0]
 801da62:	b11a      	cbz	r2, 801da6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801da64:	1c9a      	adds	r2, r3, #2
 801da66:	6142      	str	r2, [r0, #20]
 801da68:	8818      	ldrh	r0, [r3, #0]
 801da6a:	bd30      	pop	{r4, r5, pc}
 801da6c:	7605      	strb	r5, [r0, #24]
 801da6e:	6843      	ldr	r3, [r0, #4]
 801da70:	8819      	ldrh	r1, [r3, #0]
 801da72:	b199      	cbz	r1, 801da9c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801da74:	1c9a      	adds	r2, r3, #2
 801da76:	2902      	cmp	r1, #2
 801da78:	6042      	str	r2, [r0, #4]
 801da7a:	d1f5      	bne.n	801da68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801da7c:	7c03      	ldrb	r3, [r0, #16]
 801da7e:	2b01      	cmp	r3, #1
 801da80:	d8e5      	bhi.n	801da4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da82:	1c5a      	adds	r2, r3, #1
 801da84:	3302      	adds	r3, #2
 801da86:	7402      	strb	r2, [r0, #16]
 801da88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801da8c:	6143      	str	r3, [r0, #20]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d0dd      	beq.n	801da4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da92:	881b      	ldrh	r3, [r3, #0]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d0da      	beq.n	801da4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da98:	7604      	strb	r4, [r0, #24]
 801da9a:	e7d8      	b.n	801da4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da9c:	2000      	movs	r0, #0
 801da9e:	e7e4      	b.n	801da6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801daa0:	6001      	str	r1, [r0, #0]
 801daa2:	2100      	movs	r1, #0
 801daa4:	b430      	push	{r4, r5}
 801daa6:	6041      	str	r1, [r0, #4]
 801daa8:	6815      	ldr	r5, [r2, #0]
 801daaa:	6085      	str	r5, [r0, #8]
 801daac:	6852      	ldr	r2, [r2, #4]
 801daae:	6443      	str	r3, [r0, #68]	; 0x44
 801dab0:	9b02      	ldr	r3, [sp, #8]
 801dab2:	60c2      	str	r2, [r0, #12]
 801dab4:	7401      	strb	r1, [r0, #16]
 801dab6:	6141      	str	r1, [r0, #20]
 801dab8:	7601      	strb	r1, [r0, #24]
 801daba:	8701      	strh	r1, [r0, #56]	; 0x38
 801dabc:	8401      	strh	r1, [r0, #32]
 801dabe:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801dac2:	6483      	str	r3, [r0, #72]	; 0x48
 801dac4:	bc30      	pop	{r4, r5}
 801dac6:	f7e6 bae9 	b.w	800409c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801daca <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801daca:	b408      	push	{r3}
 801dacc:	b510      	push	{r4, lr}
 801dace:	b085      	sub	sp, #20
 801dad0:	ac07      	add	r4, sp, #28
 801dad2:	f854 3b04 	ldr.w	r3, [r4], #4
 801dad6:	9300      	str	r3, [sp, #0]
 801dad8:	4613      	mov	r3, r2
 801dada:	4622      	mov	r2, r4
 801dadc:	9403      	str	r4, [sp, #12]
 801dade:	f7ff ffdf 	bl	801daa0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801dae2:	b005      	add	sp, #20
 801dae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dae8:	b001      	add	sp, #4
 801daea:	4770      	bx	lr

0801daec <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801daec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801daee:	4605      	mov	r5, r0
 801daf0:	4608      	mov	r0, r1
 801daf2:	b1f1      	cbz	r1, 801db32 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801daf4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801daf8:	460b      	mov	r3, r1
 801dafa:	f101 0708 	add.w	r7, r1, #8
 801dafe:	4622      	mov	r2, r4
 801db00:	6818      	ldr	r0, [r3, #0]
 801db02:	3308      	adds	r3, #8
 801db04:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801db08:	4626      	mov	r6, r4
 801db0a:	42bb      	cmp	r3, r7
 801db0c:	c603      	stmia	r6!, {r0, r1}
 801db0e:	4634      	mov	r4, r6
 801db10:	d1f6      	bne.n	801db00 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801db12:	6818      	ldr	r0, [r3, #0]
 801db14:	6030      	str	r0, [r6, #0]
 801db16:	4610      	mov	r0, r2
 801db18:	889b      	ldrh	r3, [r3, #4]
 801db1a:	80b3      	strh	r3, [r6, #4]
 801db1c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801db20:	015b      	lsls	r3, r3, #5
 801db22:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801db26:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801db2a:	430b      	orrs	r3, r1
 801db2c:	425b      	negs	r3, r3
 801db2e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801db32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801db34 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801db34:	b538      	push	{r3, r4, r5, lr}
 801db36:	460c      	mov	r4, r1
 801db38:	6811      	ldr	r1, [r2, #0]
 801db3a:	4610      	mov	r0, r2
 801db3c:	68cd      	ldr	r5, [r1, #12]
 801db3e:	4619      	mov	r1, r3
 801db40:	47a8      	blx	r5
 801db42:	2800      	cmp	r0, #0
 801db44:	bf08      	it	eq
 801db46:	4620      	moveq	r0, r4
 801db48:	bd38      	pop	{r3, r4, r5, pc}
	...

0801db4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801db4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db4e:	4604      	mov	r4, r0
 801db50:	4615      	mov	r5, r2
 801db52:	4608      	mov	r0, r1
 801db54:	b93a      	cbnz	r2, 801db66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801db56:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801db5a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801db5e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801db62:	4628      	mov	r0, r5
 801db64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db66:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801db6a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801db6e:	8893      	ldrh	r3, [r2, #4]
 801db70:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801db74:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801db78:	79ee      	ldrb	r6, [r5, #7]
 801db7a:	4316      	orrs	r6, r2
 801db7c:	19da      	adds	r2, r3, r7
 801db7e:	b291      	uxth	r1, r2
 801db80:	b2b7      	uxth	r7, r6
 801db82:	291d      	cmp	r1, #29
 801db84:	d87b      	bhi.n	801dc7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801db86:	2201      	movs	r2, #1
 801db88:	10f6      	asrs	r6, r6, #3
 801db8a:	408a      	lsls	r2, r1
 801db8c:	4974      	ldr	r1, [pc, #464]	; (801dd60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801db8e:	420a      	tst	r2, r1
 801db90:	d12e      	bne.n	801dbf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801db92:	f412 7f60 	tst.w	r2, #896	; 0x380
 801db96:	d072      	beq.n	801dc7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801db98:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801db9c:	462b      	mov	r3, r5
 801db9e:	f105 0e08 	add.w	lr, r5, #8
 801dba2:	4615      	mov	r5, r2
 801dba4:	6818      	ldr	r0, [r3, #0]
 801dba6:	3308      	adds	r3, #8
 801dba8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801dbac:	4694      	mov	ip, r2
 801dbae:	4573      	cmp	r3, lr
 801dbb0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801dbb4:	4662      	mov	r2, ip
 801dbb6:	d1f5      	bne.n	801dba4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801dbb8:	6818      	ldr	r0, [r3, #0]
 801dbba:	f8cc 0000 	str.w	r0, [ip]
 801dbbe:	889b      	ldrh	r3, [r3, #4]
 801dbc0:	f8ac 3004 	strh.w	r3, [ip, #4]
 801dbc4:	b2b3      	uxth	r3, r6
 801dbc6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801dbca:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801dbce:	1aca      	subs	r2, r1, r3
 801dbd0:	1bcf      	subs	r7, r1, r7
 801dbd2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801dbd6:	b292      	uxth	r2, r2
 801dbd8:	1afb      	subs	r3, r7, r3
 801dbda:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801dbde:	10d2      	asrs	r2, r2, #3
 801dbe0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801dbe4:	4302      	orrs	r2, r0
 801dbe6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801dbea:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801dbee:	e7b8      	b.n	801db62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dbf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dbf2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dbf6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801dbf8:	f640 6333 	movw	r3, #3635	; 0xe33
 801dbfc:	4299      	cmp	r1, r3
 801dbfe:	d110      	bne.n	801dc22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801dc00:	6803      	ldr	r3, [r0, #0]
 801dc02:	68db      	ldr	r3, [r3, #12]
 801dc04:	4798      	blx	r3
 801dc06:	7b41      	ldrb	r1, [r0, #13]
 801dc08:	00cb      	lsls	r3, r1, #3
 801dc0a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dc0e:	7a03      	ldrb	r3, [r0, #8]
 801dc10:	0648      	lsls	r0, r1, #25
 801dc12:	ea43 0302 	orr.w	r3, r3, r2
 801dc16:	bf44      	itt	mi
 801dc18:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dc1c:	b21b      	sxthmi	r3, r3
 801dc1e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc22:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801dc26:	462a      	mov	r2, r5
 801dc28:	f105 0c08 	add.w	ip, r5, #8
 801dc2c:	443b      	add	r3, r7
 801dc2e:	4433      	add	r3, r6
 801dc30:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801dc34:	b29b      	uxth	r3, r3
 801dc36:	4635      	mov	r5, r6
 801dc38:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc3c:	6810      	ldr	r0, [r2, #0]
 801dc3e:	3208      	adds	r2, #8
 801dc40:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801dc44:	4637      	mov	r7, r6
 801dc46:	4562      	cmp	r2, ip
 801dc48:	c703      	stmia	r7!, {r0, r1}
 801dc4a:	463e      	mov	r6, r7
 801dc4c:	d1f6      	bne.n	801dc3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801dc4e:	6810      	ldr	r0, [r2, #0]
 801dc50:	6038      	str	r0, [r7, #0]
 801dc52:	8892      	ldrh	r2, [r2, #4]
 801dc54:	80ba      	strh	r2, [r7, #4]
 801dc56:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dc5a:	10db      	asrs	r3, r3, #3
 801dc5c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dc60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dc64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dc68:	4313      	orrs	r3, r2
 801dc6a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801dc6e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dc72:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801dc76:	1a9b      	subs	r3, r3, r2
 801dc78:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801dc7c:	e771      	b.n	801db62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dc7e:	f023 0204 	bic.w	r2, r3, #4
 801dc82:	f640 611b 	movw	r1, #3611	; 0xe1b
 801dc86:	428a      	cmp	r2, r1
 801dc88:	d003      	beq.n	801dc92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801dc8a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801dc8e:	4293      	cmp	r3, r2
 801dc90:	d120      	bne.n	801dcd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801dc92:	3b01      	subs	r3, #1
 801dc94:	4602      	mov	r2, r0
 801dc96:	4629      	mov	r1, r5
 801dc98:	4620      	mov	r0, r4
 801dc9a:	b29b      	uxth	r3, r3
 801dc9c:	f7ff ff4a 	bl	801db34 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dca0:	7b41      	ldrb	r1, [r0, #13]
 801dca2:	00cb      	lsls	r3, r1, #3
 801dca4:	0649      	lsls	r1, r1, #25
 801dca6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dcaa:	7a03      	ldrb	r3, [r0, #8]
 801dcac:	ea43 0302 	orr.w	r3, r3, r2
 801dcb0:	bf44      	itt	mi
 801dcb2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dcb6:	b21b      	sxthmi	r3, r3
 801dcb8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dcbc:	7b6b      	ldrb	r3, [r5, #13]
 801dcbe:	7aaa      	ldrb	r2, [r5, #10]
 801dcc0:	005b      	lsls	r3, r3, #1
 801dcc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dcc6:	4313      	orrs	r3, r2
 801dcc8:	115a      	asrs	r2, r3, #5
 801dcca:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801dcce:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801dcd2:	e035      	b.n	801dd40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801dcd4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801dcd8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801dcdc:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801dce0:	7a2a      	ldrb	r2, [r5, #8]
 801dce2:	ea42 0201 	orr.w	r2, r2, r1
 801dce6:	f640 6109 	movw	r1, #3593	; 0xe09
 801dcea:	bf1c      	itt	ne
 801dcec:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801dcf0:	b212      	sxthne	r2, r2
 801dcf2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801dcf6:	f023 0210 	bic.w	r2, r3, #16
 801dcfa:	428a      	cmp	r2, r1
 801dcfc:	d003      	beq.n	801dd06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801dcfe:	f640 6213 	movw	r2, #3603	; 0xe13
 801dd02:	4293      	cmp	r3, r2
 801dd04:	d129      	bne.n	801dd5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801dd06:	7b6e      	ldrb	r6, [r5, #13]
 801dd08:	4629      	mov	r1, r5
 801dd0a:	0076      	lsls	r6, r6, #1
 801dd0c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801dd10:	7aae      	ldrb	r6, [r5, #10]
 801dd12:	4316      	orrs	r6, r2
 801dd14:	f640 6213 	movw	r2, #3603	; 0xe13
 801dd18:	4293      	cmp	r3, r2
 801dd1a:	4602      	mov	r2, r0
 801dd1c:	4620      	mov	r0, r4
 801dd1e:	bf16      	itet	ne
 801dd20:	f103 33ff 	addne.w	r3, r3, #4294967295
 801dd24:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801dd28:	b29b      	uxthne	r3, r3
 801dd2a:	f7ff ff03 	bl	801db34 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dd2e:	7b43      	ldrb	r3, [r0, #13]
 801dd30:	7a82      	ldrb	r2, [r0, #10]
 801dd32:	005b      	lsls	r3, r3, #1
 801dd34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd38:	4313      	orrs	r3, r2
 801dd3a:	1af6      	subs	r6, r6, r3
 801dd3c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801dd40:	7b69      	ldrb	r1, [r5, #13]
 801dd42:	00cb      	lsls	r3, r1, #3
 801dd44:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd48:	7a2b      	ldrb	r3, [r5, #8]
 801dd4a:	4313      	orrs	r3, r2
 801dd4c:	064a      	lsls	r2, r1, #25
 801dd4e:	bf44      	itt	mi
 801dd50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dd54:	b21b      	sxthmi	r3, r3
 801dd56:	1bdb      	subs	r3, r3, r7
 801dd58:	e747      	b.n	801dbea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801dd5a:	2300      	movs	r3, #0
 801dd5c:	e7b7      	b.n	801dcce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801dd5e:	bf00      	nop
 801dd60:	3fc00079 	.word	0x3fc00079

0801dd64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801dd64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd68:	4604      	mov	r4, r0
 801dd6a:	b942      	cbnz	r2, 801dd7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801dd6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dd70:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801dd74:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801dd78:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801dd7c:	e047      	b.n	801de0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801dd7e:	7b51      	ldrb	r1, [r2, #13]
 801dd80:	8893      	ldrh	r3, [r2, #4]
 801dd82:	010d      	lsls	r5, r1, #4
 801dd84:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801dd88:	79d5      	ldrb	r5, [r2, #7]
 801dd8a:	4305      	orrs	r5, r0
 801dd8c:	2d04      	cmp	r5, #4
 801dd8e:	bfcc      	ite	gt
 801dd90:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801dd94:	f04f 0e01 	movle.w	lr, #1
 801dd98:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801dd9c:	f200 80ab 	bhi.w	801def6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801dda0:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801dda4:	4283      	cmp	r3, r0
 801dda6:	d216      	bcs.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dda8:	f240 605b 	movw	r0, #1627	; 0x65b
 801ddac:	4283      	cmp	r3, r0
 801ddae:	d859      	bhi.n	801de64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ddb0:	f240 6057 	movw	r0, #1623	; 0x657
 801ddb4:	4283      	cmp	r3, r0
 801ddb6:	d20e      	bcs.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ddb8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ddbc:	d24a      	bcs.n	801de54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ddbe:	f240 604e 	movw	r0, #1614	; 0x64e
 801ddc2:	4283      	cmp	r3, r0
 801ddc4:	d207      	bcs.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ddc6:	f240 601a 	movw	r0, #1562	; 0x61a
 801ddca:	4283      	cmp	r3, r0
 801ddcc:	d02a      	beq.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ddce:	d821      	bhi.n	801de14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801ddd0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ddd4:	d35b      	bcc.n	801de8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ddd6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801ddda:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ddde:	f040 80d0 	bne.w	801df82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801dde2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801dde6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ddea:	f040 80ca 	bne.w	801df82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ddee:	00cb      	lsls	r3, r1, #3
 801ddf0:	0649      	lsls	r1, r1, #25
 801ddf2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ddf6:	7a13      	ldrb	r3, [r2, #8]
 801ddf8:	ea43 0300 	orr.w	r3, r3, r0
 801ddfc:	bf44      	itt	mi
 801ddfe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801de02:	b21b      	sxthmi	r3, r3
 801de04:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801de08:	1b5d      	subs	r5, r3, r5
 801de0a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801de0e:	4610      	mov	r0, r2
 801de10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de14:	f240 604b 	movw	r0, #1611	; 0x64b
 801de18:	4283      	cmp	r3, r0
 801de1a:	d338      	bcc.n	801de8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801de1c:	f240 604c 	movw	r0, #1612	; 0x64c
 801de20:	4283      	cmp	r3, r0
 801de22:	d9d8      	bls.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801de24:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801de28:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801de2c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801de30:	f040 80f3 	bne.w	801e01a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801de34:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801de38:	f040 80ef 	bne.w	801e01a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801de3c:	00cb      	lsls	r3, r1, #3
 801de3e:	064e      	lsls	r6, r1, #25
 801de40:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801de44:	7a13      	ldrb	r3, [r2, #8]
 801de46:	ea43 0300 	orr.w	r3, r3, r0
 801de4a:	bf44      	itt	mi
 801de4c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801de50:	b21b      	sxthmi	r3, r3
 801de52:	e7d9      	b.n	801de08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801de54:	f240 6054 	movw	r0, #1620	; 0x654
 801de58:	4283      	cmp	r3, r0
 801de5a:	d8e3      	bhi.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801de5c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801de60:	d9e0      	bls.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801de62:	e7b8      	b.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801de64:	f240 6074 	movw	r0, #1652	; 0x674
 801de68:	4283      	cmp	r3, r0
 801de6a:	d0b4      	beq.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801de6c:	d82d      	bhi.n	801deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801de6e:	f240 605e 	movw	r0, #1630	; 0x65e
 801de72:	4283      	cmp	r3, r0
 801de74:	d804      	bhi.n	801de80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801de76:	f240 605d 	movw	r0, #1629	; 0x65d
 801de7a:	4283      	cmp	r3, r0
 801de7c:	d3d2      	bcc.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801de7e:	e7aa      	b.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801de80:	f240 605f 	movw	r0, #1631	; 0x65f
 801de84:	4283      	cmp	r3, r0
 801de86:	d0cd      	beq.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801de88:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801de8c:	d0a3      	beq.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801de8e:	00cb      	lsls	r3, r1, #3
 801de90:	0649      	lsls	r1, r1, #25
 801de92:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801de96:	7a13      	ldrb	r3, [r2, #8]
 801de98:	ea43 0300 	orr.w	r3, r3, r0
 801de9c:	bf44      	itt	mi
 801de9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dea2:	b21b      	sxthmi	r3, r3
 801dea4:	1b5d      	subs	r5, r3, r5
 801dea6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801deaa:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801deae:	7b53      	ldrb	r3, [r2, #13]
 801deb0:	015b      	lsls	r3, r3, #5
 801deb2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801deb6:	7993      	ldrb	r3, [r2, #6]
 801deb8:	430b      	orrs	r3, r1
 801deba:	2105      	movs	r1, #5
 801debc:	005b      	lsls	r3, r3, #1
 801debe:	fb93 f3f1 	sdiv	r3, r3, r1
 801dec2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801dec6:	440b      	add	r3, r1
 801dec8:	e756      	b.n	801dd78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801deca:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801dece:	4283      	cmp	r3, r0
 801ded0:	d809      	bhi.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801ded2:	f240 60df 	movw	r0, #1759	; 0x6df
 801ded6:	4283      	cmp	r3, r0
 801ded8:	f4bf af7d 	bcs.w	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dedc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801dee0:	2b05      	cmp	r3, #5
 801dee2:	d8d4      	bhi.n	801de8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801dee4:	e777      	b.n	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dee6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801deea:	4283      	cmp	r3, r0
 801deec:	d09a      	beq.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801deee:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801def2:	4283      	cmp	r3, r0
 801def4:	e7ca      	b.n	801de8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801def6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801defa:	d22b      	bcs.n	801df54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801defc:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801df00:	4283      	cmp	r3, r0
 801df02:	d28f      	bcs.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801df04:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801df08:	4283      	cmp	r3, r0
 801df0a:	d816      	bhi.n	801df3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801df0c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801df10:	4283      	cmp	r3, r0
 801df12:	f4bf af60 	bcs.w	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801df16:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801df1a:	4283      	cmp	r3, r0
 801df1c:	d80a      	bhi.n	801df34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801df1e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801df22:	4283      	cmp	r3, r0
 801df24:	f4bf af57 	bcs.w	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801df28:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801df2c:	4283      	cmp	r3, r0
 801df2e:	f43f af79 	beq.w	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801df32:	e7ac      	b.n	801de8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801df34:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801df38:	e7f8      	b.n	801df2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801df3a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801df3e:	4283      	cmp	r3, r0
 801df40:	d802      	bhi.n	801df48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801df42:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801df46:	e798      	b.n	801de7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801df48:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801df4c:	4283      	cmp	r3, r0
 801df4e:	f47f af42 	bne.w	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801df52:	e767      	b.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801df54:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801df58:	4283      	cmp	r3, r0
 801df5a:	f43f af63 	beq.w	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801df5e:	d802      	bhi.n	801df66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801df60:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801df64:	e7f2      	b.n	801df4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801df66:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801df6a:	4283      	cmp	r3, r0
 801df6c:	d805      	bhi.n	801df7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801df6e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801df72:	4283      	cmp	r3, r0
 801df74:	f4ff af2f 	bcc.w	801ddd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801df78:	e754      	b.n	801de24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801df7a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801df7e:	4283      	cmp	r3, r0
 801df80:	e7af      	b.n	801dee2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801df82:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801df86:	4617      	mov	r7, r2
 801df88:	f102 0808 	add.w	r8, r2, #8
 801df8c:	4666      	mov	r6, ip
 801df8e:	6838      	ldr	r0, [r7, #0]
 801df90:	3708      	adds	r7, #8
 801df92:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801df96:	46e6      	mov	lr, ip
 801df98:	4547      	cmp	r7, r8
 801df9a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801df9e:	46f4      	mov	ip, lr
 801dfa0:	d1f5      	bne.n	801df8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801dfa2:	6838      	ldr	r0, [r7, #0]
 801dfa4:	f8ce 0000 	str.w	r0, [lr]
 801dfa8:	88b9      	ldrh	r1, [r7, #4]
 801dfaa:	f8ae 1004 	strh.w	r1, [lr, #4]
 801dfae:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dfb2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dfb6:	d009      	beq.n	801dfcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801dfb8:	7b51      	ldrb	r1, [r2, #13]
 801dfba:	7992      	ldrb	r2, [r2, #6]
 801dfbc:	0149      	lsls	r1, r1, #5
 801dfbe:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dfc2:	4311      	orrs	r1, r2
 801dfc4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dfc8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dfcc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dfd0:	b2ad      	uxth	r5, r5
 801dfd2:	d00d      	beq.n	801dff0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801dfd4:	442b      	add	r3, r5
 801dfd6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dfda:	b29b      	uxth	r3, r3
 801dfdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dfe0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dfe4:	10db      	asrs	r3, r3, #3
 801dfe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dfea:	4313      	orrs	r3, r2
 801dfec:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dff0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dff4:	00cb      	lsls	r3, r1, #3
 801dff6:	064f      	lsls	r7, r1, #25
 801dff8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dffc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e000:	ea43 0302 	orr.w	r3, r3, r2
 801e004:	bf44      	itt	mi
 801e006:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e00a:	b21b      	sxthmi	r3, r3
 801e00c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e010:	1b5b      	subs	r3, r3, r5
 801e012:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801e016:	4632      	mov	r2, r6
 801e018:	e6f9      	b.n	801de0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e01a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801e01e:	4617      	mov	r7, r2
 801e020:	f102 0908 	add.w	r9, r2, #8
 801e024:	4666      	mov	r6, ip
 801e026:	6838      	ldr	r0, [r7, #0]
 801e028:	3708      	adds	r7, #8
 801e02a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801e02e:	46e0      	mov	r8, ip
 801e030:	454f      	cmp	r7, r9
 801e032:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e036:	46c4      	mov	ip, r8
 801e038:	d1f5      	bne.n	801e026 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801e03a:	6838      	ldr	r0, [r7, #0]
 801e03c:	f8c8 0000 	str.w	r0, [r8]
 801e040:	88b9      	ldrh	r1, [r7, #4]
 801e042:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e046:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e04a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e04e:	d009      	beq.n	801e064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801e050:	7b51      	ldrb	r1, [r2, #13]
 801e052:	7992      	ldrb	r2, [r2, #6]
 801e054:	0149      	lsls	r1, r1, #5
 801e056:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e05a:	4311      	orrs	r1, r2
 801e05c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e060:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e064:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e068:	d00e      	beq.n	801e088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801e06a:	eba3 030e 	sub.w	r3, r3, lr
 801e06e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e072:	b29b      	uxth	r3, r3
 801e074:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e078:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e07c:	10db      	asrs	r3, r3, #3
 801e07e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e082:	4313      	orrs	r3, r2
 801e084:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e088:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e08c:	00cb      	lsls	r3, r1, #3
 801e08e:	0648      	lsls	r0, r1, #25
 801e090:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e094:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e098:	ea43 0302 	orr.w	r3, r3, r2
 801e09c:	bf44      	itt	mi
 801e09e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e0a2:	b21b      	sxthmi	r3, r3
 801e0a4:	1b5d      	subs	r5, r3, r5
 801e0a6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e0aa:	e7b4      	b.n	801e016 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0b0:	461e      	mov	r6, r3
 801e0b2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e0b4:	4604      	mov	r4, r0
 801e0b6:	4617      	mov	r7, r2
 801e0b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e0bc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e0c0:	f7e5 ffaa 	bl	8004018 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e0c4:	4605      	mov	r5, r0
 801e0c6:	b918      	cbnz	r0, 801e0d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801e0c8:	6030      	str	r0, [r6, #0]
 801e0ca:	4628      	mov	r0, r5
 801e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0d0:	683b      	ldr	r3, [r7, #0]
 801e0d2:	4601      	mov	r1, r0
 801e0d4:	4638      	mov	r0, r7
 801e0d6:	68db      	ldr	r3, [r3, #12]
 801e0d8:	4798      	blx	r3
 801e0da:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e0de:	4602      	mov	r2, r0
 801e0e0:	6030      	str	r0, [r6, #0]
 801e0e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e0e6:	d213      	bcs.n	801e110 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801e0e8:	4643      	mov	r3, r8
 801e0ea:	4639      	mov	r1, r7
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f7ff fe39 	bl	801dd64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e0f2:	6030      	str	r0, [r6, #0]
 801e0f4:	6833      	ldr	r3, [r6, #0]
 801e0f6:	b143      	cbz	r3, 801e10a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801e0f8:	7b5a      	ldrb	r2, [r3, #13]
 801e0fa:	7a9b      	ldrb	r3, [r3, #10]
 801e0fc:	0052      	lsls	r2, r2, #1
 801e0fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e102:	4313      	orrs	r3, r2
 801e104:	bf0c      	ite	eq
 801e106:	2301      	moveq	r3, #1
 801e108:	2300      	movne	r3, #0
 801e10a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e10e:	e7dc      	b.n	801e0ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801e110:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e114:	b29b      	uxth	r3, r3
 801e116:	2b7f      	cmp	r3, #127	; 0x7f
 801e118:	d804      	bhi.n	801e124 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801e11a:	4639      	mov	r1, r7
 801e11c:	4620      	mov	r0, r4
 801e11e:	f7ff fd15 	bl	801db4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e122:	e7e6      	b.n	801e0f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801e124:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d0e3      	beq.n	801e0f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801e12c:	f640 1302 	movw	r3, #2306	; 0x902
 801e130:	429d      	cmp	r5, r3
 801e132:	d1df      	bne.n	801e0f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801e134:	4601      	mov	r1, r0
 801e136:	4620      	mov	r0, r4
 801e138:	f7ff fcd8 	bl	801daec <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e13c:	e7d9      	b.n	801e0f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801e13e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801e13e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e142:	461e      	mov	r6, r3
 801e144:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e146:	4604      	mov	r4, r0
 801e148:	4617      	mov	r7, r2
 801e14a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e14e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e152:	f7e5 ff61 	bl	8004018 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e156:	4605      	mov	r5, r0
 801e158:	b918      	cbnz	r0, 801e162 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801e15a:	6030      	str	r0, [r6, #0]
 801e15c:	4628      	mov	r0, r5
 801e15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e162:	683b      	ldr	r3, [r7, #0]
 801e164:	4601      	mov	r1, r0
 801e166:	4638      	mov	r0, r7
 801e168:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801e16c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e170:	47c8      	blx	r9
 801e172:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e176:	4602      	mov	r2, r0
 801e178:	6030      	str	r0, [r6, #0]
 801e17a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e17e:	d213      	bcs.n	801e1a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801e180:	4643      	mov	r3, r8
 801e182:	4639      	mov	r1, r7
 801e184:	4620      	mov	r0, r4
 801e186:	f7ff fded 	bl	801dd64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e18a:	6030      	str	r0, [r6, #0]
 801e18c:	6833      	ldr	r3, [r6, #0]
 801e18e:	b143      	cbz	r3, 801e1a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801e190:	7b5a      	ldrb	r2, [r3, #13]
 801e192:	7a9b      	ldrb	r3, [r3, #10]
 801e194:	0052      	lsls	r2, r2, #1
 801e196:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e19a:	4313      	orrs	r3, r2
 801e19c:	bf0c      	ite	eq
 801e19e:	2301      	moveq	r3, #1
 801e1a0:	2300      	movne	r3, #0
 801e1a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e1a6:	e7d9      	b.n	801e15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801e1a8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e1ac:	b29b      	uxth	r3, r3
 801e1ae:	2b7f      	cmp	r3, #127	; 0x7f
 801e1b0:	d804      	bhi.n	801e1bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801e1b2:	4639      	mov	r1, r7
 801e1b4:	4620      	mov	r0, r4
 801e1b6:	f7ff fcc9 	bl	801db4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e1ba:	e7e6      	b.n	801e18a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801e1bc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d0e3      	beq.n	801e18c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801e1c4:	f640 1302 	movw	r3, #2306	; 0x902
 801e1c8:	429d      	cmp	r5, r3
 801e1ca:	d1df      	bne.n	801e18c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801e1cc:	4601      	mov	r1, r0
 801e1ce:	4620      	mov	r0, r4
 801e1d0:	f7ff fc8c 	bl	801daec <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e1d4:	e7d9      	b.n	801e18a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801e1d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801e1d6:	b510      	push	{r4, lr}
 801e1d8:	4604      	mov	r4, r0
 801e1da:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801e1de:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e1e0:	b1e1      	cbz	r1, 801e21c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801e1e2:	2b0a      	cmp	r3, #10
 801e1e4:	d02d      	beq.n	801e242 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801e1e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801e1e8:	3901      	subs	r1, #1
 801e1ea:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801e1ee:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801e1f0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801e1f4:	1c51      	adds	r1, r2, #1
 801e1f6:	b289      	uxth	r1, r1
 801e1f8:	2901      	cmp	r1, #1
 801e1fa:	bf8a      	itet	hi
 801e1fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e200:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801e202:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801e204:	1c5a      	adds	r2, r3, #1
 801e206:	8722      	strh	r2, [r4, #56]	; 0x38
 801e208:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e20a:	4413      	add	r3, r2
 801e20c:	b29b      	uxth	r3, r3
 801e20e:	2b09      	cmp	r3, #9
 801e210:	bf88      	it	hi
 801e212:	3b0a      	subhi	r3, #10
 801e214:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e218:	8458      	strh	r0, [r3, #34]	; 0x22
 801e21a:	e7de      	b.n	801e1da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801e21c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e21e:	2b0a      	cmp	r3, #10
 801e220:	d00f      	beq.n	801e242 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801e222:	4620      	mov	r0, r4
 801e224:	f7ff fc10 	bl	801da48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801e228:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e22a:	1c5a      	adds	r2, r3, #1
 801e22c:	8722      	strh	r2, [r4, #56]	; 0x38
 801e22e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e230:	4413      	add	r3, r2
 801e232:	b29b      	uxth	r3, r3
 801e234:	2b09      	cmp	r3, #9
 801e236:	bf88      	it	hi
 801e238:	3b0a      	subhi	r3, #10
 801e23a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e23e:	8458      	strh	r0, [r3, #34]	; 0x22
 801e240:	e7ec      	b.n	801e21c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801e242:	bd10      	pop	{r4, pc}

0801e244 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801e244:	b538      	push	{r3, r4, r5, lr}
 801e246:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e248:	4604      	mov	r4, r0
 801e24a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801e24e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801e250:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801e252:	3a01      	subs	r2, #1
 801e254:	8702      	strh	r2, [r0, #56]	; 0x38
 801e256:	1c5a      	adds	r2, r3, #1
 801e258:	b292      	uxth	r2, r2
 801e25a:	2a09      	cmp	r2, #9
 801e25c:	bf8a      	itet	hi
 801e25e:	3b09      	subhi	r3, #9
 801e260:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801e262:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801e264:	f7ff ffb7 	bl	801e1d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e268:	8c23      	ldrh	r3, [r4, #32]
 801e26a:	2b01      	cmp	r3, #1
 801e26c:	bf9c      	itt	ls
 801e26e:	3301      	addls	r3, #1
 801e270:	8423      	strhls	r3, [r4, #32]
 801e272:	8be3      	ldrh	r3, [r4, #30]
 801e274:	b90b      	cbnz	r3, 801e27a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801e276:	2302      	movs	r3, #2
 801e278:	83e3      	strh	r3, [r4, #30]
 801e27a:	8be3      	ldrh	r3, [r4, #30]
 801e27c:	4628      	mov	r0, r5
 801e27e:	3b01      	subs	r3, #1
 801e280:	b29b      	uxth	r3, r3
 801e282:	83e3      	strh	r3, [r4, #30]
 801e284:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e288:	8365      	strh	r5, [r4, #26]
 801e28a:	bd38      	pop	{r3, r4, r5, pc}

0801e28c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801e28c:	428a      	cmp	r2, r1
 801e28e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e292:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801e294:	d932      	bls.n	801e2fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801e296:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801e298:	1a54      	subs	r4, r2, r1
 801e29a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801e29e:	19ee      	adds	r6, r5, r7
 801e2a0:	fa1f fe84 	uxth.w	lr, r4
 801e2a4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801e2a8:	3e01      	subs	r6, #1
 801e2aa:	b2b4      	uxth	r4, r6
 801e2ac:	eba4 090e 	sub.w	r9, r4, lr
 801e2b0:	fa1f f989 	uxth.w	r9, r9
 801e2b4:	2c09      	cmp	r4, #9
 801e2b6:	4626      	mov	r6, r4
 801e2b8:	bf88      	it	hi
 801e2ba:	f1a4 060a 	subhi.w	r6, r4, #10
 801e2be:	f1bc 0f00 	cmp.w	ip, #0
 801e2c2:	f104 34ff 	add.w	r4, r4, #4294967295
 801e2c6:	bf08      	it	eq
 801e2c8:	f04f 0c02 	moveq.w	ip, #2
 801e2cc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e2d0:	b2a4      	uxth	r4, r4
 801e2d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e2d6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801e2da:	454c      	cmp	r4, r9
 801e2dc:	fa1f fc8c 	uxth.w	ip, ip
 801e2e0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801e2e4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801e2e8:	d1e4      	bne.n	801e2b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801e2ea:	eba5 050e 	sub.w	r5, r5, lr
 801e2ee:	eb0e 0408 	add.w	r4, lr, r8
 801e2f2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801e2f6:	8705      	strh	r5, [r0, #56]	; 0x38
 801e2f8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801e2fc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801e2fe:	250a      	movs	r5, #10
 801e300:	1a64      	subs	r4, r4, r1
 801e302:	4439      	add	r1, r7
 801e304:	b289      	uxth	r1, r1
 801e306:	8704      	strh	r4, [r0, #56]	; 0x38
 801e308:	2909      	cmp	r1, #9
 801e30a:	bf88      	it	hi
 801e30c:	390a      	subhi	r1, #10
 801e30e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e310:	b18a      	cbz	r2, 801e336 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801e312:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801e314:	3a01      	subs	r2, #1
 801e316:	3101      	adds	r1, #1
 801e318:	b292      	uxth	r2, r2
 801e31a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801e31e:	8701      	strh	r1, [r0, #56]	; 0x38
 801e320:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e322:	b901      	cbnz	r1, 801e326 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801e324:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e326:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e328:	3901      	subs	r1, #1
 801e32a:	b289      	uxth	r1, r1
 801e32c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e32e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e332:	844c      	strh	r4, [r1, #34]	; 0x22
 801e334:	e7ec      	b.n	801e310 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801e336:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e33a:	f7ff bf4c 	b.w	801e1d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801e33e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e33e:	b570      	push	{r4, r5, r6, lr}
 801e340:	2500      	movs	r5, #0
 801e342:	4295      	cmp	r5, r2
 801e344:	d011      	beq.n	801e36a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801e346:	8bc4      	ldrh	r4, [r0, #30]
 801e348:	f831 6b02 	ldrh.w	r6, [r1], #2
 801e34c:	4414      	add	r4, r2
 801e34e:	3c01      	subs	r4, #1
 801e350:	1b64      	subs	r4, r4, r5
 801e352:	b2a4      	uxth	r4, r4
 801e354:	2c01      	cmp	r4, #1
 801e356:	bf88      	it	hi
 801e358:	3c02      	subhi	r4, #2
 801e35a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e35e:	8b64      	ldrh	r4, [r4, #26]
 801e360:	42b4      	cmp	r4, r6
 801e362:	d117      	bne.n	801e394 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801e364:	3501      	adds	r5, #1
 801e366:	b2ad      	uxth	r5, r5
 801e368:	e7eb      	b.n	801e342 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801e36a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e36e:	2400      	movs	r4, #0
 801e370:	4413      	add	r3, r2
 801e372:	b2a2      	uxth	r2, r4
 801e374:	429a      	cmp	r2, r3
 801e376:	da0f      	bge.n	801e398 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801e378:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e37a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e37e:	3401      	adds	r4, #1
 801e380:	4432      	add	r2, r6
 801e382:	b292      	uxth	r2, r2
 801e384:	2a09      	cmp	r2, #9
 801e386:	bf88      	it	hi
 801e388:	3a0a      	subhi	r2, #10
 801e38a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e38e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e390:	42aa      	cmp	r2, r5
 801e392:	d0ee      	beq.n	801e372 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801e394:	2000      	movs	r0, #0
 801e396:	bd70      	pop	{r4, r5, r6, pc}
 801e398:	2001      	movs	r0, #1
 801e39a:	e7fc      	b.n	801e396 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801e39c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3a0:	4605      	mov	r5, r0
 801e3a2:	4616      	mov	r6, r2
 801e3a4:	1c8c      	adds	r4, r1, #2
 801e3a6:	8809      	ldrh	r1, [r1, #0]
 801e3a8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e3ac:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e3b0:	42b3      	cmp	r3, r6
 801e3b2:	d124      	bne.n	801e3fe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e3b4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e3b8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e3bc:	f001 070f 	and.w	r7, r1, #15
 801e3c0:	4652      	mov	r2, sl
 801e3c2:	f8cd 8000 	str.w	r8, [sp]
 801e3c6:	464b      	mov	r3, r9
 801e3c8:	4621      	mov	r1, r4
 801e3ca:	4628      	mov	r0, r5
 801e3cc:	f7ff ffb7 	bl	801e33e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e3d0:	4683      	mov	fp, r0
 801e3d2:	b168      	cbz	r0, 801e3f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e3d4:	eb0a 0109 	add.w	r1, sl, r9
 801e3d8:	463a      	mov	r2, r7
 801e3da:	4628      	mov	r0, r5
 801e3dc:	4441      	add	r1, r8
 801e3de:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e3e2:	4649      	mov	r1, r9
 801e3e4:	f7ff ff52 	bl	801e28c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e3e8:	4658      	mov	r0, fp
 801e3ea:	b003      	add	sp, #12
 801e3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3f0:	eb07 010a 	add.w	r1, r7, sl
 801e3f4:	4449      	add	r1, r9
 801e3f6:	4441      	add	r1, r8
 801e3f8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e3fc:	e7d2      	b.n	801e3a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e3fe:	f04f 0b00 	mov.w	fp, #0
 801e402:	e7f1      	b.n	801e3e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e404 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e404:	b570      	push	{r4, r5, r6, lr}
 801e406:	8810      	ldrh	r0, [r2, #0]
 801e408:	4298      	cmp	r0, r3
 801e40a:	d817      	bhi.n	801e43c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e40c:	1e48      	subs	r0, r1, #1
 801e40e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e412:	4298      	cmp	r0, r3
 801e414:	d312      	bcc.n	801e43c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e416:	2400      	movs	r4, #0
 801e418:	428c      	cmp	r4, r1
 801e41a:	d20f      	bcs.n	801e43c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e41c:	1860      	adds	r0, r4, r1
 801e41e:	1040      	asrs	r0, r0, #1
 801e420:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e424:	0085      	lsls	r5, r0, #2
 801e426:	42b3      	cmp	r3, r6
 801e428:	d902      	bls.n	801e430 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e42a:	3001      	adds	r0, #1
 801e42c:	b284      	uxth	r4, r0
 801e42e:	e7f3      	b.n	801e418 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e430:	d201      	bcs.n	801e436 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e432:	b281      	uxth	r1, r0
 801e434:	e7f0      	b.n	801e418 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e436:	442a      	add	r2, r5
 801e438:	8850      	ldrh	r0, [r2, #2]
 801e43a:	bd70      	pop	{r4, r5, r6, pc}
 801e43c:	2000      	movs	r0, #0
 801e43e:	e7fc      	b.n	801e43a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e440 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e444:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e446:	4604      	mov	r4, r0
 801e448:	260b      	movs	r6, #11
 801e44a:	886f      	ldrh	r7, [r5, #2]
 801e44c:	087f      	lsrs	r7, r7, #1
 801e44e:	3e01      	subs	r6, #1
 801e450:	d013      	beq.n	801e47a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e452:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e454:	462a      	mov	r2, r5
 801e456:	4639      	mov	r1, r7
 801e458:	4620      	mov	r0, r4
 801e45a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e45e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e462:	4643      	mov	r3, r8
 801e464:	f7ff ffce 	bl	801e404 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e468:	b138      	cbz	r0, 801e47a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e46a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e46e:	4642      	mov	r2, r8
 801e470:	4620      	mov	r0, r4
 801e472:	f7ff ff93 	bl	801e39c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e476:	2800      	cmp	r0, #0
 801e478:	d1e9      	bne.n	801e44e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801e480 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e480:	b570      	push	{r4, r5, r6, lr}
 801e482:	694a      	ldr	r2, [r1, #20]
 801e484:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e486:	684b      	ldr	r3, [r1, #4]
 801e488:	1b54      	subs	r4, r2, r5
 801e48a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e48c:	f000 8106 	beq.w	801e69c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e490:	1b9b      	subs	r3, r3, r6
 801e492:	d003      	beq.n	801e49c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e494:	4363      	muls	r3, r4
 801e496:	2210      	movs	r2, #16
 801e498:	fb93 f3f2 	sdiv	r3, r3, r2
 801e49c:	680c      	ldr	r4, [r1, #0]
 801e49e:	698a      	ldr	r2, [r1, #24]
 801e4a0:	1b65      	subs	r5, r4, r5
 801e4a2:	f000 80fd 	beq.w	801e6a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e4a6:	1b92      	subs	r2, r2, r6
 801e4a8:	d003      	beq.n	801e4b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e4aa:	436a      	muls	r2, r5
 801e4ac:	2410      	movs	r4, #16
 801e4ae:	fb92 f2f4 	sdiv	r2, r2, r4
 801e4b2:	1a9b      	subs	r3, r3, r2
 801e4b4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801e6dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e4b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e4bc:	460a      	mov	r2, r1
 801e4be:	ee07 3a90 	vmov	s15, r3
 801e4c2:	f100 040c 	add.w	r4, r0, #12
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e4d0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e4d4:	eeb1 6a43 	vneg.f32	s12, s6
 801e4d8:	edd2 7a02 	vldr	s15, [r2, #8]
 801e4dc:	3214      	adds	r2, #20
 801e4de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e4e2:	ece3 6a01 	vstmia	r3!, {s13}
 801e4e6:	429c      	cmp	r4, r3
 801e4e8:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e4ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e4f0:	edc3 7a02 	vstr	s15, [r3, #8]
 801e4f4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e4f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e4fc:	edc3 7a05 	vstr	s15, [r3, #20]
 801e500:	d1ea      	bne.n	801e4d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e502:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e504:	698b      	ldr	r3, [r1, #24]
 801e506:	edd0 4a02 	vldr	s9, [r0, #8]
 801e50a:	1a9b      	subs	r3, r3, r2
 801e50c:	edd0 3a00 	vldr	s7, [r0]
 801e510:	edd0 6a01 	vldr	s13, [r0, #4]
 801e514:	ee07 3a90 	vmov	s15, r3
 801e518:	684b      	ldr	r3, [r1, #4]
 801e51a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e51e:	ed90 5a05 	vldr	s10, [r0, #20]
 801e522:	1a9b      	subs	r3, r3, r2
 801e524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e528:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e52c:	ed90 2a03 	vldr	s4, [r0, #12]
 801e530:	ee07 3a10 	vmov	s14, r3
 801e534:	edd0 5a04 	vldr	s11, [r0, #16]
 801e538:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e53c:	ed90 1a07 	vldr	s2, [r0, #28]
 801e540:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e544:	edd0 2a06 	vldr	s5, [r0, #24]
 801e548:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e54c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e550:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e554:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e558:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e55c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e560:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e564:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e566:	694a      	ldr	r2, [r1, #20]
 801e568:	1b13      	subs	r3, r2, r4
 801e56a:	ee07 3a10 	vmov	s14, r3
 801e56e:	680b      	ldr	r3, [r1, #0]
 801e570:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e574:	1b1b      	subs	r3, r3, r4
 801e576:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e57a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e57e:	ee07 3a10 	vmov	s14, r3
 801e582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e586:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e58a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e58e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e592:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e596:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e598:	698b      	ldr	r3, [r1, #24]
 801e59a:	1a9b      	subs	r3, r3, r2
 801e59c:	ee06 3a90 	vmov	s13, r3
 801e5a0:	684b      	ldr	r3, [r1, #4]
 801e5a2:	1a9b      	subs	r3, r3, r2
 801e5a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e5a8:	ee07 3a10 	vmov	s14, r3
 801e5ac:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e5b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5b4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e5b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e5bc:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e5c0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e5c4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e5c8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e5ca:	694a      	ldr	r2, [r1, #20]
 801e5cc:	1b13      	subs	r3, r2, r4
 801e5ce:	ee07 3a10 	vmov	s14, r3
 801e5d2:	680b      	ldr	r3, [r1, #0]
 801e5d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5d8:	1b1b      	subs	r3, r3, r4
 801e5da:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e5de:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e5e2:	ee07 3a10 	vmov	s14, r3
 801e5e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e5ee:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e5f2:	edd0 5a08 	vldr	s11, [r0, #32]
 801e5f6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e5fa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e5fe:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e602:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801e606:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e608:	698b      	ldr	r3, [r1, #24]
 801e60a:	1a9b      	subs	r3, r3, r2
 801e60c:	ee07 3a10 	vmov	s14, r3
 801e610:	684b      	ldr	r3, [r1, #4]
 801e612:	1a9b      	subs	r3, r3, r2
 801e614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e618:	ee01 3a90 	vmov	s3, r3
 801e61c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e620:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e624:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e628:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e62c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e630:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e634:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e638:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e63a:	694a      	ldr	r2, [r1, #20]
 801e63c:	1b13      	subs	r3, r2, r4
 801e63e:	ee03 3a10 	vmov	s6, r3
 801e642:	680b      	ldr	r3, [r1, #0]
 801e644:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e648:	1b1b      	subs	r3, r3, r4
 801e64a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e64e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e652:	ee03 3a10 	vmov	s6, r3
 801e656:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e65a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e65e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e662:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e666:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e66a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801e66e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e672:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e67a:	dd13      	ble.n	801e6a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e67c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e680:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e684:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e686:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e68a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e692:	dd15      	ble.n	801e6c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e698:	6403      	str	r3, [r0, #64]	; 0x40
 801e69a:	bd70      	pop	{r4, r5, r6, pc}
 801e69c:	4623      	mov	r3, r4
 801e69e:	e6fd      	b.n	801e49c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e6a0:	462a      	mov	r2, r5
 801e6a2:	e706      	b.n	801e4b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e6a4:	d502      	bpl.n	801e6ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e6a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e6aa:	e7e9      	b.n	801e680 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e6ac:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e6b0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e6b4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6bc:	dade      	bge.n	801e67c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e6be:	e7f2      	b.n	801e6a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e6c0:	d502      	bpl.n	801e6c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e6c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e6c6:	e7e7      	b.n	801e698 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e6c8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e6cc:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e6d0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6d8:	dadc      	bge.n	801e694 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e6da:	e7f2      	b.n	801e6c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e6dc:	3d800000 	.word	0x3d800000

0801e6e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6e4:	2714      	movs	r7, #20
 801e6e6:	435f      	muls	r7, r3
 801e6e8:	eb02 0c07 	add.w	ip, r2, r7
 801e6ec:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e6f0:	f115 0e0f 	adds.w	lr, r5, #15
 801e6f4:	f100 80a2 	bmi.w	801e83c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e6f8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801e6fc:	9c08      	ldr	r4, [sp, #32]
 801e6fe:	2614      	movs	r6, #20
 801e700:	f8c0 e014 	str.w	lr, [r0, #20]
 801e704:	4366      	muls	r6, r4
 801e706:	eb02 0806 	add.w	r8, r2, r6
 801e70a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e70e:	f115 040f 	adds.w	r4, r5, #15
 801e712:	f100 809f 	bmi.w	801e854 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801e716:	1124      	asrs	r4, r4, #4
 801e718:	eba4 040e 	sub.w	r4, r4, lr
 801e71c:	6184      	str	r4, [r0, #24]
 801e71e:	2c00      	cmp	r4, #0
 801e720:	f000 808a 	beq.w	801e838 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801e724:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801e728:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e72c:	5995      	ldr	r5, [r2, r6]
 801e72e:	eba4 0809 	sub.w	r8, r4, r9
 801e732:	59d4      	ldr	r4, [r2, r7]
 801e734:	eba5 0a04 	sub.w	sl, r5, r4
 801e738:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801e73c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801e740:	fb0e fe05 	mul.w	lr, lr, r5
 801e744:	fb0a ee19 	mls	lr, sl, r9, lr
 801e748:	fb08 e404 	mla	r4, r8, r4, lr
 801e74c:	3c01      	subs	r4, #1
 801e74e:	19a4      	adds	r4, r4, r6
 801e750:	f100 808c 	bmi.w	801e86c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801e754:	fb94 fef6 	sdiv	lr, r4, r6
 801e758:	fb06 441e 	mls	r4, r6, lr, r4
 801e75c:	f8c0 e000 	str.w	lr, [r0]
 801e760:	6104      	str	r4, [r0, #16]
 801e762:	2d00      	cmp	r5, #0
 801e764:	f2c0 8095 	blt.w	801e892 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801e768:	fb95 f4f6 	sdiv	r4, r5, r6
 801e76c:	fb06 5514 	mls	r5, r6, r4, r5
 801e770:	6044      	str	r4, [r0, #4]
 801e772:	6085      	str	r5, [r0, #8]
 801e774:	60c6      	str	r6, [r0, #12]
 801e776:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e77a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e77e:	6945      	ldr	r5, [r0, #20]
 801e780:	59d2      	ldr	r2, [r2, r7]
 801e782:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801e786:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801e8b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801e78a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e78e:	ee07 4a10 	vmov	s14, r4
 801e792:	6804      	ldr	r4, [r0, #0]
 801e794:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801e798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e79c:	ee07 2a90 	vmov	s15, r2
 801e7a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e7a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e7a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e7ac:	edd3 6a00 	vldr	s13, [r3]
 801e7b0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e7b4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801e7b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e7bc:	edc0 6a07 	vstr	s13, [r0, #28]
 801e7c0:	edd0 6a01 	vldr	s13, [r0, #4]
 801e7c4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801e7c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e7cc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e7d0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e7d4:	ed80 6a08 	vstr	s12, [r0, #32]
 801e7d8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801e7da:	6242      	str	r2, [r0, #36]	; 0x24
 801e7dc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801e7e0:	ed93 6a03 	vldr	s12, [r3, #12]
 801e7e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e7e8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e7ec:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e7f0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801e7f4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e7f8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801e7fc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e800:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801e804:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e806:	6302      	str	r2, [r0, #48]	; 0x30
 801e808:	ed93 6a06 	vldr	s12, [r3, #24]
 801e80c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801e810:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e814:	eeb0 7a46 	vmov.f32	s14, s12
 801e818:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801e81c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e820:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e824:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801e828:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801e82c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e830:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801e834:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801e836:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e83c:	2410      	movs	r4, #16
 801e83e:	f1c5 0501 	rsb	r5, r5, #1
 801e842:	fb9e fef4 	sdiv	lr, lr, r4
 801e846:	f015 050f 	ands.w	r5, r5, #15
 801e84a:	bf18      	it	ne
 801e84c:	2501      	movne	r5, #1
 801e84e:	ebae 0e05 	sub.w	lr, lr, r5
 801e852:	e753      	b.n	801e6fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801e854:	f04f 0910 	mov.w	r9, #16
 801e858:	f1c5 0501 	rsb	r5, r5, #1
 801e85c:	fb94 f4f9 	sdiv	r4, r4, r9
 801e860:	f015 050f 	ands.w	r5, r5, #15
 801e864:	bf18      	it	ne
 801e866:	2501      	movne	r5, #1
 801e868:	1b64      	subs	r4, r4, r5
 801e86a:	e755      	b.n	801e718 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801e86c:	4264      	negs	r4, r4
 801e86e:	fb94 fef6 	sdiv	lr, r4, r6
 801e872:	f1ce 0800 	rsb	r8, lr, #0
 801e876:	fb06 441e 	mls	r4, r6, lr, r4
 801e87a:	f8c0 8000 	str.w	r8, [r0]
 801e87e:	6104      	str	r4, [r0, #16]
 801e880:	2c00      	cmp	r4, #0
 801e882:	f43f af6e 	beq.w	801e762 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801e886:	ea6f 0e0e 	mvn.w	lr, lr
 801e88a:	1b34      	subs	r4, r6, r4
 801e88c:	f8c0 e000 	str.w	lr, [r0]
 801e890:	e766      	b.n	801e760 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801e892:	426d      	negs	r5, r5
 801e894:	fb95 f4f6 	sdiv	r4, r5, r6
 801e898:	f1c4 0e00 	rsb	lr, r4, #0
 801e89c:	fb06 5514 	mls	r5, r6, r4, r5
 801e8a0:	f8c0 e004 	str.w	lr, [r0, #4]
 801e8a4:	6085      	str	r5, [r0, #8]
 801e8a6:	2d00      	cmp	r5, #0
 801e8a8:	f43f af64 	beq.w	801e774 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801e8ac:	43e4      	mvns	r4, r4
 801e8ae:	1b75      	subs	r5, r6, r5
 801e8b0:	6044      	str	r4, [r0, #4]
 801e8b2:	e75e      	b.n	801e772 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801e8b4:	3d800000 	.word	0x3d800000

0801e8b8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e8b8:	4602      	mov	r2, r0
 801e8ba:	b148      	cbz	r0, 801e8d0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e8bc:	2300      	movs	r3, #0
 801e8be:	b298      	uxth	r0, r3
 801e8c0:	3301      	adds	r3, #1
 801e8c2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e8c6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e8ca:	2900      	cmp	r1, #0
 801e8cc:	d1f7      	bne.n	801e8be <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e8ce:	4770      	bx	lr
 801e8d0:	4770      	bx	lr

0801e8d2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e8d2:	b530      	push	{r4, r5, lr}
 801e8d4:	4604      	mov	r4, r0
 801e8d6:	b159      	cbz	r1, 801e8f0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e8d8:	b148      	cbz	r0, 801e8ee <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e8da:	2300      	movs	r3, #0
 801e8dc:	b298      	uxth	r0, r3
 801e8de:	4282      	cmp	r2, r0
 801e8e0:	d905      	bls.n	801e8ee <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e8e2:	5ccd      	ldrb	r5, [r1, r3]
 801e8e4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e8e8:	3301      	adds	r3, #1
 801e8ea:	2d00      	cmp	r5, #0
 801e8ec:	d1f6      	bne.n	801e8dc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e8ee:	bd30      	pop	{r4, r5, pc}
 801e8f0:	4608      	mov	r0, r1
 801e8f2:	e7fc      	b.n	801e8ee <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e8f4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801e8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8f6:	468c      	mov	ip, r1
 801e8f8:	b08b      	sub	sp, #44	; 0x2c
 801e8fa:	2100      	movs	r1, #0
 801e8fc:	ae01      	add	r6, sp, #4
 801e8fe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e902:	211f      	movs	r1, #31
 801e904:	fbb0 f7f3 	udiv	r7, r0, r3
 801e908:	fb03 0517 	mls	r5, r3, r7, r0
 801e90c:	4638      	mov	r0, r7
 801e90e:	b2ec      	uxtb	r4, r5
 801e910:	2d09      	cmp	r5, #9
 801e912:	bfd4      	ite	le
 801e914:	3430      	addle	r4, #48	; 0x30
 801e916:	3457      	addgt	r4, #87	; 0x57
 801e918:	b2e4      	uxtb	r4, r4
 801e91a:	558c      	strb	r4, [r1, r6]
 801e91c:	1e4c      	subs	r4, r1, #1
 801e91e:	b92f      	cbnz	r7, 801e92c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801e920:	4431      	add	r1, r6
 801e922:	4660      	mov	r0, ip
 801e924:	f7ff ffd5 	bl	801e8d2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e928:	b00b      	add	sp, #44	; 0x2c
 801e92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e92c:	4621      	mov	r1, r4
 801e92e:	e7e9      	b.n	801e904 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801e930 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e930:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e932:	4607      	mov	r7, r0
 801e934:	b08b      	sub	sp, #44	; 0x2c
 801e936:	4608      	mov	r0, r1
 801e938:	b341      	cbz	r1, 801e98c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e93a:	1e99      	subs	r1, r3, #2
 801e93c:	2922      	cmp	r1, #34	; 0x22
 801e93e:	d825      	bhi.n	801e98c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e940:	2100      	movs	r1, #0
 801e942:	463c      	mov	r4, r7
 801e944:	261f      	movs	r6, #31
 801e946:	f10d 0c04 	add.w	ip, sp, #4
 801e94a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e94e:	1e71      	subs	r1, r6, #1
 801e950:	fb94 fef3 	sdiv	lr, r4, r3
 801e954:	fb03 441e 	mls	r4, r3, lr, r4
 801e958:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e95c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e960:	b2ec      	uxtb	r4, r5
 801e962:	2d09      	cmp	r5, #9
 801e964:	bfd4      	ite	le
 801e966:	3430      	addle	r4, #48	; 0x30
 801e968:	3457      	addgt	r4, #87	; 0x57
 801e96a:	b2e4      	uxtb	r4, r4
 801e96c:	f80c 4006 	strb.w	r4, [ip, r6]
 801e970:	4674      	mov	r4, lr
 801e972:	b96c      	cbnz	r4, 801e990 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e974:	2f00      	cmp	r7, #0
 801e976:	da05      	bge.n	801e984 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e978:	ab0a      	add	r3, sp, #40	; 0x28
 801e97a:	4419      	add	r1, r3
 801e97c:	232d      	movs	r3, #45	; 0x2d
 801e97e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e982:	1eb1      	subs	r1, r6, #2
 801e984:	3101      	adds	r1, #1
 801e986:	4461      	add	r1, ip
 801e988:	f7ff ffa3 	bl	801e8d2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e98c:	b00b      	add	sp, #44	; 0x2c
 801e98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e990:	460e      	mov	r6, r1
 801e992:	e7dc      	b.n	801e94e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e994 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e998:	b085      	sub	sp, #20
 801e99a:	4691      	mov	r9, r2
 801e99c:	6802      	ldr	r2, [r0, #0]
 801e99e:	4688      	mov	r8, r1
 801e9a0:	461c      	mov	r4, r3
 801e9a2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e9a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e9aa:	4683      	mov	fp, r0
 801e9ac:	4610      	mov	r0, r2
 801e9ae:	9103      	str	r1, [sp, #12]
 801e9b0:	9302      	str	r3, [sp, #8]
 801e9b2:	9201      	str	r2, [sp, #4]
 801e9b4:	f7ff ff80 	bl	801e8b8 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e9b8:	f1b8 0f00 	cmp.w	r8, #0
 801e9bc:	bf0c      	ite	eq
 801e9be:	4684      	moveq	ip, r0
 801e9c0:	f100 0c01 	addne.w	ip, r0, #1
 801e9c4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801e9c8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e9cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e9ce:	fa1f fc8c 	uxth.w	ip, ip
 801e9d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e9d4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801e9d8:	9903      	ldr	r1, [sp, #12]
 801e9da:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e9de:	d041      	beq.n	801ea64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e9e0:	d834      	bhi.n	801ea4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e9e2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801e9e6:	d059      	beq.n	801ea9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e9e8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801e9ec:	d03a      	beq.n	801ea64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e9ee:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801e9f2:	d034      	beq.n	801ea5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e9f4:	2400      	movs	r4, #0
 801e9f6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e9fa:	3a01      	subs	r2, #1
 801e9fc:	b169      	cbz	r1, 801ea1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e9fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ea00:	458c      	cmp	ip, r1
 801ea02:	da09      	bge.n	801ea18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ea04:	eba1 010c 	sub.w	r1, r1, ip
 801ea08:	b289      	uxth	r1, r1
 801ea0a:	b933      	cbnz	r3, 801ea1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ea0c:	2e00      	cmp	r6, #0
 801ea0e:	d051      	beq.n	801eab4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ea10:	2800      	cmp	r0, #0
 801ea12:	d04f      	beq.n	801eab4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ea14:	440c      	add	r4, r1
 801ea16:	b2a4      	uxth	r4, r4
 801ea18:	2100      	movs	r1, #0
 801ea1a:	682b      	ldr	r3, [r5, #0]
 801ea1c:	4293      	cmp	r3, r2
 801ea1e:	da07      	bge.n	801ea30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ea20:	f1b8 0f00 	cmp.w	r8, #0
 801ea24:	d004      	beq.n	801ea30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ea26:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ea2a:	682b      	ldr	r3, [r5, #0]
 801ea2c:	3301      	adds	r3, #1
 801ea2e:	602b      	str	r3, [r5, #0]
 801ea30:	2730      	movs	r7, #48	; 0x30
 801ea32:	2c00      	cmp	r4, #0
 801ea34:	d04e      	beq.n	801ead4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ea36:	682e      	ldr	r6, [r5, #0]
 801ea38:	3c01      	subs	r4, #1
 801ea3a:	42b2      	cmp	r2, r6
 801ea3c:	b2a4      	uxth	r4, r4
 801ea3e:	dd49      	ble.n	801ead4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ea40:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ea44:	682b      	ldr	r3, [r5, #0]
 801ea46:	3301      	adds	r3, #1
 801ea48:	602b      	str	r3, [r5, #0]
 801ea4a:	e7f2      	b.n	801ea32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ea4c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ea50:	d01d      	beq.n	801ea8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ea52:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ea56:	d002      	beq.n	801ea5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ea58:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801ea5c:	e7c9      	b.n	801e9f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801ea5e:	4684      	mov	ip, r0
 801ea60:	f04f 0800 	mov.w	r8, #0
 801ea64:	2c00      	cmp	r4, #0
 801ea66:	d0c6      	beq.n	801e9f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ea68:	b947      	cbnz	r7, 801ea7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ea6a:	2801      	cmp	r0, #1
 801ea6c:	d106      	bne.n	801ea7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ea6e:	8814      	ldrh	r4, [r2, #0]
 801ea70:	2c30      	cmp	r4, #48	; 0x30
 801ea72:	bf02      	ittt	eq
 801ea74:	3202      	addeq	r2, #2
 801ea76:	4638      	moveq	r0, r7
 801ea78:	f8cb 2000 	streq.w	r2, [fp]
 801ea7c:	45bc      	cmp	ip, r7
 801ea7e:	da14      	bge.n	801eaaa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ea80:	b2bf      	uxth	r7, r7
 801ea82:	eba7 040c 	sub.w	r4, r7, ip
 801ea86:	46bc      	mov	ip, r7
 801ea88:	b2a4      	uxth	r4, r4
 801ea8a:	2600      	movs	r6, #0
 801ea8c:	e7b3      	b.n	801e9f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ea8e:	4684      	mov	ip, r0
 801ea90:	b16c      	cbz	r4, 801eaae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801ea92:	42b8      	cmp	r0, r7
 801ea94:	dd00      	ble.n	801ea98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801ea96:	b2b8      	uxth	r0, r7
 801ea98:	2400      	movs	r4, #0
 801ea9a:	e003      	b.n	801eaa4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801ea9c:	f04f 0c01 	mov.w	ip, #1
 801eaa0:	2400      	movs	r4, #0
 801eaa2:	4660      	mov	r0, ip
 801eaa4:	4626      	mov	r6, r4
 801eaa6:	46a0      	mov	r8, r4
 801eaa8:	e7a5      	b.n	801e9f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801eaaa:	2400      	movs	r4, #0
 801eaac:	e7ed      	b.n	801ea8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801eaae:	4626      	mov	r6, r4
 801eab0:	46a0      	mov	r8, r4
 801eab2:	e7a0      	b.n	801e9f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801eab4:	2900      	cmp	r1, #0
 801eab6:	d0b0      	beq.n	801ea1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801eab8:	2720      	movs	r7, #32
 801eaba:	682e      	ldr	r6, [r5, #0]
 801eabc:	2900      	cmp	r1, #0
 801eabe:	d0ac      	beq.n	801ea1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801eac0:	3901      	subs	r1, #1
 801eac2:	4296      	cmp	r6, r2
 801eac4:	b289      	uxth	r1, r1
 801eac6:	daa7      	bge.n	801ea18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801eac8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801eacc:	682b      	ldr	r3, [r5, #0]
 801eace:	3301      	adds	r3, #1
 801ead0:	602b      	str	r3, [r5, #0]
 801ead2:	e7f2      	b.n	801eaba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801ead4:	b188      	cbz	r0, 801eafa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ead6:	682b      	ldr	r3, [r5, #0]
 801ead8:	3801      	subs	r0, #1
 801eada:	429a      	cmp	r2, r3
 801eadc:	b280      	uxth	r0, r0
 801eade:	dd0c      	ble.n	801eafa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801eae0:	f8db 3000 	ldr.w	r3, [fp]
 801eae4:	1c9c      	adds	r4, r3, #2
 801eae6:	f8cb 4000 	str.w	r4, [fp]
 801eaea:	881c      	ldrh	r4, [r3, #0]
 801eaec:	682b      	ldr	r3, [r5, #0]
 801eaee:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801eaf2:	682b      	ldr	r3, [r5, #0]
 801eaf4:	3301      	adds	r3, #1
 801eaf6:	602b      	str	r3, [r5, #0]
 801eaf8:	e7ec      	b.n	801ead4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801eafa:	2620      	movs	r6, #32
 801eafc:	b151      	cbz	r1, 801eb14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801eafe:	6828      	ldr	r0, [r5, #0]
 801eb00:	3901      	subs	r1, #1
 801eb02:	4282      	cmp	r2, r0
 801eb04:	b289      	uxth	r1, r1
 801eb06:	dd05      	ble.n	801eb14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801eb08:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801eb0c:	682b      	ldr	r3, [r5, #0]
 801eb0e:	3301      	adds	r3, #1
 801eb10:	602b      	str	r3, [r5, #0]
 801eb12:	e7f3      	b.n	801eafc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801eb14:	b005      	add	sp, #20
 801eb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801eb1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eb1e:	2400      	movs	r4, #0
 801eb20:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801eb24:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801eb28:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801eb2c:	8014      	strh	r4, [r2, #0]
 801eb2e:	701c      	strb	r4, [r3, #0]
 801eb30:	f888 4000 	strb.w	r4, [r8]
 801eb34:	f88c 4000 	strb.w	r4, [ip]
 801eb38:	f88e 4000 	strb.w	r4, [lr]
 801eb3c:	703c      	strb	r4, [r7, #0]
 801eb3e:	6804      	ldr	r4, [r0, #0]
 801eb40:	b1a4      	cbz	r4, 801eb6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801eb42:	8824      	ldrh	r4, [r4, #0]
 801eb44:	f04f 0901 	mov.w	r9, #1
 801eb48:	b314      	cbz	r4, 801eb90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801eb4a:	2c2b      	cmp	r4, #43	; 0x2b
 801eb4c:	d001      	beq.n	801eb52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801eb4e:	2c20      	cmp	r4, #32
 801eb50:	d110      	bne.n	801eb74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801eb52:	8014      	strh	r4, [r2, #0]
 801eb54:	6804      	ldr	r4, [r0, #0]
 801eb56:	b10c      	cbz	r4, 801eb5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801eb58:	3402      	adds	r4, #2
 801eb5a:	6004      	str	r4, [r0, #0]
 801eb5c:	680c      	ldr	r4, [r1, #0]
 801eb5e:	b10c      	cbz	r4, 801eb64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801eb60:	3401      	adds	r4, #1
 801eb62:	600c      	str	r4, [r1, #0]
 801eb64:	6804      	ldr	r4, [r0, #0]
 801eb66:	b17c      	cbz	r4, 801eb88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801eb68:	8824      	ldrh	r4, [r4, #0]
 801eb6a:	e7ed      	b.n	801eb48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801eb6c:	680c      	ldr	r4, [r1, #0]
 801eb6e:	b17c      	cbz	r4, 801eb90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801eb70:	7824      	ldrb	r4, [r4, #0]
 801eb72:	e7e7      	b.n	801eb44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801eb74:	2c2d      	cmp	r4, #45	; 0x2d
 801eb76:	d102      	bne.n	801eb7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801eb78:	f883 9000 	strb.w	r9, [r3]
 801eb7c:	e7ea      	b.n	801eb54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801eb7e:	2c23      	cmp	r4, #35	; 0x23
 801eb80:	d107      	bne.n	801eb92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801eb82:	f888 9000 	strb.w	r9, [r8]
 801eb86:	e7e5      	b.n	801eb54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801eb88:	680c      	ldr	r4, [r1, #0]
 801eb8a:	b10c      	cbz	r4, 801eb90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801eb8c:	7824      	ldrb	r4, [r4, #0]
 801eb8e:	e7db      	b.n	801eb48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801eb90:	2400      	movs	r4, #0
 801eb92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801eb96:	2b09      	cmp	r3, #9
 801eb98:	d901      	bls.n	801eb9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801eb9a:	2c2a      	cmp	r4, #42	; 0x2a
 801eb9c:	d122      	bne.n	801ebe4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801eb9e:	2301      	movs	r3, #1
 801eba0:	2c30      	cmp	r4, #48	; 0x30
 801eba2:	f88e 3000 	strb.w	r3, [lr]
 801eba6:	d10d      	bne.n	801ebc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801eba8:	f88c 3000 	strb.w	r3, [ip]
 801ebac:	6803      	ldr	r3, [r0, #0]
 801ebae:	b10b      	cbz	r3, 801ebb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801ebb0:	3302      	adds	r3, #2
 801ebb2:	6003      	str	r3, [r0, #0]
 801ebb4:	680b      	ldr	r3, [r1, #0]
 801ebb6:	b10b      	cbz	r3, 801ebbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801ebb8:	3301      	adds	r3, #1
 801ebba:	600b      	str	r3, [r1, #0]
 801ebbc:	6803      	ldr	r3, [r0, #0]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d02f      	beq.n	801ec22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801ebc2:	881c      	ldrh	r4, [r3, #0]
 801ebc4:	2c2a      	cmp	r4, #42	; 0x2a
 801ebc6:	d135      	bne.n	801ec34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ebc8:	f04f 33ff 	mov.w	r3, #4294967295
 801ebcc:	6033      	str	r3, [r6, #0]
 801ebce:	6803      	ldr	r3, [r0, #0]
 801ebd0:	b10b      	cbz	r3, 801ebd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801ebd2:	3302      	adds	r3, #2
 801ebd4:	6003      	str	r3, [r0, #0]
 801ebd6:	680b      	ldr	r3, [r1, #0]
 801ebd8:	b10b      	cbz	r3, 801ebde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ebda:	3301      	adds	r3, #1
 801ebdc:	600b      	str	r3, [r1, #0]
 801ebde:	6803      	ldr	r3, [r0, #0]
 801ebe0:	b31b      	cbz	r3, 801ec2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801ebe2:	881c      	ldrh	r4, [r3, #0]
 801ebe4:	2c2e      	cmp	r4, #46	; 0x2e
 801ebe6:	d11a      	bne.n	801ec1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ebe8:	2301      	movs	r3, #1
 801ebea:	703b      	strb	r3, [r7, #0]
 801ebec:	6803      	ldr	r3, [r0, #0]
 801ebee:	b10b      	cbz	r3, 801ebf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801ebf0:	3302      	adds	r3, #2
 801ebf2:	6003      	str	r3, [r0, #0]
 801ebf4:	680b      	ldr	r3, [r1, #0]
 801ebf6:	b10b      	cbz	r3, 801ebfc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ebf8:	3301      	adds	r3, #1
 801ebfa:	600b      	str	r3, [r1, #0]
 801ebfc:	6803      	ldr	r3, [r0, #0]
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d036      	beq.n	801ec70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ec02:	881b      	ldrh	r3, [r3, #0]
 801ec04:	2b2a      	cmp	r3, #42	; 0x2a
 801ec06:	d137      	bne.n	801ec78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ec08:	f04f 33ff 	mov.w	r3, #4294967295
 801ec0c:	602b      	str	r3, [r5, #0]
 801ec0e:	6803      	ldr	r3, [r0, #0]
 801ec10:	b10b      	cbz	r3, 801ec16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ec12:	3302      	adds	r3, #2
 801ec14:	6003      	str	r3, [r0, #0]
 801ec16:	680b      	ldr	r3, [r1, #0]
 801ec18:	b10b      	cbz	r3, 801ec1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ec1a:	3301      	adds	r3, #1
 801ec1c:	600b      	str	r3, [r1, #0]
 801ec1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec22:	680c      	ldr	r4, [r1, #0]
 801ec24:	b134      	cbz	r4, 801ec34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ec26:	7824      	ldrb	r4, [r4, #0]
 801ec28:	e7cc      	b.n	801ebc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ec2a:	680b      	ldr	r3, [r1, #0]
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d0f6      	beq.n	801ec1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ec30:	781c      	ldrb	r4, [r3, #0]
 801ec32:	e7d7      	b.n	801ebe4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ec34:	2300      	movs	r3, #0
 801ec36:	220a      	movs	r2, #10
 801ec38:	6033      	str	r3, [r6, #0]
 801ec3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ec3e:	fa1f f38c 	uxth.w	r3, ip
 801ec42:	2b09      	cmp	r3, #9
 801ec44:	d8ce      	bhi.n	801ebe4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ec46:	6833      	ldr	r3, [r6, #0]
 801ec48:	fb02 c303 	mla	r3, r2, r3, ip
 801ec4c:	6033      	str	r3, [r6, #0]
 801ec4e:	6803      	ldr	r3, [r0, #0]
 801ec50:	b10b      	cbz	r3, 801ec56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ec52:	3302      	adds	r3, #2
 801ec54:	6003      	str	r3, [r0, #0]
 801ec56:	680b      	ldr	r3, [r1, #0]
 801ec58:	b10b      	cbz	r3, 801ec5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ec5a:	3301      	adds	r3, #1
 801ec5c:	600b      	str	r3, [r1, #0]
 801ec5e:	6803      	ldr	r3, [r0, #0]
 801ec60:	b10b      	cbz	r3, 801ec66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ec62:	881c      	ldrh	r4, [r3, #0]
 801ec64:	e7e9      	b.n	801ec3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ec66:	680c      	ldr	r4, [r1, #0]
 801ec68:	2c00      	cmp	r4, #0
 801ec6a:	d0e6      	beq.n	801ec3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ec6c:	7824      	ldrb	r4, [r4, #0]
 801ec6e:	e7e4      	b.n	801ec3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ec70:	680b      	ldr	r3, [r1, #0]
 801ec72:	b10b      	cbz	r3, 801ec78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ec74:	781b      	ldrb	r3, [r3, #0]
 801ec76:	e7c5      	b.n	801ec04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ec78:	2200      	movs	r2, #0
 801ec7a:	240a      	movs	r4, #10
 801ec7c:	602a      	str	r2, [r5, #0]
 801ec7e:	3b30      	subs	r3, #48	; 0x30
 801ec80:	682a      	ldr	r2, [r5, #0]
 801ec82:	b29e      	uxth	r6, r3
 801ec84:	2e09      	cmp	r6, #9
 801ec86:	d813      	bhi.n	801ecb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ec88:	fb04 3302 	mla	r3, r4, r2, r3
 801ec8c:	602b      	str	r3, [r5, #0]
 801ec8e:	6803      	ldr	r3, [r0, #0]
 801ec90:	b10b      	cbz	r3, 801ec96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ec92:	3302      	adds	r3, #2
 801ec94:	6003      	str	r3, [r0, #0]
 801ec96:	680b      	ldr	r3, [r1, #0]
 801ec98:	b10b      	cbz	r3, 801ec9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ec9a:	3301      	adds	r3, #1
 801ec9c:	600b      	str	r3, [r1, #0]
 801ec9e:	6803      	ldr	r3, [r0, #0]
 801eca0:	b10b      	cbz	r3, 801eca6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801eca2:	881b      	ldrh	r3, [r3, #0]
 801eca4:	e7eb      	b.n	801ec7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801eca6:	680b      	ldr	r3, [r1, #0]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d0e8      	beq.n	801ec7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ecac:	781b      	ldrb	r3, [r3, #0]
 801ecae:	e7e6      	b.n	801ec7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ecb0:	2a06      	cmp	r2, #6
 801ecb2:	bfa8      	it	ge
 801ecb4:	2206      	movge	r2, #6
 801ecb6:	602a      	str	r2, [r5, #0]
 801ecb8:	e7b1      	b.n	801ec1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801ecba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801ecba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecbe:	b0a3      	sub	sp, #140	; 0x8c
 801ecc0:	2600      	movs	r6, #0
 801ecc2:	4607      	mov	r7, r0
 801ecc4:	4688      	mov	r8, r1
 801ecc6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801ecca:	4631      	mov	r1, r6
 801eccc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801ecce:	4648      	mov	r0, r9
 801ecd0:	960d      	str	r6, [sp, #52]	; 0x34
 801ecd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ecd6:	2242      	movs	r2, #66	; 0x42
 801ecd8:	f00c fbde 	bl	802b498 <memset>
 801ecdc:	b15f      	cbz	r7, 801ecf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ecde:	f108 3aff 	add.w	sl, r8, #4294967295
 801ece2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ece4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ece6:	b152      	cbz	r2, 801ecfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ece8:	8812      	ldrh	r2, [r2, #0]
 801ecea:	b10a      	cbz	r2, 801ecf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ecec:	459a      	cmp	sl, r3
 801ecee:	dc2e      	bgt.n	801ed4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801ecf0:	2200      	movs	r2, #0
 801ecf2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ecf6:	4638      	mov	r0, r7
 801ecf8:	b023      	add	sp, #140	; 0x8c
 801ecfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecfe:	9a08      	ldr	r2, [sp, #32]
 801ed00:	2a00      	cmp	r2, #0
 801ed02:	d0f5      	beq.n	801ecf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ed04:	7812      	ldrb	r2, [r2, #0]
 801ed06:	e7f0      	b.n	801ecea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801ed08:	2d00      	cmp	r5, #0
 801ed0a:	d0ea      	beq.n	801ece2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ed0c:	782a      	ldrb	r2, [r5, #0]
 801ed0e:	b142      	cbz	r2, 801ed22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801ed10:	2a25      	cmp	r2, #37	; 0x25
 801ed12:	d001      	beq.n	801ed18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801ed14:	459a      	cmp	sl, r3
 801ed16:	dc08      	bgt.n	801ed2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801ed18:	f1bb 0f00 	cmp.w	fp, #0
 801ed1c:	d121      	bne.n	801ed62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ed1e:	2d00      	cmp	r5, #0
 801ed20:	d0df      	beq.n	801ece2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ed22:	782a      	ldrb	r2, [r5, #0]
 801ed24:	f04f 0b00 	mov.w	fp, #0
 801ed28:	e01d      	b.n	801ed66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801ed2a:	f1bb 0f00 	cmp.w	fp, #0
 801ed2e:	d077      	beq.n	801ee20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801ed30:	f8bb 2000 	ldrh.w	r2, [fp]
 801ed34:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ed38:	f1bb 0f00 	cmp.w	fp, #0
 801ed3c:	d002      	beq.n	801ed44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801ed3e:	f10b 0202 	add.w	r2, fp, #2
 801ed42:	9209      	str	r2, [sp, #36]	; 0x24
 801ed44:	b10d      	cbz	r5, 801ed4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801ed46:	3501      	adds	r5, #1
 801ed48:	9508      	str	r5, [sp, #32]
 801ed4a:	3301      	adds	r3, #1
 801ed4c:	930d      	str	r3, [sp, #52]	; 0x34
 801ed4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed50:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ed54:	f1bb 0f00 	cmp.w	fp, #0
 801ed58:	d0d6      	beq.n	801ed08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ed5a:	f8bb 2000 	ldrh.w	r2, [fp]
 801ed5e:	2a00      	cmp	r2, #0
 801ed60:	d1d6      	bne.n	801ed10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ed62:	f8bb 2000 	ldrh.w	r2, [fp]
 801ed66:	2a00      	cmp	r2, #0
 801ed68:	d0bb      	beq.n	801ece2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ed6a:	459a      	cmp	sl, r3
 801ed6c:	ddb9      	ble.n	801ece2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ed6e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ed72:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ed76:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ed7a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ed7e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ed82:	960e      	str	r6, [sp, #56]	; 0x38
 801ed84:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ed88:	960f      	str	r6, [sp, #60]	; 0x3c
 801ed8a:	f1bb 0f00 	cmp.w	fp, #0
 801ed8e:	d002      	beq.n	801ed96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ed90:	f10b 0302 	add.w	r3, fp, #2
 801ed94:	9309      	str	r3, [sp, #36]	; 0x24
 801ed96:	b10d      	cbz	r5, 801ed9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ed98:	1c6b      	adds	r3, r5, #1
 801ed9a:	9308      	str	r3, [sp, #32]
 801ed9c:	ab0f      	add	r3, sp, #60	; 0x3c
 801ed9e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801eda2:	a908      	add	r1, sp, #32
 801eda4:	a809      	add	r0, sp, #36	; 0x24
 801eda6:	9305      	str	r3, [sp, #20]
 801eda8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801edac:	9304      	str	r3, [sp, #16]
 801edae:	ab0e      	add	r3, sp, #56	; 0x38
 801edb0:	9303      	str	r3, [sp, #12]
 801edb2:	ab0c      	add	r3, sp, #48	; 0x30
 801edb4:	9302      	str	r3, [sp, #8]
 801edb6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801edba:	9301      	str	r3, [sp, #4]
 801edbc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801edc0:	9300      	str	r3, [sp, #0]
 801edc2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801edc6:	f7ff fea8 	bl	801eb1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801edca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edcc:	2b00      	cmp	r3, #0
 801edce:	bfbf      	itttt	lt
 801edd0:	6823      	ldrlt	r3, [r4, #0]
 801edd2:	3404      	addlt	r4, #4
 801edd4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801edd8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801edda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eddc:	2b00      	cmp	r3, #0
 801edde:	bfbe      	ittt	lt
 801ede0:	6823      	ldrlt	r3, [r4, #0]
 801ede2:	3404      	addlt	r4, #4
 801ede4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ede8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801edec:	bfb8      	it	lt
 801edee:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801edf0:	b1d9      	cbz	r1, 801ee2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801edf2:	880b      	ldrh	r3, [r1, #0]
 801edf4:	2b69      	cmp	r3, #105	; 0x69
 801edf6:	d01f      	beq.n	801ee38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801edf8:	d82f      	bhi.n	801ee5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801edfa:	2b58      	cmp	r3, #88	; 0x58
 801edfc:	d01c      	beq.n	801ee38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801edfe:	d818      	bhi.n	801ee32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801ee00:	2b25      	cmp	r3, #37	; 0x25
 801ee02:	d034      	beq.n	801ee6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801ee04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee06:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801ee0a:	f1bb 0f00 	cmp.w	fp, #0
 801ee0e:	f000 80b7 	beq.w	801ef80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801ee12:	f8bb 5000 	ldrh.w	r5, [fp]
 801ee16:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801ee1a:	3301      	adds	r3, #1
 801ee1c:	930d      	str	r3, [sp, #52]	; 0x34
 801ee1e:	e029      	b.n	801ee74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ee20:	b10d      	cbz	r5, 801ee26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ee22:	782a      	ldrb	r2, [r5, #0]
 801ee24:	e786      	b.n	801ed34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ee26:	462a      	mov	r2, r5
 801ee28:	e784      	b.n	801ed34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ee2a:	2a00      	cmp	r2, #0
 801ee2c:	d0ea      	beq.n	801ee04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ee2e:	7813      	ldrb	r3, [r2, #0]
 801ee30:	e7e0      	b.n	801edf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801ee32:	3b63      	subs	r3, #99	; 0x63
 801ee34:	2b01      	cmp	r3, #1
 801ee36:	d8e5      	bhi.n	801ee04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ee38:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801ee3c:	b329      	cbz	r1, 801ee8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801ee3e:	880b      	ldrh	r3, [r1, #0]
 801ee40:	2b69      	cmp	r3, #105	; 0x69
 801ee42:	d063      	beq.n	801ef0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ee44:	d825      	bhi.n	801ee92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801ee46:	2b63      	cmp	r3, #99	; 0x63
 801ee48:	d038      	beq.n	801eebc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801ee4a:	2b64      	cmp	r3, #100	; 0x64
 801ee4c:	d05e      	beq.n	801ef0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ee4e:	2b58      	cmp	r3, #88	; 0x58
 801ee50:	d07a      	beq.n	801ef48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801ee52:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801ee56:	4625      	mov	r5, r4
 801ee58:	e036      	b.n	801eec8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ee5a:	2b73      	cmp	r3, #115	; 0x73
 801ee5c:	d0ec      	beq.n	801ee38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ee5e:	d802      	bhi.n	801ee66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ee60:	2b6f      	cmp	r3, #111	; 0x6f
 801ee62:	d1cf      	bne.n	801ee04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ee64:	e7e8      	b.n	801ee38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ee66:	2b75      	cmp	r3, #117	; 0x75
 801ee68:	d0e6      	beq.n	801ee38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ee6a:	2b78      	cmp	r3, #120	; 0x78
 801ee6c:	e7f9      	b.n	801ee62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ee6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ee70:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ee74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee76:	b10b      	cbz	r3, 801ee7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801ee78:	3302      	adds	r3, #2
 801ee7a:	9309      	str	r3, [sp, #36]	; 0x24
 801ee7c:	9b08      	ldr	r3, [sp, #32]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	f43f af2f 	beq.w	801ece2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ee84:	3301      	adds	r3, #1
 801ee86:	9308      	str	r3, [sp, #32]
 801ee88:	e72b      	b.n	801ece2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ee8a:	2a00      	cmp	r2, #0
 801ee8c:	d0e1      	beq.n	801ee52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ee8e:	7813      	ldrb	r3, [r2, #0]
 801ee90:	e7d6      	b.n	801ee40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ee92:	2b73      	cmp	r3, #115	; 0x73
 801ee94:	d036      	beq.n	801ef04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ee96:	d807      	bhi.n	801eea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ee98:	2b6f      	cmp	r3, #111	; 0x6f
 801ee9a:	d1da      	bne.n	801ee52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ee9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ee9e:	1d25      	adds	r5, r4, #4
 801eea0:	2308      	movs	r3, #8
 801eea2:	eba8 0202 	sub.w	r2, r8, r2
 801eea6:	e049      	b.n	801ef3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eea8:	2b75      	cmp	r3, #117	; 0x75
 801eeaa:	d042      	beq.n	801ef32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801eeac:	2b78      	cmp	r3, #120	; 0x78
 801eeae:	d1d0      	bne.n	801ee52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eeb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eeb2:	1d25      	adds	r5, r4, #4
 801eeb4:	2310      	movs	r3, #16
 801eeb6:	eba8 0202 	sub.w	r2, r8, r2
 801eeba:	e03f      	b.n	801ef3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eebc:	6823      	ldr	r3, [r4, #0]
 801eebe:	1d25      	adds	r5, r4, #4
 801eec0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801eec4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801eec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eeca:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d051      	beq.n	801ef76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801eed2:	881a      	ldrh	r2, [r3, #0]
 801eed4:	a80d      	add	r0, sp, #52	; 0x34
 801eed6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801eeda:	462c      	mov	r4, r5
 801eedc:	9005      	str	r0, [sp, #20]
 801eede:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801eee2:	9004      	str	r0, [sp, #16]
 801eee4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eee6:	9003      	str	r0, [sp, #12]
 801eee8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801eeec:	9002      	str	r0, [sp, #8]
 801eeee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801eef0:	9001      	str	r0, [sp, #4]
 801eef2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801eef6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801eefa:	9000      	str	r0, [sp, #0]
 801eefc:	a810      	add	r0, sp, #64	; 0x40
 801eefe:	f7ff fd49 	bl	801e994 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801ef02:	e7b7      	b.n	801ee74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ef04:	1d25      	adds	r5, r4, #4
 801ef06:	6823      	ldr	r3, [r4, #0]
 801ef08:	9310      	str	r3, [sp, #64]	; 0x40
 801ef0a:	e7dd      	b.n	801eec8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ef0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef0e:	230a      	movs	r3, #10
 801ef10:	4649      	mov	r1, r9
 801ef12:	6820      	ldr	r0, [r4, #0]
 801ef14:	eba8 0202 	sub.w	r2, r8, r2
 801ef18:	1d25      	adds	r5, r4, #4
 801ef1a:	b292      	uxth	r2, r2
 801ef1c:	f7ff fd08 	bl	801e930 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ef20:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ef24:	2b2d      	cmp	r3, #45	; 0x2d
 801ef26:	d1cf      	bne.n	801eec8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ef28:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ef2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef2e:	3302      	adds	r3, #2
 801ef30:	e7ea      	b.n	801ef08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801ef32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef34:	1d25      	adds	r5, r4, #4
 801ef36:	230a      	movs	r3, #10
 801ef38:	eba8 0202 	sub.w	r2, r8, r2
 801ef3c:	b292      	uxth	r2, r2
 801ef3e:	4649      	mov	r1, r9
 801ef40:	6820      	ldr	r0, [r4, #0]
 801ef42:	f7ff fcd7 	bl	801e8f4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ef46:	e7bf      	b.n	801eec8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ef48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef4a:	2310      	movs	r3, #16
 801ef4c:	4649      	mov	r1, r9
 801ef4e:	6820      	ldr	r0, [r4, #0]
 801ef50:	eba8 0202 	sub.w	r2, r8, r2
 801ef54:	1d25      	adds	r5, r4, #4
 801ef56:	b292      	uxth	r2, r2
 801ef58:	f7ff fccc 	bl	801e8f4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ef5c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ef60:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d0af      	beq.n	801eec8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ef68:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ef6c:	2919      	cmp	r1, #25
 801ef6e:	d8f7      	bhi.n	801ef60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ef70:	3b20      	subs	r3, #32
 801ef72:	8013      	strh	r3, [r2, #0]
 801ef74:	e7f4      	b.n	801ef60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ef76:	9a08      	ldr	r2, [sp, #32]
 801ef78:	2a00      	cmp	r2, #0
 801ef7a:	d0ab      	beq.n	801eed4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ef7c:	7812      	ldrb	r2, [r2, #0]
 801ef7e:	e7a9      	b.n	801eed4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ef80:	2d00      	cmp	r5, #0
 801ef82:	f43f af48 	beq.w	801ee16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ef86:	782d      	ldrb	r5, [r5, #0]
 801ef88:	e745      	b.n	801ee16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ef8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ef8a:	b507      	push	{r0, r1, r2, lr}
 801ef8c:	9300      	str	r3, [sp, #0]
 801ef8e:	4613      	mov	r3, r2
 801ef90:	2200      	movs	r2, #0
 801ef92:	f7ff fe92 	bl	801ecba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ef96:	b003      	add	sp, #12
 801ef98:	f85d fb04 	ldr.w	pc, [sp], #4

0801ef9c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ef9c:	b40c      	push	{r2, r3}
 801ef9e:	b507      	push	{r0, r1, r2, lr}
 801efa0:	ab04      	add	r3, sp, #16
 801efa2:	f853 2b04 	ldr.w	r2, [r3], #4
 801efa6:	9301      	str	r3, [sp, #4]
 801efa8:	f7ff ffef 	bl	801ef8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801efac:	b003      	add	sp, #12
 801efae:	f85d eb04 	ldr.w	lr, [sp], #4
 801efb2:	b002      	add	sp, #8
 801efb4:	4770      	bx	lr
	...

0801efb8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801efb8:	4b01      	ldr	r3, [pc, #4]	; (801efc0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801efba:	6018      	str	r0, [r3, #0]
 801efbc:	4770      	bx	lr
 801efbe:	bf00      	nop
 801efc0:	20016ef0 	.word	0x20016ef0

0801efc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801efc4:	4b06      	ldr	r3, [pc, #24]	; (801efe0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801efc6:	881a      	ldrh	r2, [r3, #0]
 801efc8:	4282      	cmp	r2, r0
 801efca:	d807      	bhi.n	801efdc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801efcc:	4b05      	ldr	r3, [pc, #20]	; (801efe4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801efce:	881b      	ldrh	r3, [r3, #0]
 801efd0:	4413      	add	r3, r2
 801efd2:	4298      	cmp	r0, r3
 801efd4:	bfac      	ite	ge
 801efd6:	2000      	movge	r0, #0
 801efd8:	2001      	movlt	r0, #1
 801efda:	4770      	bx	lr
 801efdc:	2000      	movs	r0, #0
 801efde:	4770      	bx	lr
 801efe0:	20016f10 	.word	0x20016f10
 801efe4:	20016f14 	.word	0x20016f14

0801efe8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801efe8:	b508      	push	{r3, lr}
 801efea:	4601      	mov	r1, r0
 801efec:	f7ff ffea 	bl	801efc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eff0:	b118      	cbz	r0, 801effa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801eff2:	4b02      	ldr	r3, [pc, #8]	; (801effc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801effa:	bd08      	pop	{r3, pc}
 801effc:	20016ef4 	.word	0x20016ef4

0801f000 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f000:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f002:	4c24      	ldr	r4, [pc, #144]	; (801f094 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801f004:	6823      	ldr	r3, [r4, #0]
 801f006:	2b00      	cmp	r3, #0
 801f008:	d042      	beq.n	801f090 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f00a:	4a23      	ldr	r2, [pc, #140]	; (801f098 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801f00c:	4d23      	ldr	r5, [pc, #140]	; (801f09c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801f00e:	8811      	ldrh	r1, [r2, #0]
 801f010:	f8b5 c000 	ldrh.w	ip, [r5]
 801f014:	4822      	ldr	r0, [pc, #136]	; (801f0a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801f016:	4461      	add	r1, ip
 801f018:	1c4a      	adds	r2, r1, #1
 801f01a:	008f      	lsls	r7, r1, #2
 801f01c:	f022 0201 	bic.w	r2, r2, #1
 801f020:	19de      	adds	r6, r3, r7
 801f022:	0412      	lsls	r2, r2, #16
 801f024:	6006      	str	r6, [r0, #0]
 801f026:	4e1f      	ldr	r6, [pc, #124]	; (801f0a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801f028:	0c12      	lsrs	r2, r2, #16
 801f02a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801f02e:	19da      	adds	r2, r3, r7
 801f030:	6032      	str	r2, [r6, #0]
 801f032:	220e      	movs	r2, #14
 801f034:	fb02 f20c 	mul.w	r2, r2, ip
 801f038:	3203      	adds	r2, #3
 801f03a:	f022 0203 	bic.w	r2, r2, #3
 801f03e:	443a      	add	r2, r7
 801f040:	4f19      	ldr	r7, [pc, #100]	; (801f0a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f042:	4413      	add	r3, r2
 801f044:	603b      	str	r3, [r7, #0]
 801f046:	2300      	movs	r3, #0
 801f048:	4f18      	ldr	r7, [pc, #96]	; (801f0ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f04a:	469c      	mov	ip, r3
 801f04c:	803b      	strh	r3, [r7, #0]
 801f04e:	4f18      	ldr	r7, [pc, #96]	; (801f0b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f050:	683f      	ldr	r7, [r7, #0]
 801f052:	1aba      	subs	r2, r7, r2
 801f054:	4f17      	ldr	r7, [pc, #92]	; (801f0b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f056:	603a      	str	r2, [r7, #0]
 801f058:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f05c:	4a16      	ldr	r2, [pc, #88]	; (801f0b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f05e:	8013      	strh	r3, [r2, #0]
 801f060:	428b      	cmp	r3, r1
 801f062:	d10d      	bne.n	801f080 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801f064:	882d      	ldrh	r5, [r5, #0]
 801f066:	2300      	movs	r3, #0
 801f068:	6830      	ldr	r0, [r6, #0]
 801f06a:	240e      	movs	r4, #14
 801f06c:	429d      	cmp	r5, r3
 801f06e:	d90f      	bls.n	801f090 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801f070:	fb04 0203 	mla	r2, r4, r3, r0
 801f074:	3301      	adds	r3, #1
 801f076:	7b11      	ldrb	r1, [r2, #12]
 801f078:	f36f 1145 	bfc	r1, #5, #1
 801f07c:	7311      	strb	r1, [r2, #12]
 801f07e:	e7f5      	b.n	801f06c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801f080:	6822      	ldr	r2, [r4, #0]
 801f082:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f086:	6802      	ldr	r2, [r0, #0]
 801f088:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801f08c:	3301      	adds	r3, #1
 801f08e:	e7e7      	b.n	801f060 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801f090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f092:	bf00      	nop
 801f094:	20016ef4 	.word	0x20016ef4
 801f098:	20016f10 	.word	0x20016f10
 801f09c:	20016f14 	.word	0x20016f14
 801f0a0:	20016f08 	.word	0x20016f08
 801f0a4:	20016ef8 	.word	0x20016ef8
 801f0a8:	20016f00 	.word	0x20016f00
 801f0ac:	20016f12 	.word	0x20016f12
 801f0b0:	20016efc 	.word	0x20016efc
 801f0b4:	20016f0c 	.word	0x20016f0c
 801f0b8:	20016f04 	.word	0x20016f04

0801f0bc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f0bc:	4b06      	ldr	r3, [pc, #24]	; (801f0d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	b943      	cbnz	r3, 801f0d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f0c2:	b139      	cbz	r1, 801f0d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801f0c4:	4b05      	ldr	r3, [pc, #20]	; (801f0dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801f0c6:	801a      	strh	r2, [r3, #0]
 801f0c8:	4b05      	ldr	r3, [pc, #20]	; (801f0e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801f0ca:	6019      	str	r1, [r3, #0]
 801f0cc:	4b05      	ldr	r3, [pc, #20]	; (801f0e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801f0ce:	6018      	str	r0, [r3, #0]
 801f0d0:	f7ff bf96 	b.w	801f000 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f0d4:	4770      	bx	lr
 801f0d6:	bf00      	nop
 801f0d8:	20016f00 	.word	0x20016f00
 801f0dc:	20016f14 	.word	0x20016f14
 801f0e0:	20016efc 	.word	0x20016efc
 801f0e4:	20016ef4 	.word	0x20016ef4

0801f0e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f0e8:	b470      	push	{r4, r5, r6}
 801f0ea:	4c07      	ldr	r4, [pc, #28]	; (801f108 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f0ec:	4605      	mov	r5, r0
 801f0ee:	4610      	mov	r0, r2
 801f0f0:	9a03      	ldr	r2, [sp, #12]
 801f0f2:	6826      	ldr	r6, [r4, #0]
 801f0f4:	b936      	cbnz	r6, 801f104 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f0f6:	6025      	str	r5, [r4, #0]
 801f0f8:	4c04      	ldr	r4, [pc, #16]	; (801f10c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f0fa:	8021      	strh	r1, [r4, #0]
 801f0fc:	4619      	mov	r1, r3
 801f0fe:	bc70      	pop	{r4, r5, r6}
 801f100:	f7ff bfdc 	b.w	801f0bc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f104:	bc70      	pop	{r4, r5, r6}
 801f106:	4770      	bx	lr
 801f108:	20016f18 	.word	0x20016f18
 801f10c:	20016f10 	.word	0x20016f10

0801f110 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f110:	4a12      	ldr	r2, [pc, #72]	; (801f15c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801f112:	8803      	ldrh	r3, [r0, #0]
 801f114:	8812      	ldrh	r2, [r2, #0]
 801f116:	4293      	cmp	r3, r2
 801f118:	d207      	bcs.n	801f12a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801f11a:	4a11      	ldr	r2, [pc, #68]	; (801f160 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801f11c:	2114      	movs	r1, #20
 801f11e:	6812      	ldr	r2, [r2, #0]
 801f120:	fb01 2303 	mla	r3, r1, r3, r2
 801f124:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801f128:	4770      	bx	lr
 801f12a:	490e      	ldr	r1, [pc, #56]	; (801f164 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f12c:	8809      	ldrh	r1, [r1, #0]
 801f12e:	4411      	add	r1, r2
 801f130:	428b      	cmp	r3, r1
 801f132:	da04      	bge.n	801f13e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801f134:	1a9b      	subs	r3, r3, r2
 801f136:	4a0c      	ldr	r2, [pc, #48]	; (801f168 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f138:	210e      	movs	r1, #14
 801f13a:	6812      	ldr	r2, [r2, #0]
 801f13c:	e7f0      	b.n	801f120 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801f13e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f142:	4293      	cmp	r3, r2
 801f144:	d108      	bne.n	801f158 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801f146:	4b09      	ldr	r3, [pc, #36]	; (801f16c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f148:	781b      	ldrb	r3, [r3, #0]
 801f14a:	b91b      	cbnz	r3, 801f154 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801f14c:	4b08      	ldr	r3, [pc, #32]	; (801f170 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f14e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f152:	4770      	bx	lr
 801f154:	4b07      	ldr	r3, [pc, #28]	; (801f174 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f156:	e7fa      	b.n	801f14e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801f158:	2000      	movs	r0, #0
 801f15a:	4770      	bx	lr
 801f15c:	20016f10 	.word	0x20016f10
 801f160:	20016f18 	.word	0x20016f18
 801f164:	20016f14 	.word	0x20016f14
 801f168:	20016ef8 	.word	0x20016ef8
 801f16c:	20016e80 	.word	0x20016e80
 801f170:	20016e82 	.word	0x20016e82
 801f174:	20016e84 	.word	0x20016e84

0801f178 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f178:	4a12      	ldr	r2, [pc, #72]	; (801f1c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801f17a:	8803      	ldrh	r3, [r0, #0]
 801f17c:	8812      	ldrh	r2, [r2, #0]
 801f17e:	4293      	cmp	r3, r2
 801f180:	d207      	bcs.n	801f192 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801f182:	4a11      	ldr	r2, [pc, #68]	; (801f1c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801f184:	2114      	movs	r1, #20
 801f186:	6812      	ldr	r2, [r2, #0]
 801f188:	fb01 2303 	mla	r3, r1, r3, r2
 801f18c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801f190:	4770      	bx	lr
 801f192:	490e      	ldr	r1, [pc, #56]	; (801f1cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f194:	8809      	ldrh	r1, [r1, #0]
 801f196:	4411      	add	r1, r2
 801f198:	428b      	cmp	r3, r1
 801f19a:	da04      	bge.n	801f1a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801f19c:	1a9b      	subs	r3, r3, r2
 801f19e:	4a0c      	ldr	r2, [pc, #48]	; (801f1d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f1a0:	210e      	movs	r1, #14
 801f1a2:	6812      	ldr	r2, [r2, #0]
 801f1a4:	e7f0      	b.n	801f188 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801f1a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f1aa:	4293      	cmp	r3, r2
 801f1ac:	d108      	bne.n	801f1c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801f1ae:	4b09      	ldr	r3, [pc, #36]	; (801f1d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f1b0:	781b      	ldrb	r3, [r3, #0]
 801f1b2:	b91b      	cbnz	r3, 801f1bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801f1b4:	4b08      	ldr	r3, [pc, #32]	; (801f1d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f1b6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f1ba:	4770      	bx	lr
 801f1bc:	4b07      	ldr	r3, [pc, #28]	; (801f1dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f1be:	e7fa      	b.n	801f1b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801f1c0:	2000      	movs	r0, #0
 801f1c2:	4770      	bx	lr
 801f1c4:	20016f10 	.word	0x20016f10
 801f1c8:	20016f18 	.word	0x20016f18
 801f1cc:	20016f14 	.word	0x20016f14
 801f1d0:	20016ef8 	.word	0x20016ef8
 801f1d4:	20016e80 	.word	0x20016e80
 801f1d8:	20016e84 	.word	0x20016e84
 801f1dc:	20016e82 	.word	0x20016e82

0801f1e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f1e0:	4a1f      	ldr	r2, [pc, #124]	; (801f260 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801f1e2:	b510      	push	{r4, lr}
 801f1e4:	880b      	ldrh	r3, [r1, #0]
 801f1e6:	8812      	ldrh	r2, [r2, #0]
 801f1e8:	4293      	cmp	r3, r2
 801f1ea:	d213      	bcs.n	801f214 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801f1ec:	4a1d      	ldr	r2, [pc, #116]	; (801f264 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801f1ee:	2114      	movs	r1, #20
 801f1f0:	6812      	ldr	r2, [r2, #0]
 801f1f2:	fb01 2303 	mla	r3, r1, r3, r2
 801f1f6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801f1fa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801f1fe:	8a1a      	ldrh	r2, [r3, #16]
 801f200:	8a5b      	ldrh	r3, [r3, #18]
 801f202:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f206:	8004      	strh	r4, [r0, #0]
 801f208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f20c:	8041      	strh	r1, [r0, #2]
 801f20e:	8082      	strh	r2, [r0, #4]
 801f210:	80c3      	strh	r3, [r0, #6]
 801f212:	e00e      	b.n	801f232 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f214:	4914      	ldr	r1, [pc, #80]	; (801f268 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801f216:	8809      	ldrh	r1, [r1, #0]
 801f218:	4411      	add	r1, r2
 801f21a:	428b      	cmp	r3, r1
 801f21c:	da0a      	bge.n	801f234 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801f21e:	1a9b      	subs	r3, r3, r2
 801f220:	4a12      	ldr	r2, [pc, #72]	; (801f26c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801f222:	210e      	movs	r1, #14
 801f224:	6812      	ldr	r2, [r2, #0]
 801f226:	fb01 2303 	mla	r3, r1, r3, r2
 801f22a:	681a      	ldr	r2, [r3, #0]
 801f22c:	6002      	str	r2, [r0, #0]
 801f22e:	685a      	ldr	r2, [r3, #4]
 801f230:	6042      	str	r2, [r0, #4]
 801f232:	bd10      	pop	{r4, pc}
 801f234:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f238:	4293      	cmp	r3, r2
 801f23a:	d10b      	bne.n	801f254 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801f23c:	4b0c      	ldr	r3, [pc, #48]	; (801f270 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f23e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f242:	4b0c      	ldr	r3, [pc, #48]	; (801f274 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f244:	8081      	strh	r1, [r0, #4]
 801f246:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f24a:	2300      	movs	r3, #0
 801f24c:	80c2      	strh	r2, [r0, #6]
 801f24e:	8003      	strh	r3, [r0, #0]
 801f250:	8043      	strh	r3, [r0, #2]
 801f252:	e7ee      	b.n	801f232 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801f254:	2300      	movs	r3, #0
 801f256:	8003      	strh	r3, [r0, #0]
 801f258:	8043      	strh	r3, [r0, #2]
 801f25a:	8083      	strh	r3, [r0, #4]
 801f25c:	e7d8      	b.n	801f210 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801f25e:	bf00      	nop
 801f260:	20016f10 	.word	0x20016f10
 801f264:	20016f18 	.word	0x20016f18
 801f268:	20016f14 	.word	0x20016f14
 801f26c:	20016ef8 	.word	0x20016ef8
 801f270:	20016e7c 	.word	0x20016e7c
 801f274:	20016e7e 	.word	0x20016e7e

0801f278 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801f278:	4a17      	ldr	r2, [pc, #92]	; (801f2d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801f27a:	8803      	ldrh	r3, [r0, #0]
 801f27c:	8812      	ldrh	r2, [r2, #0]
 801f27e:	4293      	cmp	r3, r2
 801f280:	d213      	bcs.n	801f2aa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801f282:	4a16      	ldr	r2, [pc, #88]	; (801f2dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801f284:	2114      	movs	r1, #20
 801f286:	6812      	ldr	r2, [r2, #0]
 801f288:	fb01 2303 	mla	r3, r1, r3, r2
 801f28c:	8a1a      	ldrh	r2, [r3, #16]
 801f28e:	8919      	ldrh	r1, [r3, #8]
 801f290:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f294:	428a      	cmp	r2, r1
 801f296:	db1d      	blt.n	801f2d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f298:	8a58      	ldrh	r0, [r3, #18]
 801f29a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f29e:	895b      	ldrh	r3, [r3, #10]
 801f2a0:	4298      	cmp	r0, r3
 801f2a2:	bfac      	ite	ge
 801f2a4:	2000      	movge	r0, #0
 801f2a6:	2001      	movlt	r0, #1
 801f2a8:	4770      	bx	lr
 801f2aa:	490d      	ldr	r1, [pc, #52]	; (801f2e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801f2ac:	8809      	ldrh	r1, [r1, #0]
 801f2ae:	4411      	add	r1, r2
 801f2b0:	428b      	cmp	r3, r1
 801f2b2:	da0d      	bge.n	801f2d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801f2b4:	1a9b      	subs	r3, r3, r2
 801f2b6:	4a0b      	ldr	r2, [pc, #44]	; (801f2e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801f2b8:	210e      	movs	r1, #14
 801f2ba:	6812      	ldr	r2, [r2, #0]
 801f2bc:	fb01 2303 	mla	r3, r1, r3, r2
 801f2c0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f2c4:	891a      	ldrh	r2, [r3, #8]
 801f2c6:	4291      	cmp	r1, r2
 801f2c8:	db04      	blt.n	801f2d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801f2ca:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801f2ce:	e7e6      	b.n	801f29e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801f2d0:	2000      	movs	r0, #0
 801f2d2:	4770      	bx	lr
 801f2d4:	2001      	movs	r0, #1
 801f2d6:	4770      	bx	lr
 801f2d8:	20016f10 	.word	0x20016f10
 801f2dc:	20016f18 	.word	0x20016f18
 801f2e0:	20016f14 	.word	0x20016f14
 801f2e4:	20016ef8 	.word	0x20016ef8

0801f2e8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801f2e8:	4a12      	ldr	r2, [pc, #72]	; (801f334 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801f2ea:	8803      	ldrh	r3, [r0, #0]
 801f2ec:	8811      	ldrh	r1, [r2, #0]
 801f2ee:	428b      	cmp	r3, r1
 801f2f0:	d20b      	bcs.n	801f30a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801f2f2:	4a11      	ldr	r2, [pc, #68]	; (801f338 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f2f4:	6812      	ldr	r2, [r2, #0]
 801f2f6:	b112      	cbz	r2, 801f2fe <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801f2f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f2fc:	b9c0      	cbnz	r0, 801f330 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801f2fe:	4a0f      	ldr	r2, [pc, #60]	; (801f33c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801f300:	6811      	ldr	r1, [r2, #0]
 801f302:	2214      	movs	r2, #20
 801f304:	4353      	muls	r3, r2
 801f306:	58c8      	ldr	r0, [r1, r3]
 801f308:	4770      	bx	lr
 801f30a:	4a0d      	ldr	r2, [pc, #52]	; (801f340 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801f30c:	8812      	ldrh	r2, [r2, #0]
 801f30e:	440a      	add	r2, r1
 801f310:	4293      	cmp	r3, r2
 801f312:	da04      	bge.n	801f31e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801f314:	4a08      	ldr	r2, [pc, #32]	; (801f338 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f316:	6812      	ldr	r2, [r2, #0]
 801f318:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f31c:	4770      	bx	lr
 801f31e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f322:	4293      	cmp	r3, r2
 801f324:	d103      	bne.n	801f32e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801f326:	4b07      	ldr	r3, [pc, #28]	; (801f344 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801f32c:	4770      	bx	lr
 801f32e:	2000      	movs	r0, #0
 801f330:	4770      	bx	lr
 801f332:	bf00      	nop
 801f334:	20016f10 	.word	0x20016f10
 801f338:	20016ef4 	.word	0x20016ef4
 801f33c:	20016f18 	.word	0x20016f18
 801f340:	20016f14 	.word	0x20016f14
 801f344:	20016e88 	.word	0x20016e88

0801f348 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801f348:	4b24      	ldr	r3, [pc, #144]	; (801f3dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801f34a:	8802      	ldrh	r2, [r0, #0]
 801f34c:	8818      	ldrh	r0, [r3, #0]
 801f34e:	4282      	cmp	r2, r0
 801f350:	d221      	bcs.n	801f396 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801f352:	4b23      	ldr	r3, [pc, #140]	; (801f3e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801f354:	6819      	ldr	r1, [r3, #0]
 801f356:	2314      	movs	r3, #20
 801f358:	fb03 1302 	mla	r3, r3, r2, r1
 801f35c:	6858      	ldr	r0, [r3, #4]
 801f35e:	2800      	cmp	r0, #0
 801f360:	d03a      	beq.n	801f3d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f362:	4920      	ldr	r1, [pc, #128]	; (801f3e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f364:	6809      	ldr	r1, [r1, #0]
 801f366:	2900      	cmp	r1, #0
 801f368:	d036      	beq.n	801f3d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f36a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f36e:	2900      	cmp	r1, #0
 801f370:	d032      	beq.n	801f3d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f372:	891a      	ldrh	r2, [r3, #8]
 801f374:	8958      	ldrh	r0, [r3, #10]
 801f376:	4350      	muls	r0, r2
 801f378:	7c5a      	ldrb	r2, [r3, #17]
 801f37a:	7cdb      	ldrb	r3, [r3, #19]
 801f37c:	0952      	lsrs	r2, r2, #5
 801f37e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f382:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f386:	2b0b      	cmp	r3, #11
 801f388:	bf18      	it	ne
 801f38a:	0040      	lslne	r0, r0, #1
 801f38c:	3003      	adds	r0, #3
 801f38e:	f020 0003 	bic.w	r0, r0, #3
 801f392:	4408      	add	r0, r1
 801f394:	4770      	bx	lr
 801f396:	4b14      	ldr	r3, [pc, #80]	; (801f3e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f398:	881b      	ldrh	r3, [r3, #0]
 801f39a:	4403      	add	r3, r0
 801f39c:	429a      	cmp	r2, r3
 801f39e:	da1a      	bge.n	801f3d6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f3a0:	4b12      	ldr	r3, [pc, #72]	; (801f3ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f3a2:	1a10      	subs	r0, r2, r0
 801f3a4:	210e      	movs	r1, #14
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	fb01 3000 	mla	r0, r1, r0, r3
 801f3ac:	7b03      	ldrb	r3, [r0, #12]
 801f3ae:	f003 031f 	and.w	r3, r3, #31
 801f3b2:	2b0b      	cmp	r3, #11
 801f3b4:	d10b      	bne.n	801f3ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801f3b6:	8903      	ldrh	r3, [r0, #8]
 801f3b8:	8940      	ldrh	r0, [r0, #10]
 801f3ba:	4358      	muls	r0, r3
 801f3bc:	4b09      	ldr	r3, [pc, #36]	; (801f3e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f3be:	3003      	adds	r0, #3
 801f3c0:	6819      	ldr	r1, [r3, #0]
 801f3c2:	f020 0303 	bic.w	r3, r0, #3
 801f3c6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f3ca:	4418      	add	r0, r3
 801f3cc:	4770      	bx	lr
 801f3ce:	2b0d      	cmp	r3, #13
 801f3d0:	d101      	bne.n	801f3d6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f3d2:	300d      	adds	r0, #13
 801f3d4:	4770      	bx	lr
 801f3d6:	2000      	movs	r0, #0
 801f3d8:	4770      	bx	lr
 801f3da:	bf00      	nop
 801f3dc:	20016f10 	.word	0x20016f10
 801f3e0:	20016f18 	.word	0x20016f18
 801f3e4:	20016ef4 	.word	0x20016ef4
 801f3e8:	20016f14 	.word	0x20016f14
 801f3ec:	20016ef8 	.word	0x20016ef8

0801f3f0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f3f0:	4a17      	ldr	r2, [pc, #92]	; (801f450 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f3f2:	b510      	push	{r4, lr}
 801f3f4:	8803      	ldrh	r3, [r0, #0]
 801f3f6:	8812      	ldrh	r2, [r2, #0]
 801f3f8:	4293      	cmp	r3, r2
 801f3fa:	d20c      	bcs.n	801f416 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f3fc:	4a15      	ldr	r2, [pc, #84]	; (801f454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f3fe:	2114      	movs	r1, #20
 801f400:	6812      	ldr	r2, [r2, #0]
 801f402:	fb01 2303 	mla	r3, r1, r3, r2
 801f406:	7c58      	ldrb	r0, [r3, #17]
 801f408:	0942      	lsrs	r2, r0, #5
 801f40a:	7cd8      	ldrb	r0, [r3, #19]
 801f40c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f410:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f414:	bd10      	pop	{r4, pc}
 801f416:	4910      	ldr	r1, [pc, #64]	; (801f458 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f418:	8809      	ldrh	r1, [r1, #0]
 801f41a:	4411      	add	r1, r2
 801f41c:	428b      	cmp	r3, r1
 801f41e:	da09      	bge.n	801f434 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801f420:	1a9b      	subs	r3, r3, r2
 801f422:	4a0e      	ldr	r2, [pc, #56]	; (801f45c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f424:	210e      	movs	r1, #14
 801f426:	6812      	ldr	r2, [r2, #0]
 801f428:	fb01 2303 	mla	r3, r1, r3, r2
 801f42c:	7b18      	ldrb	r0, [r3, #12]
 801f42e:	f000 001f 	and.w	r0, r0, #31
 801f432:	e7ef      	b.n	801f414 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f434:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f438:	4293      	cmp	r3, r2
 801f43a:	d106      	bne.n	801f44a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801f43c:	f7f8 f9b4 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 801f440:	6803      	ldr	r3, [r0, #0]
 801f442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f448:	4718      	bx	r3
 801f44a:	2000      	movs	r0, #0
 801f44c:	e7e2      	b.n	801f414 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f44e:	bf00      	nop
 801f450:	20016f10 	.word	0x20016f10
 801f454:	20016f18 	.word	0x20016f18
 801f458:	20016f14 	.word	0x20016f14
 801f45c:	20016ef8 	.word	0x20016ef8

0801f460 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801f460:	2010      	movs	r0, #16
 801f462:	4770      	bx	lr

0801f464 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801f464:	2000      	movs	r0, #0
 801f466:	4770      	bx	lr

0801f468 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801f468:	4b02      	ldr	r3, [pc, #8]	; (801f474 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801f46a:	8818      	ldrh	r0, [r3, #0]
 801f46c:	0040      	lsls	r0, r0, #1
 801f46e:	b280      	uxth	r0, r0
 801f470:	4770      	bx	lr
 801f472:	bf00      	nop
 801f474:	20016e82 	.word	0x20016e82

0801f478 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f478:	2bff      	cmp	r3, #255	; 0xff
 801f47a:	d050      	beq.n	801f51e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f47c:	2a0b      	cmp	r2, #11
 801f47e:	d04a      	beq.n	801f516 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f480:	d80e      	bhi.n	801f4a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f482:	2a03      	cmp	r2, #3
 801f484:	d03f      	beq.n	801f506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801f486:	d804      	bhi.n	801f492 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f488:	2a01      	cmp	r2, #1
 801f48a:	d03e      	beq.n	801f50a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f48c:	d93f      	bls.n	801f50e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f48e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f490:	4770      	bx	lr
 801f492:	2a09      	cmp	r2, #9
 801f494:	d03f      	beq.n	801f516 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f496:	d83c      	bhi.n	801f512 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f498:	2a08      	cmp	r2, #8
 801f49a:	d03a      	beq.n	801f512 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f49c:	2000      	movs	r0, #0
 801f49e:	4770      	bx	lr
 801f4a0:	2a2f      	cmp	r2, #47	; 0x2f
 801f4a2:	d024      	beq.n	801f4ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f4a4:	d80d      	bhi.n	801f4c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801f4a6:	2a2d      	cmp	r2, #45	; 0x2d
 801f4a8:	d014      	beq.n	801f4d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801f4aa:	d826      	bhi.n	801f4fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f4ac:	2a2c      	cmp	r2, #44	; 0x2c
 801f4ae:	d1f5      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f4b0:	684b      	ldr	r3, [r1, #4]
 801f4b2:	781b      	ldrb	r3, [r3, #0]
 801f4b4:	2b01      	cmp	r3, #1
 801f4b6:	d018      	beq.n	801f4ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f4b8:	d323      	bcc.n	801f502 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801f4ba:	2b02      	cmp	r3, #2
 801f4bc:	d1ee      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f4be:	6880      	ldr	r0, [r0, #8]
 801f4c0:	4770      	bx	lr
 801f4c2:	2a31      	cmp	r2, #49	; 0x31
 801f4c4:	d004      	beq.n	801f4d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801f4c6:	d328      	bcc.n	801f51a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f4c8:	2a32      	cmp	r2, #50	; 0x32
 801f4ca:	d026      	beq.n	801f51a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f4cc:	2a33      	cmp	r2, #51	; 0x33
 801f4ce:	d1e5      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f4d0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801f4d2:	4770      	bx	lr
 801f4d4:	684b      	ldr	r3, [r1, #4]
 801f4d6:	781b      	ldrb	r3, [r3, #0]
 801f4d8:	2b01      	cmp	r3, #1
 801f4da:	d004      	beq.n	801f4e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f4dc:	d30b      	bcc.n	801f4f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f4de:	2b02      	cmp	r3, #2
 801f4e0:	d1dc      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f4e2:	6900      	ldr	r0, [r0, #16]
 801f4e4:	4770      	bx	lr
 801f4e6:	6a00      	ldr	r0, [r0, #32]
 801f4e8:	4770      	bx	lr
 801f4ea:	6980      	ldr	r0, [r0, #24]
 801f4ec:	4770      	bx	lr
 801f4ee:	684b      	ldr	r3, [r1, #4]
 801f4f0:	781b      	ldrb	r3, [r3, #0]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d1d2      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f4f6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f4f8:	4770      	bx	lr
 801f4fa:	684b      	ldr	r3, [r1, #4]
 801f4fc:	781b      	ldrb	r3, [r3, #0]
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d1cc      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f502:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f504:	4770      	bx	lr
 801f506:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f508:	4770      	bx	lr
 801f50a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f50c:	4770      	bx	lr
 801f50e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f510:	4770      	bx	lr
 801f512:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801f514:	4770      	bx	lr
 801f516:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801f518:	4770      	bx	lr
 801f51a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801f51c:	4770      	bx	lr
 801f51e:	2a0b      	cmp	r2, #11
 801f520:	d049      	beq.n	801f5b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f522:	d80e      	bhi.n	801f542 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801f524:	2a03      	cmp	r2, #3
 801f526:	d040      	beq.n	801f5aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f528:	d804      	bhi.n	801f534 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801f52a:	2a01      	cmp	r2, #1
 801f52c:	d03f      	beq.n	801f5ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f52e:	d940      	bls.n	801f5b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f530:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f532:	4770      	bx	lr
 801f534:	2a09      	cmp	r2, #9
 801f536:	d03e      	beq.n	801f5b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f538:	d801      	bhi.n	801f53e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801f53a:	2a08      	cmp	r2, #8
 801f53c:	d1ae      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f53e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801f540:	4770      	bx	lr
 801f542:	2a2f      	cmp	r2, #47	; 0x2f
 801f544:	d024      	beq.n	801f590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f546:	d80d      	bhi.n	801f564 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f548:	2a2d      	cmp	r2, #45	; 0x2d
 801f54a:	d014      	beq.n	801f576 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801f54c:	d826      	bhi.n	801f59c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801f54e:	2a2c      	cmp	r2, #44	; 0x2c
 801f550:	d1a4      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f552:	684b      	ldr	r3, [r1, #4]
 801f554:	781b      	ldrb	r3, [r3, #0]
 801f556:	2b01      	cmp	r3, #1
 801f558:	d018      	beq.n	801f58c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801f55a:	d324      	bcc.n	801f5a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f55c:	2b02      	cmp	r3, #2
 801f55e:	d19d      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f560:	68c0      	ldr	r0, [r0, #12]
 801f562:	4770      	bx	lr
 801f564:	2a31      	cmp	r2, #49	; 0x31
 801f566:	d004      	beq.n	801f572 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801f568:	d327      	bcc.n	801f5ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f56a:	2a32      	cmp	r2, #50	; 0x32
 801f56c:	d025      	beq.n	801f5ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f56e:	2a33      	cmp	r2, #51	; 0x33
 801f570:	d194      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f572:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801f574:	4770      	bx	lr
 801f576:	684b      	ldr	r3, [r1, #4]
 801f578:	781b      	ldrb	r3, [r3, #0]
 801f57a:	2b01      	cmp	r3, #1
 801f57c:	d004      	beq.n	801f588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f57e:	d30b      	bcc.n	801f598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f580:	2b02      	cmp	r3, #2
 801f582:	d18b      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f584:	6940      	ldr	r0, [r0, #20]
 801f586:	4770      	bx	lr
 801f588:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f58a:	4770      	bx	lr
 801f58c:	69c0      	ldr	r0, [r0, #28]
 801f58e:	4770      	bx	lr
 801f590:	684b      	ldr	r3, [r1, #4]
 801f592:	781b      	ldrb	r3, [r3, #0]
 801f594:	2b00      	cmp	r3, #0
 801f596:	d181      	bne.n	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f598:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f59a:	4770      	bx	lr
 801f59c:	684b      	ldr	r3, [r1, #4]
 801f59e:	781b      	ldrb	r3, [r3, #0]
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	f47f af7b 	bne.w	801f49c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f5a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f5a8:	4770      	bx	lr
 801f5aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f5ac:	4770      	bx	lr
 801f5ae:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f5b0:	4770      	bx	lr
 801f5b2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f5b4:	4770      	bx	lr
 801f5b6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f5b8:	4770      	bx	lr
 801f5ba:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801f5bc:	4770      	bx	lr

0801f5be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c2:	b087      	sub	sp, #28
 801f5c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f5c6:	9205      	str	r2, [sp, #20]
 801f5c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f5cc:	9101      	str	r1, [sp, #4]
 801f5ce:	9202      	str	r2, [sp, #8]
 801f5d0:	6841      	ldr	r1, [r0, #4]
 801f5d2:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f5d6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f5da:	fb01 2404 	mla	r4, r1, r4, r2
 801f5de:	6802      	ldr	r2, [r0, #0]
 801f5e0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f5e4:	f8de 2000 	ldr.w	r2, [lr]
 801f5e8:	9203      	str	r2, [sp, #12]
 801f5ea:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f5ee:	3204      	adds	r2, #4
 801f5f0:	9204      	str	r2, [sp, #16]
 801f5f2:	9a02      	ldr	r2, [sp, #8]
 801f5f4:	43d6      	mvns	r6, r2
 801f5f6:	b2f6      	uxtb	r6, r6
 801f5f8:	9a01      	ldr	r2, [sp, #4]
 801f5fa:	2a00      	cmp	r2, #0
 801f5fc:	dc03      	bgt.n	801f606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f5fe:	9a05      	ldr	r2, [sp, #20]
 801f600:	2a00      	cmp	r2, #0
 801f602:	f340 8129 	ble.w	801f858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f608:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f60c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f610:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f612:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f616:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	dd0e      	ble.n	801f63c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f61e:	1408      	asrs	r0, r1, #16
 801f620:	d405      	bmi.n	801f62e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f622:	4560      	cmp	r0, ip
 801f624:	da03      	bge.n	801f62e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f626:	1410      	asrs	r0, r2, #16
 801f628:	d401      	bmi.n	801f62e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f62a:	42b8      	cmp	r0, r7
 801f62c:	db07      	blt.n	801f63e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f62e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f630:	3b01      	subs	r3, #1
 801f632:	3402      	adds	r4, #2
 801f634:	4401      	add	r1, r0
 801f636:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f638:	4402      	add	r2, r0
 801f63a:	e7ee      	b.n	801f61a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f63c:	d071      	beq.n	801f722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f63e:	1e58      	subs	r0, r3, #1
 801f640:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f642:	fb05 1500 	mla	r5, r5, r0, r1
 801f646:	142d      	asrs	r5, r5, #16
 801f648:	d45f      	bmi.n	801f70a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f64a:	4565      	cmp	r5, ip
 801f64c:	da5d      	bge.n	801f70a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f64e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f650:	fb05 2000 	mla	r0, r5, r0, r2
 801f654:	1400      	asrs	r0, r0, #16
 801f656:	d458      	bmi.n	801f70a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f658:	42b8      	cmp	r0, r7
 801f65a:	da56      	bge.n	801f70a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f65c:	4699      	mov	r9, r3
 801f65e:	46a2      	mov	sl, r4
 801f660:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801f664:	f1b9 0f00 	cmp.w	r9, #0
 801f668:	dd57      	ble.n	801f71a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f66a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f66e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f672:	9803      	ldr	r0, [sp, #12]
 801f674:	140d      	asrs	r5, r1, #16
 801f676:	f109 39ff 	add.w	r9, r9, #4294967295
 801f67a:	fb07 000c 	mla	r0, r7, ip, r0
 801f67e:	5d40      	ldrb	r0, [r0, r5]
 801f680:	9d04      	ldr	r5, [sp, #16]
 801f682:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f686:	f8ba 5000 	ldrh.w	r5, [sl]
 801f68a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f68e:	122f      	asrs	r7, r5, #8
 801f690:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f694:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f698:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f69c:	00ed      	lsls	r5, r5, #3
 801f69e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f6a2:	fb17 f706 	smulbb	r7, r7, r6
 801f6a6:	b2ed      	uxtb	r5, r5
 801f6a8:	fb18 f806 	smulbb	r8, r8, r6
 801f6ac:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f6b0:	10c7      	asrs	r7, r0, #3
 801f6b2:	fb15 f506 	smulbb	r5, r5, r6
 801f6b6:	00c0      	lsls	r0, r0, #3
 801f6b8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f6bc:	fa1f fc8c 	uxth.w	ip, ip
 801f6c0:	b2c0      	uxtb	r0, r0
 801f6c2:	fb07 870b 	mla	r7, r7, fp, r8
 801f6c6:	fb00 500b 	mla	r0, r0, fp, r5
 801f6ca:	f10c 0501 	add.w	r5, ip, #1
 801f6ce:	b2bf      	uxth	r7, r7
 801f6d0:	b280      	uxth	r0, r0
 801f6d2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f6d6:	f107 0801 	add.w	r8, r7, #1
 801f6da:	1c45      	adds	r5, r0, #1
 801f6dc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f6e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f6e4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f6e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f6ea:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f6ee:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f6f2:	4401      	add	r1, r0
 801f6f4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f6f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f6fa:	ea45 0c0c 	orr.w	ip, r5, ip
 801f6fe:	4402      	add	r2, r0
 801f700:	ea4c 0c08 	orr.w	ip, ip, r8
 801f704:	f82a cb02 	strh.w	ip, [sl], #2
 801f708:	e7ac      	b.n	801f664 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f70a:	f04f 0800 	mov.w	r8, #0
 801f70e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801f712:	eb03 0008 	add.w	r0, r3, r8
 801f716:	2800      	cmp	r0, #0
 801f718:	dc41      	bgt.n	801f79e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f71a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f71e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f722:	9b01      	ldr	r3, [sp, #4]
 801f724:	2b00      	cmp	r3, #0
 801f726:	f340 8097 	ble.w	801f858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f72a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f72e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f730:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f734:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f738:	eef0 6a62 	vmov.f32	s13, s5
 801f73c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f740:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f744:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f748:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f74c:	eef0 6a43 	vmov.f32	s13, s6
 801f750:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f754:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f758:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f75c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f760:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f764:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f768:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f76c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f770:	ee12 2a90 	vmov	r2, s5
 801f774:	eef0 2a47 	vmov.f32	s5, s14
 801f778:	fb92 f3f3 	sdiv	r3, r2, r3
 801f77c:	ee13 2a10 	vmov	r2, s6
 801f780:	9313      	str	r3, [sp, #76]	; 0x4c
 801f782:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f784:	eeb0 3a67 	vmov.f32	s6, s15
 801f788:	fb92 f3f3 	sdiv	r3, r2, r3
 801f78c:	9314      	str	r3, [sp, #80]	; 0x50
 801f78e:	9b01      	ldr	r3, [sp, #4]
 801f790:	9a05      	ldr	r2, [sp, #20]
 801f792:	3b01      	subs	r3, #1
 801f794:	9301      	str	r3, [sp, #4]
 801f796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f798:	bf08      	it	eq
 801f79a:	4613      	moveq	r3, r2
 801f79c:	e72c      	b.n	801f5f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f79e:	140f      	asrs	r7, r1, #16
 801f7a0:	d453      	bmi.n	801f84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f7a2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f7a6:	42bd      	cmp	r5, r7
 801f7a8:	dd4f      	ble.n	801f84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f7aa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f7ae:	d44c      	bmi.n	801f84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f7b0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f7b4:	4560      	cmp	r0, ip
 801f7b6:	dd48      	ble.n	801f84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f7b8:	9803      	ldr	r0, [sp, #12]
 801f7ba:	b22d      	sxth	r5, r5
 801f7bc:	fb0c 0505 	mla	r5, ip, r5, r0
 801f7c0:	5de8      	ldrb	r0, [r5, r7]
 801f7c2:	9d04      	ldr	r5, [sp, #16]
 801f7c4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f7c8:	f06f 0501 	mvn.w	r5, #1
 801f7cc:	fb05 fb08 	mul.w	fp, r5, r8
 801f7d0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f7d4:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f7d8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f7dc:	122f      	asrs	r7, r5, #8
 801f7de:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f7e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f7e6:	00ed      	lsls	r5, r5, #3
 801f7e8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f7ec:	fb17 f706 	smulbb	r7, r7, r6
 801f7f0:	b2ed      	uxtb	r5, r5
 801f7f2:	fb19 f906 	smulbb	r9, r9, r6
 801f7f6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f7fa:	10c7      	asrs	r7, r0, #3
 801f7fc:	fb15 f506 	smulbb	r5, r5, r6
 801f800:	00c0      	lsls	r0, r0, #3
 801f802:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f806:	fa1f fc8c 	uxth.w	ip, ip
 801f80a:	b2c0      	uxtb	r0, r0
 801f80c:	fb07 970a 	mla	r7, r7, sl, r9
 801f810:	fb00 500a 	mla	r0, r0, sl, r5
 801f814:	f10c 0501 	add.w	r5, ip, #1
 801f818:	b2bf      	uxth	r7, r7
 801f81a:	b280      	uxth	r0, r0
 801f81c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f820:	f107 0901 	add.w	r9, r7, #1
 801f824:	1c45      	adds	r5, r0, #1
 801f826:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f82a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f82e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f832:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f836:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f83a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f83e:	ea45 0c0c 	orr.w	ip, r5, ip
 801f842:	ea4c 0c09 	orr.w	ip, ip, r9
 801f846:	f824 c00b 	strh.w	ip, [r4, fp]
 801f84a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f84c:	f108 38ff 	add.w	r8, r8, #4294967295
 801f850:	4401      	add	r1, r0
 801f852:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f854:	4402      	add	r2, r0
 801f856:	e75c      	b.n	801f712 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f858:	b007      	add	sp, #28
 801f85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f85e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f85e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f862:	b085      	sub	sp, #20
 801f864:	4693      	mov	fp, r2
 801f866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f86a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f86c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f86e:	6870      	ldr	r0, [r6, #4]
 801f870:	9100      	str	r1, [sp, #0]
 801f872:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f876:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f87a:	fb00 2404 	mla	r4, r0, r4, r2
 801f87e:	6832      	ldr	r2, [r6, #0]
 801f880:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f884:	682a      	ldr	r2, [r5, #0]
 801f886:	9201      	str	r2, [sp, #4]
 801f888:	686a      	ldr	r2, [r5, #4]
 801f88a:	3204      	adds	r2, #4
 801f88c:	9202      	str	r2, [sp, #8]
 801f88e:	9a00      	ldr	r2, [sp, #0]
 801f890:	2a00      	cmp	r2, #0
 801f892:	dc03      	bgt.n	801f89c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f894:	f1bb 0f00 	cmp.w	fp, #0
 801f898:	f340 80a0 	ble.w	801f9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f89c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f89e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f8a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f8a8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f8ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	dd0c      	ble.n	801f8ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f8b4:	1406      	asrs	r6, r0, #16
 801f8b6:	d405      	bmi.n	801f8c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f8b8:	454e      	cmp	r6, r9
 801f8ba:	da03      	bge.n	801f8c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f8bc:	1416      	asrs	r6, r2, #16
 801f8be:	d401      	bmi.n	801f8c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f8c0:	4546      	cmp	r6, r8
 801f8c2:	db05      	blt.n	801f8d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f8c4:	4470      	add	r0, lr
 801f8c6:	4462      	add	r2, ip
 801f8c8:	3b01      	subs	r3, #1
 801f8ca:	3402      	adds	r4, #2
 801f8cc:	e7f0      	b.n	801f8b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f8ce:	d00f      	beq.n	801f8f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f8d0:	1e5e      	subs	r6, r3, #1
 801f8d2:	fb0e 0706 	mla	r7, lr, r6, r0
 801f8d6:	143f      	asrs	r7, r7, #16
 801f8d8:	d541      	bpl.n	801f95e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f8da:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f8de:	4698      	mov	r8, r3
 801f8e0:	9603      	str	r6, [sp, #12]
 801f8e2:	f1b8 0f00 	cmp.w	r8, #0
 801f8e6:	dc59      	bgt.n	801f99c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f8e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f8f0:	9b00      	ldr	r3, [sp, #0]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	dd72      	ble.n	801f9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f8f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f900:	eeb0 6a62 	vmov.f32	s12, s5
 801f904:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f908:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f90c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f910:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f914:	eeb0 6a43 	vmov.f32	s12, s6
 801f918:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f91c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f920:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f924:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f928:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f92c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f930:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f934:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f938:	ee12 2a90 	vmov	r2, s5
 801f93c:	eef0 2a47 	vmov.f32	s5, s14
 801f940:	fb92 fef3 	sdiv	lr, r2, r3
 801f944:	ee13 2a10 	vmov	r2, s6
 801f948:	eeb0 3a67 	vmov.f32	s6, s15
 801f94c:	fb92 fcf3 	sdiv	ip, r2, r3
 801f950:	9b00      	ldr	r3, [sp, #0]
 801f952:	3b01      	subs	r3, #1
 801f954:	9300      	str	r3, [sp, #0]
 801f956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f958:	bf08      	it	eq
 801f95a:	465b      	moveq	r3, fp
 801f95c:	e797      	b.n	801f88e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f95e:	454f      	cmp	r7, r9
 801f960:	dabb      	bge.n	801f8da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f962:	fb0c 2606 	mla	r6, ip, r6, r2
 801f966:	1436      	asrs	r6, r6, #16
 801f968:	d4b7      	bmi.n	801f8da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f96a:	4546      	cmp	r6, r8
 801f96c:	dab5      	bge.n	801f8da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f96e:	461e      	mov	r6, r3
 801f970:	46a0      	mov	r8, r4
 801f972:	2e00      	cmp	r6, #0
 801f974:	ddb8      	ble.n	801f8e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f976:	1417      	asrs	r7, r2, #16
 801f978:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f97c:	9901      	ldr	r1, [sp, #4]
 801f97e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f982:	4462      	add	r2, ip
 801f984:	4470      	add	r0, lr
 801f986:	fb0a 1707 	mla	r7, sl, r7, r1
 801f98a:	9902      	ldr	r1, [sp, #8]
 801f98c:	3e01      	subs	r6, #1
 801f98e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f992:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f996:	f828 7b02 	strh.w	r7, [r8], #2
 801f99a:	e7ea      	b.n	801f972 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f99c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f9a0:	d417      	bmi.n	801f9d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f9a2:	68ae      	ldr	r6, [r5, #8]
 801f9a4:	454e      	cmp	r6, r9
 801f9a6:	dd14      	ble.n	801f9d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f9a8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f9ac:	d411      	bmi.n	801f9d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f9ae:	68ef      	ldr	r7, [r5, #12]
 801f9b0:	4557      	cmp	r7, sl
 801f9b2:	dd0e      	ble.n	801f9d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f9b4:	9f01      	ldr	r7, [sp, #4]
 801f9b6:	b236      	sxth	r6, r6
 801f9b8:	f06f 0101 	mvn.w	r1, #1
 801f9bc:	fb0a 7606 	mla	r6, sl, r6, r7
 801f9c0:	9f02      	ldr	r7, [sp, #8]
 801f9c2:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f9c6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f9ca:	fb01 f608 	mul.w	r6, r1, r8
 801f9ce:	9903      	ldr	r1, [sp, #12]
 801f9d0:	538f      	strh	r7, [r1, r6]
 801f9d2:	4470      	add	r0, lr
 801f9d4:	4462      	add	r2, ip
 801f9d6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f9da:	e782      	b.n	801f8e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f9dc:	b005      	add	sp, #20
 801f9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f9e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9e6:	b087      	sub	sp, #28
 801f9e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f9ea:	9205      	str	r2, [sp, #20]
 801f9ec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f9f0:	9102      	str	r1, [sp, #8]
 801f9f2:	9203      	str	r2, [sp, #12]
 801f9f4:	6861      	ldr	r1, [r4, #4]
 801f9f6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f9fa:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f9fe:	fb01 2000 	mla	r0, r1, r0, r2
 801fa02:	6822      	ldr	r2, [r4, #0]
 801fa04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801fa08:	9200      	str	r2, [sp, #0]
 801fa0a:	f8dc 2000 	ldr.w	r2, [ip]
 801fa0e:	9204      	str	r2, [sp, #16]
 801fa10:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fa14:	3204      	adds	r2, #4
 801fa16:	9201      	str	r2, [sp, #4]
 801fa18:	9a03      	ldr	r2, [sp, #12]
 801fa1a:	43d5      	mvns	r5, r2
 801fa1c:	b2ed      	uxtb	r5, r5
 801fa1e:	9a02      	ldr	r2, [sp, #8]
 801fa20:	2a00      	cmp	r2, #0
 801fa22:	dc03      	bgt.n	801fa2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fa24:	9a05      	ldr	r2, [sp, #20]
 801fa26:	2a00      	cmp	r2, #0
 801fa28:	f340 812c 	ble.w	801fc84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801fa2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fa2e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801fa32:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fa36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa38:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fa3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	dd10      	ble.n	801fa66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fa44:	140c      	asrs	r4, r1, #16
 801fa46:	d405      	bmi.n	801fa54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa48:	4574      	cmp	r4, lr
 801fa4a:	da03      	bge.n	801fa54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa4c:	1414      	asrs	r4, r2, #16
 801fa4e:	d401      	bmi.n	801fa54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa50:	42bc      	cmp	r4, r7
 801fa52:	db09      	blt.n	801fa68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa56:	3b01      	subs	r3, #1
 801fa58:	9800      	ldr	r0, [sp, #0]
 801fa5a:	4421      	add	r1, r4
 801fa5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa5e:	3002      	adds	r0, #2
 801fa60:	4422      	add	r2, r4
 801fa62:	9000      	str	r0, [sp, #0]
 801fa64:	e7ec      	b.n	801fa40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fa66:	d071      	beq.n	801fb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801fa68:	1e5c      	subs	r4, r3, #1
 801fa6a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fa6c:	fb06 1604 	mla	r6, r6, r4, r1
 801fa70:	1436      	asrs	r6, r6, #16
 801fa72:	d45d      	bmi.n	801fb30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fa74:	4576      	cmp	r6, lr
 801fa76:	da5b      	bge.n	801fb30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fa78:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801fa7a:	fb06 2404 	mla	r4, r6, r4, r2
 801fa7e:	1424      	asrs	r4, r4, #16
 801fa80:	d456      	bmi.n	801fb30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fa82:	42bc      	cmp	r4, r7
 801fa84:	da54      	bge.n	801fb30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fa86:	4698      	mov	r8, r3
 801fa88:	f8dd 9000 	ldr.w	r9, [sp]
 801fa8c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801fa90:	f1b8 0f00 	cmp.w	r8, #0
 801fa94:	dd54      	ble.n	801fb40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801fa96:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801fa9a:	1414      	asrs	r4, r2, #16
 801fa9c:	9804      	ldr	r0, [sp, #16]
 801fa9e:	140e      	asrs	r6, r1, #16
 801faa0:	f108 38ff 	add.w	r8, r8, #4294967295
 801faa4:	fb07 0404 	mla	r4, r7, r4, r0
 801faa8:	9801      	ldr	r0, [sp, #4]
 801faaa:	f814 e006 	ldrb.w	lr, [r4, r6]
 801faae:	f8b9 4000 	ldrh.w	r4, [r9]
 801fab2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fab6:	1227      	asrs	r7, r4, #8
 801fab8:	eb00 0b0e 	add.w	fp, r0, lr
 801fabc:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801fac0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fac4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fac6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801faca:	f89b b001 	ldrb.w	fp, [fp, #1]
 801face:	4401      	add	r1, r0
 801fad0:	fb16 f60a 	smulbb	r6, r6, sl
 801fad4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fad6:	fb1b fb0a 	smulbb	fp, fp, sl
 801fada:	fb07 6705 	mla	r7, r7, r5, r6
 801fade:	10e6      	asrs	r6, r4, #3
 801fae0:	00e4      	lsls	r4, r4, #3
 801fae2:	4402      	add	r2, r0
 801fae4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fae8:	b2bf      	uxth	r7, r7
 801faea:	b2e4      	uxtb	r4, r4
 801faec:	fb06 b605 	mla	r6, r6, r5, fp
 801faf0:	fb14 f405 	smulbb	r4, r4, r5
 801faf4:	b2b6      	uxth	r6, r6
 801faf6:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801fafa:	1c7c      	adds	r4, r7, #1
 801fafc:	f106 0b01 	add.w	fp, r6, #1
 801fb00:	fa1f fe8e 	uxth.w	lr, lr
 801fb04:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801fb08:	f10e 0401 	add.w	r4, lr, #1
 801fb0c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801fb10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fb14:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801fb18:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801fb1c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801fb20:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801fb24:	4327      	orrs	r7, r4
 801fb26:	ea47 070b 	orr.w	r7, r7, fp
 801fb2a:	f829 7b02 	strh.w	r7, [r9], #2
 801fb2e:	e7af      	b.n	801fa90 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801fb30:	f04f 0e00 	mov.w	lr, #0
 801fb34:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801fb38:	eb03 040e 	add.w	r4, r3, lr
 801fb3c:	2c00      	cmp	r4, #0
 801fb3e:	dc43      	bgt.n	801fbc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801fb40:	9a00      	ldr	r2, [sp, #0]
 801fb42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb46:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fb4a:	9300      	str	r3, [sp, #0]
 801fb4c:	9b02      	ldr	r3, [sp, #8]
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	f340 8098 	ble.w	801fc84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801fb54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fb58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb62:	eef0 6a62 	vmov.f32	s13, s5
 801fb66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fb6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb72:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801fb76:	eef0 6a43 	vmov.f32	s13, s6
 801fb7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb7e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801fb82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fb86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb9a:	ee12 2a90 	vmov	r2, s5
 801fb9e:	eef0 2a47 	vmov.f32	s5, s14
 801fba2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fba6:	ee13 2a10 	vmov	r2, s6
 801fbaa:	9313      	str	r3, [sp, #76]	; 0x4c
 801fbac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbae:	eeb0 3a67 	vmov.f32	s6, s15
 801fbb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbb6:	9314      	str	r3, [sp, #80]	; 0x50
 801fbb8:	9b02      	ldr	r3, [sp, #8]
 801fbba:	9a05      	ldr	r2, [sp, #20]
 801fbbc:	3b01      	subs	r3, #1
 801fbbe:	9302      	str	r3, [sp, #8]
 801fbc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbc2:	bf08      	it	eq
 801fbc4:	4613      	moveq	r3, r2
 801fbc6:	e72a      	b.n	801fa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fbc8:	140f      	asrs	r7, r1, #16
 801fbca:	d454      	bmi.n	801fc76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801fbcc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801fbd0:	42be      	cmp	r6, r7
 801fbd2:	dd50      	ble.n	801fc76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801fbd4:	ea5f 4822 	movs.w	r8, r2, asr #16
 801fbd8:	d44d      	bmi.n	801fc76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801fbda:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801fbde:	4544      	cmp	r4, r8
 801fbe0:	dd49      	ble.n	801fc76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801fbe2:	9c04      	ldr	r4, [sp, #16]
 801fbe4:	b236      	sxth	r6, r6
 801fbe6:	f06f 0001 	mvn.w	r0, #1
 801fbea:	fb08 4606 	mla	r6, r8, r6, r4
 801fbee:	9c01      	ldr	r4, [sp, #4]
 801fbf0:	fb00 fa0e 	mul.w	sl, r0, lr
 801fbf4:	9800      	ldr	r0, [sp, #0]
 801fbf6:	f816 8007 	ldrb.w	r8, [r6, r7]
 801fbfa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fbfe:	eb04 0b08 	add.w	fp, r4, r8
 801fc02:	f830 400a 	ldrh.w	r4, [r0, sl]
 801fc06:	9801      	ldr	r0, [sp, #4]
 801fc08:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801fc0c:	1227      	asrs	r7, r4, #8
 801fc0e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801fc12:	fb16 f609 	smulbb	r6, r6, r9
 801fc16:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fc1a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801fc1e:	fb1b fb09 	smulbb	fp, fp, r9
 801fc22:	fb07 6705 	mla	r7, r7, r5, r6
 801fc26:	10e6      	asrs	r6, r4, #3
 801fc28:	00e4      	lsls	r4, r4, #3
 801fc2a:	9800      	ldr	r0, [sp, #0]
 801fc2c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fc30:	b2bf      	uxth	r7, r7
 801fc32:	b2e4      	uxtb	r4, r4
 801fc34:	fb06 b605 	mla	r6, r6, r5, fp
 801fc38:	fb14 f405 	smulbb	r4, r4, r5
 801fc3c:	b2b6      	uxth	r6, r6
 801fc3e:	fb08 4809 	mla	r8, r8, r9, r4
 801fc42:	1c7c      	adds	r4, r7, #1
 801fc44:	f106 0b01 	add.w	fp, r6, #1
 801fc48:	fa1f f888 	uxth.w	r8, r8
 801fc4c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801fc50:	f108 0401 	add.w	r4, r8, #1
 801fc54:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801fc58:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fc5c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801fc60:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801fc64:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801fc68:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801fc6c:	4327      	orrs	r7, r4
 801fc6e:	ea47 070b 	orr.w	r7, r7, fp
 801fc72:	f820 700a 	strh.w	r7, [r0, sl]
 801fc76:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fc78:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fc7c:	4401      	add	r1, r0
 801fc7e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fc80:	4402      	add	r2, r0
 801fc82:	e759      	b.n	801fb38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fc84:	b007      	add	sp, #28
 801fc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fc8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc90:	b085      	sub	sp, #20
 801fc92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fc96:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fc98:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fc9a:	9203      	str	r2, [sp, #12]
 801fc9c:	6870      	ldr	r0, [r6, #4]
 801fc9e:	686f      	ldr	r7, [r5, #4]
 801fca0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801fca4:	3704      	adds	r7, #4
 801fca6:	9101      	str	r1, [sp, #4]
 801fca8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fcac:	fb00 2404 	mla	r4, r0, r4, r2
 801fcb0:	6832      	ldr	r2, [r6, #0]
 801fcb2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fcb6:	682a      	ldr	r2, [r5, #0]
 801fcb8:	9202      	str	r2, [sp, #8]
 801fcba:	9a01      	ldr	r2, [sp, #4]
 801fcbc:	2a00      	cmp	r2, #0
 801fcbe:	dc03      	bgt.n	801fcc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fcc0:	9a03      	ldr	r2, [sp, #12]
 801fcc2:	2a00      	cmp	r2, #0
 801fcc4:	f340 80cc 	ble.w	801fe60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fcc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcca:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fcce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fcd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fcd4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801fcd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	dd0d      	ble.n	801fcfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fce0:	1406      	asrs	r6, r0, #16
 801fce2:	d405      	bmi.n	801fcf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fce4:	454e      	cmp	r6, r9
 801fce6:	da03      	bge.n	801fcf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fce8:	1416      	asrs	r6, r2, #16
 801fcea:	d401      	bmi.n	801fcf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fcec:	4546      	cmp	r6, r8
 801fcee:	db06      	blt.n	801fcfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fcf0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fcf2:	4460      	add	r0, ip
 801fcf4:	3b01      	subs	r3, #1
 801fcf6:	3402      	adds	r4, #2
 801fcf8:	4432      	add	r2, r6
 801fcfa:	e7ef      	b.n	801fcdc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801fcfc:	d00f      	beq.n	801fd1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fcfe:	1e5e      	subs	r6, r3, #1
 801fd00:	fb0c 0e06 	mla	lr, ip, r6, r0
 801fd04:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801fd08:	d543      	bpl.n	801fd92 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801fd0a:	4698      	mov	r8, r3
 801fd0c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801fd10:	f1b8 0f00 	cmp.w	r8, #0
 801fd14:	dc71      	bgt.n	801fdfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801fd16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd1a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fd1e:	9b01      	ldr	r3, [sp, #4]
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	f340 809d 	ble.w	801fe60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fd26:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd30:	eeb0 6a62 	vmov.f32	s12, s5
 801fd34:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd40:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fd44:	eeb0 6a43 	vmov.f32	s12, s6
 801fd48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd4c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fd50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd54:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd58:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd68:	ee12 2a90 	vmov	r2, s5
 801fd6c:	eef0 2a47 	vmov.f32	s5, s14
 801fd70:	fb92 fcf3 	sdiv	ip, r2, r3
 801fd74:	ee13 2a10 	vmov	r2, s6
 801fd78:	eeb0 3a67 	vmov.f32	s6, s15
 801fd7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd80:	9312      	str	r3, [sp, #72]	; 0x48
 801fd82:	9b01      	ldr	r3, [sp, #4]
 801fd84:	9a03      	ldr	r2, [sp, #12]
 801fd86:	3b01      	subs	r3, #1
 801fd88:	9301      	str	r3, [sp, #4]
 801fd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd8c:	bf08      	it	eq
 801fd8e:	4613      	moveq	r3, r2
 801fd90:	e793      	b.n	801fcba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fd92:	45ce      	cmp	lr, r9
 801fd94:	dab9      	bge.n	801fd0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fd96:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fd98:	fb01 2606 	mla	r6, r1, r6, r2
 801fd9c:	1436      	asrs	r6, r6, #16
 801fd9e:	d4b4      	bmi.n	801fd0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fda0:	4546      	cmp	r6, r8
 801fda2:	dab2      	bge.n	801fd0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fda4:	4698      	mov	r8, r3
 801fda6:	46a2      	mov	sl, r4
 801fda8:	f1b8 0f00 	cmp.w	r8, #0
 801fdac:	ddb3      	ble.n	801fd16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fdae:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fdb2:	1416      	asrs	r6, r2, #16
 801fdb4:	9902      	ldr	r1, [sp, #8]
 801fdb6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801fdba:	f108 38ff 	add.w	r8, r8, #4294967295
 801fdbe:	4460      	add	r0, ip
 801fdc0:	fb09 1606 	mla	r6, r9, r6, r1
 801fdc4:	4928      	ldr	r1, [pc, #160]	; (801fe68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801fdc6:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801fdca:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fdce:	eb07 0b0e 	add.w	fp, r7, lr
 801fdd2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801fdd6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801fdda:	00f6      	lsls	r6, r6, #3
 801fddc:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801fde0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fde2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fde6:	440a      	add	r2, r1
 801fde8:	ea49 0606 	orr.w	r6, r9, r6
 801fdec:	f817 900e 	ldrb.w	r9, [r7, lr]
 801fdf0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801fdf4:	f82a 6b02 	strh.w	r6, [sl], #2
 801fdf8:	e7d6      	b.n	801fda8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fdfa:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fdfe:	d429      	bmi.n	801fe54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fe00:	68ae      	ldr	r6, [r5, #8]
 801fe02:	454e      	cmp	r6, r9
 801fe04:	dd26      	ble.n	801fe54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fe06:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fe0a:	d423      	bmi.n	801fe54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fe0c:	68e9      	ldr	r1, [r5, #12]
 801fe0e:	4559      	cmp	r1, fp
 801fe10:	dd20      	ble.n	801fe54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fe12:	fa0f fe86 	sxth.w	lr, r6
 801fe16:	9902      	ldr	r1, [sp, #8]
 801fe18:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801fe1c:	f06f 0101 	mvn.w	r1, #1
 801fe20:	f81e e009 	ldrb.w	lr, [lr, r9]
 801fe24:	fb01 f908 	mul.w	r9, r1, r8
 801fe28:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801fe2c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fe30:	eb07 060e 	add.w	r6, r7, lr
 801fe34:	f896 b002 	ldrb.w	fp, [r6, #2]
 801fe38:	7876      	ldrb	r6, [r6, #1]
 801fe3a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801fe3e:	00f6      	lsls	r6, r6, #3
 801fe40:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fe44:	ea4b 0606 	orr.w	r6, fp, r6
 801fe48:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801fe4c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801fe50:	f82a 6009 	strh.w	r6, [sl, r9]
 801fe54:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fe56:	4460      	add	r0, ip
 801fe58:	f108 38ff 	add.w	r8, r8, #4294967295
 801fe5c:	440a      	add	r2, r1
 801fe5e:	e757      	b.n	801fd10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fe60:	b005      	add	sp, #20
 801fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe66:	bf00      	nop
 801fe68:	fffff800 	.word	0xfffff800

0801fe6c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe70:	b087      	sub	sp, #28
 801fe72:	468b      	mov	fp, r1
 801fe74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fe78:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fe7a:	9204      	str	r2, [sp, #16]
 801fe7c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fe80:	6841      	ldr	r1, [r0, #4]
 801fe82:	9205      	str	r2, [sp, #20]
 801fe84:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801fe88:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fe8c:	fb01 2404 	mla	r4, r1, r4, r2
 801fe90:	6802      	ldr	r2, [r0, #0]
 801fe92:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fe96:	f8dc 2000 	ldr.w	r2, [ip]
 801fe9a:	9201      	str	r2, [sp, #4]
 801fe9c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fea0:	3204      	adds	r2, #4
 801fea2:	9202      	str	r2, [sp, #8]
 801fea4:	f1bb 0f00 	cmp.w	fp, #0
 801fea8:	dc03      	bgt.n	801feb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801feaa:	9a04      	ldr	r2, [sp, #16]
 801feac:	2a00      	cmp	r2, #0
 801feae:	f340 8138 	ble.w	8020122 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801feb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801feb4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801feb8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801febc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801febe:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801fec2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	dd0e      	ble.n	801fee8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801feca:	1402      	asrs	r2, r0, #16
 801fecc:	d405      	bmi.n	801feda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fece:	42ba      	cmp	r2, r7
 801fed0:	da03      	bge.n	801feda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fed2:	140a      	asrs	r2, r1, #16
 801fed4:	d401      	bmi.n	801feda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fed6:	42b2      	cmp	r2, r6
 801fed8:	db07      	blt.n	801feea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801feda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fedc:	3b01      	subs	r3, #1
 801fede:	3402      	adds	r4, #2
 801fee0:	4410      	add	r0, r2
 801fee2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fee4:	4411      	add	r1, r2
 801fee6:	e7ee      	b.n	801fec6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fee8:	d019      	beq.n	801ff1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801feea:	1e5a      	subs	r2, r3, #1
 801feec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801feee:	fb05 0502 	mla	r5, r5, r2, r0
 801fef2:	142d      	asrs	r5, r5, #16
 801fef4:	d409      	bmi.n	801ff0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fef6:	42bd      	cmp	r5, r7
 801fef8:	da07      	bge.n	801ff0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fefa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fefc:	fb05 1202 	mla	r2, r5, r2, r1
 801ff00:	1412      	asrs	r2, r2, #16
 801ff02:	d402      	bmi.n	801ff0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ff04:	42b2      	cmp	r2, r6
 801ff06:	f2c0 80ac 	blt.w	8020062 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801ff0a:	f04f 0e00 	mov.w	lr, #0
 801ff0e:	eb03 020e 	add.w	r2, r3, lr
 801ff12:	2a00      	cmp	r2, #0
 801ff14:	dc3e      	bgt.n	801ff94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ff16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff1a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff1e:	f1bb 0f00 	cmp.w	fp, #0
 801ff22:	f340 80fe 	ble.w	8020122 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ff26:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff30:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff34:	eeb0 6a62 	vmov.f32	s12, s5
 801ff38:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff44:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ff48:	eeb0 6a43 	vmov.f32	s12, s6
 801ff4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff50:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ff54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff58:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff6c:	ee12 2a90 	vmov	r2, s5
 801ff70:	eef0 2a47 	vmov.f32	s5, s14
 801ff74:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff78:	ee13 2a10 	vmov	r2, s6
 801ff7c:	9313      	str	r3, [sp, #76]	; 0x4c
 801ff7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff80:	eeb0 3a67 	vmov.f32	s6, s15
 801ff84:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff88:	9a04      	ldr	r2, [sp, #16]
 801ff8a:	9314      	str	r3, [sp, #80]	; 0x50
 801ff8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff8e:	bf08      	it	eq
 801ff90:	4613      	moveq	r3, r2
 801ff92:	e787      	b.n	801fea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ff94:	1406      	asrs	r6, r0, #16
 801ff96:	d45d      	bmi.n	8020054 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ff98:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ff9c:	42b5      	cmp	r5, r6
 801ff9e:	dd59      	ble.n	8020054 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffa0:	140f      	asrs	r7, r1, #16
 801ffa2:	d457      	bmi.n	8020054 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffa4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ffa8:	42ba      	cmp	r2, r7
 801ffaa:	dd53      	ble.n	8020054 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffac:	9a01      	ldr	r2, [sp, #4]
 801ffae:	b22d      	sxth	r5, r5
 801ffb0:	fb07 2505 	mla	r5, r7, r5, r2
 801ffb4:	5daa      	ldrb	r2, [r5, r6]
 801ffb6:	9d02      	ldr	r5, [sp, #8]
 801ffb8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ffbc:	0e2e      	lsrs	r6, r5, #24
 801ffbe:	d049      	beq.n	8020054 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ffc0:	f06f 0201 	mvn.w	r2, #1
 801ffc4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ffc8:	fb02 f20e 	mul.w	r2, r2, lr
 801ffcc:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ffd0:	9203      	str	r2, [sp, #12]
 801ffd2:	9a05      	ldr	r2, [sp, #20]
 801ffd4:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ffd8:	4356      	muls	r6, r2
 801ffda:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ffde:	1c72      	adds	r2, r6, #1
 801ffe0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ffe4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ffe8:	b2ed      	uxtb	r5, r5
 801ffea:	1212      	asrs	r2, r2, #8
 801ffec:	fa1f f982 	uxth.w	r9, r2
 801fff0:	43d2      	mvns	r2, r2
 801fff2:	fb16 f609 	smulbb	r6, r6, r9
 801fff6:	b2d2      	uxtb	r2, r2
 801fff8:	fb15 f509 	smulbb	r5, r5, r9
 801fffc:	fb07 6702 	mla	r7, r7, r2, r6
 8020000:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020004:	fb1a fa09 	smulbb	sl, sl, r9
 8020008:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802000c:	b2bf      	uxth	r7, r7
 802000e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020012:	fa5f f888 	uxtb.w	r8, r8
 8020016:	fb06 a602 	mla	r6, r6, r2, sl
 802001a:	fb08 5502 	mla	r5, r8, r2, r5
 802001e:	1c7a      	adds	r2, r7, #1
 8020020:	b2b6      	uxth	r6, r6
 8020022:	b2ad      	uxth	r5, r5
 8020024:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020028:	9a03      	ldr	r2, [sp, #12]
 802002a:	f105 0a01 	add.w	sl, r5, #1
 802002e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020032:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020036:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802003a:	ea4a 0707 	orr.w	r7, sl, r7
 802003e:	f106 0a01 	add.w	sl, r6, #1
 8020042:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020046:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802004a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802004e:	ea47 070a 	orr.w	r7, r7, sl
 8020052:	52a7      	strh	r7, [r4, r2]
 8020054:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020056:	f10e 3eff 	add.w	lr, lr, #4294967295
 802005a:	4410      	add	r0, r2
 802005c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802005e:	4411      	add	r1, r2
 8020060:	e755      	b.n	801ff0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020062:	f04f 0800 	mov.w	r8, #0
 8020066:	eba3 0208 	sub.w	r2, r3, r8
 802006a:	2a00      	cmp	r2, #0
 802006c:	f77f af53 	ble.w	801ff16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020070:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8020074:	140a      	asrs	r2, r1, #16
 8020076:	9f01      	ldr	r7, [sp, #4]
 8020078:	1405      	asrs	r5, r0, #16
 802007a:	fb06 7202 	mla	r2, r6, r2, r7
 802007e:	5d52      	ldrb	r2, [r2, r5]
 8020080:	9d02      	ldr	r5, [sp, #8]
 8020082:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020086:	0e2e      	lsrs	r6, r5, #24
 8020088:	d044      	beq.n	8020114 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802008a:	9a05      	ldr	r2, [sp, #20]
 802008c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020090:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020094:	4356      	muls	r6, r2
 8020096:	ea4f 272e 	mov.w	r7, lr, asr #8
 802009a:	1c72      	adds	r2, r6, #1
 802009c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80200a0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80200a4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80200a8:	b2ed      	uxtb	r5, r5
 80200aa:	1212      	asrs	r2, r2, #8
 80200ac:	fa1f f982 	uxth.w	r9, r2
 80200b0:	43d2      	mvns	r2, r2
 80200b2:	fb16 f609 	smulbb	r6, r6, r9
 80200b6:	b2d2      	uxtb	r2, r2
 80200b8:	fb15 f509 	smulbb	r5, r5, r9
 80200bc:	fb07 6702 	mla	r7, r7, r2, r6
 80200c0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80200c4:	fb1a fa09 	smulbb	sl, sl, r9
 80200c8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80200cc:	b2bf      	uxth	r7, r7
 80200ce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80200d2:	fa5f fe8e 	uxtb.w	lr, lr
 80200d6:	fb06 a602 	mla	r6, r6, r2, sl
 80200da:	fb0e 5502 	mla	r5, lr, r2, r5
 80200de:	1c7a      	adds	r2, r7, #1
 80200e0:	b2b6      	uxth	r6, r6
 80200e2:	b2ad      	uxth	r5, r5
 80200e4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80200e8:	f105 0a01 	add.w	sl, r5, #1
 80200ec:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80200f0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80200f4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80200f8:	ea4a 0707 	orr.w	r7, sl, r7
 80200fc:	f106 0a01 	add.w	sl, r6, #1
 8020100:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020104:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020108:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802010c:	ea47 070a 	orr.w	r7, r7, sl
 8020110:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020114:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020116:	f108 0801 	add.w	r8, r8, #1
 802011a:	4410      	add	r0, r2
 802011c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802011e:	4411      	add	r1, r2
 8020120:	e7a1      	b.n	8020066 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020122:	b007      	add	sp, #28
 8020124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020128 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802012c:	b085      	sub	sp, #20
 802012e:	468b      	mov	fp, r1
 8020130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020134:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020136:	9203      	str	r2, [sp, #12]
 8020138:	6841      	ldr	r1, [r0, #4]
 802013a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 802013e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020142:	fb01 2404 	mla	r4, r1, r4, r2
 8020146:	6802      	ldr	r2, [r0, #0]
 8020148:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802014c:	f8de 2000 	ldr.w	r2, [lr]
 8020150:	9200      	str	r2, [sp, #0]
 8020152:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020156:	3204      	adds	r2, #4
 8020158:	9201      	str	r2, [sp, #4]
 802015a:	f1bb 0f00 	cmp.w	fp, #0
 802015e:	dc03      	bgt.n	8020168 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020160:	9a03      	ldr	r2, [sp, #12]
 8020162:	2a00      	cmp	r2, #0
 8020164:	f340 8153 	ble.w	802040e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8020168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802016a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 802016e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020174:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020178:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802017c:	2b00      	cmp	r3, #0
 802017e:	dd0e      	ble.n	802019e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020180:	1408      	asrs	r0, r1, #16
 8020182:	d405      	bmi.n	8020190 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020184:	42b8      	cmp	r0, r7
 8020186:	da03      	bge.n	8020190 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020188:	1410      	asrs	r0, r2, #16
 802018a:	d401      	bmi.n	8020190 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802018c:	42b0      	cmp	r0, r6
 802018e:	db07      	blt.n	80201a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020190:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020192:	3b01      	subs	r3, #1
 8020194:	3402      	adds	r4, #2
 8020196:	4401      	add	r1, r0
 8020198:	9812      	ldr	r0, [sp, #72]	; 0x48
 802019a:	4402      	add	r2, r0
 802019c:	e7ee      	b.n	802017c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802019e:	d017      	beq.n	80201d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80201a0:	1e58      	subs	r0, r3, #1
 80201a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80201a4:	fb05 1500 	mla	r5, r5, r0, r1
 80201a8:	142d      	asrs	r5, r5, #16
 80201aa:	d409      	bmi.n	80201c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80201ac:	42bd      	cmp	r5, r7
 80201ae:	da07      	bge.n	80201c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80201b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80201b2:	fb05 2000 	mla	r0, r5, r0, r2
 80201b6:	1400      	asrs	r0, r0, #16
 80201b8:	d402      	bmi.n	80201c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80201ba:	42b0      	cmp	r0, r6
 80201bc:	f2c0 80bc 	blt.w	8020338 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80201c0:	2600      	movs	r6, #0
 80201c2:	1998      	adds	r0, r3, r6
 80201c4:	2800      	cmp	r0, #0
 80201c6:	dc3e      	bgt.n	8020246 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80201c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80201cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80201d0:	f1bb 0f00 	cmp.w	fp, #0
 80201d4:	f340 811b 	ble.w	802040e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80201d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80201de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201e2:	f1bb 0b01 	subs.w	fp, fp, #1
 80201e6:	eeb0 6a62 	vmov.f32	s12, s5
 80201ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80201ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201f6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80201fa:	eeb0 6a43 	vmov.f32	s12, s6
 80201fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020202:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020206:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802020a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802020e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020212:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020216:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802021a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802021e:	ee12 2a90 	vmov	r2, s5
 8020222:	eef0 2a47 	vmov.f32	s5, s14
 8020226:	fb92 f3f3 	sdiv	r3, r2, r3
 802022a:	ee13 2a10 	vmov	r2, s6
 802022e:	9311      	str	r3, [sp, #68]	; 0x44
 8020230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020232:	eeb0 3a67 	vmov.f32	s6, s15
 8020236:	fb92 f3f3 	sdiv	r3, r2, r3
 802023a:	9a03      	ldr	r2, [sp, #12]
 802023c:	9312      	str	r3, [sp, #72]	; 0x48
 802023e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020240:	bf08      	it	eq
 8020242:	4613      	moveq	r3, r2
 8020244:	e789      	b.n	802015a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020246:	140f      	asrs	r7, r1, #16
 8020248:	d426      	bmi.n	8020298 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 802024a:	f8de 5008 	ldr.w	r5, [lr, #8]
 802024e:	42bd      	cmp	r5, r7
 8020250:	dd22      	ble.n	8020298 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020252:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020256:	d41f      	bmi.n	8020298 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020258:	f8de 000c 	ldr.w	r0, [lr, #12]
 802025c:	4560      	cmp	r0, ip
 802025e:	dd1b      	ble.n	8020298 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020260:	9800      	ldr	r0, [sp, #0]
 8020262:	b22d      	sxth	r5, r5
 8020264:	fb0c 0505 	mla	r5, ip, r5, r0
 8020268:	5de8      	ldrb	r0, [r5, r7]
 802026a:	9d01      	ldr	r5, [sp, #4]
 802026c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8020270:	0e07      	lsrs	r7, r0, #24
 8020272:	2fff      	cmp	r7, #255	; 0xff
 8020274:	d116      	bne.n	80202a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020276:	f06f 0501 	mvn.w	r5, #1
 802027a:	fb05 f706 	mul.w	r7, r5, r6
 802027e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020282:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020286:	0945      	lsrs	r5, r0, #5
 8020288:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802028c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020290:	ea4c 0505 	orr.w	r5, ip, r5
 8020294:	4305      	orrs	r5, r0
 8020296:	53e5      	strh	r5, [r4, r7]
 8020298:	9811      	ldr	r0, [sp, #68]	; 0x44
 802029a:	3e01      	subs	r6, #1
 802029c:	4401      	add	r1, r0
 802029e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80202a0:	4402      	add	r2, r0
 80202a2:	e78e      	b.n	80201c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80202a4:	b2fd      	uxtb	r5, r7
 80202a6:	2f00      	cmp	r7, #0
 80202a8:	d0f6      	beq.n	8020298 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80202aa:	f06f 0701 	mvn.w	r7, #1
 80202ae:	fa1f f985 	uxth.w	r9, r5
 80202b2:	43ed      	mvns	r5, r5
 80202b4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80202b8:	4377      	muls	r7, r6
 80202ba:	fb1a fa09 	smulbb	sl, sl, r9
 80202be:	b2ed      	uxtb	r5, r5
 80202c0:	f834 8007 	ldrh.w	r8, [r4, r7]
 80202c4:	9702      	str	r7, [sp, #8]
 80202c6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80202ca:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80202ce:	fb17 f709 	smulbb	r7, r7, r9
 80202d2:	b2c0      	uxtb	r0, r0
 80202d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202d8:	fb10 f009 	smulbb	r0, r0, r9
 80202dc:	fb0c 7c05 	mla	ip, ip, r5, r7
 80202e0:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80202e4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80202e8:	fa1f fc8c 	uxth.w	ip, ip
 80202ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80202f0:	fa5f f888 	uxtb.w	r8, r8
 80202f4:	fb07 a705 	mla	r7, r7, r5, sl
 80202f8:	fb08 0005 	mla	r0, r8, r5, r0
 80202fc:	f10c 0501 	add.w	r5, ip, #1
 8020300:	b2bf      	uxth	r7, r7
 8020302:	b280      	uxth	r0, r0
 8020304:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020308:	f100 0a01 	add.w	sl, r0, #1
 802030c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020310:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020314:	9802      	ldr	r0, [sp, #8]
 8020316:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802031a:	ea4a 0c0c 	orr.w	ip, sl, ip
 802031e:	f107 0a01 	add.w	sl, r7, #1
 8020322:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020326:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802032a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802032e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020332:	f824 c000 	strh.w	ip, [r4, r0]
 8020336:	e7af      	b.n	8020298 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020338:	f04f 0800 	mov.w	r8, #0
 802033c:	eba3 0008 	sub.w	r0, r3, r8
 8020340:	2800      	cmp	r0, #0
 8020342:	f77f af41 	ble.w	80201c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020346:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 802034a:	1410      	asrs	r0, r2, #16
 802034c:	9f00      	ldr	r7, [sp, #0]
 802034e:	140d      	asrs	r5, r1, #16
 8020350:	fb06 7000 	mla	r0, r6, r0, r7
 8020354:	5d40      	ldrb	r0, [r0, r5]
 8020356:	9d01      	ldr	r5, [sp, #4]
 8020358:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 802035c:	0e2e      	lsrs	r6, r5, #24
 802035e:	2eff      	cmp	r6, #255	; 0xff
 8020360:	d112      	bne.n	8020388 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020362:	482c      	ldr	r0, [pc, #176]	; (8020414 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020364:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020368:	0968      	lsrs	r0, r5, #5
 802036a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802036e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020372:	4330      	orrs	r0, r6
 8020374:	4328      	orrs	r0, r5
 8020376:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 802037a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802037c:	f108 0801 	add.w	r8, r8, #1
 8020380:	4401      	add	r1, r0
 8020382:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020384:	4402      	add	r2, r0
 8020386:	e7d9      	b.n	802033c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020388:	b2f0      	uxtb	r0, r6
 802038a:	2e00      	cmp	r6, #0
 802038c:	d0f5      	beq.n	802037a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802038e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020392:	fa1f f980 	uxth.w	r9, r0
 8020396:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802039a:	43c0      	mvns	r0, r0
 802039c:	ea4f 272c 	mov.w	r7, ip, asr #8
 80203a0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80203a4:	fb16 f609 	smulbb	r6, r6, r9
 80203a8:	b2c0      	uxtb	r0, r0
 80203aa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80203ae:	b2ed      	uxtb	r5, r5
 80203b0:	fb1a fa09 	smulbb	sl, sl, r9
 80203b4:	fb07 6700 	mla	r7, r7, r0, r6
 80203b8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80203bc:	fb15 f509 	smulbb	r5, r5, r9
 80203c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80203c4:	b2bf      	uxth	r7, r7
 80203c6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80203ca:	fa5f fc8c 	uxtb.w	ip, ip
 80203ce:	fb06 a600 	mla	r6, r6, r0, sl
 80203d2:	fb0c 5500 	mla	r5, ip, r0, r5
 80203d6:	1c78      	adds	r0, r7, #1
 80203d8:	b2b6      	uxth	r6, r6
 80203da:	b2ad      	uxth	r5, r5
 80203dc:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80203e0:	f105 0a01 	add.w	sl, r5, #1
 80203e4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80203e8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80203ec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80203f0:	ea4a 0707 	orr.w	r7, sl, r7
 80203f4:	f106 0a01 	add.w	sl, r6, #1
 80203f8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80203fc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020400:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020404:	ea47 070a 	orr.w	r7, r7, sl
 8020408:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 802040c:	e7b5      	b.n	802037a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802040e:	b005      	add	sp, #20
 8020410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020414:	fffff800 	.word	0xfffff800

08020418 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802041c:	b087      	sub	sp, #28
 802041e:	468b      	mov	fp, r1
 8020420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020424:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020426:	9204      	str	r2, [sp, #16]
 8020428:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802042c:	6861      	ldr	r1, [r4, #4]
 802042e:	9205      	str	r2, [sp, #20]
 8020430:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8020434:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8020438:	fb01 2000 	mla	r0, r1, r0, r2
 802043c:	6822      	ldr	r2, [r4, #0]
 802043e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020442:	f8de 2000 	ldr.w	r2, [lr]
 8020446:	9201      	str	r2, [sp, #4]
 8020448:	f8de 2004 	ldr.w	r2, [lr, #4]
 802044c:	9202      	str	r2, [sp, #8]
 802044e:	f1bb 0f00 	cmp.w	fp, #0
 8020452:	dc03      	bgt.n	802045c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020454:	9a04      	ldr	r2, [sp, #16]
 8020456:	2a00      	cmp	r2, #0
 8020458:	f340 8142 	ble.w	80206e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802045c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802045e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020462:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020466:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020468:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 802046c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020470:	2b00      	cmp	r3, #0
 8020472:	dd0e      	ble.n	8020492 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020474:	140c      	asrs	r4, r1, #16
 8020476:	d405      	bmi.n	8020484 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020478:	42bc      	cmp	r4, r7
 802047a:	da03      	bge.n	8020484 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802047c:	1414      	asrs	r4, r2, #16
 802047e:	d401      	bmi.n	8020484 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020480:	42b4      	cmp	r4, r6
 8020482:	db07      	blt.n	8020494 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020484:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020486:	3b01      	subs	r3, #1
 8020488:	3002      	adds	r0, #2
 802048a:	4421      	add	r1, r4
 802048c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802048e:	4422      	add	r2, r4
 8020490:	e7ee      	b.n	8020470 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020492:	d019      	beq.n	80204c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020494:	1e5c      	subs	r4, r3, #1
 8020496:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020498:	fb05 1504 	mla	r5, r5, r4, r1
 802049c:	142d      	asrs	r5, r5, #16
 802049e:	d409      	bmi.n	80204b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80204a0:	42bd      	cmp	r5, r7
 80204a2:	da07      	bge.n	80204b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80204a4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80204a6:	fb05 2404 	mla	r4, r5, r4, r2
 80204aa:	1424      	asrs	r4, r4, #16
 80204ac:	d402      	bmi.n	80204b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80204ae:	42b4      	cmp	r4, r6
 80204b0:	f2c0 80b1 	blt.w	8020616 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80204b4:	f04f 0800 	mov.w	r8, #0
 80204b8:	eb03 0408 	add.w	r4, r3, r8
 80204bc:	2c00      	cmp	r4, #0
 80204be:	dc3e      	bgt.n	802053e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80204c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80204c8:	f1bb 0f00 	cmp.w	fp, #0
 80204cc:	f340 8108 	ble.w	80206e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80204d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80204d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204da:	f1bb 0b01 	subs.w	fp, fp, #1
 80204de:	eeb0 6a62 	vmov.f32	s12, s5
 80204e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80204e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204ee:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80204f2:	eeb0 6a43 	vmov.f32	s12, s6
 80204f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204fa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80204fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020502:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020506:	ee77 2a62 	vsub.f32	s5, s14, s5
 802050a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802050e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020512:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020516:	ee12 2a90 	vmov	r2, s5
 802051a:	eef0 2a47 	vmov.f32	s5, s14
 802051e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020522:	ee13 2a10 	vmov	r2, s6
 8020526:	9313      	str	r3, [sp, #76]	; 0x4c
 8020528:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802052a:	eeb0 3a67 	vmov.f32	s6, s15
 802052e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020532:	9a04      	ldr	r2, [sp, #16]
 8020534:	9314      	str	r3, [sp, #80]	; 0x50
 8020536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020538:	bf08      	it	eq
 802053a:	4613      	moveq	r3, r2
 802053c:	e787      	b.n	802044e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802053e:	140e      	asrs	r6, r1, #16
 8020540:	d462      	bmi.n	8020608 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020542:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020546:	42b5      	cmp	r5, r6
 8020548:	dd5e      	ble.n	8020608 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802054a:	1417      	asrs	r7, r2, #16
 802054c:	d45c      	bmi.n	8020608 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802054e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8020552:	42bc      	cmp	r4, r7
 8020554:	dd58      	ble.n	8020608 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020556:	b22d      	sxth	r5, r5
 8020558:	9c02      	ldr	r4, [sp, #8]
 802055a:	fb07 6505 	mla	r5, r7, r5, r6
 802055e:	5d66      	ldrb	r6, [r4, r5]
 8020560:	2e00      	cmp	r6, #0
 8020562:	d051      	beq.n	8020608 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020564:	9c01      	ldr	r4, [sp, #4]
 8020566:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 802056a:	f06f 0401 	mvn.w	r4, #1
 802056e:	fb04 f408 	mul.w	r4, r4, r8
 8020572:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8020576:	5b05      	ldrh	r5, [r0, r4]
 8020578:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802057c:	9403      	str	r4, [sp, #12]
 802057e:	9c05      	ldr	r4, [sp, #20]
 8020580:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020584:	4366      	muls	r6, r4
 8020586:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802058a:	1c74      	adds	r4, r6, #1
 802058c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020590:	122e      	asrs	r6, r5, #8
 8020592:	1224      	asrs	r4, r4, #8
 8020594:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020598:	00ed      	lsls	r5, r5, #3
 802059a:	b2a7      	uxth	r7, r4
 802059c:	43e4      	mvns	r4, r4
 802059e:	b2ed      	uxtb	r5, r5
 80205a0:	b2e4      	uxtb	r4, r4
 80205a2:	fb16 f604 	smulbb	r6, r6, r4
 80205a6:	fb15 f504 	smulbb	r5, r5, r4
 80205aa:	fb0c 6c07 	mla	ip, ip, r7, r6
 80205ae:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80205b2:	fb1a fa04 	smulbb	sl, sl, r4
 80205b6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80205ba:	fa1f fc8c 	uxth.w	ip, ip
 80205be:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80205c2:	fa5f f989 	uxtb.w	r9, r9
 80205c6:	fb06 a607 	mla	r6, r6, r7, sl
 80205ca:	f10c 0401 	add.w	r4, ip, #1
 80205ce:	fb09 5507 	mla	r5, r9, r7, r5
 80205d2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80205d6:	9c03      	ldr	r4, [sp, #12]
 80205d8:	b2ad      	uxth	r5, r5
 80205da:	b2b6      	uxth	r6, r6
 80205dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80205e0:	f105 0a01 	add.w	sl, r5, #1
 80205e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80205e8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80205ec:	ea4a 0c0c 	orr.w	ip, sl, ip
 80205f0:	f106 0a01 	add.w	sl, r6, #1
 80205f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80205f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80205fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020600:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020604:	f820 c004 	strh.w	ip, [r0, r4]
 8020608:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802060a:	f108 38ff 	add.w	r8, r8, #4294967295
 802060e:	4421      	add	r1, r4
 8020610:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020612:	4422      	add	r2, r4
 8020614:	e750      	b.n	80204b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020616:	f04f 0900 	mov.w	r9, #0
 802061a:	eba3 0409 	sub.w	r4, r3, r9
 802061e:	2c00      	cmp	r4, #0
 8020620:	f77f af4e 	ble.w	80204c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020624:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020628:	140d      	asrs	r5, r1, #16
 802062a:	1414      	asrs	r4, r2, #16
 802062c:	fb06 5404 	mla	r4, r6, r4, r5
 8020630:	9d02      	ldr	r5, [sp, #8]
 8020632:	5d2e      	ldrb	r6, [r5, r4]
 8020634:	2e00      	cmp	r6, #0
 8020636:	d04c      	beq.n	80206d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020638:	9d01      	ldr	r5, [sp, #4]
 802063a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 802063e:	9c05      	ldr	r4, [sp, #20]
 8020640:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8020644:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020648:	4366      	muls	r6, r4
 802064a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802064e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020652:	1c74      	adds	r4, r6, #1
 8020654:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020658:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 802065c:	122e      	asrs	r6, r5, #8
 802065e:	1224      	asrs	r4, r4, #8
 8020660:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020664:	00ed      	lsls	r5, r5, #3
 8020666:	b2a7      	uxth	r7, r4
 8020668:	43e4      	mvns	r4, r4
 802066a:	b2ed      	uxtb	r5, r5
 802066c:	b2e4      	uxtb	r4, r4
 802066e:	fb16 f604 	smulbb	r6, r6, r4
 8020672:	fb15 f504 	smulbb	r5, r5, r4
 8020676:	fb0c 6c07 	mla	ip, ip, r7, r6
 802067a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 802067e:	fb1a fa04 	smulbb	sl, sl, r4
 8020682:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020686:	fa1f fc8c 	uxth.w	ip, ip
 802068a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802068e:	fa5f f888 	uxtb.w	r8, r8
 8020692:	fb06 a607 	mla	r6, r6, r7, sl
 8020696:	f10c 0401 	add.w	r4, ip, #1
 802069a:	fb08 5507 	mla	r5, r8, r7, r5
 802069e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80206a2:	b2ad      	uxth	r5, r5
 80206a4:	b2b6      	uxth	r6, r6
 80206a6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80206aa:	f105 0a01 	add.w	sl, r5, #1
 80206ae:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80206b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80206b6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80206ba:	f106 0a01 	add.w	sl, r6, #1
 80206be:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80206c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80206c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80206ca:	ea4c 0c0a 	orr.w	ip, ip, sl
 80206ce:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80206d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80206d4:	f109 0901 	add.w	r9, r9, #1
 80206d8:	4421      	add	r1, r4
 80206da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80206dc:	4422      	add	r2, r4
 80206de:	e79c      	b.n	802061a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80206e0:	b007      	add	sp, #28
 80206e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80206e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206ea:	b085      	sub	sp, #20
 80206ec:	468b      	mov	fp, r1
 80206ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80206f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80206f4:	9203      	str	r2, [sp, #12]
 80206f6:	6861      	ldr	r1, [r4, #4]
 80206f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80206fc:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8020700:	fb01 2000 	mla	r0, r1, r0, r2
 8020704:	6822      	ldr	r2, [r4, #0]
 8020706:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802070a:	f8d8 2000 	ldr.w	r2, [r8]
 802070e:	9200      	str	r2, [sp, #0]
 8020710:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020714:	9201      	str	r2, [sp, #4]
 8020716:	f1bb 0f00 	cmp.w	fp, #0
 802071a:	dc03      	bgt.n	8020724 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802071c:	9a03      	ldr	r2, [sp, #12]
 802071e:	2a00      	cmp	r2, #0
 8020720:	f340 8146 	ble.w	80209b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020726:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802072a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802072e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020730:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020734:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020738:	2b00      	cmp	r3, #0
 802073a:	dd0e      	ble.n	802075a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802073c:	140c      	asrs	r4, r1, #16
 802073e:	d405      	bmi.n	802074c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020740:	42bc      	cmp	r4, r7
 8020742:	da03      	bge.n	802074c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020744:	1414      	asrs	r4, r2, #16
 8020746:	d401      	bmi.n	802074c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020748:	42b4      	cmp	r4, r6
 802074a:	db07      	blt.n	802075c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802074c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802074e:	3b01      	subs	r3, #1
 8020750:	3002      	adds	r0, #2
 8020752:	4421      	add	r1, r4
 8020754:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020756:	4422      	add	r2, r4
 8020758:	e7ee      	b.n	8020738 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802075a:	d017      	beq.n	802078c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802075c:	1e5c      	subs	r4, r3, #1
 802075e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020760:	fb05 1504 	mla	r5, r5, r4, r1
 8020764:	142d      	asrs	r5, r5, #16
 8020766:	d409      	bmi.n	802077c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020768:	42bd      	cmp	r5, r7
 802076a:	da07      	bge.n	802077c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802076c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802076e:	fb05 2404 	mla	r4, r5, r4, r2
 8020772:	1424      	asrs	r4, r4, #16
 8020774:	d402      	bmi.n	802077c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020776:	42b4      	cmp	r4, r6
 8020778:	f2c0 80b3 	blt.w	80208e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802077c:	2600      	movs	r6, #0
 802077e:	199c      	adds	r4, r3, r6
 8020780:	2c00      	cmp	r4, #0
 8020782:	dc3e      	bgt.n	8020802 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020784:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020788:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802078c:	f1bb 0f00 	cmp.w	fp, #0
 8020790:	f340 810e 	ble.w	80209b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020794:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802079a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802079e:	f1bb 0b01 	subs.w	fp, fp, #1
 80207a2:	eeb0 6a62 	vmov.f32	s12, s5
 80207a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80207aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80207ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207b2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80207b6:	eeb0 6a43 	vmov.f32	s12, s6
 80207ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207be:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80207c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80207d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80207d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80207da:	ee12 2a90 	vmov	r2, s5
 80207de:	eef0 2a47 	vmov.f32	s5, s14
 80207e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207e6:	ee13 2a10 	vmov	r2, s6
 80207ea:	9311      	str	r3, [sp, #68]	; 0x44
 80207ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207ee:	eeb0 3a67 	vmov.f32	s6, s15
 80207f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207f6:	9a03      	ldr	r2, [sp, #12]
 80207f8:	9312      	str	r3, [sp, #72]	; 0x48
 80207fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207fc:	bf08      	it	eq
 80207fe:	4613      	moveq	r3, r2
 8020800:	e789      	b.n	8020716 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020802:	140f      	asrs	r7, r1, #16
 8020804:	d418      	bmi.n	8020838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020806:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802080a:	42bd      	cmp	r5, r7
 802080c:	dd14      	ble.n	8020838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802080e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020812:	d411      	bmi.n	8020838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020814:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8020818:	4564      	cmp	r4, ip
 802081a:	dd0d      	ble.n	8020838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802081c:	b22d      	sxth	r5, r5
 802081e:	9c01      	ldr	r4, [sp, #4]
 8020820:	fb0c 7505 	mla	r5, ip, r5, r7
 8020824:	5d64      	ldrb	r4, [r4, r5]
 8020826:	2cff      	cmp	r4, #255	; 0xff
 8020828:	d10c      	bne.n	8020844 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802082a:	9c00      	ldr	r4, [sp, #0]
 802082c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8020830:	f06f 0401 	mvn.w	r4, #1
 8020834:	4374      	muls	r4, r6
 8020836:	5305      	strh	r5, [r0, r4]
 8020838:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802083a:	3e01      	subs	r6, #1
 802083c:	4421      	add	r1, r4
 802083e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020840:	4422      	add	r2, r4
 8020842:	e79c      	b.n	802077e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020844:	2c00      	cmp	r4, #0
 8020846:	d0f7      	beq.n	8020838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020848:	9f00      	ldr	r7, [sp, #0]
 802084a:	fa1f fc84 	uxth.w	ip, r4
 802084e:	43e4      	mvns	r4, r4
 8020850:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8020854:	f06f 0501 	mvn.w	r5, #1
 8020858:	b2e4      	uxtb	r4, r4
 802085a:	4375      	muls	r5, r6
 802085c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8020860:	9502      	str	r5, [sp, #8]
 8020862:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020866:	5b45      	ldrh	r5, [r0, r5]
 8020868:	122f      	asrs	r7, r5, #8
 802086a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802086e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020872:	00ed      	lsls	r5, r5, #3
 8020874:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020878:	fb17 f704 	smulbb	r7, r7, r4
 802087c:	b2ed      	uxtb	r5, r5
 802087e:	fb1a fa04 	smulbb	sl, sl, r4
 8020882:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8020886:	ea4f 07e9 	mov.w	r7, r9, asr #3
 802088a:	fb15 f504 	smulbb	r5, r5, r4
 802088e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020892:	fa1f fe8e 	uxth.w	lr, lr
 8020896:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802089a:	fa5f f989 	uxtb.w	r9, r9
 802089e:	fb07 a70c 	mla	r7, r7, ip, sl
 80208a2:	f10e 0401 	add.w	r4, lr, #1
 80208a6:	fb09 550c 	mla	r5, r9, ip, r5
 80208aa:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80208ae:	9c02      	ldr	r4, [sp, #8]
 80208b0:	b2ad      	uxth	r5, r5
 80208b2:	b2bf      	uxth	r7, r7
 80208b4:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80208b8:	f105 0a01 	add.w	sl, r5, #1
 80208bc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80208c0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80208c4:	ea4a 0e0e 	orr.w	lr, sl, lr
 80208c8:	f107 0a01 	add.w	sl, r7, #1
 80208cc:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80208d0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80208d4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80208d8:	ea4e 0e0a 	orr.w	lr, lr, sl
 80208dc:	f820 e004 	strh.w	lr, [r0, r4]
 80208e0:	e7aa      	b.n	8020838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80208e2:	f04f 0900 	mov.w	r9, #0
 80208e6:	eba3 0409 	sub.w	r4, r3, r9
 80208ea:	2c00      	cmp	r4, #0
 80208ec:	f77f af4a 	ble.w	8020784 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80208f0:	1414      	asrs	r4, r2, #16
 80208f2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80208f6:	140d      	asrs	r5, r1, #16
 80208f8:	fb06 5504 	mla	r5, r6, r4, r5
 80208fc:	9c01      	ldr	r4, [sp, #4]
 80208fe:	5d64      	ldrb	r4, [r4, r5]
 8020900:	2cff      	cmp	r4, #255	; 0xff
 8020902:	d10b      	bne.n	802091c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020904:	9c00      	ldr	r4, [sp, #0]
 8020906:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802090a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 802090e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020910:	f109 0901 	add.w	r9, r9, #1
 8020914:	4421      	add	r1, r4
 8020916:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020918:	4422      	add	r2, r4
 802091a:	e7e4      	b.n	80208e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802091c:	2c00      	cmp	r4, #0
 802091e:	d0f6      	beq.n	802090e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020920:	9e00      	ldr	r6, [sp, #0]
 8020922:	b2a7      	uxth	r7, r4
 8020924:	43e4      	mvns	r4, r4
 8020926:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802092a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802092e:	b2e4      	uxtb	r4, r4
 8020930:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020934:	122e      	asrs	r6, r5, #8
 8020936:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802093a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802093e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020942:	00ed      	lsls	r5, r5, #3
 8020944:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020948:	fb16 f604 	smulbb	r6, r6, r4
 802094c:	b2ed      	uxtb	r5, r5
 802094e:	fb1a fa04 	smulbb	sl, sl, r4
 8020952:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020956:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802095a:	fb15 f504 	smulbb	r5, r5, r4
 802095e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020962:	fa1f fc8c 	uxth.w	ip, ip
 8020966:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802096a:	fa5f fe8e 	uxtb.w	lr, lr
 802096e:	fb06 a607 	mla	r6, r6, r7, sl
 8020972:	f10c 0401 	add.w	r4, ip, #1
 8020976:	fb0e 5507 	mla	r5, lr, r7, r5
 802097a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802097e:	b2ad      	uxth	r5, r5
 8020980:	b2b6      	uxth	r6, r6
 8020982:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020986:	f105 0a01 	add.w	sl, r5, #1
 802098a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802098e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020992:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020996:	f106 0a01 	add.w	sl, r6, #1
 802099a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802099e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80209a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80209a6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80209aa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80209ae:	e7ae      	b.n	802090e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80209b0:	b005      	add	sp, #20
 80209b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080209b6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80209b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209ba:	b085      	sub	sp, #20
 80209bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80209be:	9203      	str	r2, [sp, #12]
 80209c0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80209c4:	9100      	str	r1, [sp, #0]
 80209c6:	9201      	str	r2, [sp, #4]
 80209c8:	6841      	ldr	r1, [r0, #4]
 80209ca:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80209ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80209d2:	fb01 2404 	mla	r4, r1, r4, r2
 80209d6:	6802      	ldr	r2, [r0, #0]
 80209d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80209dc:	f8de 2000 	ldr.w	r2, [lr]
 80209e0:	9202      	str	r2, [sp, #8]
 80209e2:	9a01      	ldr	r2, [sp, #4]
 80209e4:	43d6      	mvns	r6, r2
 80209e6:	b2f6      	uxtb	r6, r6
 80209e8:	9a00      	ldr	r2, [sp, #0]
 80209ea:	2a00      	cmp	r2, #0
 80209ec:	dc03      	bgt.n	80209f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80209ee:	9a03      	ldr	r2, [sp, #12]
 80209f0:	2a00      	cmp	r2, #0
 80209f2:	f340 8124 	ble.w	8020c3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80209f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209f8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80209fc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020a00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a02:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8020a06:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020a0a:	2b00      	cmp	r3, #0
 8020a0c:	dd0e      	ble.n	8020a2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a0e:	1408      	asrs	r0, r1, #16
 8020a10:	d405      	bmi.n	8020a1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020a12:	4560      	cmp	r0, ip
 8020a14:	da03      	bge.n	8020a1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020a16:	1410      	asrs	r0, r2, #16
 8020a18:	d401      	bmi.n	8020a1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020a1a:	42b8      	cmp	r0, r7
 8020a1c:	db07      	blt.n	8020a2e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020a1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020a20:	3b01      	subs	r3, #1
 8020a22:	3402      	adds	r4, #2
 8020a24:	4401      	add	r1, r0
 8020a26:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020a28:	4402      	add	r2, r0
 8020a2a:	e7ee      	b.n	8020a0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020a2c:	d06e      	beq.n	8020b0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020a2e:	1e58      	subs	r0, r3, #1
 8020a30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020a32:	fb05 1500 	mla	r5, r5, r0, r1
 8020a36:	142d      	asrs	r5, r5, #16
 8020a38:	d45c      	bmi.n	8020af4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020a3a:	4565      	cmp	r5, ip
 8020a3c:	da5a      	bge.n	8020af4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020a3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020a40:	fb05 2000 	mla	r0, r5, r0, r2
 8020a44:	1400      	asrs	r0, r0, #16
 8020a46:	d455      	bmi.n	8020af4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020a48:	42b8      	cmp	r0, r7
 8020a4a:	da53      	bge.n	8020af4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020a4c:	4699      	mov	r9, r3
 8020a4e:	46a2      	mov	sl, r4
 8020a50:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8020a54:	f1b9 0f00 	cmp.w	r9, #0
 8020a58:	dd54      	ble.n	8020b04 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020a5a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020a5e:	140d      	asrs	r5, r1, #16
 8020a60:	1410      	asrs	r0, r2, #16
 8020a62:	f109 39ff 	add.w	r9, r9, #4294967295
 8020a66:	fb07 5000 	mla	r0, r7, r0, r5
 8020a6a:	9d02      	ldr	r5, [sp, #8]
 8020a6c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8020a70:	f8ba 5000 	ldrh.w	r5, [sl]
 8020a74:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020a78:	122f      	asrs	r7, r5, #8
 8020a7a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8020a7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020a82:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020a86:	00ed      	lsls	r5, r5, #3
 8020a88:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8020a8c:	fb17 f706 	smulbb	r7, r7, r6
 8020a90:	b2ed      	uxtb	r5, r5
 8020a92:	fb18 f806 	smulbb	r8, r8, r6
 8020a96:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8020a9a:	10c7      	asrs	r7, r0, #3
 8020a9c:	fb15 f506 	smulbb	r5, r5, r6
 8020aa0:	00c0      	lsls	r0, r0, #3
 8020aa2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020aa6:	fa1f fc8c 	uxth.w	ip, ip
 8020aaa:	b2c0      	uxtb	r0, r0
 8020aac:	fb07 870b 	mla	r7, r7, fp, r8
 8020ab0:	fb00 500b 	mla	r0, r0, fp, r5
 8020ab4:	f10c 0501 	add.w	r5, ip, #1
 8020ab8:	b2bf      	uxth	r7, r7
 8020aba:	b280      	uxth	r0, r0
 8020abc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020ac0:	f107 0801 	add.w	r8, r7, #1
 8020ac4:	1c45      	adds	r5, r0, #1
 8020ac6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8020aca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020ace:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020ad2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020ad4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020ad8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020adc:	4401      	add	r1, r0
 8020ade:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020ae2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020ae4:	ea45 0c0c 	orr.w	ip, r5, ip
 8020ae8:	4402      	add	r2, r0
 8020aea:	ea4c 0c08 	orr.w	ip, ip, r8
 8020aee:	f82a cb02 	strh.w	ip, [sl], #2
 8020af2:	e7af      	b.n	8020a54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020af4:	f04f 0800 	mov.w	r8, #0
 8020af8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8020afc:	eb03 0008 	add.w	r0, r3, r8
 8020b00:	2800      	cmp	r0, #0
 8020b02:	dc41      	bgt.n	8020b88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b08:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020b0c:	9b00      	ldr	r3, [sp, #0]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	f340 8095 	ble.w	8020c3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b22:	eef0 6a62 	vmov.f32	s13, s5
 8020b26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020b2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b32:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8020b36:	eef0 6a43 	vmov.f32	s13, s6
 8020b3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b3e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8020b42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b5a:	ee12 2a90 	vmov	r2, s5
 8020b5e:	eef0 2a47 	vmov.f32	s5, s14
 8020b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b66:	ee13 2a10 	vmov	r2, s6
 8020b6a:	9311      	str	r3, [sp, #68]	; 0x44
 8020b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b6e:	eeb0 3a67 	vmov.f32	s6, s15
 8020b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b76:	9312      	str	r3, [sp, #72]	; 0x48
 8020b78:	9b00      	ldr	r3, [sp, #0]
 8020b7a:	9a03      	ldr	r2, [sp, #12]
 8020b7c:	3b01      	subs	r3, #1
 8020b7e:	9300      	str	r3, [sp, #0]
 8020b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b82:	bf08      	it	eq
 8020b84:	4613      	moveq	r3, r2
 8020b86:	e72f      	b.n	80209e8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020b88:	140f      	asrs	r7, r1, #16
 8020b8a:	d451      	bmi.n	8020c30 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020b8c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020b90:	42bd      	cmp	r5, r7
 8020b92:	dd4d      	ble.n	8020c30 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020b94:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020b98:	d44a      	bmi.n	8020c30 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020b9a:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020b9e:	4560      	cmp	r0, ip
 8020ba0:	dd46      	ble.n	8020c30 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020ba2:	b22d      	sxth	r5, r5
 8020ba4:	9802      	ldr	r0, [sp, #8]
 8020ba6:	fb0c 7505 	mla	r5, ip, r5, r7
 8020baa:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8020bae:	f06f 0501 	mvn.w	r5, #1
 8020bb2:	fb05 fb08 	mul.w	fp, r5, r8
 8020bb6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020bba:	f834 500b 	ldrh.w	r5, [r4, fp]
 8020bbe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020bc2:	122f      	asrs	r7, r5, #8
 8020bc4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020bc8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020bcc:	00ed      	lsls	r5, r5, #3
 8020bce:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020bd2:	fb17 f706 	smulbb	r7, r7, r6
 8020bd6:	b2ed      	uxtb	r5, r5
 8020bd8:	fb19 f906 	smulbb	r9, r9, r6
 8020bdc:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020be0:	10c7      	asrs	r7, r0, #3
 8020be2:	fb15 f506 	smulbb	r5, r5, r6
 8020be6:	00c0      	lsls	r0, r0, #3
 8020be8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020bec:	fa1f fc8c 	uxth.w	ip, ip
 8020bf0:	b2c0      	uxtb	r0, r0
 8020bf2:	fb07 970a 	mla	r7, r7, sl, r9
 8020bf6:	fb00 500a 	mla	r0, r0, sl, r5
 8020bfa:	f10c 0501 	add.w	r5, ip, #1
 8020bfe:	b2bf      	uxth	r7, r7
 8020c00:	b280      	uxth	r0, r0
 8020c02:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020c06:	f107 0901 	add.w	r9, r7, #1
 8020c0a:	1c45      	adds	r5, r0, #1
 8020c0c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020c10:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020c14:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020c18:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020c1c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020c20:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020c24:	ea45 0c0c 	orr.w	ip, r5, ip
 8020c28:	ea4c 0c09 	orr.w	ip, ip, r9
 8020c2c:	f824 c00b 	strh.w	ip, [r4, fp]
 8020c30:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c32:	f108 38ff 	add.w	r8, r8, #4294967295
 8020c36:	4401      	add	r1, r0
 8020c38:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020c3a:	4402      	add	r2, r0
 8020c3c:	e75e      	b.n	8020afc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020c3e:	b005      	add	sp, #20
 8020c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c44 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c48:	b085      	sub	sp, #20
 8020c4a:	4693      	mov	fp, r2
 8020c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020c50:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020c52:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020c54:	6870      	ldr	r0, [r6, #4]
 8020c56:	9101      	str	r1, [sp, #4]
 8020c58:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020c5c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8020c60:	fb00 2404 	mla	r4, r0, r4, r2
 8020c64:	6832      	ldr	r2, [r6, #0]
 8020c66:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020c6a:	682a      	ldr	r2, [r5, #0]
 8020c6c:	9202      	str	r2, [sp, #8]
 8020c6e:	9a01      	ldr	r2, [sp, #4]
 8020c70:	2a00      	cmp	r2, #0
 8020c72:	dc03      	bgt.n	8020c7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020c74:	f1bb 0f00 	cmp.w	fp, #0
 8020c78:	f340 809a 	ble.w	8020db0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c7e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020c82:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020c86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020c88:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8020c8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	dd0c      	ble.n	8020cae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020c94:	1406      	asrs	r6, r0, #16
 8020c96:	d405      	bmi.n	8020ca4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020c98:	454e      	cmp	r6, r9
 8020c9a:	da03      	bge.n	8020ca4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020c9c:	1416      	asrs	r6, r2, #16
 8020c9e:	d401      	bmi.n	8020ca4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020ca0:	4546      	cmp	r6, r8
 8020ca2:	db05      	blt.n	8020cb0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020ca4:	4470      	add	r0, lr
 8020ca6:	4462      	add	r2, ip
 8020ca8:	3b01      	subs	r3, #1
 8020caa:	3402      	adds	r4, #2
 8020cac:	e7f0      	b.n	8020c90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020cae:	d00f      	beq.n	8020cd0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020cb0:	1e5e      	subs	r6, r3, #1
 8020cb2:	fb0e 0706 	mla	r7, lr, r6, r0
 8020cb6:	143f      	asrs	r7, r7, #16
 8020cb8:	d541      	bpl.n	8020d3e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8020cba:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8020cbe:	4698      	mov	r8, r3
 8020cc0:	9603      	str	r6, [sp, #12]
 8020cc2:	f1b8 0f00 	cmp.w	r8, #0
 8020cc6:	dc56      	bgt.n	8020d76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020cc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ccc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020cd0:	9b01      	ldr	r3, [sp, #4]
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	dd6c      	ble.n	8020db0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020cd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ce0:	eeb0 6a62 	vmov.f32	s12, s5
 8020ce4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020ce8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020cec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020cf0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020cf4:	eeb0 6a43 	vmov.f32	s12, s6
 8020cf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020cfc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020d00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020d04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020d08:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020d0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020d10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020d14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020d18:	ee12 2a90 	vmov	r2, s5
 8020d1c:	eef0 2a47 	vmov.f32	s5, s14
 8020d20:	fb92 fef3 	sdiv	lr, r2, r3
 8020d24:	ee13 2a10 	vmov	r2, s6
 8020d28:	eeb0 3a67 	vmov.f32	s6, s15
 8020d2c:	fb92 fcf3 	sdiv	ip, r2, r3
 8020d30:	9b01      	ldr	r3, [sp, #4]
 8020d32:	3b01      	subs	r3, #1
 8020d34:	9301      	str	r3, [sp, #4]
 8020d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d38:	bf08      	it	eq
 8020d3a:	465b      	moveq	r3, fp
 8020d3c:	e797      	b.n	8020c6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020d3e:	454f      	cmp	r7, r9
 8020d40:	dabb      	bge.n	8020cba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d42:	fb0c 2606 	mla	r6, ip, r6, r2
 8020d46:	1436      	asrs	r6, r6, #16
 8020d48:	d4b7      	bmi.n	8020cba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d4a:	4546      	cmp	r6, r8
 8020d4c:	dab5      	bge.n	8020cba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d4e:	461e      	mov	r6, r3
 8020d50:	46a0      	mov	r8, r4
 8020d52:	2e00      	cmp	r6, #0
 8020d54:	ddb8      	ble.n	8020cc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020d56:	1417      	asrs	r7, r2, #16
 8020d58:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020d5c:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020d60:	9902      	ldr	r1, [sp, #8]
 8020d62:	4470      	add	r0, lr
 8020d64:	4462      	add	r2, ip
 8020d66:	fb0a 9707 	mla	r7, sl, r7, r9
 8020d6a:	3e01      	subs	r6, #1
 8020d6c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020d70:	f828 7b02 	strh.w	r7, [r8], #2
 8020d74:	e7ed      	b.n	8020d52 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020d76:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020d7a:	d414      	bmi.n	8020da6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020d7c:	68ae      	ldr	r6, [r5, #8]
 8020d7e:	454e      	cmp	r6, r9
 8020d80:	dd11      	ble.n	8020da6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020d82:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020d86:	d40e      	bmi.n	8020da6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020d88:	68ef      	ldr	r7, [r5, #12]
 8020d8a:	4557      	cmp	r7, sl
 8020d8c:	dd0b      	ble.n	8020da6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020d8e:	b236      	sxth	r6, r6
 8020d90:	f06f 0101 	mvn.w	r1, #1
 8020d94:	9f02      	ldr	r7, [sp, #8]
 8020d96:	fb0a 9606 	mla	r6, sl, r6, r9
 8020d9a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8020d9e:	fb01 f608 	mul.w	r6, r1, r8
 8020da2:	9903      	ldr	r1, [sp, #12]
 8020da4:	538f      	strh	r7, [r1, r6]
 8020da6:	4470      	add	r0, lr
 8020da8:	4462      	add	r2, ip
 8020daa:	f108 38ff 	add.w	r8, r8, #4294967295
 8020dae:	e788      	b.n	8020cc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020db0:	b005      	add	sp, #20
 8020db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020db6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dba:	b087      	sub	sp, #28
 8020dbc:	468b      	mov	fp, r1
 8020dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020dc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020dc4:	9203      	str	r2, [sp, #12]
 8020dc6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020dca:	6841      	ldr	r1, [r0, #4]
 8020dcc:	9204      	str	r2, [sp, #16]
 8020dce:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020dd2:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020dd6:	fb01 2505 	mla	r5, r1, r5, r2
 8020dda:	6802      	ldr	r2, [r0, #0]
 8020ddc:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020de0:	f8d9 2000 	ldr.w	r2, [r9]
 8020de4:	9201      	str	r2, [sp, #4]
 8020de6:	f1bb 0f00 	cmp.w	fp, #0
 8020dea:	dc03      	bgt.n	8020df4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020dec:	9a03      	ldr	r2, [sp, #12]
 8020dee:	2a00      	cmp	r2, #0
 8020df0:	f340 8158 	ble.w	80210a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020df4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020df6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020dfa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020dfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e00:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020e04:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	dd0e      	ble.n	8020e2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e0c:	1402      	asrs	r2, r0, #16
 8020e0e:	d405      	bmi.n	8020e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020e10:	42ba      	cmp	r2, r7
 8020e12:	da03      	bge.n	8020e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020e14:	140a      	asrs	r2, r1, #16
 8020e16:	d401      	bmi.n	8020e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020e18:	42b2      	cmp	r2, r6
 8020e1a:	db07      	blt.n	8020e2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020e1e:	3b01      	subs	r3, #1
 8020e20:	3502      	adds	r5, #2
 8020e22:	4410      	add	r0, r2
 8020e24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020e26:	4411      	add	r1, r2
 8020e28:	e7ee      	b.n	8020e08 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020e2a:	d017      	beq.n	8020e5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020e2c:	1e5a      	subs	r2, r3, #1
 8020e2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e30:	fb04 0402 	mla	r4, r4, r2, r0
 8020e34:	1424      	asrs	r4, r4, #16
 8020e36:	d409      	bmi.n	8020e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020e38:	42bc      	cmp	r4, r7
 8020e3a:	da07      	bge.n	8020e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020e3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e3e:	fb04 1202 	mla	r2, r4, r2, r1
 8020e42:	1412      	asrs	r2, r2, #16
 8020e44:	d402      	bmi.n	8020e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020e46:	42b2      	cmp	r2, r6
 8020e48:	f2c0 80bf 	blt.w	8020fca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020e4c:	2700      	movs	r7, #0
 8020e4e:	19da      	adds	r2, r3, r7
 8020e50:	2a00      	cmp	r2, #0
 8020e52:	dc3e      	bgt.n	8020ed2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020e54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020e58:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020e5c:	f1bb 0f00 	cmp.w	fp, #0
 8020e60:	f340 8120 	ble.w	80210a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020e64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020e6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e6e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020e72:	eeb0 6a62 	vmov.f32	s12, s5
 8020e76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020e7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e82:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020e86:	eeb0 6a43 	vmov.f32	s12, s6
 8020e8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e8e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020e92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020ea2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ea6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020eaa:	ee12 2a90 	vmov	r2, s5
 8020eae:	eef0 2a47 	vmov.f32	s5, s14
 8020eb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020eb6:	ee13 2a10 	vmov	r2, s6
 8020eba:	9313      	str	r3, [sp, #76]	; 0x4c
 8020ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ebe:	eeb0 3a67 	vmov.f32	s6, s15
 8020ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ec6:	9a03      	ldr	r2, [sp, #12]
 8020ec8:	9314      	str	r3, [sp, #80]	; 0x50
 8020eca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ecc:	bf08      	it	eq
 8020ece:	4613      	moveq	r3, r2
 8020ed0:	e789      	b.n	8020de6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020ed2:	1406      	asrs	r6, r0, #16
 8020ed4:	d42d      	bmi.n	8020f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020ed6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8020eda:	42b4      	cmp	r4, r6
 8020edc:	dd29      	ble.n	8020f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020ede:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020ee2:	d426      	bmi.n	8020f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020ee4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020ee8:	4562      	cmp	r2, ip
 8020eea:	dd22      	ble.n	8020f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020eec:	b224      	sxth	r4, r4
 8020eee:	9a01      	ldr	r2, [sp, #4]
 8020ef0:	fb0c 6404 	mla	r4, ip, r4, r6
 8020ef4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8020ef8:	0e22      	lsrs	r2, r4, #24
 8020efa:	d01a      	beq.n	8020f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020efc:	9e04      	ldr	r6, [sp, #16]
 8020efe:	4372      	muls	r2, r6
 8020f00:	1c56      	adds	r6, r2, #1
 8020f02:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020f06:	0a26      	lsrs	r6, r4, #8
 8020f08:	1212      	asrs	r2, r2, #8
 8020f0a:	9605      	str	r6, [sp, #20]
 8020f0c:	2aff      	cmp	r2, #255	; 0xff
 8020f0e:	d116      	bne.n	8020f3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020f10:	f06f 0201 	mvn.w	r2, #1
 8020f14:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020f18:	fb02 fc07 	mul.w	ip, r2, r7
 8020f1c:	0962      	lsrs	r2, r4, #5
 8020f1e:	f026 0607 	bic.w	r6, r6, #7
 8020f22:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020f26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020f2a:	4316      	orrs	r6, r2
 8020f2c:	4326      	orrs	r6, r4
 8020f2e:	f825 600c 	strh.w	r6, [r5, ip]
 8020f32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020f34:	3f01      	subs	r7, #1
 8020f36:	4410      	add	r0, r2
 8020f38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020f3a:	4411      	add	r1, r2
 8020f3c:	e787      	b.n	8020e4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020f3e:	f06f 0601 	mvn.w	r6, #1
 8020f42:	fa1f fa82 	uxth.w	sl, r2
 8020f46:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8020f4a:	43d2      	mvns	r2, r2
 8020f4c:	437e      	muls	r6, r7
 8020f4e:	b2e4      	uxtb	r4, r4
 8020f50:	fb1c fc0a 	smulbb	ip, ip, sl
 8020f54:	b2d2      	uxtb	r2, r2
 8020f56:	f835 8006 	ldrh.w	r8, [r5, r6]
 8020f5a:	fb14 f40a 	smulbb	r4, r4, sl
 8020f5e:	9602      	str	r6, [sp, #8]
 8020f60:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020f64:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020f68:	fb16 f60a 	smulbb	r6, r6, sl
 8020f6c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020f70:	fb0e ce02 	mla	lr, lr, r2, ip
 8020f74:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020f78:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020f7c:	fa1f fe8e 	uxth.w	lr, lr
 8020f80:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020f84:	fa5f f888 	uxtb.w	r8, r8
 8020f88:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020f8c:	fb08 4402 	mla	r4, r8, r2, r4
 8020f90:	f10e 0201 	add.w	r2, lr, #1
 8020f94:	fa1f fc8c 	uxth.w	ip, ip
 8020f98:	b2a4      	uxth	r4, r4
 8020f9a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020f9e:	9a02      	ldr	r2, [sp, #8]
 8020fa0:	1c66      	adds	r6, r4, #1
 8020fa2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020fa6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020faa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020fae:	ea46 0e0e 	orr.w	lr, r6, lr
 8020fb2:	f10c 0601 	add.w	r6, ip, #1
 8020fb6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020fba:	0976      	lsrs	r6, r6, #5
 8020fbc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020fc0:	ea4e 0e06 	orr.w	lr, lr, r6
 8020fc4:	f825 e002 	strh.w	lr, [r5, r2]
 8020fc8:	e7b3      	b.n	8020f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020fca:	f04f 0800 	mov.w	r8, #0
 8020fce:	eba3 0208 	sub.w	r2, r3, r8
 8020fd2:	2a00      	cmp	r2, #0
 8020fd4:	f77f af3e 	ble.w	8020e54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020fd8:	1404      	asrs	r4, r0, #16
 8020fda:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020fde:	140a      	asrs	r2, r1, #16
 8020fe0:	fb06 4202 	mla	r2, r6, r2, r4
 8020fe4:	9c01      	ldr	r4, [sp, #4]
 8020fe6:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020fea:	0e22      	lsrs	r2, r4, #24
 8020fec:	d015      	beq.n	802101a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020fee:	9e04      	ldr	r6, [sp, #16]
 8020ff0:	4372      	muls	r2, r6
 8020ff2:	1c56      	adds	r6, r2, #1
 8020ff4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020ff8:	0a26      	lsrs	r6, r4, #8
 8020ffa:	1212      	asrs	r2, r2, #8
 8020ffc:	2aff      	cmp	r2, #255	; 0xff
 8020ffe:	d113      	bne.n	8021028 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021000:	0962      	lsrs	r2, r4, #5
 8021002:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021006:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802100a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802100e:	f026 0607 	bic.w	r6, r6, #7
 8021012:	4316      	orrs	r6, r2
 8021014:	4326      	orrs	r6, r4
 8021016:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 802101a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802101c:	f108 0801 	add.w	r8, r8, #1
 8021020:	4410      	add	r0, r2
 8021022:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021024:	4411      	add	r1, r2
 8021026:	e7d2      	b.n	8020fce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021028:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 802102c:	fa1f fa82 	uxth.w	sl, r2
 8021030:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8021034:	43d2      	mvns	r2, r2
 8021036:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802103a:	fb17 f70a 	smulbb	r7, r7, sl
 802103e:	b2d2      	uxtb	r2, r2
 8021040:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021044:	b2e4      	uxtb	r4, r4
 8021046:	b2f6      	uxtb	r6, r6
 8021048:	fb0c 7c02 	mla	ip, ip, r2, r7
 802104c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021050:	fb14 f40a 	smulbb	r4, r4, sl
 8021054:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021058:	fa1f fc8c 	uxth.w	ip, ip
 802105c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021060:	fb16 f60a 	smulbb	r6, r6, sl
 8021064:	fa5f fe8e 	uxtb.w	lr, lr
 8021068:	fb0e 4402 	mla	r4, lr, r2, r4
 802106c:	fb07 6702 	mla	r7, r7, r2, r6
 8021070:	f10c 0201 	add.w	r2, ip, #1
 8021074:	b2a4      	uxth	r4, r4
 8021076:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802107a:	1c66      	adds	r6, r4, #1
 802107c:	b2bf      	uxth	r7, r7
 802107e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021082:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021086:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802108a:	ea46 0c0c 	orr.w	ip, r6, ip
 802108e:	1c7e      	adds	r6, r7, #1
 8021090:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021094:	0976      	lsrs	r6, r6, #5
 8021096:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802109a:	ea4c 0c06 	orr.w	ip, ip, r6
 802109e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80210a2:	e7ba      	b.n	802101a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80210a4:	b007      	add	sp, #28
 80210a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080210ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80210ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210b0:	b085      	sub	sp, #20
 80210b2:	468b      	mov	fp, r1
 80210b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80210b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80210ba:	9203      	str	r2, [sp, #12]
 80210bc:	6841      	ldr	r1, [r0, #4]
 80210be:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80210c2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80210c6:	fb01 2404 	mla	r4, r1, r4, r2
 80210ca:	6802      	ldr	r2, [r0, #0]
 80210cc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80210d0:	f8d8 2000 	ldr.w	r2, [r8]
 80210d4:	9201      	str	r2, [sp, #4]
 80210d6:	f1bb 0f00 	cmp.w	fp, #0
 80210da:	dc03      	bgt.n	80210e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80210dc:	9a03      	ldr	r2, [sp, #12]
 80210de:	2a00      	cmp	r2, #0
 80210e0:	f340 814f 	ble.w	8021382 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80210e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210e6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80210ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80210ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80210f0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80210f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	dd0e      	ble.n	802111a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80210fc:	1408      	asrs	r0, r1, #16
 80210fe:	d405      	bmi.n	802110c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021100:	42b8      	cmp	r0, r7
 8021102:	da03      	bge.n	802110c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021104:	1410      	asrs	r0, r2, #16
 8021106:	d401      	bmi.n	802110c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021108:	42b0      	cmp	r0, r6
 802110a:	db07      	blt.n	802111c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802110c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802110e:	3b01      	subs	r3, #1
 8021110:	3402      	adds	r4, #2
 8021112:	4401      	add	r1, r0
 8021114:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021116:	4402      	add	r2, r0
 8021118:	e7ee      	b.n	80210f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802111a:	d017      	beq.n	802114c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802111c:	1e58      	subs	r0, r3, #1
 802111e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021120:	fb05 1500 	mla	r5, r5, r0, r1
 8021124:	142d      	asrs	r5, r5, #16
 8021126:	d409      	bmi.n	802113c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021128:	42bd      	cmp	r5, r7
 802112a:	da07      	bge.n	802113c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802112c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802112e:	fb05 2000 	mla	r0, r5, r0, r2
 8021132:	1400      	asrs	r0, r0, #16
 8021134:	d402      	bmi.n	802113c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021136:	42b0      	cmp	r0, r6
 8021138:	f2c0 80ba 	blt.w	80212b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802113c:	2600      	movs	r6, #0
 802113e:	1998      	adds	r0, r3, r6
 8021140:	2800      	cmp	r0, #0
 8021142:	dc3e      	bgt.n	80211c2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021148:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802114c:	f1bb 0f00 	cmp.w	fp, #0
 8021150:	f340 8117 	ble.w	8021382 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021154:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802115a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802115e:	f1bb 0b01 	subs.w	fp, fp, #1
 8021162:	eeb0 6a62 	vmov.f32	s12, s5
 8021166:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802116a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802116e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021172:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021176:	eeb0 6a43 	vmov.f32	s12, s6
 802117a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802117e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021182:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021186:	ee61 7a27 	vmul.f32	s15, s2, s15
 802118a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802118e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021192:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021196:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802119a:	ee12 2a90 	vmov	r2, s5
 802119e:	eef0 2a47 	vmov.f32	s5, s14
 80211a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80211a6:	ee13 2a10 	vmov	r2, s6
 80211aa:	9311      	str	r3, [sp, #68]	; 0x44
 80211ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80211ae:	eeb0 3a67 	vmov.f32	s6, s15
 80211b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80211b6:	9a03      	ldr	r2, [sp, #12]
 80211b8:	9312      	str	r3, [sp, #72]	; 0x48
 80211ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80211bc:	bf08      	it	eq
 80211be:	4613      	moveq	r3, r2
 80211c0:	e789      	b.n	80210d6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80211c2:	140f      	asrs	r7, r1, #16
 80211c4:	d424      	bmi.n	8021210 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80211c6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80211ca:	42bd      	cmp	r5, r7
 80211cc:	dd20      	ble.n	8021210 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80211ce:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80211d2:	d41d      	bmi.n	8021210 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80211d4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80211d8:	4560      	cmp	r0, ip
 80211da:	dd19      	ble.n	8021210 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80211dc:	b22d      	sxth	r5, r5
 80211de:	9801      	ldr	r0, [sp, #4]
 80211e0:	fb0c 7505 	mla	r5, ip, r5, r7
 80211e4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80211e8:	0e07      	lsrs	r7, r0, #24
 80211ea:	2fff      	cmp	r7, #255	; 0xff
 80211ec:	d116      	bne.n	802121c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80211ee:	f06f 0501 	mvn.w	r5, #1
 80211f2:	fb05 f706 	mul.w	r7, r5, r6
 80211f6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80211fa:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80211fe:	0945      	lsrs	r5, r0, #5
 8021200:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021204:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021208:	ea4c 0505 	orr.w	r5, ip, r5
 802120c:	4305      	orrs	r5, r0
 802120e:	53e5      	strh	r5, [r4, r7]
 8021210:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021212:	3e01      	subs	r6, #1
 8021214:	4401      	add	r1, r0
 8021216:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021218:	4402      	add	r2, r0
 802121a:	e790      	b.n	802113e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802121c:	b2fd      	uxtb	r5, r7
 802121e:	2f00      	cmp	r7, #0
 8021220:	d0f6      	beq.n	8021210 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021222:	f06f 0701 	mvn.w	r7, #1
 8021226:	fa1f f985 	uxth.w	r9, r5
 802122a:	43ed      	mvns	r5, r5
 802122c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021230:	4377      	muls	r7, r6
 8021232:	fb1a fa09 	smulbb	sl, sl, r9
 8021236:	b2ed      	uxtb	r5, r5
 8021238:	f834 e007 	ldrh.w	lr, [r4, r7]
 802123c:	9702      	str	r7, [sp, #8]
 802123e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8021242:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021246:	fb17 f709 	smulbb	r7, r7, r9
 802124a:	b2c0      	uxtb	r0, r0
 802124c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021250:	fb10 f009 	smulbb	r0, r0, r9
 8021254:	fb0c 7c05 	mla	ip, ip, r5, r7
 8021258:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802125c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021260:	fa1f fc8c 	uxth.w	ip, ip
 8021264:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021268:	fa5f fe8e 	uxtb.w	lr, lr
 802126c:	fb07 a705 	mla	r7, r7, r5, sl
 8021270:	fb0e 0005 	mla	r0, lr, r5, r0
 8021274:	f10c 0501 	add.w	r5, ip, #1
 8021278:	b2bf      	uxth	r7, r7
 802127a:	b280      	uxth	r0, r0
 802127c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021280:	f100 0a01 	add.w	sl, r0, #1
 8021284:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021288:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 802128c:	9802      	ldr	r0, [sp, #8]
 802128e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021292:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021296:	f107 0a01 	add.w	sl, r7, #1
 802129a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802129e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80212a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80212a6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80212aa:	f824 c000 	strh.w	ip, [r4, r0]
 80212ae:	e7af      	b.n	8021210 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80212b0:	f04f 0e00 	mov.w	lr, #0
 80212b4:	eba3 000e 	sub.w	r0, r3, lr
 80212b8:	2800      	cmp	r0, #0
 80212ba:	f77f af43 	ble.w	8021144 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80212be:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80212c2:	140d      	asrs	r5, r1, #16
 80212c4:	1410      	asrs	r0, r2, #16
 80212c6:	fb06 5000 	mla	r0, r6, r0, r5
 80212ca:	9d01      	ldr	r5, [sp, #4]
 80212cc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80212d0:	0e2e      	lsrs	r6, r5, #24
 80212d2:	2eff      	cmp	r6, #255	; 0xff
 80212d4:	d112      	bne.n	80212fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80212d6:	482c      	ldr	r0, [pc, #176]	; (8021388 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 80212d8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80212dc:	0968      	lsrs	r0, r5, #5
 80212de:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80212e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80212e6:	4330      	orrs	r0, r6
 80212e8:	4328      	orrs	r0, r5
 80212ea:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 80212ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80212f0:	f10e 0e01 	add.w	lr, lr, #1
 80212f4:	4401      	add	r1, r0
 80212f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80212f8:	4402      	add	r2, r0
 80212fa:	e7db      	b.n	80212b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80212fc:	b2f0      	uxtb	r0, r6
 80212fe:	2e00      	cmp	r6, #0
 8021300:	d0f5      	beq.n	80212ee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021302:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021306:	fa1f f980 	uxth.w	r9, r0
 802130a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802130e:	43c0      	mvns	r0, r0
 8021310:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021314:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021318:	fb16 f609 	smulbb	r6, r6, r9
 802131c:	b2c0      	uxtb	r0, r0
 802131e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021322:	b2ed      	uxtb	r5, r5
 8021324:	fb1a fa09 	smulbb	sl, sl, r9
 8021328:	fb07 6700 	mla	r7, r7, r0, r6
 802132c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021330:	fb15 f509 	smulbb	r5, r5, r9
 8021334:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021338:	b2bf      	uxth	r7, r7
 802133a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802133e:	fa5f fc8c 	uxtb.w	ip, ip
 8021342:	fb06 a600 	mla	r6, r6, r0, sl
 8021346:	fb0c 5500 	mla	r5, ip, r0, r5
 802134a:	1c78      	adds	r0, r7, #1
 802134c:	b2b6      	uxth	r6, r6
 802134e:	b2ad      	uxth	r5, r5
 8021350:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021354:	f105 0a01 	add.w	sl, r5, #1
 8021358:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802135c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021360:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021364:	ea4a 0707 	orr.w	r7, sl, r7
 8021368:	f106 0a01 	add.w	sl, r6, #1
 802136c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021370:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021374:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021378:	ea47 070a 	orr.w	r7, r7, sl
 802137c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021380:	e7b5      	b.n	80212ee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021382:	b005      	add	sp, #20
 8021384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021388:	fffff800 	.word	0xfffff800

0802138c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802138c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021390:	b087      	sub	sp, #28
 8021392:	468b      	mov	fp, r1
 8021394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021398:	9815      	ldr	r0, [sp, #84]	; 0x54
 802139a:	9203      	str	r2, [sp, #12]
 802139c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80213a0:	6841      	ldr	r1, [r0, #4]
 80213a2:	9204      	str	r2, [sp, #16]
 80213a4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80213a8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80213ac:	fb01 2404 	mla	r4, r1, r4, r2
 80213b0:	6802      	ldr	r2, [r0, #0]
 80213b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80213b6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80213ba:	3201      	adds	r2, #1
 80213bc:	f022 0201 	bic.w	r2, r2, #1
 80213c0:	9200      	str	r2, [sp, #0]
 80213c2:	f8d9 2000 	ldr.w	r2, [r9]
 80213c6:	9201      	str	r2, [sp, #4]
 80213c8:	f1bb 0f00 	cmp.w	fp, #0
 80213cc:	dc03      	bgt.n	80213d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80213ce:	9a03      	ldr	r2, [sp, #12]
 80213d0:	2a00      	cmp	r2, #0
 80213d2:	f340 816a 	ble.w	80216aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80213d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80213d8:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80213dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80213e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213e2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80213e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	dd0e      	ble.n	802140c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80213ee:	1402      	asrs	r2, r0, #16
 80213f0:	d405      	bmi.n	80213fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80213f2:	42ba      	cmp	r2, r7
 80213f4:	da03      	bge.n	80213fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80213f6:	140a      	asrs	r2, r1, #16
 80213f8:	d401      	bmi.n	80213fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80213fa:	42b2      	cmp	r2, r6
 80213fc:	db07      	blt.n	802140e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80213fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021400:	3b01      	subs	r3, #1
 8021402:	3402      	adds	r4, #2
 8021404:	4410      	add	r0, r2
 8021406:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021408:	4411      	add	r1, r2
 802140a:	e7ee      	b.n	80213ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802140c:	d017      	beq.n	802143e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802140e:	1e5a      	subs	r2, r3, #1
 8021410:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021412:	fb05 0502 	mla	r5, r5, r2, r0
 8021416:	142d      	asrs	r5, r5, #16
 8021418:	d409      	bmi.n	802142e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802141a:	42bd      	cmp	r5, r7
 802141c:	da07      	bge.n	802142e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802141e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021420:	fb05 1202 	mla	r2, r5, r2, r1
 8021424:	1412      	asrs	r2, r2, #16
 8021426:	d402      	bmi.n	802142e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021428:	42b2      	cmp	r2, r6
 802142a:	f2c0 80c8 	blt.w	80215be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802142e:	2700      	movs	r7, #0
 8021430:	19da      	adds	r2, r3, r7
 8021432:	2a00      	cmp	r2, #0
 8021434:	dc3e      	bgt.n	80214b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802143a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802143e:	f1bb 0f00 	cmp.w	fp, #0
 8021442:	f340 8132 	ble.w	80216aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021446:	ee30 0a04 	vadd.f32	s0, s0, s8
 802144a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802144c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021450:	f1bb 0b01 	subs.w	fp, fp, #1
 8021454:	eeb0 6a62 	vmov.f32	s12, s5
 8021458:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802145c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021460:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021464:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021468:	eeb0 6a43 	vmov.f32	s12, s6
 802146c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021470:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021474:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021478:	ee61 7a27 	vmul.f32	s15, s2, s15
 802147c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021480:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021484:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021488:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802148c:	ee12 2a90 	vmov	r2, s5
 8021490:	eef0 2a47 	vmov.f32	s5, s14
 8021494:	fb92 f3f3 	sdiv	r3, r2, r3
 8021498:	ee13 2a10 	vmov	r2, s6
 802149c:	9313      	str	r3, [sp, #76]	; 0x4c
 802149e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80214a0:	eeb0 3a67 	vmov.f32	s6, s15
 80214a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80214a8:	9a03      	ldr	r2, [sp, #12]
 80214aa:	9314      	str	r3, [sp, #80]	; 0x50
 80214ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80214ae:	bf08      	it	eq
 80214b0:	4613      	moveq	r3, r2
 80214b2:	e789      	b.n	80213c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80214b4:	1405      	asrs	r5, r0, #16
 80214b6:	d436      	bmi.n	8021526 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80214b8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80214bc:	42aa      	cmp	r2, r5
 80214be:	dd32      	ble.n	8021526 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80214c0:	140e      	asrs	r6, r1, #16
 80214c2:	d430      	bmi.n	8021526 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80214c4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80214c8:	42b2      	cmp	r2, r6
 80214ca:	dd2c      	ble.n	8021526 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80214cc:	9a00      	ldr	r2, [sp, #0]
 80214ce:	fb06 5502 	mla	r5, r6, r2, r5
 80214d2:	9e01      	ldr	r6, [sp, #4]
 80214d4:	086a      	lsrs	r2, r5, #1
 80214d6:	5cb2      	ldrb	r2, [r6, r2]
 80214d8:	07ee      	lsls	r6, r5, #31
 80214da:	bf54      	ite	pl
 80214dc:	f002 020f 	andpl.w	r2, r2, #15
 80214e0:	1112      	asrmi	r2, r2, #4
 80214e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80214e6:	b2d2      	uxtb	r2, r2
 80214e8:	b1ea      	cbz	r2, 8021526 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80214ea:	9d04      	ldr	r5, [sp, #16]
 80214ec:	436a      	muls	r2, r5
 80214ee:	1c55      	adds	r5, r2, #1
 80214f0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80214f4:	4d6e      	ldr	r5, [pc, #440]	; (80216b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80214f6:	1212      	asrs	r2, r2, #8
 80214f8:	682d      	ldr	r5, [r5, #0]
 80214fa:	2aff      	cmp	r2, #255	; 0xff
 80214fc:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8021500:	9605      	str	r6, [sp, #20]
 8021502:	d116      	bne.n	8021532 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8021504:	f06f 0201 	mvn.w	r2, #1
 8021508:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802150c:	fb02 fc07 	mul.w	ip, r2, r7
 8021510:	096a      	lsrs	r2, r5, #5
 8021512:	f026 0607 	bic.w	r6, r6, #7
 8021516:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802151a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802151e:	4316      	orrs	r6, r2
 8021520:	432e      	orrs	r6, r5
 8021522:	f824 600c 	strh.w	r6, [r4, ip]
 8021526:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021528:	3f01      	subs	r7, #1
 802152a:	4410      	add	r0, r2
 802152c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802152e:	4411      	add	r1, r2
 8021530:	e77e      	b.n	8021430 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8021532:	f06f 0601 	mvn.w	r6, #1
 8021536:	fa1f fa82 	uxth.w	sl, r2
 802153a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 802153e:	43d2      	mvns	r2, r2
 8021540:	437e      	muls	r6, r7
 8021542:	b2ed      	uxtb	r5, r5
 8021544:	fb1c fc0a 	smulbb	ip, ip, sl
 8021548:	b2d2      	uxtb	r2, r2
 802154a:	f834 8006 	ldrh.w	r8, [r4, r6]
 802154e:	fb15 f50a 	smulbb	r5, r5, sl
 8021552:	9602      	str	r6, [sp, #8]
 8021554:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021558:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802155c:	fb16 f60a 	smulbb	r6, r6, sl
 8021560:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021564:	fb0e ce02 	mla	lr, lr, r2, ip
 8021568:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 802156c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021570:	fa1f fe8e 	uxth.w	lr, lr
 8021574:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021578:	fa5f f888 	uxtb.w	r8, r8
 802157c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021580:	fb08 5502 	mla	r5, r8, r2, r5
 8021584:	f10e 0201 	add.w	r2, lr, #1
 8021588:	fa1f fc8c 	uxth.w	ip, ip
 802158c:	b2ad      	uxth	r5, r5
 802158e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021592:	9a02      	ldr	r2, [sp, #8]
 8021594:	1c6e      	adds	r6, r5, #1
 8021596:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 802159a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 802159e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80215a2:	ea46 0e0e 	orr.w	lr, r6, lr
 80215a6:	f10c 0601 	add.w	r6, ip, #1
 80215aa:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80215ae:	0976      	lsrs	r6, r6, #5
 80215b0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80215b4:	ea4e 0e06 	orr.w	lr, lr, r6
 80215b8:	f824 e002 	strh.w	lr, [r4, r2]
 80215bc:	e7b3      	b.n	8021526 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80215be:	f04f 0800 	mov.w	r8, #0
 80215c2:	eba3 0208 	sub.w	r2, r3, r8
 80215c6:	2a00      	cmp	r2, #0
 80215c8:	f77f af35 	ble.w	8021436 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80215cc:	1402      	asrs	r2, r0, #16
 80215ce:	9e00      	ldr	r6, [sp, #0]
 80215d0:	140d      	asrs	r5, r1, #16
 80215d2:	fb06 2505 	mla	r5, r6, r5, r2
 80215d6:	9e01      	ldr	r6, [sp, #4]
 80215d8:	086a      	lsrs	r2, r5, #1
 80215da:	07ed      	lsls	r5, r5, #31
 80215dc:	5cb2      	ldrb	r2, [r6, r2]
 80215de:	bf54      	ite	pl
 80215e0:	f002 020f 	andpl.w	r2, r2, #15
 80215e4:	1112      	asrmi	r2, r2, #4
 80215e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80215ea:	b2d2      	uxtb	r2, r2
 80215ec:	b1c2      	cbz	r2, 8021620 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80215ee:	9d04      	ldr	r5, [sp, #16]
 80215f0:	436a      	muls	r2, r5
 80215f2:	1c55      	adds	r5, r2, #1
 80215f4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80215f8:	4d2d      	ldr	r5, [pc, #180]	; (80216b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80215fa:	1212      	asrs	r2, r2, #8
 80215fc:	682e      	ldr	r6, [r5, #0]
 80215fe:	2aff      	cmp	r2, #255	; 0xff
 8021600:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8021604:	d113      	bne.n	802162e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021606:	0972      	lsrs	r2, r6, #5
 8021608:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802160c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021610:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021614:	f025 0507 	bic.w	r5, r5, #7
 8021618:	4315      	orrs	r5, r2
 802161a:	4335      	orrs	r5, r6
 802161c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8021620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021622:	f108 0801 	add.w	r8, r8, #1
 8021626:	4410      	add	r0, r2
 8021628:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802162a:	4411      	add	r1, r2
 802162c:	e7c9      	b.n	80215c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802162e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8021632:	fa1f fa82 	uxth.w	sl, r2
 8021636:	f3c6 4707 	ubfx	r7, r6, #16, #8
 802163a:	43d2      	mvns	r2, r2
 802163c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021640:	fb17 f70a 	smulbb	r7, r7, sl
 8021644:	b2d2      	uxtb	r2, r2
 8021646:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802164a:	b2f6      	uxtb	r6, r6
 802164c:	b2ed      	uxtb	r5, r5
 802164e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021652:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021656:	fb16 f60a 	smulbb	r6, r6, sl
 802165a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802165e:	fa1f fc8c 	uxth.w	ip, ip
 8021662:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021666:	fb15 f50a 	smulbb	r5, r5, sl
 802166a:	fa5f fe8e 	uxtb.w	lr, lr
 802166e:	fb0e 6602 	mla	r6, lr, r2, r6
 8021672:	fb07 5702 	mla	r7, r7, r2, r5
 8021676:	f10c 0201 	add.w	r2, ip, #1
 802167a:	b2b6      	uxth	r6, r6
 802167c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021680:	1c75      	adds	r5, r6, #1
 8021682:	b2bf      	uxth	r7, r7
 8021684:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021688:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802168c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021690:	ea45 0c0c 	orr.w	ip, r5, ip
 8021694:	1c7d      	adds	r5, r7, #1
 8021696:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 802169a:	096d      	lsrs	r5, r5, #5
 802169c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80216a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80216a4:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80216a8:	e7ba      	b.n	8021620 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80216aa:	b007      	add	sp, #28
 80216ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216b0:	20016e98 	.word	0x20016e98

080216b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80216b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216b8:	b087      	sub	sp, #28
 80216ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80216be:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80219c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80216c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80216c4:	9101      	str	r1, [sp, #4]
 80216c6:	9205      	str	r2, [sp, #20]
 80216c8:	6841      	ldr	r1, [r0, #4]
 80216ca:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80216ce:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80216d2:	fb01 2404 	mla	r4, r1, r4, r2
 80216d6:	6802      	ldr	r2, [r0, #0]
 80216d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80216dc:	f8db 2008 	ldr.w	r2, [fp, #8]
 80216e0:	3201      	adds	r2, #1
 80216e2:	f022 0201 	bic.w	r2, r2, #1
 80216e6:	9202      	str	r2, [sp, #8]
 80216e8:	f8db 2000 	ldr.w	r2, [fp]
 80216ec:	9203      	str	r2, [sp, #12]
 80216ee:	9a01      	ldr	r2, [sp, #4]
 80216f0:	2a00      	cmp	r2, #0
 80216f2:	dc03      	bgt.n	80216fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80216f4:	9a05      	ldr	r2, [sp, #20]
 80216f6:	2a00      	cmp	r2, #0
 80216f8:	f340 8162 	ble.w	80219c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80216fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80216fe:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8021702:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021708:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802170c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021710:	2b00      	cmp	r3, #0
 8021712:	dd0e      	ble.n	8021732 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021714:	1402      	asrs	r2, r0, #16
 8021716:	d405      	bmi.n	8021724 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021718:	42ba      	cmp	r2, r7
 802171a:	da03      	bge.n	8021724 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802171c:	140a      	asrs	r2, r1, #16
 802171e:	d401      	bmi.n	8021724 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021720:	42b2      	cmp	r2, r6
 8021722:	db07      	blt.n	8021734 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021726:	3b01      	subs	r3, #1
 8021728:	3402      	adds	r4, #2
 802172a:	4410      	add	r0, r2
 802172c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802172e:	4411      	add	r1, r2
 8021730:	e7ee      	b.n	8021710 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021732:	d017      	beq.n	8021764 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021734:	1e5a      	subs	r2, r3, #1
 8021736:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021738:	fb05 0502 	mla	r5, r5, r2, r0
 802173c:	142d      	asrs	r5, r5, #16
 802173e:	d409      	bmi.n	8021754 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021740:	42bd      	cmp	r5, r7
 8021742:	da07      	bge.n	8021754 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021744:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021746:	fb05 1202 	mla	r2, r5, r2, r1
 802174a:	1412      	asrs	r2, r2, #16
 802174c:	d402      	bmi.n	8021754 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802174e:	42b2      	cmp	r2, r6
 8021750:	f2c0 80c3 	blt.w	80218da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8021754:	2500      	movs	r5, #0
 8021756:	195a      	adds	r2, r3, r5
 8021758:	2a00      	cmp	r2, #0
 802175a:	dc3f      	bgt.n	80217dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802175c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021760:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021764:	9b01      	ldr	r3, [sp, #4]
 8021766:	2b00      	cmp	r3, #0
 8021768:	f340 812a 	ble.w	80219c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802176c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021772:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021776:	eeb0 6a62 	vmov.f32	s12, s5
 802177a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802177e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021782:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021786:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802178a:	eeb0 6a43 	vmov.f32	s12, s6
 802178e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021792:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021796:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802179a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802179e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80217a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80217a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80217aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80217ae:	ee12 2a90 	vmov	r2, s5
 80217b2:	eef0 2a47 	vmov.f32	s5, s14
 80217b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80217ba:	ee13 2a10 	vmov	r2, s6
 80217be:	9313      	str	r3, [sp, #76]	; 0x4c
 80217c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217c2:	eeb0 3a67 	vmov.f32	s6, s15
 80217c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80217ca:	9314      	str	r3, [sp, #80]	; 0x50
 80217cc:	9b01      	ldr	r3, [sp, #4]
 80217ce:	9a05      	ldr	r2, [sp, #20]
 80217d0:	3b01      	subs	r3, #1
 80217d2:	9301      	str	r3, [sp, #4]
 80217d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217d6:	bf08      	it	eq
 80217d8:	4613      	moveq	r3, r2
 80217da:	e788      	b.n	80216ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80217dc:	1406      	asrs	r6, r0, #16
 80217de:	d42c      	bmi.n	802183a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80217e0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80217e4:	42b2      	cmp	r2, r6
 80217e6:	dd28      	ble.n	802183a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80217e8:	140f      	asrs	r7, r1, #16
 80217ea:	d426      	bmi.n	802183a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80217ec:	f8db 200c 	ldr.w	r2, [fp, #12]
 80217f0:	42ba      	cmp	r2, r7
 80217f2:	dd22      	ble.n	802183a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80217f4:	9a02      	ldr	r2, [sp, #8]
 80217f6:	fb07 6602 	mla	r6, r7, r2, r6
 80217fa:	9f03      	ldr	r7, [sp, #12]
 80217fc:	0872      	lsrs	r2, r6, #1
 80217fe:	07f6      	lsls	r6, r6, #31
 8021800:	5cba      	ldrb	r2, [r7, r2]
 8021802:	bf54      	ite	pl
 8021804:	f002 020f 	andpl.w	r2, r2, #15
 8021808:	1112      	asrmi	r2, r2, #4
 802180a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802180e:	b2d2      	uxtb	r2, r2
 8021810:	2aff      	cmp	r2, #255	; 0xff
 8021812:	d118      	bne.n	8021846 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8021814:	f06f 0601 	mvn.w	r6, #1
 8021818:	f8d8 2000 	ldr.w	r2, [r8]
 802181c:	fb06 f705 	mul.w	r7, r6, r5
 8021820:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8021824:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8021828:	0956      	lsrs	r6, r2, #5
 802182a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802182e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021832:	ea4c 0606 	orr.w	r6, ip, r6
 8021836:	4316      	orrs	r6, r2
 8021838:	53e6      	strh	r6, [r4, r7]
 802183a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802183c:	3d01      	subs	r5, #1
 802183e:	4410      	add	r0, r2
 8021840:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021842:	4411      	add	r1, r2
 8021844:	e787      	b.n	8021756 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021846:	2a00      	cmp	r2, #0
 8021848:	d0f7      	beq.n	802183a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802184a:	f06f 0601 	mvn.w	r6, #1
 802184e:	f8d8 c000 	ldr.w	ip, [r8]
 8021852:	fa1f f982 	uxth.w	r9, r2
 8021856:	43d2      	mvns	r2, r2
 8021858:	436e      	muls	r6, r5
 802185a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802185e:	b2d2      	uxtb	r2, r2
 8021860:	f834 e006 	ldrh.w	lr, [r4, r6]
 8021864:	fb1a fa09 	smulbb	sl, sl, r9
 8021868:	9604      	str	r6, [sp, #16]
 802186a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802186e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8021872:	fb16 f609 	smulbb	r6, r6, r9
 8021876:	fa5f fc8c 	uxtb.w	ip, ip
 802187a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802187e:	fb1c fc09 	smulbb	ip, ip, r9
 8021882:	fb07 6702 	mla	r7, r7, r2, r6
 8021886:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802188a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802188e:	b2bf      	uxth	r7, r7
 8021890:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021894:	fa5f fe8e 	uxtb.w	lr, lr
 8021898:	fb06 a602 	mla	r6, r6, r2, sl
 802189c:	fb0e cc02 	mla	ip, lr, r2, ip
 80218a0:	1c7a      	adds	r2, r7, #1
 80218a2:	b2b6      	uxth	r6, r6
 80218a4:	fa1f fc8c 	uxth.w	ip, ip
 80218a8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80218ac:	9a04      	ldr	r2, [sp, #16]
 80218ae:	f10c 0a01 	add.w	sl, ip, #1
 80218b2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80218b6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80218ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80218be:	ea4a 0707 	orr.w	r7, sl, r7
 80218c2:	f106 0a01 	add.w	sl, r6, #1
 80218c6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80218ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80218ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80218d2:	ea47 070a 	orr.w	r7, r7, sl
 80218d6:	52a7      	strh	r7, [r4, r2]
 80218d8:	e7af      	b.n	802183a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80218da:	f04f 0e00 	mov.w	lr, #0
 80218de:	eba3 020e 	sub.w	r2, r3, lr
 80218e2:	2a00      	cmp	r2, #0
 80218e4:	f77f af3a 	ble.w	802175c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80218e8:	1402      	asrs	r2, r0, #16
 80218ea:	9e02      	ldr	r6, [sp, #8]
 80218ec:	140d      	asrs	r5, r1, #16
 80218ee:	fb06 2505 	mla	r5, r6, r5, r2
 80218f2:	9e03      	ldr	r6, [sp, #12]
 80218f4:	086a      	lsrs	r2, r5, #1
 80218f6:	07ed      	lsls	r5, r5, #31
 80218f8:	5cb2      	ldrb	r2, [r6, r2]
 80218fa:	bf54      	ite	pl
 80218fc:	f002 020f 	andpl.w	r2, r2, #15
 8021900:	1112      	asrmi	r2, r2, #4
 8021902:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021906:	b2d2      	uxtb	r2, r2
 8021908:	2aff      	cmp	r2, #255	; 0xff
 802190a:	d115      	bne.n	8021938 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802190c:	f8d8 5000 	ldr.w	r5, [r8]
 8021910:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8021914:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8021918:	096a      	lsrs	r2, r5, #5
 802191a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802191e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021922:	4332      	orrs	r2, r6
 8021924:	432a      	orrs	r2, r5
 8021926:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802192a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802192c:	f10e 0e01 	add.w	lr, lr, #1
 8021930:	4410      	add	r0, r2
 8021932:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021934:	4411      	add	r1, r2
 8021936:	e7d2      	b.n	80218de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021938:	2a00      	cmp	r2, #0
 802193a:	d0f6      	beq.n	802192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802193c:	f8d8 7000 	ldr.w	r7, [r8]
 8021940:	fa1f f982 	uxth.w	r9, r2
 8021944:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021948:	43d2      	mvns	r2, r2
 802194a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 802194e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8021952:	ea4f 262c 	mov.w	r6, ip, asr #8
 8021956:	fb15 f509 	smulbb	r5, r5, r9
 802195a:	b2d2      	uxtb	r2, r2
 802195c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021960:	b2ff      	uxtb	r7, r7
 8021962:	fb1a fa09 	smulbb	sl, sl, r9
 8021966:	fb06 5602 	mla	r6, r6, r2, r5
 802196a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802196e:	fb17 f709 	smulbb	r7, r7, r9
 8021972:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021976:	b2b6      	uxth	r6, r6
 8021978:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802197c:	fa5f fc8c 	uxtb.w	ip, ip
 8021980:	fb05 a502 	mla	r5, r5, r2, sl
 8021984:	fb0c 7702 	mla	r7, ip, r2, r7
 8021988:	1c72      	adds	r2, r6, #1
 802198a:	b2ad      	uxth	r5, r5
 802198c:	b2bf      	uxth	r7, r7
 802198e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021992:	f107 0a01 	add.w	sl, r7, #1
 8021996:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802199a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802199e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80219a2:	ea4a 0606 	orr.w	r6, sl, r6
 80219a6:	f105 0a01 	add.w	sl, r5, #1
 80219aa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80219ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80219b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80219b6:	ea46 060a 	orr.w	r6, r6, sl
 80219ba:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80219be:	e7b4      	b.n	802192a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80219c0:	b007      	add	sp, #28
 80219c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219c6:	bf00      	nop
 80219c8:	20016e98 	.word	0x20016e98

080219cc <_ZN8touchgfx8LCD16bppD1Ev>:
 80219cc:	4770      	bx	lr

080219ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80219ce:	4770      	bx	lr

080219d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80219d0:	4770      	bx	lr

080219d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80219d2:	4770      	bx	lr

080219d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80219d4:	4770      	bx	lr

080219d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80219d6:	4770      	bx	lr

080219d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80219d8:	4770      	bx	lr

080219da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80219da:	4770      	bx	lr

080219dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80219dc:	4770      	bx	lr

080219de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80219de:	4770      	bx	lr

080219e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80219e0:	4770      	bx	lr

080219e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80219e2:	4770      	bx	lr

080219e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80219e4:	4770      	bx	lr

080219e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80219e6:	4770      	bx	lr

080219e8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80219e8:	4770      	bx	lr

080219ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80219ea:	4770      	bx	lr

080219ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80219ec:	4770      	bx	lr

080219ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80219ee:	4770      	bx	lr

080219f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80219f0:	4770      	bx	lr

080219f2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80219f2:	4770      	bx	lr

080219f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80219f4:	4770      	bx	lr

080219f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80219f6:	4770      	bx	lr

080219f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80219f8:	4770      	bx	lr

080219fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80219fa:	4770      	bx	lr

080219fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80219fc:	4770      	bx	lr

080219fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80219fe:	4770      	bx	lr

08021a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021a00:	4770      	bx	lr

08021a02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021a02:	4770      	bx	lr

08021a04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8021a04:	4770      	bx	lr

08021a06 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021a06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021a0a:	b088      	sub	sp, #32
 8021a0c:	4606      	mov	r6, r0
 8021a0e:	4688      	mov	r8, r1
 8021a10:	4691      	mov	r9, r2
 8021a12:	ac08      	add	r4, sp, #32
 8021a14:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8021a18:	4620      	mov	r0, r4
 8021a1a:	f7fd fc65 	bl	801f2e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021a1e:	6833      	ldr	r3, [r6, #0]
 8021a20:	4605      	mov	r5, r0
 8021a22:	4620      	mov	r0, r4
 8021a24:	699f      	ldr	r7, [r3, #24]
 8021a26:	f7fd fb73 	bl	801f110 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021a2a:	4682      	mov	sl, r0
 8021a2c:	4620      	mov	r0, r4
 8021a2e:	f7fd fba3 	bl	801f178 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021a32:	9500      	str	r5, [sp, #0]
 8021a34:	464b      	mov	r3, r9
 8021a36:	4642      	mov	r2, r8
 8021a38:	4631      	mov	r1, r6
 8021a3a:	e9cd a001 	strd	sl, r0, [sp, #4]
 8021a3e:	a806      	add	r0, sp, #24
 8021a40:	47b8      	blx	r7
 8021a42:	4628      	mov	r0, r5
 8021a44:	b008      	add	sp, #32
 8021a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08021a4c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8021a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021a50:	2300      	movs	r3, #0
 8021a52:	9300      	str	r3, [sp, #0]
 8021a54:	4b3d      	ldr	r3, [pc, #244]	; (8021b4c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8021a56:	781b      	ldrb	r3, [r3, #0]
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d137      	bne.n	8021acc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8021a5c:	4a3c      	ldr	r2, [pc, #240]	; (8021b50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021a5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021a62:	f8ad 2004 	strh.w	r2, [sp, #4]
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d132      	bne.n	8021ad0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8021a6a:	4b3a      	ldr	r3, [pc, #232]	; (8021b54 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8021a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021a70:	ac02      	add	r4, sp, #8
 8021a72:	6808      	ldr	r0, [r1, #0]
 8021a74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021a78:	ab02      	add	r3, sp, #8
 8021a7a:	6849      	ldr	r1, [r1, #4]
 8021a7c:	4d36      	ldr	r5, [pc, #216]	; (8021b58 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8021a7e:	c303      	stmia	r3!, {r0, r1}
 8021a80:	4669      	mov	r1, sp
 8021a82:	4620      	mov	r0, r4
 8021a84:	f7fa f8bc 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a88:	4668      	mov	r0, sp
 8021a8a:	f7fa f891 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a8e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8021a92:	f8bd 2000 	ldrh.w	r2, [sp]
 8021a96:	462f      	mov	r7, r5
 8021a98:	6828      	ldr	r0, [r5, #0]
 8021a9a:	4413      	add	r3, r2
 8021a9c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021aa0:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021aa4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021aa8:	4413      	add	r3, r2
 8021aaa:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021aae:	6803      	ldr	r3, [r0, #0]
 8021ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ab2:	4798      	blx	r3
 8021ab4:	f010 0f01 	tst.w	r0, #1
 8021ab8:	d00c      	beq.n	8021ad4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8021aba:	6828      	ldr	r0, [r5, #0]
 8021abc:	6803      	ldr	r3, [r0, #0]
 8021abe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021ac4:	4798      	blx	r3
 8021ac6:	b004      	add	sp, #16
 8021ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021acc:	4a21      	ldr	r2, [pc, #132]	; (8021b54 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8021ace:	e7c6      	b.n	8021a5e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8021ad0:	4b1f      	ldr	r3, [pc, #124]	; (8021b50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021ad2:	e7cb      	b.n	8021a6c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021ad4:	6838      	ldr	r0, [r7, #0]
 8021ad6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8021ada:	6803      	ldr	r3, [r0, #0]
 8021adc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8021ae0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8021ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ae6:	4798      	blx	r3
 8021ae8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8021aec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021af0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8021af4:	fb16 3602 	smlabb	r6, r6, r2, r3
 8021af8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021afc:	6838      	ldr	r0, [r7, #0]
 8021afe:	6803      	ldr	r3, [r0, #0]
 8021b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b02:	4798      	blx	r3
 8021b04:	4a12      	ldr	r2, [pc, #72]	; (8021b50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021b06:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8021b0a:	8813      	ldrh	r3, [r2, #0]
 8021b0c:	4691      	mov	r9, r2
 8021b0e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8021b12:	435d      	muls	r5, r3
 8021b14:	fb03 1404 	mla	r4, r3, r4, r1
 8021b18:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8021b1c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021b20:	6838      	ldr	r0, [r7, #0]
 8021b22:	42ac      	cmp	r4, r5
 8021b24:	6803      	ldr	r3, [r0, #0]
 8021b26:	d20e      	bcs.n	8021b46 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8021b28:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8021b2c:	4632      	mov	r2, r6
 8021b2e:	4643      	mov	r3, r8
 8021b30:	4621      	mov	r1, r4
 8021b32:	47d0      	blx	sl
 8021b34:	f8b9 3000 	ldrh.w	r3, [r9]
 8021b38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021b3c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8021b40:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8021b44:	e7ec      	b.n	8021b20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8021b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b48:	4798      	blx	r3
 8021b4a:	e7bc      	b.n	8021ac6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8021b4c:	20016e80 	.word	0x20016e80
 8021b50:	20016e82 	.word	0x20016e82
 8021b54:	20016e84 	.word	0x20016e84
 8021b58:	20016e88 	.word	0x20016e88

08021b5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b60:	b08b      	sub	sp, #44	; 0x2c
 8021b62:	460f      	mov	r7, r1
 8021b64:	4616      	mov	r6, r2
 8021b66:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8021b6a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8021b6e:	f1bb 0f00 	cmp.w	fp, #0
 8021b72:	d049      	beq.n	8021c08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021b74:	6810      	ldr	r0, [r2, #0]
 8021b76:	ad06      	add	r5, sp, #24
 8021b78:	6851      	ldr	r1, [r2, #4]
 8021b7a:	c503      	stmia	r5!, {r0, r1}
 8021b7c:	6818      	ldr	r0, [r3, #0]
 8021b7e:	ad08      	add	r5, sp, #32
 8021b80:	6859      	ldr	r1, [r3, #4]
 8021b82:	c503      	stmia	r5!, {r0, r1}
 8021b84:	a806      	add	r0, sp, #24
 8021b86:	f7fa f813 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b8a:	4631      	mov	r1, r6
 8021b8c:	a808      	add	r0, sp, #32
 8021b8e:	f7fa f837 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b92:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021b96:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021b9a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021b9e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8021ba2:	fb16 2103 	smlabb	r1, r6, r3, r2
 8021ba6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8021baa:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8021bae:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021bb2:	4f5f      	ldr	r7, [pc, #380]	; (8021d30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8021bb4:	440a      	add	r2, r1
 8021bb6:	6838      	ldr	r0, [r7, #0]
 8021bb8:	46b9      	mov	r9, r7
 8021bba:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021bbe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021bc2:	4413      	add	r3, r2
 8021bc4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021bc8:	6803      	ldr	r3, [r0, #0]
 8021bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021bcc:	4798      	blx	r3
 8021bce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021bd2:	d01c      	beq.n	8021c0e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8021bd4:	f010 0f04 	tst.w	r0, #4
 8021bd8:	d01d      	beq.n	8021c16 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021bda:	f8d9 0000 	ldr.w	r0, [r9]
 8021bde:	2700      	movs	r7, #0
 8021be0:	b2ad      	uxth	r5, r5
 8021be2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021be6:	6801      	ldr	r1, [r0, #0]
 8021be8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021bec:	f8cd b00c 	str.w	fp, [sp, #12]
 8021bf0:	9501      	str	r5, [sp, #4]
 8021bf2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8021bf6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8021bfa:	9402      	str	r4, [sp, #8]
 8021bfc:	fa1f f488 	uxth.w	r4, r8
 8021c00:	9400      	str	r4, [sp, #0]
 8021c02:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8021c04:	4631      	mov	r1, r6
 8021c06:	47a0      	blx	r4
 8021c08:	b00b      	add	sp, #44	; 0x2c
 8021c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c0e:	b914      	cbnz	r4, 8021c16 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021c10:	f010 0f01 	tst.w	r0, #1
 8021c14:	e7e0      	b.n	8021bd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8021c16:	f8d9 0000 	ldr.w	r0, [r9]
 8021c1a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8021c1e:	6803      	ldr	r3, [r0, #0]
 8021c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c22:	4798      	blx	r3
 8021c24:	4b43      	ldr	r3, [pc, #268]	; (8021d34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8021c26:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8021c2a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021c2e:	881a      	ldrh	r2, [r3, #0]
 8021c30:	469a      	mov	sl, r3
 8021c32:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021c36:	fb05 f502 	mul.w	r5, r5, r2
 8021c3a:	fb02 1404 	mla	r4, r2, r4, r1
 8021c3e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8021c42:	d059      	beq.n	8021cf8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8021c44:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8021c48:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021c4c:	fa1f f28b 	uxth.w	r2, fp
 8021c50:	469e      	mov	lr, r3
 8021c52:	fa1f f989 	uxth.w	r9, r9
 8021c56:	42ac      	cmp	r4, r5
 8021c58:	d264      	bcs.n	8021d24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8021c5a:	eb04 0a07 	add.w	sl, r4, r7
 8021c5e:	4554      	cmp	r4, sl
 8021c60:	d23d      	bcs.n	8021cde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8021c62:	8821      	ldrh	r1, [r4, #0]
 8021c64:	f836 3b02 	ldrh.w	r3, [r6], #2
 8021c68:	1208      	asrs	r0, r1, #8
 8021c6a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021c6e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021c72:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8021c76:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021c7a:	00c9      	lsls	r1, r1, #3
 8021c7c:	fb10 f009 	smulbb	r0, r0, r9
 8021c80:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021c84:	b2c9      	uxtb	r1, r1
 8021c86:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021c8a:	10d8      	asrs	r0, r3, #3
 8021c8c:	fb1b fb09 	smulbb	fp, fp, r9
 8021c90:	00db      	lsls	r3, r3, #3
 8021c92:	fa1f fc8c 	uxth.w	ip, ip
 8021c96:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021c9a:	fb11 f109 	smulbb	r1, r1, r9
 8021c9e:	b2db      	uxtb	r3, r3
 8021ca0:	fb00 b002 	mla	r0, r0, r2, fp
 8021ca4:	f10c 0b01 	add.w	fp, ip, #1
 8021ca8:	fb03 1302 	mla	r3, r3, r2, r1
 8021cac:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021cb0:	b29b      	uxth	r3, r3
 8021cb2:	b280      	uxth	r0, r0
 8021cb4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8021cb8:	f103 0c01 	add.w	ip, r3, #1
 8021cbc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021cc0:	1c43      	adds	r3, r0, #1
 8021cc2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021cc6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021cca:	0940      	lsrs	r0, r0, #5
 8021ccc:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021cd0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021cd4:	ea4c 0c00 	orr.w	ip, ip, r0
 8021cd8:	f824 cb02 	strh.w	ip, [r4], #2
 8021cdc:	e7bf      	b.n	8021c5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8021cde:	f8be 3000 	ldrh.w	r3, [lr]
 8021ce2:	eba3 0308 	sub.w	r3, r3, r8
 8021ce6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021cea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021cee:	eba3 0308 	sub.w	r3, r3, r8
 8021cf2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8021cf6:	e7ae      	b.n	8021c56 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8021cf8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021cfc:	f8d9 0000 	ldr.w	r0, [r9]
 8021d00:	42ac      	cmp	r4, r5
 8021d02:	6803      	ldr	r3, [r0, #0]
 8021d04:	d20e      	bcs.n	8021d24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8021d06:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8021d0a:	4632      	mov	r2, r6
 8021d0c:	463b      	mov	r3, r7
 8021d0e:	4621      	mov	r1, r4
 8021d10:	47c0      	blx	r8
 8021d12:	f8ba 3000 	ldrh.w	r3, [sl]
 8021d16:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021d1a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021d1e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8021d22:	e7eb      	b.n	8021cfc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8021d24:	4b02      	ldr	r3, [pc, #8]	; (8021d30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8021d26:	6818      	ldr	r0, [r3, #0]
 8021d28:	6803      	ldr	r3, [r0, #0]
 8021d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d2c:	4798      	blx	r3
 8021d2e:	e76b      	b.n	8021c08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021d30:	20016e88 	.word	0x20016e88
 8021d34:	20016e82 	.word	0x20016e82

08021d38 <_ZN8touchgfx8LCD16bppD0Ev>:
 8021d38:	b510      	push	{r4, lr}
 8021d3a:	4604      	mov	r4, r0
 8021d3c:	2178      	movs	r1, #120	; 0x78
 8021d3e:	f009 faec 	bl	802b31a <_ZdlPvj>
 8021d42:	4620      	mov	r0, r4
 8021d44:	bd10      	pop	{r4, pc}

08021d46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021d46:	b510      	push	{r4, lr}
 8021d48:	4604      	mov	r4, r0
 8021d4a:	2104      	movs	r1, #4
 8021d4c:	f009 fae5 	bl	802b31a <_ZdlPvj>
 8021d50:	4620      	mov	r0, r4
 8021d52:	bd10      	pop	{r4, pc}

08021d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021d54:	b510      	push	{r4, lr}
 8021d56:	4604      	mov	r4, r0
 8021d58:	2104      	movs	r1, #4
 8021d5a:	f009 fade 	bl	802b31a <_ZdlPvj>
 8021d5e:	4620      	mov	r0, r4
 8021d60:	bd10      	pop	{r4, pc}

08021d62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021d62:	b510      	push	{r4, lr}
 8021d64:	4604      	mov	r4, r0
 8021d66:	2104      	movs	r1, #4
 8021d68:	f009 fad7 	bl	802b31a <_ZdlPvj>
 8021d6c:	4620      	mov	r0, r4
 8021d6e:	bd10      	pop	{r4, pc}

08021d70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021d70:	b510      	push	{r4, lr}
 8021d72:	4604      	mov	r4, r0
 8021d74:	2104      	movs	r1, #4
 8021d76:	f009 fad0 	bl	802b31a <_ZdlPvj>
 8021d7a:	4620      	mov	r0, r4
 8021d7c:	bd10      	pop	{r4, pc}

08021d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021d7e:	b510      	push	{r4, lr}
 8021d80:	4604      	mov	r4, r0
 8021d82:	2104      	movs	r1, #4
 8021d84:	f009 fac9 	bl	802b31a <_ZdlPvj>
 8021d88:	4620      	mov	r0, r4
 8021d8a:	bd10      	pop	{r4, pc}

08021d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021d8c:	b510      	push	{r4, lr}
 8021d8e:	4604      	mov	r4, r0
 8021d90:	2104      	movs	r1, #4
 8021d92:	f009 fac2 	bl	802b31a <_ZdlPvj>
 8021d96:	4620      	mov	r0, r4
 8021d98:	bd10      	pop	{r4, pc}

08021d9a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021d9a:	b510      	push	{r4, lr}
 8021d9c:	4604      	mov	r4, r0
 8021d9e:	2104      	movs	r1, #4
 8021da0:	f009 fabb 	bl	802b31a <_ZdlPvj>
 8021da4:	4620      	mov	r0, r4
 8021da6:	bd10      	pop	{r4, pc}

08021da8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021da8:	b510      	push	{r4, lr}
 8021daa:	4604      	mov	r4, r0
 8021dac:	2104      	movs	r1, #4
 8021dae:	f009 fab4 	bl	802b31a <_ZdlPvj>
 8021db2:	4620      	mov	r0, r4
 8021db4:	bd10      	pop	{r4, pc}

08021db6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021db6:	b510      	push	{r4, lr}
 8021db8:	4604      	mov	r4, r0
 8021dba:	2104      	movs	r1, #4
 8021dbc:	f009 faad 	bl	802b31a <_ZdlPvj>
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	bd10      	pop	{r4, pc}

08021dc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021dc4:	b510      	push	{r4, lr}
 8021dc6:	4604      	mov	r4, r0
 8021dc8:	2104      	movs	r1, #4
 8021dca:	f009 faa6 	bl	802b31a <_ZdlPvj>
 8021dce:	4620      	mov	r0, r4
 8021dd0:	bd10      	pop	{r4, pc}

08021dd2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021dd2:	b510      	push	{r4, lr}
 8021dd4:	4604      	mov	r4, r0
 8021dd6:	2104      	movs	r1, #4
 8021dd8:	f009 fa9f 	bl	802b31a <_ZdlPvj>
 8021ddc:	4620      	mov	r0, r4
 8021dde:	bd10      	pop	{r4, pc}

08021de0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021de0:	b510      	push	{r4, lr}
 8021de2:	4604      	mov	r4, r0
 8021de4:	2104      	movs	r1, #4
 8021de6:	f009 fa98 	bl	802b31a <_ZdlPvj>
 8021dea:	4620      	mov	r0, r4
 8021dec:	bd10      	pop	{r4, pc}

08021dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021dee:	b510      	push	{r4, lr}
 8021df0:	4604      	mov	r4, r0
 8021df2:	2104      	movs	r1, #4
 8021df4:	f009 fa91 	bl	802b31a <_ZdlPvj>
 8021df8:	4620      	mov	r0, r4
 8021dfa:	bd10      	pop	{r4, pc}

08021dfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021dfc:	b510      	push	{r4, lr}
 8021dfe:	4604      	mov	r4, r0
 8021e00:	2104      	movs	r1, #4
 8021e02:	f009 fa8a 	bl	802b31a <_ZdlPvj>
 8021e06:	4620      	mov	r0, r4
 8021e08:	bd10      	pop	{r4, pc}

08021e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021e0a:	b510      	push	{r4, lr}
 8021e0c:	4604      	mov	r4, r0
 8021e0e:	2104      	movs	r1, #4
 8021e10:	f009 fa83 	bl	802b31a <_ZdlPvj>
 8021e14:	4620      	mov	r0, r4
 8021e16:	bd10      	pop	{r4, pc}

08021e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021e18:	b510      	push	{r4, lr}
 8021e1a:	4604      	mov	r4, r0
 8021e1c:	2104      	movs	r1, #4
 8021e1e:	f009 fa7c 	bl	802b31a <_ZdlPvj>
 8021e22:	4620      	mov	r0, r4
 8021e24:	bd10      	pop	{r4, pc}

08021e26 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021e26:	b510      	push	{r4, lr}
 8021e28:	4604      	mov	r4, r0
 8021e2a:	2104      	movs	r1, #4
 8021e2c:	f009 fa75 	bl	802b31a <_ZdlPvj>
 8021e30:	4620      	mov	r0, r4
 8021e32:	bd10      	pop	{r4, pc}

08021e34 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021e34:	b510      	push	{r4, lr}
 8021e36:	4604      	mov	r4, r0
 8021e38:	2104      	movs	r1, #4
 8021e3a:	f009 fa6e 	bl	802b31a <_ZdlPvj>
 8021e3e:	4620      	mov	r0, r4
 8021e40:	bd10      	pop	{r4, pc}

08021e42 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021e42:	b510      	push	{r4, lr}
 8021e44:	4604      	mov	r4, r0
 8021e46:	2104      	movs	r1, #4
 8021e48:	f009 fa67 	bl	802b31a <_ZdlPvj>
 8021e4c:	4620      	mov	r0, r4
 8021e4e:	bd10      	pop	{r4, pc}

08021e50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021e50:	b510      	push	{r4, lr}
 8021e52:	4604      	mov	r4, r0
 8021e54:	2104      	movs	r1, #4
 8021e56:	f009 fa60 	bl	802b31a <_ZdlPvj>
 8021e5a:	4620      	mov	r0, r4
 8021e5c:	bd10      	pop	{r4, pc}

08021e5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021e5e:	b510      	push	{r4, lr}
 8021e60:	4604      	mov	r4, r0
 8021e62:	2104      	movs	r1, #4
 8021e64:	f009 fa59 	bl	802b31a <_ZdlPvj>
 8021e68:	4620      	mov	r0, r4
 8021e6a:	bd10      	pop	{r4, pc}

08021e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021e6c:	b510      	push	{r4, lr}
 8021e6e:	4604      	mov	r4, r0
 8021e70:	2104      	movs	r1, #4
 8021e72:	f009 fa52 	bl	802b31a <_ZdlPvj>
 8021e76:	4620      	mov	r0, r4
 8021e78:	bd10      	pop	{r4, pc}

08021e7a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021e7a:	b510      	push	{r4, lr}
 8021e7c:	4604      	mov	r4, r0
 8021e7e:	2104      	movs	r1, #4
 8021e80:	f009 fa4b 	bl	802b31a <_ZdlPvj>
 8021e84:	4620      	mov	r0, r4
 8021e86:	bd10      	pop	{r4, pc}

08021e88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021e88:	b510      	push	{r4, lr}
 8021e8a:	4604      	mov	r4, r0
 8021e8c:	2104      	movs	r1, #4
 8021e8e:	f009 fa44 	bl	802b31a <_ZdlPvj>
 8021e92:	4620      	mov	r0, r4
 8021e94:	bd10      	pop	{r4, pc}

08021e96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021e96:	b510      	push	{r4, lr}
 8021e98:	4604      	mov	r4, r0
 8021e9a:	2104      	movs	r1, #4
 8021e9c:	f009 fa3d 	bl	802b31a <_ZdlPvj>
 8021ea0:	4620      	mov	r0, r4
 8021ea2:	bd10      	pop	{r4, pc}

08021ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021ea4:	b510      	push	{r4, lr}
 8021ea6:	4604      	mov	r4, r0
 8021ea8:	2104      	movs	r1, #4
 8021eaa:	f009 fa36 	bl	802b31a <_ZdlPvj>
 8021eae:	4620      	mov	r0, r4
 8021eb0:	bd10      	pop	{r4, pc}

08021eb2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021eb2:	b510      	push	{r4, lr}
 8021eb4:	4604      	mov	r4, r0
 8021eb6:	2104      	movs	r1, #4
 8021eb8:	f009 fa2f 	bl	802b31a <_ZdlPvj>
 8021ebc:	4620      	mov	r0, r4
 8021ebe:	bd10      	pop	{r4, pc}

08021ec0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021ec0:	b510      	push	{r4, lr}
 8021ec2:	4604      	mov	r4, r0
 8021ec4:	2104      	movs	r1, #4
 8021ec6:	f009 fa28 	bl	802b31a <_ZdlPvj>
 8021eca:	4620      	mov	r0, r4
 8021ecc:	bd10      	pop	{r4, pc}
	...

08021ed0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ed4:	b091      	sub	sp, #68	; 0x44
 8021ed6:	469b      	mov	fp, r3
 8021ed8:	4616      	mov	r6, r2
 8021eda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021ede:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8021ee2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021ee6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8021eea:	4604      	mov	r4, r0
 8021eec:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8021ef0:	4640      	mov	r0, r8
 8021ef2:	460d      	mov	r5, r1
 8021ef4:	4659      	mov	r1, fp
 8021ef6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8021efa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8021efe:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8021f02:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8021f06:	f7f5 f971 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8021f0a:	4631      	mov	r1, r6
 8021f0c:	4640      	mov	r0, r8
 8021f0e:	f7f5 f96d 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 8021f12:	4b74      	ldr	r3, [pc, #464]	; (80220e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8021f14:	8818      	ldrh	r0, [r3, #0]
 8021f16:	4b74      	ldr	r3, [pc, #464]	; (80220e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8021f18:	b202      	sxth	r2, r0
 8021f1a:	8819      	ldrh	r1, [r3, #0]
 8021f1c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021f20:	b20e      	sxth	r6, r1
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	da07      	bge.n	8021f36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8021f26:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8021f2a:	4463      	add	r3, ip
 8021f2c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8021f30:	2300      	movs	r3, #0
 8021f32:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8021f36:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021f3a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8021f3e:	1ad2      	subs	r2, r2, r3
 8021f40:	4594      	cmp	ip, r2
 8021f42:	bfc4      	itt	gt
 8021f44:	1ac2      	subgt	r2, r0, r3
 8021f46:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8021f4a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021f4e:	2a00      	cmp	r2, #0
 8021f50:	da07      	bge.n	8021f62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8021f52:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8021f56:	4462      	add	r2, ip
 8021f58:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8021f5c:	2200      	movs	r2, #0
 8021f5e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8021f62:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8021f66:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021f6a:	eba6 060a 	sub.w	r6, r6, sl
 8021f6e:	42b2      	cmp	r2, r6
 8021f70:	bfc4      	itt	gt
 8021f72:	eba1 020a 	subgt.w	r2, r1, sl
 8021f76:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8021f7a:	4a5c      	ldr	r2, [pc, #368]	; (80220ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021f7c:	7812      	ldrb	r2, [r2, #0]
 8021f7e:	b9a2      	cbnz	r2, 8021faa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8021f80:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021f84:	4286      	cmp	r6, r0
 8021f86:	4640      	mov	r0, r8
 8021f88:	9303      	str	r3, [sp, #12]
 8021f8a:	bf14      	ite	ne
 8021f8c:	2600      	movne	r6, #0
 8021f8e:	2601      	moveq	r6, #1
 8021f90:	f7f5 f96f 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021f94:	9b03      	ldr	r3, [sp, #12]
 8021f96:	b160      	cbz	r0, 8021fb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021f98:	2300      	movs	r3, #0
 8021f9a:	8023      	strh	r3, [r4, #0]
 8021f9c:	8063      	strh	r3, [r4, #2]
 8021f9e:	80a3      	strh	r3, [r4, #4]
 8021fa0:	4620      	mov	r0, r4
 8021fa2:	80e3      	strh	r3, [r4, #6]
 8021fa4:	b011      	add	sp, #68	; 0x44
 8021fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021faa:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8021fae:	428e      	cmp	r6, r1
 8021fb0:	e7e9      	b.n	8021f86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8021fb2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021fb6:	a90e      	add	r1, sp, #56	; 0x38
 8021fb8:	900e      	str	r0, [sp, #56]	; 0x38
 8021fba:	a80c      	add	r0, sp, #48	; 0x30
 8021fbc:	9205      	str	r2, [sp, #20]
 8021fbe:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021fc2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8021fc6:	9206      	str	r2, [sp, #24]
 8021fc8:	f8bb 2000 	ldrh.w	r2, [fp]
 8021fcc:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8021fd0:	1a9b      	subs	r3, r3, r2
 8021fd2:	b21b      	sxth	r3, r3
 8021fd4:	9303      	str	r3, [sp, #12]
 8021fd6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021fda:	f8df b118 	ldr.w	fp, [pc, #280]	; 80220f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021fde:	ebaa 0a03 	sub.w	sl, sl, r3
 8021fe2:	fa0f f38a 	sxth.w	r3, sl
 8021fe6:	9304      	str	r3, [sp, #16]
 8021fe8:	9b03      	ldr	r3, [sp, #12]
 8021fea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8021fee:	9b04      	ldr	r3, [sp, #16]
 8021ff0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021ff4:	9b05      	ldr	r3, [sp, #20]
 8021ff6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021ffa:	9b06      	ldr	r3, [sp, #24]
 8021ffc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022000:	f7f9 fdfe 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022004:	4640      	mov	r0, r8
 8022006:	f7f9 fdd3 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802200a:	a80e      	add	r0, sp, #56	; 0x38
 802200c:	f7f9 fdd0 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022010:	4b37      	ldr	r3, [pc, #220]	; (80220f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8022012:	4628      	mov	r0, r5
 8022014:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022018:	881b      	ldrh	r3, [r3, #0]
 802201a:	9307      	str	r3, [sp, #28]
 802201c:	682b      	ldr	r3, [r5, #0]
 802201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022020:	4798      	blx	r3
 8022022:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8022026:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802202a:	4681      	mov	r9, r0
 802202c:	f8db 0000 	ldr.w	r0, [fp]
 8022030:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8022034:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8022036:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 802203a:	6803      	ldr	r3, [r0, #0]
 802203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802203e:	4798      	blx	r3
 8022040:	4607      	mov	r7, r0
 8022042:	f8db 0000 	ldr.w	r0, [fp]
 8022046:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802204a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 802204e:	6803      	ldr	r3, [r0, #0]
 8022050:	9109      	str	r1, [sp, #36]	; 0x24
 8022052:	9208      	str	r2, [sp, #32]
 8022054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022056:	4798      	blx	r3
 8022058:	f010 0f01 	tst.w	r0, #1
 802205c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022060:	d012      	beq.n	8022088 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8022062:	f8db 0000 	ldr.w	r0, [fp]
 8022066:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 802206a:	6803      	ldr	r3, [r0, #0]
 802206c:	9200      	str	r2, [sp, #0]
 802206e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8022070:	462b      	mov	r3, r5
 8022072:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022076:	47b0      	blx	r6
 8022078:	9b03      	ldr	r3, [sp, #12]
 802207a:	8023      	strh	r3, [r4, #0]
 802207c:	9b04      	ldr	r3, [sp, #16]
 802207e:	8063      	strh	r3, [r4, #2]
 8022080:	9b05      	ldr	r3, [sp, #20]
 8022082:	80a3      	strh	r3, [r4, #4]
 8022084:	9b06      	ldr	r3, [sp, #24]
 8022086:	e78b      	b.n	8021fa0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8022088:	fb09 f202 	mul.w	r2, r9, r2
 802208c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8022090:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8022094:	440f      	add	r7, r1
 8022096:	b166      	cbz	r6, 80220b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022098:	9a07      	ldr	r2, [sp, #28]
 802209a:	4592      	cmp	sl, r2
 802209c:	d109      	bne.n	80220b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 802209e:	f8db 0000 	ldr.w	r0, [fp]
 80220a2:	fb09 f303 	mul.w	r3, r9, r3
 80220a6:	4629      	mov	r1, r5
 80220a8:	6802      	ldr	r2, [r0, #0]
 80220aa:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80220ac:	463a      	mov	r2, r7
 80220ae:	47b0      	blx	r6
 80220b0:	e7e2      	b.n	8022078 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80220b2:	fb0a f303 	mul.w	r3, sl, r3
 80220b6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80220ba:	f8df b038 	ldr.w	fp, [pc, #56]	; 80220f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80220be:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 80220c2:	4545      	cmp	r5, r8
 80220c4:	d2d8      	bcs.n	8022078 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80220c6:	f8db 0000 	ldr.w	r0, [fp]
 80220ca:	4629      	mov	r1, r5
 80220cc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80220d0:	4435      	add	r5, r6
 80220d2:	6802      	ldr	r2, [r0, #0]
 80220d4:	005b      	lsls	r3, r3, #1
 80220d6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80220da:	463a      	mov	r2, r7
 80220dc:	47d0      	blx	sl
 80220de:	444f      	add	r7, r9
 80220e0:	e7ef      	b.n	80220c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 80220e2:	bf00      	nop
 80220e4:	20016e7c 	.word	0x20016e7c
 80220e8:	20016e7e 	.word	0x20016e7e
 80220ec:	20016e80 	.word	0x20016e80
 80220f0:	20016e82 	.word	0x20016e82
 80220f4:	20016e88 	.word	0x20016e88

080220f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80220f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220fa:	4606      	mov	r6, r0
 80220fc:	b087      	sub	sp, #28
 80220fe:	460c      	mov	r4, r1
 8022100:	4617      	mov	r7, r2
 8022102:	461d      	mov	r5, r3
 8022104:	b333      	cbz	r3, 8022154 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022106:	4608      	mov	r0, r1
 8022108:	f7f5 f8b3 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 802210c:	bb10      	cbnz	r0, 8022154 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802210e:	6820      	ldr	r0, [r4, #0]
 8022110:	ab04      	add	r3, sp, #16
 8022112:	6861      	ldr	r1, [r4, #4]
 8022114:	4c1b      	ldr	r4, [pc, #108]	; (8022184 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8022116:	c303      	stmia	r3!, {r0, r1}
 8022118:	a804      	add	r0, sp, #16
 802211a:	f7f9 fd49 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802211e:	6820      	ldr	r0, [r4, #0]
 8022120:	6803      	ldr	r3, [r0, #0]
 8022122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022124:	4798      	blx	r3
 8022126:	2dff      	cmp	r5, #255	; 0xff
 8022128:	d016      	beq.n	8022158 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 802212a:	f010 0f08 	tst.w	r0, #8
 802212e:	6820      	ldr	r0, [r4, #0]
 8022130:	d015      	beq.n	802215e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022132:	2400      	movs	r4, #0
 8022134:	6801      	ldr	r1, [r0, #0]
 8022136:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802213a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802213e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8022142:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022146:	9401      	str	r4, [sp, #4]
 8022148:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802214c:	9400      	str	r4, [sp, #0]
 802214e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8022150:	4639      	mov	r1, r7
 8022152:	47a0      	blx	r4
 8022154:	b007      	add	sp, #28
 8022156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022158:	f010 0f02 	tst.w	r0, #2
 802215c:	e7e7      	b.n	802212e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802215e:	6803      	ldr	r3, [r0, #0]
 8022160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022162:	4798      	blx	r3
 8022164:	4b08      	ldr	r3, [pc, #32]	; (8022188 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022166:	4601      	mov	r1, r0
 8022168:	4630      	mov	r0, r6
 802216a:	881a      	ldrh	r2, [r3, #0]
 802216c:	6833      	ldr	r3, [r6, #0]
 802216e:	e9cd 7500 	strd	r7, r5, [sp]
 8022172:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8022174:	ab04      	add	r3, sp, #16
 8022176:	47a8      	blx	r5
 8022178:	6820      	ldr	r0, [r4, #0]
 802217a:	6803      	ldr	r3, [r0, #0]
 802217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802217e:	4798      	blx	r3
 8022180:	e7e8      	b.n	8022154 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022182:	bf00      	nop
 8022184:	20016e88 	.word	0x20016e88
 8022188:	20016e82 	.word	0x20016e82

0802218c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 802218c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022190:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8022194:	4688      	mov	r8, r1
 8022196:	4614      	mov	r4, r2
 8022198:	461d      	mov	r5, r3
 802219a:	9e08      	ldr	r6, [sp, #32]
 802219c:	2f00      	cmp	r7, #0
 802219e:	f000 80ab 	beq.w	80222f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80221a2:	4618      	mov	r0, r3
 80221a4:	f7f5 f865 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 80221a8:	2800      	cmp	r0, #0
 80221aa:	f040 80a5 	bne.w	80222f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80221ae:	f9b5 1000 	ldrsh.w	r1, [r5]
 80221b2:	2fff      	cmp	r7, #255	; 0xff
 80221b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80221b8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80221bc:	fb04 1303 	mla	r3, r4, r3, r1
 80221c0:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80221c4:	eba4 0200 	sub.w	r2, r4, r0
 80221c8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80221cc:	fb04 f505 	mul.w	r5, r4, r5
 80221d0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80221d4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80221d8:	d04a      	beq.n	8022270 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 80221da:	b2bc      	uxth	r4, r7
 80221dc:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 80221e0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80221e4:	fa5f f788 	uxtb.w	r7, r8
 80221e8:	b2f3      	uxtb	r3, r6
 80221ea:	0040      	lsls	r0, r0, #1
 80221ec:	fb0e fe04 	mul.w	lr, lr, r4
 80221f0:	4367      	muls	r7, r4
 80221f2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80221f6:	4363      	muls	r3, r4
 80221f8:	fa1f fc8c 	uxth.w	ip, ip
 80221fc:	42a9      	cmp	r1, r5
 80221fe:	d27b      	bcs.n	80222f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8022200:	eb01 0900 	add.w	r9, r1, r0
 8022204:	4549      	cmp	r1, r9
 8022206:	d231      	bcs.n	802226c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8022208:	880a      	ldrh	r2, [r1, #0]
 802220a:	1214      	asrs	r4, r2, #8
 802220c:	10d6      	asrs	r6, r2, #3
 802220e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022212:	00d2      	lsls	r2, r2, #3
 8022214:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022218:	b2d2      	uxtb	r2, r2
 802221a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802221e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022222:	fb14 f40c 	smulbb	r4, r4, ip
 8022226:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802222a:	fb12 f20c 	smulbb	r2, r2, ip
 802222e:	fb16 f60c 	smulbb	r6, r6, ip
 8022232:	4474      	add	r4, lr
 8022234:	441a      	add	r2, r3
 8022236:	b2a4      	uxth	r4, r4
 8022238:	443e      	add	r6, r7
 802223a:	b292      	uxth	r2, r2
 802223c:	f104 0a01 	add.w	sl, r4, #1
 8022240:	b2b6      	uxth	r6, r6
 8022242:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022246:	f102 0a01 	add.w	sl, r2, #1
 802224a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802224e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022252:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022256:	4322      	orrs	r2, r4
 8022258:	1c74      	adds	r4, r6, #1
 802225a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 802225e:	0976      	lsrs	r6, r6, #5
 8022260:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022264:	4332      	orrs	r2, r6
 8022266:	f821 2b02 	strh.w	r2, [r1], #2
 802226a:	e7cb      	b.n	8022204 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 802226c:	4441      	add	r1, r8
 802226e:	e7c5      	b.n	80221fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8022270:	0973      	lsrs	r3, r6, #5
 8022272:	4f22      	ldr	r7, [pc, #136]	; (80222fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8022274:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022278:	ea08 0707 	and.w	r7, r8, r7
 802227c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022280:	433b      	orrs	r3, r7
 8022282:	07e7      	lsls	r7, r4, #31
 8022284:	ea43 0306 	orr.w	r3, r3, r6
 8022288:	b29b      	uxth	r3, r3
 802228a:	d50b      	bpl.n	80222a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 802228c:	0040      	lsls	r0, r0, #1
 802228e:	0052      	lsls	r2, r2, #1
 8022290:	42a9      	cmp	r1, r5
 8022292:	d231      	bcs.n	80222f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8022294:	180c      	adds	r4, r1, r0
 8022296:	42a1      	cmp	r1, r4
 8022298:	d202      	bcs.n	80222a0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 802229a:	f821 3b02 	strh.w	r3, [r1], #2
 802229e:	e7fa      	b.n	8022296 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 80222a0:	4411      	add	r1, r2
 80222a2:	e7f5      	b.n	8022290 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80222a4:	078e      	lsls	r6, r1, #30
 80222a6:	d008      	beq.n	80222ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80222a8:	0066      	lsls	r6, r4, #1
 80222aa:	460a      	mov	r2, r1
 80222ac:	42aa      	cmp	r2, r5
 80222ae:	d202      	bcs.n	80222b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80222b0:	8013      	strh	r3, [r2, #0]
 80222b2:	4432      	add	r2, r6
 80222b4:	e7fa      	b.n	80222ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 80222b6:	3102      	adds	r1, #2
 80222b8:	3801      	subs	r0, #1
 80222ba:	07c2      	lsls	r2, r0, #31
 80222bc:	d50b      	bpl.n	80222d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 80222be:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80222c2:	0066      	lsls	r6, r4, #1
 80222c4:	3a01      	subs	r2, #1
 80222c6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80222ca:	42aa      	cmp	r2, r5
 80222cc:	d202      	bcs.n	80222d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 80222ce:	8013      	strh	r3, [r2, #0]
 80222d0:	4432      	add	r2, r6
 80222d2:	e7fa      	b.n	80222ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 80222d4:	3801      	subs	r0, #1
 80222d6:	b178      	cbz	r0, 80222f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80222d8:	1040      	asrs	r0, r0, #1
 80222da:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80222de:	0080      	lsls	r0, r0, #2
 80222e0:	0064      	lsls	r4, r4, #1
 80222e2:	42a9      	cmp	r1, r5
 80222e4:	d208      	bcs.n	80222f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80222e6:	180e      	adds	r6, r1, r0
 80222e8:	460a      	mov	r2, r1
 80222ea:	42b2      	cmp	r2, r6
 80222ec:	d202      	bcs.n	80222f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80222ee:	f842 3b04 	str.w	r3, [r2], #4
 80222f2:	e7fa      	b.n	80222ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 80222f4:	4421      	add	r1, r4
 80222f6:	e7f4      	b.n	80222e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 80222f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222fc:	00fff800 	.word	0x00fff800

08022300 <_ZN8touchgfx8LCD16bppC1Ev>:
 8022300:	2200      	movs	r2, #0
 8022302:	4910      	ldr	r1, [pc, #64]	; (8022344 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8022304:	6042      	str	r2, [r0, #4]
 8022306:	6001      	str	r1, [r0, #0]
 8022308:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802230c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022310:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022314:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022318:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 802231c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022320:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022324:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022328:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 802232c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022330:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022334:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022338:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 802233c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8022340:	4770      	bx	lr
 8022342:	bf00      	nop
 8022344:	08031640 	.word	0x08031640

08022348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802234c:	b08d      	sub	sp, #52	; 0x34
 802234e:	460d      	mov	r5, r1
 8022350:	4604      	mov	r4, r0
 8022352:	4699      	mov	r9, r3
 8022354:	6808      	ldr	r0, [r1, #0]
 8022356:	ab08      	add	r3, sp, #32
 8022358:	6849      	ldr	r1, [r1, #4]
 802235a:	c303      	stmia	r3!, {r0, r1}
 802235c:	6810      	ldr	r0, [r2, #0]
 802235e:	ab0a      	add	r3, sp, #40	; 0x28
 8022360:	6851      	ldr	r1, [r2, #4]
 8022362:	c303      	stmia	r3!, {r0, r1}
 8022364:	a808      	add	r0, sp, #32
 8022366:	f7f9 fc23 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802236a:	4629      	mov	r1, r5
 802236c:	a80a      	add	r0, sp, #40	; 0x28
 802236e:	4d67      	ldr	r5, [pc, #412]	; (802250c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022370:	f7f9 fc46 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022374:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022378:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802237c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022380:	6828      	ldr	r0, [r5, #0]
 8022382:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022386:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 802238a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802238e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022392:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022396:	440a      	add	r2, r1
 8022398:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802239c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80223a0:	4413      	add	r3, r2
 80223a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80223a6:	6803      	ldr	r3, [r0, #0]
 80223a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80223aa:	4798      	blx	r3
 80223ac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80223b0:	d119      	bne.n	80223e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80223b2:	f010 0f20 	tst.w	r0, #32
 80223b6:	6828      	ldr	r0, [r5, #0]
 80223b8:	d018      	beq.n	80223ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80223ba:	2500      	movs	r5, #0
 80223bc:	6801      	ldr	r1, [r0, #0]
 80223be:	b2b6      	uxth	r6, r6
 80223c0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80223c4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80223c8:	9601      	str	r6, [sp, #4]
 80223ca:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80223ce:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80223d2:	9502      	str	r5, [sp, #8]
 80223d4:	fa1f f588 	uxth.w	r5, r8
 80223d8:	9500      	str	r5, [sp, #0]
 80223da:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80223dc:	4621      	mov	r1, r4
 80223de:	47a8      	blx	r5
 80223e0:	b00d      	add	sp, #52	; 0x34
 80223e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80223ea:	e7e4      	b.n	80223b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80223ec:	6803      	ldr	r3, [r0, #0]
 80223ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80223f0:	4798      	blx	r3
 80223f2:	4947      	ldr	r1, [pc, #284]	; (8022510 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80223f4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80223f8:	880b      	ldrh	r3, [r1, #0]
 80223fa:	468a      	mov	sl, r1
 80223fc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022400:	fb03 5202 	mla	r2, r3, r2, r5
 8022404:	4373      	muls	r3, r6
 8022406:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802240a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802240e:	9307      	str	r3, [sp, #28]
 8022410:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022414:	9306      	str	r3, [sp, #24]
 8022416:	9b07      	ldr	r3, [sp, #28]
 8022418:	4298      	cmp	r0, r3
 802241a:	d270      	bcs.n	80224fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 802241c:	9b06      	ldr	r3, [sp, #24]
 802241e:	4621      	mov	r1, r4
 8022420:	eb00 0b03 	add.w	fp, r0, r3
 8022424:	4558      	cmp	r0, fp
 8022426:	d25d      	bcs.n	80224e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022428:	f851 4b04 	ldr.w	r4, [r1], #4
 802242c:	0e23      	lsrs	r3, r4, #24
 802242e:	d014      	beq.n	802245a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022430:	2bff      	cmp	r3, #255	; 0xff
 8022432:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022436:	d112      	bne.n	802245e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022438:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802243c:	d10f      	bne.n	802245e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802243e:	0963      	lsrs	r3, r4, #5
 8022440:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022444:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022448:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802244c:	f02c 0c07 	bic.w	ip, ip, #7
 8022450:	ea43 0c0c 	orr.w	ip, r3, ip
 8022454:	ea4c 0404 	orr.w	r4, ip, r4
 8022458:	8004      	strh	r4, [r0, #0]
 802245a:	3002      	adds	r0, #2
 802245c:	e7e2      	b.n	8022424 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802245e:	fb09 f303 	mul.w	r3, r9, r3
 8022462:	8807      	ldrh	r7, [r0, #0]
 8022464:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022468:	fa5f fc8c 	uxtb.w	ip, ip
 802246c:	1c5a      	adds	r2, r3, #1
 802246e:	123e      	asrs	r6, r7, #8
 8022470:	10fd      	asrs	r5, r7, #3
 8022472:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022476:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802247a:	00ff      	lsls	r7, r7, #3
 802247c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022480:	1212      	asrs	r2, r2, #8
 8022482:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022486:	b293      	uxth	r3, r2
 8022488:	43d2      	mvns	r2, r2
 802248a:	b2ff      	uxtb	r7, r7
 802248c:	fb1e fe03 	smulbb	lr, lr, r3
 8022490:	b2d2      	uxtb	r2, r2
 8022492:	fb1c fc03 	smulbb	ip, ip, r3
 8022496:	b2e4      	uxtb	r4, r4
 8022498:	fb06 e602 	mla	r6, r6, r2, lr
 802249c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80224a0:	fb14 f403 	smulbb	r4, r4, r3
 80224a4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80224a8:	b2b6      	uxth	r6, r6
 80224aa:	fb05 c502 	mla	r5, r5, r2, ip
 80224ae:	fb07 4702 	mla	r7, r7, r2, r4
 80224b2:	f106 0e01 	add.w	lr, r6, #1
 80224b6:	b2ad      	uxth	r5, r5
 80224b8:	b2bf      	uxth	r7, r7
 80224ba:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80224be:	f105 0c01 	add.w	ip, r5, #1
 80224c2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80224c6:	1c7e      	adds	r6, r7, #1
 80224c8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80224cc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80224d0:	096d      	lsrs	r5, r5, #5
 80224d2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80224d6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80224da:	ea46 060e 	orr.w	r6, r6, lr
 80224de:	432e      	orrs	r6, r5
 80224e0:	8006      	strh	r6, [r0, #0]
 80224e2:	e7ba      	b.n	802245a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80224e4:	f8ba 3000 	ldrh.w	r3, [sl]
 80224e8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80224ec:	eba3 0308 	sub.w	r3, r3, r8
 80224f0:	eba4 0408 	sub.w	r4, r4, r8
 80224f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80224f8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80224fc:	e78b      	b.n	8022416 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80224fe:	4b03      	ldr	r3, [pc, #12]	; (802250c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022500:	6818      	ldr	r0, [r3, #0]
 8022502:	6803      	ldr	r3, [r0, #0]
 8022504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022506:	4798      	blx	r3
 8022508:	e76a      	b.n	80223e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802250a:	bf00      	nop
 802250c:	20016e88 	.word	0x20016e88
 8022510:	20016e82 	.word	0x20016e82

08022514 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022518:	b085      	sub	sp, #20
 802251a:	6810      	ldr	r0, [r2, #0]
 802251c:	460c      	mov	r4, r1
 802251e:	6851      	ldr	r1, [r2, #4]
 8022520:	466d      	mov	r5, sp
 8022522:	4616      	mov	r6, r2
 8022524:	c503      	stmia	r5!, {r0, r1}
 8022526:	6818      	ldr	r0, [r3, #0]
 8022528:	6859      	ldr	r1, [r3, #4]
 802252a:	c503      	stmia	r5!, {r0, r1}
 802252c:	4668      	mov	r0, sp
 802252e:	4d2e      	ldr	r5, [pc, #184]	; (80225e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022530:	f7f9 fb3e 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022534:	4631      	mov	r1, r6
 8022536:	a802      	add	r0, sp, #8
 8022538:	4e2c      	ldr	r6, [pc, #176]	; (80225ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802253a:	f7f9 fb61 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802253e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022542:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022546:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802254a:	6828      	ldr	r0, [r5, #0]
 802254c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022550:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022554:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022558:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802255c:	f8bd 1000 	ldrh.w	r1, [sp]
 8022560:	440a      	add	r2, r1
 8022562:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022566:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802256a:	4413      	add	r3, r2
 802256c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022570:	6803      	ldr	r3, [r0, #0]
 8022572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022574:	4798      	blx	r3
 8022576:	8833      	ldrh	r3, [r6, #0]
 8022578:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802257c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022580:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022584:	f8df e068 	ldr.w	lr, [pc, #104]	; 80225f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022588:	fb03 1202 	mla	r2, r3, r2, r1
 802258c:	fb08 f303 	mul.w	r3, r8, r3
 8022590:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022594:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022598:	4298      	cmp	r0, r3
 802259a:	d21d      	bcs.n	80225d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 802259c:	eb00 080c 	add.w	r8, r0, ip
 80225a0:	4540      	cmp	r0, r8
 80225a2:	d20f      	bcs.n	80225c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80225a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80225a8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80225ac:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80225b0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80225b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80225b8:	ea42 0209 	orr.w	r2, r2, r9
 80225bc:	430a      	orrs	r2, r1
 80225be:	f820 2b02 	strh.w	r2, [r0], #2
 80225c2:	e7ed      	b.n	80225a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80225c4:	8832      	ldrh	r2, [r6, #0]
 80225c6:	1bd2      	subs	r2, r2, r7
 80225c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80225cc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80225d0:	1bd2      	subs	r2, r2, r7
 80225d2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80225d6:	e7df      	b.n	8022598 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80225d8:	6828      	ldr	r0, [r5, #0]
 80225da:	6803      	ldr	r3, [r0, #0]
 80225dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225de:	4798      	blx	r3
 80225e0:	b005      	add	sp, #20
 80225e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80225e6:	bf00      	nop
 80225e8:	20016e88 	.word	0x20016e88
 80225ec:	20016e82 	.word	0x20016e82
 80225f0:	fffff800 	.word	0xfffff800

080225f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80225f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225f8:	b08e      	sub	sp, #56	; 0x38
 80225fa:	460e      	mov	r6, r1
 80225fc:	4604      	mov	r4, r0
 80225fe:	461d      	mov	r5, r3
 8022600:	6808      	ldr	r0, [r1, #0]
 8022602:	ab0a      	add	r3, sp, #40	; 0x28
 8022604:	6849      	ldr	r1, [r1, #4]
 8022606:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80227dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802260a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80227e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 802260e:	c303      	stmia	r3!, {r0, r1}
 8022610:	6810      	ldr	r0, [r2, #0]
 8022612:	ab0c      	add	r3, sp, #48	; 0x30
 8022614:	6851      	ldr	r1, [r2, #4]
 8022616:	c303      	stmia	r3!, {r0, r1}
 8022618:	a80a      	add	r0, sp, #40	; 0x28
 802261a:	f7f9 fac9 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802261e:	4631      	mov	r1, r6
 8022620:	a80c      	add	r0, sp, #48	; 0x30
 8022622:	f7f9 faed 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022626:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802262a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 802262e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022632:	f8d8 0000 	ldr.w	r0, [r8]
 8022636:	fb11 2103 	smlabb	r1, r1, r3, r2
 802263a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 802263e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8022642:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022646:	440c      	add	r4, r1
 8022648:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 802264c:	440a      	add	r2, r1
 802264e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022652:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022656:	4413      	add	r3, r2
 8022658:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802265c:	6803      	ldr	r3, [r0, #0]
 802265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022660:	4798      	blx	r3
 8022662:	2dff      	cmp	r5, #255	; 0xff
 8022664:	d124      	bne.n	80226b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022666:	f010 0f01 	tst.w	r0, #1
 802266a:	f8d8 0000 	ldr.w	r0, [r8]
 802266e:	d022      	beq.n	80226b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022670:	2100      	movs	r1, #0
 8022672:	f04f 0e01 	mov.w	lr, #1
 8022676:	f8d0 c000 	ldr.w	ip, [r0]
 802267a:	b2b6      	uxth	r6, r6
 802267c:	f8cd e018 	str.w	lr, [sp, #24]
 8022680:	b2bf      	uxth	r7, r7
 8022682:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022686:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802268a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802268e:	f8b9 e000 	ldrh.w	lr, [r9]
 8022692:	9503      	str	r5, [sp, #12]
 8022694:	9601      	str	r6, [sp, #4]
 8022696:	9700      	str	r7, [sp, #0]
 8022698:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802269c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80226a0:	9102      	str	r1, [sp, #8]
 80226a2:	4621      	mov	r1, r4
 80226a4:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80226a8:	47a8      	blx	r5
 80226aa:	b00e      	add	sp, #56	; 0x38
 80226ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226b0:	f010 0f04 	tst.w	r0, #4
 80226b4:	e7d9      	b.n	802266a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80226b6:	6803      	ldr	r3, [r0, #0]
 80226b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226ba:	4798      	blx	r3
 80226bc:	f8b9 3000 	ldrh.w	r3, [r9]
 80226c0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80226c4:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80226c8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80226cc:	435e      	muls	r6, r3
 80226ce:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80226d2:	2dff      	cmp	r5, #255	; 0xff
 80226d4:	fb03 1202 	mla	r2, r3, r2, r1
 80226d8:	ebac 0c07 	sub.w	ip, ip, r7
 80226dc:	eba3 0707 	sub.w	r7, r3, r7
 80226e0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80226e4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80226e8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80226ec:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80226f0:	d049      	beq.n	8022786 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80226f2:	43eb      	mvns	r3, r5
 80226f4:	fa1f f985 	uxth.w	r9, r5
 80226f8:	b2db      	uxtb	r3, r3
 80226fa:	42b0      	cmp	r0, r6
 80226fc:	d266      	bcs.n	80227cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80226fe:	eb00 0a0e 	add.w	sl, r0, lr
 8022702:	4550      	cmp	r0, sl
 8022704:	4621      	mov	r1, r4
 8022706:	f104 0403 	add.w	r4, r4, #3
 802270a:	d25b      	bcs.n	80227c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 802270c:	8802      	ldrh	r2, [r0, #0]
 802270e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022712:	ea4f 2822 	mov.w	r8, r2, asr #8
 8022716:	fb11 f109 	smulbb	r1, r1, r9
 802271a:	10d5      	asrs	r5, r2, #3
 802271c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8022720:	00d2      	lsls	r2, r2, #3
 8022722:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022726:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802272a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802272e:	fb08 1803 	mla	r8, r8, r3, r1
 8022732:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8022736:	b2d2      	uxtb	r2, r2
 8022738:	fb11 f109 	smulbb	r1, r1, r9
 802273c:	fa1f f888 	uxth.w	r8, r8
 8022740:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022744:	fb05 1503 	mla	r5, r5, r3, r1
 8022748:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802274c:	fb11 f109 	smulbb	r1, r1, r9
 8022750:	b2ad      	uxth	r5, r5
 8022752:	fb02 1203 	mla	r2, r2, r3, r1
 8022756:	f108 0101 	add.w	r1, r8, #1
 802275a:	b292      	uxth	r2, r2
 802275c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022760:	1c51      	adds	r1, r2, #1
 8022762:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8022766:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802276a:	1c69      	adds	r1, r5, #1
 802276c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022770:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022774:	096d      	lsrs	r5, r5, #5
 8022776:	ea42 0208 	orr.w	r2, r2, r8
 802277a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802277e:	432a      	orrs	r2, r5
 8022780:	f820 2b02 	strh.w	r2, [r0], #2
 8022784:	e7bd      	b.n	8022702 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022786:	4a14      	ldr	r2, [pc, #80]	; (80227d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022788:	42b0      	cmp	r0, r6
 802278a:	d21f      	bcs.n	80227cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802278c:	eb00 050e 	add.w	r5, r0, lr
 8022790:	42a8      	cmp	r0, r5
 8022792:	4621      	mov	r1, r4
 8022794:	f104 0403 	add.w	r4, r4, #3
 8022798:	d210      	bcs.n	80227bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802279a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802279e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80227a2:	00db      	lsls	r3, r3, #3
 80227a4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80227a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80227ac:	430b      	orrs	r3, r1
 80227ae:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80227b2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80227b6:	f820 3b02 	strh.w	r3, [r0], #2
 80227ba:	e7e9      	b.n	8022790 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80227bc:	4438      	add	r0, r7
 80227be:	eb01 040c 	add.w	r4, r1, ip
 80227c2:	e7e1      	b.n	8022788 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80227c4:	4438      	add	r0, r7
 80227c6:	eb01 040c 	add.w	r4, r1, ip
 80227ca:	e796      	b.n	80226fa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80227cc:	4b03      	ldr	r3, [pc, #12]	; (80227dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80227ce:	6818      	ldr	r0, [r3, #0]
 80227d0:	6803      	ldr	r3, [r0, #0]
 80227d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227d4:	4798      	blx	r3
 80227d6:	e768      	b.n	80226aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80227d8:	fffff800 	.word	0xfffff800
 80227dc:	20016e88 	.word	0x20016e88
 80227e0:	20016e82 	.word	0x20016e82

080227e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80227e4:	b4f0      	push	{r4, r5, r6, r7}
 80227e6:	4616      	mov	r6, r2
 80227e8:	461c      	mov	r4, r3
 80227ea:	460d      	mov	r5, r1
 80227ec:	9a04      	ldr	r2, [sp, #16]
 80227ee:	2e01      	cmp	r6, #1
 80227f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80227f4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80227f8:	d012      	beq.n	8022820 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80227fa:	d303      	bcc.n	8022804 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80227fc:	2e02      	cmp	r6, #2
 80227fe:	d00a      	beq.n	8022816 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8022800:	bcf0      	pop	{r4, r5, r6, r7}
 8022802:	4770      	bx	lr
 8022804:	6805      	ldr	r5, [r0, #0]
 8022806:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802280a:	68ed      	ldr	r5, [r5, #12]
 802280c:	4613      	mov	r3, r2
 802280e:	4622      	mov	r2, r4
 8022810:	46ac      	mov	ip, r5
 8022812:	bcf0      	pop	{r4, r5, r6, r7}
 8022814:	4760      	bx	ip
 8022816:	4621      	mov	r1, r4
 8022818:	4628      	mov	r0, r5
 802281a:	bcf0      	pop	{r4, r5, r6, r7}
 802281c:	f7ff bd94 	b.w	8022348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022820:	4621      	mov	r1, r4
 8022822:	4628      	mov	r0, r5
 8022824:	bcf0      	pop	{r4, r5, r6, r7}
 8022826:	f7ff bee5 	b.w	80225f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0802282c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022830:	b093      	sub	sp, #76	; 0x4c
 8022832:	4681      	mov	r9, r0
 8022834:	4688      	mov	r8, r1
 8022836:	6810      	ldr	r0, [r2, #0]
 8022838:	6851      	ldr	r1, [r2, #4]
 802283a:	ac0e      	add	r4, sp, #56	; 0x38
 802283c:	4616      	mov	r6, r2
 802283e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8022842:	4f6b      	ldr	r7, [pc, #428]	; (80229f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8022844:	c403      	stmia	r4!, {r0, r1}
 8022846:	6818      	ldr	r0, [r3, #0]
 8022848:	ac10      	add	r4, sp, #64	; 0x40
 802284a:	6859      	ldr	r1, [r3, #4]
 802284c:	c403      	stmia	r4!, {r0, r1}
 802284e:	a80e      	add	r0, sp, #56	; 0x38
 8022850:	f7f9 f9ae 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022854:	4631      	mov	r1, r6
 8022856:	a810      	add	r0, sp, #64	; 0x40
 8022858:	4e66      	ldr	r6, [pc, #408]	; (80229f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802285a:	f7f9 f9d1 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802285e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022862:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8022866:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802286a:	6830      	ldr	r0, [r6, #0]
 802286c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022870:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8022874:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022878:	4489      	add	r9, r1
 802287a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802287e:	440a      	add	r2, r1
 8022880:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022884:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022888:	4413      	add	r3, r2
 802288a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802288e:	6803      	ldr	r3, [r0, #0]
 8022890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022892:	4798      	blx	r3
 8022894:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022898:	6830      	ldr	r0, [r6, #0]
 802289a:	d01d      	beq.n	80228d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802289c:	2200      	movs	r2, #0
 802289e:	6801      	ldr	r1, [r0, #0]
 80228a0:	b2a4      	uxth	r4, r4
 80228a2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80228a6:	b2ad      	uxth	r5, r5
 80228a8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80228ac:	220b      	movs	r2, #11
 80228ae:	9207      	str	r2, [sp, #28]
 80228b0:	883a      	ldrh	r2, [r7, #0]
 80228b2:	9502      	str	r5, [sp, #8]
 80228b4:	9206      	str	r2, [sp, #24]
 80228b6:	2201      	movs	r2, #1
 80228b8:	9401      	str	r4, [sp, #4]
 80228ba:	e9cd a204 	strd	sl, r2, [sp, #16]
 80228be:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80228c2:	9203      	str	r2, [sp, #12]
 80228c4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80228c8:	9200      	str	r2, [sp, #0]
 80228ca:	4642      	mov	r2, r8
 80228cc:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80228ce:	4649      	mov	r1, r9
 80228d0:	47a0      	blx	r4
 80228d2:	b013      	add	sp, #76	; 0x4c
 80228d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228d8:	6803      	ldr	r3, [r0, #0]
 80228da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80228dc:	4798      	blx	r3
 80228de:	883b      	ldrh	r3, [r7, #0]
 80228e0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80228e4:	f04f 0e04 	mov.w	lr, #4
 80228e8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80228ec:	435d      	muls	r5, r3
 80228ee:	fb03 1202 	mla	r2, r3, r2, r1
 80228f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80228f6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80228fa:	920c      	str	r2, [sp, #48]	; 0x30
 80228fc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022900:	1b12      	subs	r2, r2, r4
 8022902:	920d      	str	r2, [sp, #52]	; 0x34
 8022904:	0062      	lsls	r2, r4, #1
 8022906:	1b1c      	subs	r4, r3, r4
 8022908:	920a      	str	r2, [sp, #40]	; 0x28
 802290a:	0063      	lsls	r3, r4, #1
 802290c:	930b      	str	r3, [sp, #44]	; 0x2c
 802290e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022910:	4298      	cmp	r0, r3
 8022912:	d266      	bcs.n	80229e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8022914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022916:	eb00 0b03 	add.w	fp, r0, r3
 802291a:	4558      	cmp	r0, fp
 802291c:	d25c      	bcs.n	80229d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802291e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022922:	fb1e e303 	smlabb	r3, lr, r3, lr
 8022926:	f858 2003 	ldr.w	r2, [r8, r3]
 802292a:	0e11      	lsrs	r1, r2, #24
 802292c:	d012      	beq.n	8022954 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802292e:	29ff      	cmp	r1, #255	; 0xff
 8022930:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8022934:	d110      	bne.n	8022958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022936:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802293a:	d10d      	bne.n	8022958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802293c:	0953      	lsrs	r3, r2, #5
 802293e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8022942:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022946:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802294a:	f027 0707 	bic.w	r7, r7, #7
 802294e:	431f      	orrs	r7, r3
 8022950:	433a      	orrs	r2, r7
 8022952:	8002      	strh	r2, [r0, #0]
 8022954:	3002      	adds	r0, #2
 8022956:	e7e0      	b.n	802291a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8022958:	fb0a f101 	mul.w	r1, sl, r1
 802295c:	8806      	ldrh	r6, [r0, #0]
 802295e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022962:	b2d2      	uxtb	r2, r2
 8022964:	1c4b      	adds	r3, r1, #1
 8022966:	1235      	asrs	r5, r6, #8
 8022968:	10f4      	asrs	r4, r6, #3
 802296a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802296e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022972:	00f6      	lsls	r6, r6, #3
 8022974:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022978:	121b      	asrs	r3, r3, #8
 802297a:	b2f6      	uxtb	r6, r6
 802297c:	b299      	uxth	r1, r3
 802297e:	43db      	mvns	r3, r3
 8022980:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022984:	fb1c fc01 	smulbb	ip, ip, r1
 8022988:	b2db      	uxtb	r3, r3
 802298a:	fb12 f201 	smulbb	r2, r2, r1
 802298e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022992:	fb05 c503 	mla	r5, r5, r3, ip
 8022996:	b2ff      	uxtb	r7, r7
 8022998:	fb06 2203 	mla	r2, r6, r3, r2
 802299c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80229a0:	fb17 f701 	smulbb	r7, r7, r1
 80229a4:	b2ad      	uxth	r5, r5
 80229a6:	b292      	uxth	r2, r2
 80229a8:	fb04 7403 	mla	r4, r4, r3, r7
 80229ac:	f105 0c01 	add.w	ip, r5, #1
 80229b0:	1c57      	adds	r7, r2, #1
 80229b2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80229b6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80229ba:	b2a4      	uxth	r4, r4
 80229bc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80229c0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80229c4:	433d      	orrs	r5, r7
 80229c6:	1c67      	adds	r7, r4, #1
 80229c8:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80229cc:	0964      	lsrs	r4, r4, #5
 80229ce:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80229d2:	4325      	orrs	r5, r4
 80229d4:	8005      	strh	r5, [r0, #0]
 80229d6:	e7bd      	b.n	8022954 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80229d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80229da:	4418      	add	r0, r3
 80229dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229de:	4499      	add	r9, r3
 80229e0:	e795      	b.n	802290e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80229e2:	4b04      	ldr	r3, [pc, #16]	; (80229f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80229e4:	6818      	ldr	r0, [r3, #0]
 80229e6:	6803      	ldr	r3, [r0, #0]
 80229e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229ea:	4798      	blx	r3
 80229ec:	e771      	b.n	80228d2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80229ee:	bf00      	nop
 80229f0:	20016e82 	.word	0x20016e82
 80229f4:	20016e88 	.word	0x20016e88

080229f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80229f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229fc:	b087      	sub	sp, #28
 80229fe:	4680      	mov	r8, r0
 8022a00:	460d      	mov	r5, r1
 8022a02:	4614      	mov	r4, r2
 8022a04:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8022a08:	2e00      	cmp	r6, #0
 8022a0a:	f000 80b9 	beq.w	8022b80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8022a0e:	6810      	ldr	r0, [r2, #0]
 8022a10:	af02      	add	r7, sp, #8
 8022a12:	6851      	ldr	r1, [r2, #4]
 8022a14:	c703      	stmia	r7!, {r0, r1}
 8022a16:	6818      	ldr	r0, [r3, #0]
 8022a18:	af04      	add	r7, sp, #16
 8022a1a:	6859      	ldr	r1, [r3, #4]
 8022a1c:	c703      	stmia	r7!, {r0, r1}
 8022a1e:	a802      	add	r0, sp, #8
 8022a20:	f7f9 f8c6 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a24:	4621      	mov	r1, r4
 8022a26:	a804      	add	r0, sp, #16
 8022a28:	f7f9 f8ea 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022a2c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022a30:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022a34:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8022a38:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022a3c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022a40:	eb08 0401 	add.w	r4, r8, r1
 8022a44:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022a48:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022a4c:	440a      	add	r2, r1
 8022a4e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022a52:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022a56:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022a5a:	4413      	add	r3, r2
 8022a5c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022a60:	4b49      	ldr	r3, [pc, #292]	; (8022b88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022a62:	6818      	ldr	r0, [r3, #0]
 8022a64:	6803      	ldr	r3, [r0, #0]
 8022a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a68:	4798      	blx	r3
 8022a6a:	4b48      	ldr	r3, [pc, #288]	; (8022b8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8022a6c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022a70:	2eff      	cmp	r6, #255	; 0xff
 8022a72:	881a      	ldrh	r2, [r3, #0]
 8022a74:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022a78:	fb02 c101 	mla	r1, r2, r1, ip
 8022a7c:	fb02 f207 	mul.w	r2, r2, r7
 8022a80:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022a84:	f105 0104 	add.w	r1, r5, #4
 8022a88:	461d      	mov	r5, r3
 8022a8a:	d05a      	beq.n	8022b42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8022a8c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8022a90:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022a94:	b2b6      	uxth	r6, r6
 8022a96:	9301      	str	r3, [sp, #4]
 8022a98:	fa1f fe8e 	uxth.w	lr, lr
 8022a9c:	4282      	cmp	r2, r0
 8022a9e:	d96a      	bls.n	8022b76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022aa0:	eb00 0b0a 	add.w	fp, r0, sl
 8022aa4:	4583      	cmp	fp, r0
 8022aa6:	d940      	bls.n	8022b2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8022aa8:	8805      	ldrh	r5, [r0, #0]
 8022aaa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022aae:	122f      	asrs	r7, r5, #8
 8022ab0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022ab4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022ab8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022abc:	00ed      	lsls	r5, r5, #3
 8022abe:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022ac2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8022ac6:	fb17 f70e 	smulbb	r7, r7, lr
 8022aca:	b2ed      	uxtb	r5, r5
 8022acc:	fb19 f90e 	smulbb	r9, r9, lr
 8022ad0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022ad4:	fb15 f50e 	smulbb	r5, r5, lr
 8022ad8:	fb0c 7c06 	mla	ip, ip, r6, r7
 8022adc:	10df      	asrs	r7, r3, #3
 8022ade:	00db      	lsls	r3, r3, #3
 8022ae0:	fa1f fc8c 	uxth.w	ip, ip
 8022ae4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022ae8:	b2db      	uxtb	r3, r3
 8022aea:	fb07 9706 	mla	r7, r7, r6, r9
 8022aee:	f10c 0901 	add.w	r9, ip, #1
 8022af2:	fb03 5306 	mla	r3, r3, r6, r5
 8022af6:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8022afa:	b29b      	uxth	r3, r3
 8022afc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8022b00:	b2bf      	uxth	r7, r7
 8022b02:	f103 0c01 	add.w	ip, r3, #1
 8022b06:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022b0a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022b0e:	ea4c 0c09 	orr.w	ip, ip, r9
 8022b12:	f107 0901 	add.w	r9, r7, #1
 8022b16:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8022b1a:	097f      	lsrs	r7, r7, #5
 8022b1c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022b20:	ea4c 0c07 	orr.w	ip, ip, r7
 8022b24:	f820 cb02 	strh.w	ip, [r0], #2
 8022b28:	e7bc      	b.n	8022aa4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8022b2a:	9b01      	ldr	r3, [sp, #4]
 8022b2c:	881b      	ldrh	r3, [r3, #0]
 8022b2e:	eba3 0308 	sub.w	r3, r3, r8
 8022b32:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b36:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022b3a:	eba3 0308 	sub.w	r3, r3, r8
 8022b3e:	441c      	add	r4, r3
 8022b40:	e7ac      	b.n	8022a9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8022b42:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022b46:	4282      	cmp	r2, r0
 8022b48:	d915      	bls.n	8022b76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022b4a:	eb00 060a 	add.w	r6, r0, sl
 8022b4e:	4286      	cmp	r6, r0
 8022b50:	d906      	bls.n	8022b60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8022b52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022b56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022b5a:	f820 3b02 	strh.w	r3, [r0], #2
 8022b5e:	e7f6      	b.n	8022b4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022b60:	882b      	ldrh	r3, [r5, #0]
 8022b62:	eba3 0308 	sub.w	r3, r3, r8
 8022b66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b6a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022b6e:	eba3 0308 	sub.w	r3, r3, r8
 8022b72:	441c      	add	r4, r3
 8022b74:	e7e7      	b.n	8022b46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8022b76:	4b04      	ldr	r3, [pc, #16]	; (8022b88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022b78:	6818      	ldr	r0, [r3, #0]
 8022b7a:	6803      	ldr	r3, [r0, #0]
 8022b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b7e:	4798      	blx	r3
 8022b80:	b007      	add	sp, #28
 8022b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b86:	bf00      	nop
 8022b88:	20016e88 	.word	0x20016e88
 8022b8c:	20016e82 	.word	0x20016e82

08022b90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b94:	b091      	sub	sp, #68	; 0x44
 8022b96:	4680      	mov	r8, r0
 8022b98:	460f      	mov	r7, r1
 8022b9a:	4614      	mov	r4, r2
 8022b9c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8022ba0:	2d00      	cmp	r5, #0
 8022ba2:	d051      	beq.n	8022c48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022ba4:	6810      	ldr	r0, [r2, #0]
 8022ba6:	ae0c      	add	r6, sp, #48	; 0x30
 8022ba8:	6851      	ldr	r1, [r2, #4]
 8022baa:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8022dac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8022bae:	c603      	stmia	r6!, {r0, r1}
 8022bb0:	6818      	ldr	r0, [r3, #0]
 8022bb2:	ae0e      	add	r6, sp, #56	; 0x38
 8022bb4:	6859      	ldr	r1, [r3, #4]
 8022bb6:	c603      	stmia	r6!, {r0, r1}
 8022bb8:	a80c      	add	r0, sp, #48	; 0x30
 8022bba:	f7f8 fff9 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bbe:	4621      	mov	r1, r4
 8022bc0:	a80e      	add	r0, sp, #56	; 0x38
 8022bc2:	f7f9 f81d 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022bc6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022bca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022bce:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022bd2:	f8d9 0000 	ldr.w	r0, [r9]
 8022bd6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022bda:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8022bde:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8022be2:	eb08 0401 	add.w	r4, r8, r1
 8022be6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022bea:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8022db0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8022bee:	440a      	add	r2, r1
 8022bf0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022bf4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022bf8:	4413      	add	r3, r2
 8022bfa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022bfe:	6803      	ldr	r3, [r0, #0]
 8022c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022c02:	4798      	blx	r3
 8022c04:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022c08:	f8d9 0000 	ldr.w	r0, [r9]
 8022c0c:	d01f      	beq.n	8022c4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8022c0e:	2200      	movs	r2, #0
 8022c10:	6801      	ldr	r1, [r0, #0]
 8022c12:	b2b6      	uxth	r6, r6
 8022c14:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022c18:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022c1c:	220b      	movs	r2, #11
 8022c1e:	9207      	str	r2, [sp, #28]
 8022c20:	f8b8 2000 	ldrh.w	r2, [r8]
 8022c24:	9601      	str	r6, [sp, #4]
 8022c26:	9206      	str	r2, [sp, #24]
 8022c28:	2201      	movs	r2, #1
 8022c2a:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8022c2e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022c32:	9203      	str	r2, [sp, #12]
 8022c34:	fa1f f28a 	uxth.w	r2, sl
 8022c38:	9202      	str	r2, [sp, #8]
 8022c3a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022c3e:	9200      	str	r2, [sp, #0]
 8022c40:	463a      	mov	r2, r7
 8022c42:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8022c44:	4621      	mov	r1, r4
 8022c46:	47a8      	blx	r5
 8022c48:	b011      	add	sp, #68	; 0x44
 8022c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c4e:	6803      	ldr	r3, [r0, #0]
 8022c50:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022c56:	4798      	blx	r3
 8022c58:	f8b8 2000 	ldrh.w	r2, [r8]
 8022c5c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022c60:	2dff      	cmp	r5, #255	; 0xff
 8022c62:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8022c66:	fb0a fa02 	mul.w	sl, sl, r2
 8022c6a:	fb02 1303 	mla	r3, r2, r3, r1
 8022c6e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022c72:	d062      	beq.n	8022d3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022c74:	ea6f 0c05 	mvn.w	ip, r5
 8022c78:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8022c7c:	b2ad      	uxth	r5, r5
 8022c7e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8022c82:	fa5f fc8c 	uxtb.w	ip, ip
 8022c86:	930a      	str	r3, [sp, #40]	; 0x28
 8022c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c8a:	4298      	cmp	r0, r3
 8022c8c:	f080 8085 	bcs.w	8022d9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022c90:	eb00 0b09 	add.w	fp, r0, r9
 8022c94:	4558      	cmp	r0, fp
 8022c96:	d246      	bcs.n	8022d26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022c98:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022c9c:	2303      	movs	r3, #3
 8022c9e:	2204      	movs	r2, #4
 8022ca0:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022ca4:	8803      	ldrh	r3, [r0, #0]
 8022ca6:	eb07 0a0e 	add.w	sl, r7, lr
 8022caa:	1219      	asrs	r1, r3, #8
 8022cac:	10da      	asrs	r2, r3, #3
 8022cae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022cb2:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022cb6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022cba:	00db      	lsls	r3, r3, #3
 8022cbc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022cc0:	fb18 f805 	smulbb	r8, r8, r5
 8022cc4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022cc8:	fb1e fe05 	smulbb	lr, lr, r5
 8022ccc:	b2db      	uxtb	r3, r3
 8022cce:	fb01 810c 	mla	r1, r1, ip, r8
 8022cd2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022cd6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022cda:	fb18 f805 	smulbb	r8, r8, r5
 8022cde:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022ce2:	b289      	uxth	r1, r1
 8022ce4:	fb02 820c 	mla	r2, r2, ip, r8
 8022ce8:	fb03 e30c 	mla	r3, r3, ip, lr
 8022cec:	f101 0801 	add.w	r8, r1, #1
 8022cf0:	b292      	uxth	r2, r2
 8022cf2:	b29b      	uxth	r3, r3
 8022cf4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022cf8:	f102 0801 	add.w	r8, r2, #1
 8022cfc:	f103 0e01 	add.w	lr, r3, #1
 8022d00:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8022d04:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022d08:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022d0c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022d10:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022d14:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8022d18:	ea4e 0101 	orr.w	r1, lr, r1
 8022d1c:	ea41 0108 	orr.w	r1, r1, r8
 8022d20:	f820 1b02 	strh.w	r1, [r0], #2
 8022d24:	e7b6      	b.n	8022c94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8022d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d28:	881b      	ldrh	r3, [r3, #0]
 8022d2a:	1b9b      	subs	r3, r3, r6
 8022d2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022d30:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022d34:	1b9b      	subs	r3, r3, r6
 8022d36:	441c      	add	r4, r3
 8022d38:	e7a6      	b.n	8022c88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8022d3a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022d3e:	2203      	movs	r2, #3
 8022d40:	2504      	movs	r5, #4
 8022d42:	4919      	ldr	r1, [pc, #100]	; (8022da8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8022d44:	4550      	cmp	r0, sl
 8022d46:	d228      	bcs.n	8022d9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022d48:	eb00 0c09 	add.w	ip, r0, r9
 8022d4c:	4560      	cmp	r0, ip
 8022d4e:	4623      	mov	r3, r4
 8022d50:	d219      	bcs.n	8022d86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8022d52:	f893 e000 	ldrb.w	lr, [r3]
 8022d56:	3401      	adds	r4, #1
 8022d58:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022d5c:	eb07 0b0e 	add.w	fp, r7, lr
 8022d60:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022d64:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022d68:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022d6c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022d70:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022d74:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022d78:	ea43 030b 	orr.w	r3, r3, fp
 8022d7c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022d80:	f820 3b02 	strh.w	r3, [r0], #2
 8022d84:	e7e2      	b.n	8022d4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8022d86:	f8b8 3000 	ldrh.w	r3, [r8]
 8022d8a:	1b9b      	subs	r3, r3, r6
 8022d8c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022d90:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022d94:	1b9b      	subs	r3, r3, r6
 8022d96:	441c      	add	r4, r3
 8022d98:	e7d4      	b.n	8022d44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022d9a:	4b04      	ldr	r3, [pc, #16]	; (8022dac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8022d9c:	6818      	ldr	r0, [r3, #0]
 8022d9e:	6803      	ldr	r3, [r0, #0]
 8022da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022da2:	4798      	blx	r3
 8022da4:	e750      	b.n	8022c48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022da6:	bf00      	nop
 8022da8:	fffff800 	.word	0xfffff800
 8022dac:	20016e88 	.word	0x20016e88
 8022db0:	20016e82 	.word	0x20016e82

08022db4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022db4:	b430      	push	{r4, r5}
 8022db6:	780d      	ldrb	r5, [r1, #0]
 8022db8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8022dbc:	2d01      	cmp	r5, #1
 8022dbe:	d00a      	beq.n	8022dd6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022dc0:	d305      	bcc.n	8022dce <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022dc2:	2d02      	cmp	r5, #2
 8022dc4:	d10b      	bne.n	8022dde <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022dc6:	9402      	str	r4, [sp, #8]
 8022dc8:	bc30      	pop	{r4, r5}
 8022dca:	f7ff be15 	b.w	80229f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022dce:	9402      	str	r4, [sp, #8]
 8022dd0:	bc30      	pop	{r4, r5}
 8022dd2:	f7ff bd2b 	b.w	802282c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022dd6:	9402      	str	r4, [sp, #8]
 8022dd8:	bc30      	pop	{r4, r5}
 8022dda:	f7ff bed9 	b.w	8022b90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022dde:	bc30      	pop	{r4, r5}
 8022de0:	4770      	bx	lr
	...

08022de4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022de8:	b087      	sub	sp, #28
 8022dea:	4604      	mov	r4, r0
 8022dec:	460e      	mov	r6, r1
 8022dee:	6810      	ldr	r0, [r2, #0]
 8022df0:	6851      	ldr	r1, [r2, #4]
 8022df2:	ad02      	add	r5, sp, #8
 8022df4:	4617      	mov	r7, r2
 8022df6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8022dfa:	f8df 9230 	ldr.w	r9, [pc, #560]	; 802302c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8022dfe:	c503      	stmia	r5!, {r0, r1}
 8022e00:	6818      	ldr	r0, [r3, #0]
 8022e02:	ad04      	add	r5, sp, #16
 8022e04:	6859      	ldr	r1, [r3, #4]
 8022e06:	c503      	stmia	r5!, {r0, r1}
 8022e08:	a802      	add	r0, sp, #8
 8022e0a:	f7f8 fed1 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022e0e:	4639      	mov	r1, r7
 8022e10:	a804      	add	r0, sp, #16
 8022e12:	f7f8 fef5 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022e16:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022e1a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022e1e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022e22:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022e26:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022e2a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022e2e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022e32:	440e      	add	r6, r1
 8022e34:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022e38:	440a      	add	r2, r1
 8022e3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022e3e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022e42:	4413      	add	r3, r2
 8022e44:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022e48:	4b77      	ldr	r3, [pc, #476]	; (8023028 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022e4a:	6818      	ldr	r0, [r3, #0]
 8022e4c:	6803      	ldr	r3, [r0, #0]
 8022e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e50:	4798      	blx	r3
 8022e52:	f8b9 b000 	ldrh.w	fp, [r9]
 8022e56:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022e5a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022e5e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022e62:	fb05 f50b 	mul.w	r5, r5, fp
 8022e66:	fb0b 2303 	mla	r3, fp, r3, r2
 8022e6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022e6e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022e72:	9300      	str	r3, [sp, #0]
 8022e74:	d069      	beq.n	8022f4a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022e76:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8022e7a:	4558      	cmp	r0, fp
 8022e7c:	f080 80cc 	bcs.w	8023018 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022e80:	9b00      	ldr	r3, [sp, #0]
 8022e82:	4631      	mov	r1, r6
 8022e84:	18c3      	adds	r3, r0, r3
 8022e86:	9301      	str	r3, [sp, #4]
 8022e88:	9b01      	ldr	r3, [sp, #4]
 8022e8a:	4298      	cmp	r0, r3
 8022e8c:	d24f      	bcs.n	8022f2e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8022e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e92:	2a00      	cmp	r2, #0
 8022e94:	d048      	beq.n	8022f28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022e96:	fb0a f202 	mul.w	r2, sl, r2
 8022e9a:	1c53      	adds	r3, r2, #1
 8022e9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022ea0:	121b      	asrs	r3, r3, #8
 8022ea2:	d041      	beq.n	8022f28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022ea4:	8802      	ldrh	r2, [r0, #0]
 8022ea6:	b29e      	uxth	r6, r3
 8022ea8:	f8b4 c000 	ldrh.w	ip, [r4]
 8022eac:	43db      	mvns	r3, r3
 8022eae:	1215      	asrs	r5, r2, #8
 8022eb0:	b2db      	uxtb	r3, r3
 8022eb2:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022eb6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022eba:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022ebe:	fb15 f503 	smulbb	r5, r5, r3
 8022ec2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022ec6:	00d2      	lsls	r2, r2, #3
 8022ec8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022ecc:	fb07 5706 	mla	r7, r7, r6, r5
 8022ed0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022ed4:	b2d2      	uxtb	r2, r2
 8022ed6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022eda:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022ede:	fb1e fe03 	smulbb	lr, lr, r3
 8022ee2:	b2bf      	uxth	r7, r7
 8022ee4:	fb12 f203 	smulbb	r2, r2, r3
 8022ee8:	fa5f fc8c 	uxtb.w	ip, ip
 8022eec:	fb05 e506 	mla	r5, r5, r6, lr
 8022ef0:	f107 0e01 	add.w	lr, r7, #1
 8022ef4:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022ef8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022efc:	fa1f fc8c 	uxth.w	ip, ip
 8022f00:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8022f04:	b2ad      	uxth	r5, r5
 8022f06:	f10c 0701 	add.w	r7, ip, #1
 8022f0a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022f0e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022f12:	ea47 070e 	orr.w	r7, r7, lr
 8022f16:	f105 0e01 	add.w	lr, r5, #1
 8022f1a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8022f1e:	096d      	lsrs	r5, r5, #5
 8022f20:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022f24:	432f      	orrs	r7, r5
 8022f26:	8007      	strh	r7, [r0, #0]
 8022f28:	3002      	adds	r0, #2
 8022f2a:	3402      	adds	r4, #2
 8022f2c:	e7ac      	b.n	8022e88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8022f2e:	f8b9 3000 	ldrh.w	r3, [r9]
 8022f32:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022f36:	eba3 0308 	sub.w	r3, r3, r8
 8022f3a:	eba6 0608 	sub.w	r6, r6, r8
 8022f3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022f42:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022f46:	440e      	add	r6, r1
 8022f48:	e797      	b.n	8022e7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022f4a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022f4e:	42a8      	cmp	r0, r5
 8022f50:	d262      	bcs.n	8023018 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022f52:	9b00      	ldr	r3, [sp, #0]
 8022f54:	4631      	mov	r1, r6
 8022f56:	eb00 0b03 	add.w	fp, r0, r3
 8022f5a:	4558      	cmp	r0, fp
 8022f5c:	d24e      	bcs.n	8022ffc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022f62:	b12b      	cbz	r3, 8022f70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022f64:	2bff      	cmp	r3, #255	; 0xff
 8022f66:	f8b4 e000 	ldrh.w	lr, [r4]
 8022f6a:	d104      	bne.n	8022f76 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022f6c:	f8a0 e000 	strh.w	lr, [r0]
 8022f70:	3002      	adds	r0, #2
 8022f72:	3402      	adds	r4, #2
 8022f74:	e7f1      	b.n	8022f5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022f76:	8802      	ldrh	r2, [r0, #0]
 8022f78:	b29f      	uxth	r7, r3
 8022f7a:	43db      	mvns	r3, r3
 8022f7c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022f80:	1216      	asrs	r6, r2, #8
 8022f82:	b2db      	uxtb	r3, r3
 8022f84:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022f88:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022f8c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022f90:	00d2      	lsls	r2, r2, #3
 8022f92:	fb16 f603 	smulbb	r6, r6, r3
 8022f96:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022f9a:	b2d2      	uxtb	r2, r2
 8022f9c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022fa0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022fa4:	fb1a fa03 	smulbb	sl, sl, r3
 8022fa8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022fac:	fa1f fc8c 	uxth.w	ip, ip
 8022fb0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022fb4:	fb12 f303 	smulbb	r3, r2, r3
 8022fb8:	fa5f fe8e 	uxtb.w	lr, lr
 8022fbc:	fb06 a607 	mla	r6, r6, r7, sl
 8022fc0:	f10c 0201 	add.w	r2, ip, #1
 8022fc4:	fb0e 3307 	mla	r3, lr, r7, r3
 8022fc8:	b2b6      	uxth	r6, r6
 8022fca:	b29b      	uxth	r3, r3
 8022fcc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022fd0:	f106 0a01 	add.w	sl, r6, #1
 8022fd4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022fd8:	f103 0c01 	add.w	ip, r3, #1
 8022fdc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022fe0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022fe4:	0976      	lsrs	r6, r6, #5
 8022fe6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022fea:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022fee:	ea4c 0c02 	orr.w	ip, ip, r2
 8022ff2:	ea4c 0c06 	orr.w	ip, ip, r6
 8022ff6:	f8a0 c000 	strh.w	ip, [r0]
 8022ffa:	e7b9      	b.n	8022f70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022ffc:	f8b9 3000 	ldrh.w	r3, [r9]
 8023000:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023004:	eba3 0308 	sub.w	r3, r3, r8
 8023008:	eba6 0608 	sub.w	r6, r6, r8
 802300c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023010:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023014:	440e      	add	r6, r1
 8023016:	e79a      	b.n	8022f4e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023018:	4b03      	ldr	r3, [pc, #12]	; (8023028 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802301a:	6818      	ldr	r0, [r3, #0]
 802301c:	6803      	ldr	r3, [r0, #0]
 802301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023020:	4798      	blx	r3
 8023022:	b007      	add	sp, #28
 8023024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023028:	20016e88 	.word	0x20016e88
 802302c:	20016e82 	.word	0x20016e82

08023030 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023034:	b089      	sub	sp, #36	; 0x24
 8023036:	4682      	mov	sl, r0
 8023038:	460f      	mov	r7, r1
 802303a:	4691      	mov	r9, r2
 802303c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8023040:	4698      	mov	r8, r3
 8023042:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023044:	2e00      	cmp	r6, #0
 8023046:	d036      	beq.n	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023048:	4608      	mov	r0, r1
 802304a:	f7fc f861 	bl	801f110 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802304e:	4605      	mov	r5, r0
 8023050:	4638      	mov	r0, r7
 8023052:	f7fc f891 	bl	801f178 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023056:	f8ad 000e 	strh.w	r0, [sp, #14]
 802305a:	4638      	mov	r0, r7
 802305c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8023060:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023064:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023068:	f7fc f93e 	bl	801f2e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802306c:	4605      	mov	r5, r0
 802306e:	4638      	mov	r0, r7
 8023070:	f7fc f96a 	bl	801f348 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023074:	4681      	mov	r9, r0
 8023076:	4638      	mov	r0, r7
 8023078:	f7fc f9ba 	bl	801f3f0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802307c:	280b      	cmp	r0, #11
 802307e:	d81a      	bhi.n	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023080:	e8df f000 	tbb	[pc, r0]
 8023084:	1906aebd 	.word	0x1906aebd
 8023088:	19191919 	.word	0x19191919
 802308c:	b5191919 	.word	0xb5191919
 8023090:	4bb0      	ldr	r3, [pc, #704]	; (8023354 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8023092:	6818      	ldr	r0, [r3, #0]
 8023094:	6803      	ldr	r3, [r0, #0]
 8023096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023098:	4798      	blx	r3
 802309a:	2eff      	cmp	r6, #255	; 0xff
 802309c:	d121      	bne.n	80230e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 802309e:	0683      	lsls	r3, r0, #26
 80230a0:	d41f      	bmi.n	80230e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 80230a2:	4638      	mov	r0, r7
 80230a4:	f7fc f8e8 	bl	801f278 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80230a8:	b940      	cbnz	r0, 80230bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 80230aa:	4623      	mov	r3, r4
 80230ac:	aa02      	add	r2, sp, #8
 80230ae:	4629      	mov	r1, r5
 80230b0:	4650      	mov	r0, sl
 80230b2:	f7ff fa2f 	bl	8022514 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80230b6:	b009      	add	sp, #36	; 0x24
 80230b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230bc:	f10d 0818 	add.w	r8, sp, #24
 80230c0:	4639      	mov	r1, r7
 80230c2:	af04      	add	r7, sp, #16
 80230c4:	4640      	mov	r0, r8
 80230c6:	f7fc f88b 	bl	801f1e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80230ca:	e898 0003 	ldmia.w	r8, {r0, r1}
 80230ce:	e887 0003 	stmia.w	r7, {r0, r1}
 80230d2:	4638      	mov	r0, r7
 80230d4:	4621      	mov	r1, r4
 80230d6:	f7f4 f889 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 80230da:	4638      	mov	r0, r7
 80230dc:	f7f4 f8c9 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 80230e0:	b130      	cbz	r0, 80230f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80230e2:	4633      	mov	r3, r6
 80230e4:	4622      	mov	r2, r4
 80230e6:	a902      	add	r1, sp, #8
 80230e8:	4628      	mov	r0, r5
 80230ea:	f7ff f92d 	bl	8022348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80230ee:	e7e2      	b.n	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80230f0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80230f4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80230f8:	4293      	cmp	r3, r2
 80230fa:	dd12      	ble.n	8023122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 80230fc:	1a9b      	subs	r3, r3, r2
 80230fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023102:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023106:	f8ad 0018 	strh.w	r0, [sp, #24]
 802310a:	4628      	mov	r0, r5
 802310c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023110:	4642      	mov	r2, r8
 8023112:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023116:	a902      	add	r1, sp, #8
 8023118:	f8ad 301e 	strh.w	r3, [sp, #30]
 802311c:	4633      	mov	r3, r6
 802311e:	f7ff f913 	bl	8022348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023122:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023126:	f9b4 2000 	ldrsh.w	r2, [r4]
 802312a:	4293      	cmp	r3, r2
 802312c:	dd12      	ble.n	8023154 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 802312e:	1a9b      	subs	r3, r3, r2
 8023130:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023134:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023138:	f8ad 2018 	strh.w	r2, [sp, #24]
 802313c:	4642      	mov	r2, r8
 802313e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023142:	4628      	mov	r0, r5
 8023144:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023148:	23ff      	movs	r3, #255	; 0xff
 802314a:	f8ad 101e 	strh.w	r1, [sp, #30]
 802314e:	a902      	add	r1, sp, #8
 8023150:	f7ff f8fa 	bl	8022348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023154:	463b      	mov	r3, r7
 8023156:	aa02      	add	r2, sp, #8
 8023158:	4629      	mov	r1, r5
 802315a:	4650      	mov	r0, sl
 802315c:	f7ff f9da 	bl	8022514 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023160:	88a2      	ldrh	r2, [r4, #4]
 8023162:	8823      	ldrh	r3, [r4, #0]
 8023164:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023168:	4413      	add	r3, r2
 802316a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802316e:	440a      	add	r2, r1
 8023170:	b29b      	uxth	r3, r3
 8023172:	b292      	uxth	r2, r2
 8023174:	b218      	sxth	r0, r3
 8023176:	b211      	sxth	r1, r2
 8023178:	4288      	cmp	r0, r1
 802317a:	dd12      	ble.n	80231a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 802317c:	1a9b      	subs	r3, r3, r2
 802317e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023182:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023186:	4642      	mov	r2, r8
 8023188:	f8ad 1018 	strh.w	r1, [sp, #24]
 802318c:	a902      	add	r1, sp, #8
 802318e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023192:	23ff      	movs	r3, #255	; 0xff
 8023194:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023198:	4628      	mov	r0, r5
 802319a:	f8ad 601a 	strh.w	r6, [sp, #26]
 802319e:	f7ff f8d3 	bl	8022348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80231a2:	88e2      	ldrh	r2, [r4, #6]
 80231a4:	8863      	ldrh	r3, [r4, #2]
 80231a6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80231aa:	4413      	add	r3, r2
 80231ac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80231b0:	440a      	add	r2, r1
 80231b2:	b29b      	uxth	r3, r3
 80231b4:	b292      	uxth	r2, r2
 80231b6:	b218      	sxth	r0, r3
 80231b8:	b211      	sxth	r1, r2
 80231ba:	4288      	cmp	r0, r1
 80231bc:	f77f af7b 	ble.w	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80231c0:	1a9b      	subs	r3, r3, r2
 80231c2:	f9b4 6000 	ldrsh.w	r6, [r4]
 80231c6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80231ca:	4642      	mov	r2, r8
 80231cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80231d0:	23ff      	movs	r3, #255	; 0xff
 80231d2:	f8ad 6018 	strh.w	r6, [sp, #24]
 80231d6:	f8ad 101a 	strh.w	r1, [sp, #26]
 80231da:	f8ad 001c 	strh.w	r0, [sp, #28]
 80231de:	e782      	b.n	80230e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 80231e0:	4633      	mov	r3, r6
 80231e2:	4622      	mov	r2, r4
 80231e4:	a902      	add	r1, sp, #8
 80231e6:	4628      	mov	r0, r5
 80231e8:	f7ff fa04 	bl	80225f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80231ec:	e763      	b.n	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80231ee:	9600      	str	r6, [sp, #0]
 80231f0:	4623      	mov	r3, r4
 80231f2:	aa02      	add	r2, sp, #8
 80231f4:	4649      	mov	r1, r9
 80231f6:	4628      	mov	r0, r5
 80231f8:	f7ff fddc 	bl	8022db4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80231fc:	e75b      	b.n	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80231fe:	4638      	mov	r0, r7
 8023200:	f7fc f83a 	bl	801f278 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023204:	b950      	cbnz	r0, 802321c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8023206:	f8da 3000 	ldr.w	r3, [sl]
 802320a:	aa02      	add	r2, sp, #8
 802320c:	4629      	mov	r1, r5
 802320e:	e9cd 6000 	strd	r6, r0, [sp]
 8023212:	4650      	mov	r0, sl
 8023214:	68de      	ldr	r6, [r3, #12]
 8023216:	4623      	mov	r3, r4
 8023218:	47b0      	blx	r6
 802321a:	e74c      	b.n	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 802321c:	f10d 0818 	add.w	r8, sp, #24
 8023220:	4639      	mov	r1, r7
 8023222:	af04      	add	r7, sp, #16
 8023224:	4640      	mov	r0, r8
 8023226:	f7fb ffdb 	bl	801f1e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802322a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802322e:	e887 0003 	stmia.w	r7, {r0, r1}
 8023232:	4638      	mov	r0, r7
 8023234:	4621      	mov	r1, r4
 8023236:	f7f3 ffd9 	bl	80171ec <_ZN8touchgfx4RectaNERKS0_>
 802323a:	4638      	mov	r0, r7
 802323c:	f7f4 f819 	bl	8017272 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023240:	b138      	cbz	r0, 8023252 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8023242:	4623      	mov	r3, r4
 8023244:	9600      	str	r6, [sp, #0]
 8023246:	aa02      	add	r2, sp, #8
 8023248:	4649      	mov	r1, r9
 802324a:	4628      	mov	r0, r5
 802324c:	f7ff fdca 	bl	8022de4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023250:	e731      	b.n	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023252:	f8da 3000 	ldr.w	r3, [sl]
 8023256:	aa02      	add	r2, sp, #8
 8023258:	4629      	mov	r1, r5
 802325a:	e9cd 6000 	strd	r6, r0, [sp]
 802325e:	4650      	mov	r0, sl
 8023260:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023264:	463b      	mov	r3, r7
 8023266:	47d8      	blx	fp
 8023268:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802326c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023270:	4293      	cmp	r3, r2
 8023272:	dd13      	ble.n	802329c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8023274:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023278:	1a9b      	subs	r3, r3, r2
 802327a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802327e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023282:	4628      	mov	r0, r5
 8023284:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023288:	aa02      	add	r2, sp, #8
 802328a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802328e:	4649      	mov	r1, r9
 8023290:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023294:	4643      	mov	r3, r8
 8023296:	9600      	str	r6, [sp, #0]
 8023298:	f7ff fda4 	bl	8022de4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802329c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80232a0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80232a4:	4293      	cmp	r3, r2
 80232a6:	dd13      	ble.n	80232d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 80232a8:	1a9b      	subs	r3, r3, r2
 80232aa:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80232ae:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80232b2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80232b6:	aa02      	add	r2, sp, #8
 80232b8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80232bc:	4628      	mov	r0, r5
 80232be:	f8ad 301c 	strh.w	r3, [sp, #28]
 80232c2:	4643      	mov	r3, r8
 80232c4:	f8ad 101e 	strh.w	r1, [sp, #30]
 80232c8:	4649      	mov	r1, r9
 80232ca:	9600      	str	r6, [sp, #0]
 80232cc:	f7ff fd8a 	bl	8022de4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80232d0:	88a2      	ldrh	r2, [r4, #4]
 80232d2:	8823      	ldrh	r3, [r4, #0]
 80232d4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80232d8:	4413      	add	r3, r2
 80232da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80232de:	440a      	add	r2, r1
 80232e0:	b29b      	uxth	r3, r3
 80232e2:	b292      	uxth	r2, r2
 80232e4:	b218      	sxth	r0, r3
 80232e6:	b211      	sxth	r1, r2
 80232e8:	4288      	cmp	r0, r1
 80232ea:	dd13      	ble.n	8023314 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 80232ec:	1a9b      	subs	r3, r3, r2
 80232ee:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80232f2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80232f6:	aa02      	add	r2, sp, #8
 80232f8:	f8ad 1018 	strh.w	r1, [sp, #24]
 80232fc:	4649      	mov	r1, r9
 80232fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023302:	4643      	mov	r3, r8
 8023304:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023308:	4628      	mov	r0, r5
 802330a:	9600      	str	r6, [sp, #0]
 802330c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023310:	f7ff fd68 	bl	8022de4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023314:	88e2      	ldrh	r2, [r4, #6]
 8023316:	8863      	ldrh	r3, [r4, #2]
 8023318:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802331c:	4413      	add	r3, r2
 802331e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023322:	440a      	add	r2, r1
 8023324:	b29b      	uxth	r3, r3
 8023326:	b292      	uxth	r2, r2
 8023328:	b218      	sxth	r0, r3
 802332a:	b211      	sxth	r1, r2
 802332c:	4288      	cmp	r0, r1
 802332e:	f77f aec2 	ble.w	80230b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023332:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023336:	1a9b      	subs	r3, r3, r2
 8023338:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802333c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023340:	4643      	mov	r3, r8
 8023342:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023346:	f8ad 101a 	strh.w	r1, [sp, #26]
 802334a:	f8ad 001c 	strh.w	r0, [sp, #28]
 802334e:	9600      	str	r6, [sp, #0]
 8023350:	e779      	b.n	8023246 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8023352:	bf00      	nop
 8023354:	20016e88 	.word	0x20016e88

08023358 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023358:	b180      	cbz	r0, 802337c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 802335a:	2903      	cmp	r1, #3
 802335c:	d81c      	bhi.n	8023398 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802335e:	e8df f001 	tbb	[pc, r1]
 8023362:	1d02      	.short	0x1d02
 8023364:	1f08      	.short	0x1f08
 8023366:	4b10      	ldr	r3, [pc, #64]	; (80233a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023368:	8818      	ldrh	r0, [r3, #0]
 802336a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802336e:	4240      	negs	r0, r0
 8023370:	4770      	bx	lr
 8023372:	4b0d      	ldr	r3, [pc, #52]	; (80233a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023374:	8818      	ldrh	r0, [r3, #0]
 8023376:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802337a:	4770      	bx	lr
 802337c:	2903      	cmp	r1, #3
 802337e:	d80b      	bhi.n	8023398 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023380:	a301      	add	r3, pc, #4	; (adr r3, 8023388 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8023382:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023386:	bf00      	nop
 8023388:	0802339d 	.word	0x0802339d
 802338c:	08023373 	.word	0x08023373
 8023390:	080233a1 	.word	0x080233a1
 8023394:	08023367 	.word	0x08023367
 8023398:	2000      	movs	r0, #0
 802339a:	4770      	bx	lr
 802339c:	2001      	movs	r0, #1
 802339e:	4770      	bx	lr
 80233a0:	f04f 30ff 	mov.w	r0, #4294967295
 80233a4:	4770      	bx	lr
 80233a6:	bf00      	nop
 80233a8:	20016e82 	.word	0x20016e82

080233ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80233ac:	b180      	cbz	r0, 80233d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 80233ae:	2903      	cmp	r1, #3
 80233b0:	d81c      	bhi.n	80233ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80233b2:	e8df f001 	tbb	[pc, r1]
 80233b6:	021d      	.short	0x021d
 80233b8:	071f      	.short	0x071f
 80233ba:	4b10      	ldr	r3, [pc, #64]	; (80233fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80233bc:	8818      	ldrh	r0, [r3, #0]
 80233be:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80233c2:	4770      	bx	lr
 80233c4:	4b0d      	ldr	r3, [pc, #52]	; (80233fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80233c6:	8818      	ldrh	r0, [r3, #0]
 80233c8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80233cc:	4240      	negs	r0, r0
 80233ce:	4770      	bx	lr
 80233d0:	2903      	cmp	r1, #3
 80233d2:	d80b      	bhi.n	80233ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80233d4:	a301      	add	r3, pc, #4	; (adr r3, 80233dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 80233d6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80233da:	bf00      	nop
 80233dc:	080233bb 	.word	0x080233bb
 80233e0:	080233f5 	.word	0x080233f5
 80233e4:	080233c5 	.word	0x080233c5
 80233e8:	080233f1 	.word	0x080233f1
 80233ec:	2000      	movs	r0, #0
 80233ee:	4770      	bx	lr
 80233f0:	2001      	movs	r0, #1
 80233f2:	4770      	bx	lr
 80233f4:	f04f 30ff 	mov.w	r0, #4294967295
 80233f8:	4770      	bx	lr
 80233fa:	bf00      	nop
 80233fc:	20016e82 	.word	0x20016e82

08023400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023404:	b099      	sub	sp, #100	; 0x64
 8023406:	910b      	str	r1, [sp, #44]	; 0x2c
 8023408:	a914      	add	r1, sp, #80	; 0x50
 802340a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 802340e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8023412:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8023416:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 802341a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 802341e:	e881 000c 	stmia.w	r1, {r2, r3}
 8023422:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023426:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 802342a:	9309      	str	r3, [sp, #36]	; 0x24
 802342c:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023430:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023434:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8023438:	9310      	str	r3, [sp, #64]	; 0x40
 802343a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 802343e:	930c      	str	r3, [sp, #48]	; 0x30
 8023440:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8023444:	798f      	ldrb	r7, [r1, #6]
 8023446:	431f      	orrs	r7, r3
 8023448:	f000 8195 	beq.w	8023776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802344c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023450:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8023454:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023458:	ea59 0903 	orrs.w	r9, r9, r3
 802345c:	f000 818b 	beq.w	8023776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023460:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023464:	b29b      	uxth	r3, r3
 8023466:	2d00      	cmp	r5, #0
 8023468:	f000 812e 	beq.w	80236c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 802346c:	1aed      	subs	r5, r5, r3
 802346e:	b2ad      	uxth	r5, r5
 8023470:	042b      	lsls	r3, r5, #16
 8023472:	d502      	bpl.n	802347a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8023474:	1b64      	subs	r4, r4, r5
 8023476:	2500      	movs	r5, #0
 8023478:	b224      	sxth	r4, r4
 802347a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802347e:	a814      	add	r0, sp, #80	; 0x50
 8023480:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8023484:	428c      	cmp	r4, r1
 8023486:	b28b      	uxth	r3, r1
 8023488:	bfbf      	itttt	lt
 802348a:	18ed      	addlt	r5, r5, r3
 802348c:	1b2c      	sublt	r4, r5, r4
 802348e:	b2a5      	uxthlt	r5, r4
 8023490:	460c      	movlt	r4, r1
 8023492:	8891      	ldrh	r1, [r2, #4]
 8023494:	440b      	add	r3, r1
 8023496:	4621      	mov	r1, r4
 8023498:	b21b      	sxth	r3, r3
 802349a:	930f      	str	r3, [sp, #60]	; 0x3c
 802349c:	88d3      	ldrh	r3, [r2, #6]
 802349e:	8852      	ldrh	r2, [r2, #2]
 80234a0:	4413      	add	r3, r2
 80234a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80234a4:	b21b      	sxth	r3, r3
 80234a6:	930d      	str	r3, [sp, #52]	; 0x34
 80234a8:	4bbd      	ldr	r3, [pc, #756]	; (80237a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80234aa:	f893 b000 	ldrb.w	fp, [r3]
 80234ae:	f10b 3cff 	add.w	ip, fp, #4294967295
 80234b2:	f1dc 0300 	rsbs	r3, ip, #0
 80234b6:	eb43 030c 	adc.w	r3, r3, ip
 80234ba:	930e      	str	r3, [sp, #56]	; 0x38
 80234bc:	4653      	mov	r3, sl
 80234be:	f7f8 f9f1 	bl	801b8a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80234c2:	4621      	mov	r1, r4
 80234c4:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80234c8:	4653      	mov	r3, sl
 80234ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80234cc:	a814      	add	r0, sp, #80	; 0x50
 80234ce:	f7f8 fa06 	bl	801b8de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80234d2:	a918      	add	r1, sp, #96	; 0x60
 80234d4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80234d8:	a817      	add	r0, sp, #92	; 0x5c
 80234da:	f7f8 fb27 	bl	801bb2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80234de:	f1ba 0f00 	cmp.w	sl, #0
 80234e2:	f040 80f4 	bne.w	80236ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80234e6:	f1bb 0f01 	cmp.w	fp, #1
 80234ea:	f040 80f8 	bne.w	80236de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80234ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80234f0:	2b00      	cmp	r3, #0
 80234f2:	f040 8145 	bne.w	8023780 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80234f6:	b2ba      	uxth	r2, r7
 80234f8:	b905      	cbnz	r5, 80234fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80234fa:	b16e      	cbz	r6, 8023518 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80234fc:	fb06 5302 	mla	r3, r6, r2, r5
 8023500:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023502:	4631      	mov	r1, r6
 8023504:	fb08 f303 	mul.w	r3, r8, r3
 8023508:	f003 0607 	and.w	r6, r3, #7
 802350c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8023510:	9328      	str	r3, [sp, #160]	; 0xa0
 8023512:	eba9 0301 	sub.w	r3, r9, r1
 8023516:	930a      	str	r3, [sp, #40]	; 0x28
 8023518:	4651      	mov	r1, sl
 802351a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802351c:	f7ff ff1c 	bl	8023358 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8023520:	4681      	mov	r9, r0
 8023522:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023524:	f7ff ff42 	bl	80233ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8023528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802352a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802352c:	4683      	mov	fp, r0
 802352e:	eba3 0a01 	sub.w	sl, r3, r1
 8023532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023534:	459a      	cmp	sl, r3
 8023536:	bfa8      	it	ge
 8023538:	469a      	movge	sl, r3
 802353a:	f1ba 0f00 	cmp.w	sl, #0
 802353e:	f340 811a 	ble.w	8023776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023542:	1b64      	subs	r4, r4, r5
 8023544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023546:	1b1c      	subs	r4, r3, r4
 8023548:	42bc      	cmp	r4, r7
 802354a:	bfd4      	ite	le
 802354c:	ebc5 0504 	rsble	r5, r5, r4
 8023550:	ebc5 0507 	rsbgt	r5, r5, r7
 8023554:	2d00      	cmp	r5, #0
 8023556:	f340 810e 	ble.w	8023776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802355a:	1b52      	subs	r2, r2, r5
 802355c:	fb08 f302 	mul.w	r3, r8, r2
 8023560:	930f      	str	r3, [sp, #60]	; 0x3c
 8023562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023564:	2b00      	cmp	r3, #0
 8023566:	f040 8116 	bne.w	8023796 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802356a:	4b8e      	ldr	r3, [pc, #568]	; (80237a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802356c:	6818      	ldr	r0, [r3, #0]
 802356e:	6803      	ldr	r3, [r0, #0]
 8023570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023572:	4798      	blx	r3
 8023574:	2301      	movs	r3, #1
 8023576:	4a8c      	ldr	r2, [pc, #560]	; (80237a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023578:	fa03 f308 	lsl.w	r3, r3, r8
 802357c:	8811      	ldrh	r1, [r2, #0]
 802357e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023582:	3b01      	subs	r3, #1
 8023584:	b2db      	uxtb	r3, r3
 8023586:	930e      	str	r3, [sp, #56]	; 0x38
 8023588:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802358c:	fb01 2303 	mla	r3, r1, r3, r2
 8023590:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023594:	930a      	str	r3, [sp, #40]	; 0x28
 8023596:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023598:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802359c:	9313      	str	r3, [sp, #76]	; 0x4c
 802359e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80235a0:	0a19      	lsrs	r1, r3, #8
 80235a2:	b2cb      	uxtb	r3, r1
 80235a4:	9312      	str	r3, [sp, #72]	; 0x48
 80235a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80235a8:	b2db      	uxtb	r3, r3
 80235aa:	9311      	str	r3, [sp, #68]	; 0x44
 80235ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80235ae:	095a      	lsrs	r2, r3, #5
 80235b0:	4b7e      	ldr	r3, [pc, #504]	; (80237ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80235b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80235b6:	400b      	ands	r3, r1
 80235b8:	4313      	orrs	r3, r2
 80235ba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80235bc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80235c0:	4313      	orrs	r3, r2
 80235c2:	b29b      	uxth	r3, r3
 80235c4:	9310      	str	r3, [sp, #64]	; 0x40
 80235c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80235c8:	781a      	ldrb	r2, [r3, #0]
 80235ca:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80235ce:	fb05 b919 	mls	r9, r5, r9, fp
 80235d2:	4132      	asrs	r2, r6
 80235d4:	fb03 fb05 	mul.w	fp, r3, r5
 80235d8:	930d      	str	r3, [sp, #52]	; 0x34
 80235da:	b2d2      	uxtb	r2, r2
 80235dc:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80235e0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80235e4:	f0c0 80f5 	bcc.w	80237d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80235e8:	46ae      	mov	lr, r5
 80235ea:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80235ee:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80235f2:	f0c0 80dd 	bcc.w	80237b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80235f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80235f8:	4013      	ands	r3, r2
 80235fa:	d055      	beq.n	80236a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80235fc:	20ff      	movs	r0, #255	; 0xff
 80235fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023600:	fb90 f1f1 	sdiv	r1, r0, r1
 8023604:	434b      	muls	r3, r1
 8023606:	2bfe      	cmp	r3, #254	; 0xfe
 8023608:	dd03      	ble.n	8023612 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 802360a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802360c:	4281      	cmp	r1, r0
 802360e:	f000 80c4 	beq.w	802379a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8023612:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023614:	f8bc 4000 	ldrh.w	r4, [ip]
 8023618:	fb11 f303 	smulbb	r3, r1, r3
 802361c:	1220      	asrs	r0, r4, #8
 802361e:	b29b      	uxth	r3, r3
 8023620:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023624:	1c59      	adds	r1, r3, #1
 8023626:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802362a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802362e:	10e1      	asrs	r1, r4, #3
 8023630:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023634:	00e4      	lsls	r4, r4, #3
 8023636:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802363a:	b29f      	uxth	r7, r3
 802363c:	43db      	mvns	r3, r3
 802363e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8023642:	b2db      	uxtb	r3, r3
 8023644:	b2e4      	uxtb	r4, r4
 8023646:	9309      	str	r3, [sp, #36]	; 0x24
 8023648:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802364a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802364e:	fb13 f907 	smulbb	r9, r3, r7
 8023652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023654:	fb00 9003 	mla	r0, r0, r3, r9
 8023658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802365a:	fb13 f907 	smulbb	r9, r3, r7
 802365e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023660:	b280      	uxth	r0, r0
 8023662:	fb01 9103 	mla	r1, r1, r3, r9
 8023666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023668:	fb13 f707 	smulbb	r7, r3, r7
 802366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802366e:	b289      	uxth	r1, r1
 8023670:	fb04 7403 	mla	r4, r4, r3, r7
 8023674:	1c43      	adds	r3, r0, #1
 8023676:	b2a4      	uxth	r4, r4
 8023678:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802367c:	f104 0901 	add.w	r9, r4, #1
 8023680:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023684:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023688:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802368c:	ea49 0000 	orr.w	r0, r9, r0
 8023690:	f101 0901 	add.w	r9, r1, #1
 8023694:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023698:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802369c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80236a0:	ea40 0009 	orr.w	r0, r0, r9
 80236a4:	f8ac 0000 	strh.w	r0, [ip]
 80236a8:	4446      	add	r6, r8
 80236aa:	b2b6      	uxth	r6, r6
 80236ac:	2e07      	cmp	r6, #7
 80236ae:	bf89      	itett	hi
 80236b0:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80236b2:	fa42 f208 	asrls.w	r2, r2, r8
 80236b6:	2600      	movhi	r6, #0
 80236b8:	785a      	ldrbhi	r2, [r3, #1]
 80236ba:	bf8a      	itet	hi
 80236bc:	3301      	addhi	r3, #1
 80236be:	b2d2      	uxtbls	r2, r2
 80236c0:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80236c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80236c4:	449c      	add	ip, r3
 80236c6:	e792      	b.n	80235ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80236c8:	441c      	add	r4, r3
 80236ca:	b224      	sxth	r4, r4
 80236cc:	e6d5      	b.n	802347a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80236ce:	f1ba 0f01 	cmp.w	sl, #1
 80236d2:	f47f af0c 	bne.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80236d6:	f1bb 0f01 	cmp.w	fp, #1
 80236da:	f47f af08 	bne.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80236de:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80237a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 80236e2:	f8db 0000 	ldr.w	r0, [fp]
 80236e6:	6803      	ldr	r3, [r0, #0]
 80236e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236ea:	4798      	blx	r3
 80236ec:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80236f0:	465a      	mov	r2, fp
 80236f2:	d006      	beq.n	8023702 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80236f4:	f1b8 0f04 	cmp.w	r8, #4
 80236f8:	d140      	bne.n	802377c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80236fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80236fc:	3300      	adds	r3, #0
 80236fe:	bf18      	it	ne
 8023700:	2301      	movne	r3, #1
 8023702:	0580      	lsls	r0, r0, #22
 8023704:	d56e      	bpl.n	80237e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8023706:	f1b8 0f08 	cmp.w	r8, #8
 802370a:	d16b      	bne.n	80237e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 802370c:	2b00      	cmp	r3, #0
 802370e:	bf0c      	ite	eq
 8023710:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8023714:	f44f 7180 	movne.w	r1, #256	; 0x100
 8023718:	2d00      	cmp	r5, #0
 802371a:	f47f aee8 	bne.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802371e:	2e00      	cmp	r6, #0
 8023720:	f47f aee5 	bne.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023724:	19e3      	adds	r3, r4, r7
 8023726:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023728:	4283      	cmp	r3, r0
 802372a:	f73f aee0 	bgt.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802372e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023730:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023732:	444b      	add	r3, r9
 8023734:	4283      	cmp	r3, r0
 8023736:	f73f aeda 	bgt.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802373a:	b2bf      	uxth	r7, r7
 802373c:	f1b8 0f08 	cmp.w	r8, #8
 8023740:	6810      	ldr	r0, [r2, #0]
 8023742:	f04f 0500 	mov.w	r5, #0
 8023746:	bf18      	it	ne
 8023748:	3701      	addne	r7, #1
 802374a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802374e:	6804      	ldr	r4, [r0, #0]
 8023750:	bf18      	it	ne
 8023752:	f027 0701 	bicne.w	r7, r7, #1
 8023756:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 802375a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802375e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023760:	bf18      	it	ne
 8023762:	b2bf      	uxthne	r7, r7
 8023764:	9104      	str	r1, [sp, #16]
 8023766:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023768:	e9cd 7900 	strd	r7, r9, [sp]
 802376c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8023770:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023772:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8023774:	47a0      	blx	r4
 8023776:	b019      	add	sp, #100	; 0x64
 8023778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802377c:	2300      	movs	r3, #0
 802377e:	e7c0      	b.n	8023702 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8023780:	2208      	movs	r2, #8
 8023782:	fb92 f3f8 	sdiv	r3, r2, r8
 8023786:	1e5a      	subs	r2, r3, #1
 8023788:	443a      	add	r2, r7
 802378a:	fb92 f2f3 	sdiv	r2, r2, r3
 802378e:	fb12 f203 	smulbb	r2, r2, r3
 8023792:	b292      	uxth	r2, r2
 8023794:	e6b0      	b.n	80234f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8023796:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023798:	e6ec      	b.n	8023574 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802379a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802379c:	e782      	b.n	80236a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802379e:	bf00      	nop
 80237a0:	20016e80 	.word	0x20016e80
 80237a4:	20016e88 	.word	0x20016e88
 80237a8:	20016e82 	.word	0x20016e82
 80237ac:	00fff800 	.word	0x00fff800
 80237b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80237b2:	b153      	cbz	r3, 80237ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80237b4:	441e      	add	r6, r3
 80237b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80237b8:	b2b6      	uxth	r6, r6
 80237ba:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80237be:	f006 0607 	and.w	r6, r6, #7
 80237c2:	781a      	ldrb	r2, [r3, #0]
 80237c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80237c6:	4132      	asrs	r2, r6
 80237c8:	b2d2      	uxtb	r2, r2
 80237ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80237cc:	445b      	add	r3, fp
 80237ce:	930a      	str	r3, [sp, #40]	; 0x28
 80237d0:	e706      	b.n	80235e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80237d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	d1ce      	bne.n	8023776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80237d8:	4b05      	ldr	r3, [pc, #20]	; (80237f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80237da:	6818      	ldr	r0, [r3, #0]
 80237dc:	6803      	ldr	r3, [r0, #0]
 80237de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237e0:	4798      	blx	r3
 80237e2:	e7c8      	b.n	8023776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	f43f ae82 	beq.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80237ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80237ee:	e793      	b.n	8023718 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80237f0:	20016e88 	.word	0x20016e88

080237f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80237f4:	b538      	push	{r3, r4, r5, lr}
 80237f6:	4c15      	ldr	r4, [pc, #84]	; (802384c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80237f8:	4605      	mov	r5, r0
 80237fa:	7823      	ldrb	r3, [r4, #0]
 80237fc:	f3bf 8f5b 	dmb	ish
 8023800:	07da      	lsls	r2, r3, #31
 8023802:	d40b      	bmi.n	802381c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023804:	4620      	mov	r0, r4
 8023806:	f007 fd8a 	bl	802b31e <__cxa_guard_acquire>
 802380a:	b138      	cbz	r0, 802381c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802380c:	4620      	mov	r0, r4
 802380e:	f007 fd92 	bl	802b336 <__cxa_guard_release>
 8023812:	4a0f      	ldr	r2, [pc, #60]	; (8023850 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023814:	490f      	ldr	r1, [pc, #60]	; (8023854 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8023816:	4810      	ldr	r0, [pc, #64]	; (8023858 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023818:	f007 fd7a 	bl	802b310 <__aeabi_atexit>
 802381c:	4c0f      	ldr	r4, [pc, #60]	; (802385c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802381e:	7823      	ldrb	r3, [r4, #0]
 8023820:	f3bf 8f5b 	dmb	ish
 8023824:	07db      	lsls	r3, r3, #31
 8023826:	d40b      	bmi.n	8023840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023828:	4620      	mov	r0, r4
 802382a:	f007 fd78 	bl	802b31e <__cxa_guard_acquire>
 802382e:	b138      	cbz	r0, 8023840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023830:	4620      	mov	r0, r4
 8023832:	f007 fd80 	bl	802b336 <__cxa_guard_release>
 8023836:	4a06      	ldr	r2, [pc, #24]	; (8023850 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023838:	4909      	ldr	r1, [pc, #36]	; (8023860 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802383a:	480a      	ldr	r0, [pc, #40]	; (8023864 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802383c:	f007 fd68 	bl	802b310 <__aeabi_atexit>
 8023840:	4b05      	ldr	r3, [pc, #20]	; (8023858 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023842:	612b      	str	r3, [r5, #16]
 8023844:	4b07      	ldr	r3, [pc, #28]	; (8023864 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023846:	616b      	str	r3, [r5, #20]
 8023848:	bd38      	pop	{r3, r4, r5, pc}
 802384a:	bf00      	nop
 802384c:	20016f5c 	.word	0x20016f5c
 8023850:	20000000 	.word	0x20000000
 8023854:	08021a01 	.word	0x08021a01
 8023858:	20000088 	.word	0x20000088
 802385c:	20016f60 	.word	0x20016f60
 8023860:	080219ff 	.word	0x080219ff
 8023864:	2000008c 	.word	0x2000008c

08023868 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8023868:	b538      	push	{r3, r4, r5, lr}
 802386a:	4c15      	ldr	r4, [pc, #84]	; (80238c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802386c:	4605      	mov	r5, r0
 802386e:	7823      	ldrb	r3, [r4, #0]
 8023870:	f3bf 8f5b 	dmb	ish
 8023874:	07da      	lsls	r2, r3, #31
 8023876:	d40b      	bmi.n	8023890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023878:	4620      	mov	r0, r4
 802387a:	f007 fd50 	bl	802b31e <__cxa_guard_acquire>
 802387e:	b138      	cbz	r0, 8023890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023880:	4620      	mov	r0, r4
 8023882:	f007 fd58 	bl	802b336 <__cxa_guard_release>
 8023886:	4a0f      	ldr	r2, [pc, #60]	; (80238c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023888:	490f      	ldr	r1, [pc, #60]	; (80238c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802388a:	4810      	ldr	r0, [pc, #64]	; (80238cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802388c:	f007 fd40 	bl	802b310 <__aeabi_atexit>
 8023890:	4c0f      	ldr	r4, [pc, #60]	; (80238d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023892:	7823      	ldrb	r3, [r4, #0]
 8023894:	f3bf 8f5b 	dmb	ish
 8023898:	07db      	lsls	r3, r3, #31
 802389a:	d40b      	bmi.n	80238b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802389c:	4620      	mov	r0, r4
 802389e:	f007 fd3e 	bl	802b31e <__cxa_guard_acquire>
 80238a2:	b138      	cbz	r0, 80238b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80238a4:	4620      	mov	r0, r4
 80238a6:	f007 fd46 	bl	802b336 <__cxa_guard_release>
 80238aa:	4a06      	ldr	r2, [pc, #24]	; (80238c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80238ac:	4909      	ldr	r1, [pc, #36]	; (80238d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80238ae:	480a      	ldr	r0, [pc, #40]	; (80238d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80238b0:	f007 fd2e 	bl	802b310 <__aeabi_atexit>
 80238b4:	4b05      	ldr	r3, [pc, #20]	; (80238cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80238b6:	60ab      	str	r3, [r5, #8]
 80238b8:	4b07      	ldr	r3, [pc, #28]	; (80238d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80238ba:	60eb      	str	r3, [r5, #12]
 80238bc:	bd38      	pop	{r3, r4, r5, pc}
 80238be:	bf00      	nop
 80238c0:	20016f34 	.word	0x20016f34
 80238c4:	20000000 	.word	0x20000000
 80238c8:	08021a05 	.word	0x08021a05
 80238cc:	20000060 	.word	0x20000060
 80238d0:	20016f38 	.word	0x20016f38
 80238d4:	08021a03 	.word	0x08021a03
 80238d8:	20000064 	.word	0x20000064

080238dc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80238dc:	b510      	push	{r4, lr}
 80238de:	4604      	mov	r4, r0
 80238e0:	f7ff ff88 	bl	80237f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80238e4:	4620      	mov	r0, r4
 80238e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238ea:	f7ff bfbd 	b.w	8023868 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080238f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80238f0:	b538      	push	{r3, r4, r5, lr}
 80238f2:	4c15      	ldr	r4, [pc, #84]	; (8023948 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80238f4:	4605      	mov	r5, r0
 80238f6:	7823      	ldrb	r3, [r4, #0]
 80238f8:	f3bf 8f5b 	dmb	ish
 80238fc:	07da      	lsls	r2, r3, #31
 80238fe:	d40b      	bmi.n	8023918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023900:	4620      	mov	r0, r4
 8023902:	f007 fd0c 	bl	802b31e <__cxa_guard_acquire>
 8023906:	b138      	cbz	r0, 8023918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023908:	4620      	mov	r0, r4
 802390a:	f007 fd14 	bl	802b336 <__cxa_guard_release>
 802390e:	4a0f      	ldr	r2, [pc, #60]	; (802394c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023910:	490f      	ldr	r1, [pc, #60]	; (8023950 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023912:	4810      	ldr	r0, [pc, #64]	; (8023954 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023914:	f007 fcfc 	bl	802b310 <__aeabi_atexit>
 8023918:	4c0f      	ldr	r4, [pc, #60]	; (8023958 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802391a:	7823      	ldrb	r3, [r4, #0]
 802391c:	f3bf 8f5b 	dmb	ish
 8023920:	07db      	lsls	r3, r3, #31
 8023922:	d40b      	bmi.n	802393c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023924:	4620      	mov	r0, r4
 8023926:	f007 fcfa 	bl	802b31e <__cxa_guard_acquire>
 802392a:	b138      	cbz	r0, 802393c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802392c:	4620      	mov	r0, r4
 802392e:	f007 fd02 	bl	802b336 <__cxa_guard_release>
 8023932:	4a06      	ldr	r2, [pc, #24]	; (802394c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023934:	4909      	ldr	r1, [pc, #36]	; (802395c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023936:	480a      	ldr	r0, [pc, #40]	; (8023960 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023938:	f007 fcea 	bl	802b310 <__aeabi_atexit>
 802393c:	4b05      	ldr	r3, [pc, #20]	; (8023954 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802393e:	622b      	str	r3, [r5, #32]
 8023940:	4b07      	ldr	r3, [pc, #28]	; (8023960 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023942:	626b      	str	r3, [r5, #36]	; 0x24
 8023944:	bd38      	pop	{r3, r4, r5, pc}
 8023946:	bf00      	nop
 8023948:	20016f64 	.word	0x20016f64
 802394c:	20000000 	.word	0x20000000
 8023950:	080219f9 	.word	0x080219f9
 8023954:	20000090 	.word	0x20000090
 8023958:	20016f68 	.word	0x20016f68
 802395c:	080219f7 	.word	0x080219f7
 8023960:	20000094 	.word	0x20000094

08023964 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023964:	b538      	push	{r3, r4, r5, lr}
 8023966:	4c15      	ldr	r4, [pc, #84]	; (80239bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023968:	4605      	mov	r5, r0
 802396a:	7823      	ldrb	r3, [r4, #0]
 802396c:	f3bf 8f5b 	dmb	ish
 8023970:	07da      	lsls	r2, r3, #31
 8023972:	d40b      	bmi.n	802398c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023974:	4620      	mov	r0, r4
 8023976:	f007 fcd2 	bl	802b31e <__cxa_guard_acquire>
 802397a:	b138      	cbz	r0, 802398c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802397c:	4620      	mov	r0, r4
 802397e:	f007 fcda 	bl	802b336 <__cxa_guard_release>
 8023982:	4a0f      	ldr	r2, [pc, #60]	; (80239c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023984:	490f      	ldr	r1, [pc, #60]	; (80239c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023986:	4810      	ldr	r0, [pc, #64]	; (80239c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023988:	f007 fcc2 	bl	802b310 <__aeabi_atexit>
 802398c:	4c0f      	ldr	r4, [pc, #60]	; (80239cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802398e:	7823      	ldrb	r3, [r4, #0]
 8023990:	f3bf 8f5b 	dmb	ish
 8023994:	07db      	lsls	r3, r3, #31
 8023996:	d40b      	bmi.n	80239b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023998:	4620      	mov	r0, r4
 802399a:	f007 fcc0 	bl	802b31e <__cxa_guard_acquire>
 802399e:	b138      	cbz	r0, 80239b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80239a0:	4620      	mov	r0, r4
 80239a2:	f007 fcc8 	bl	802b336 <__cxa_guard_release>
 80239a6:	4a06      	ldr	r2, [pc, #24]	; (80239c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80239a8:	4909      	ldr	r1, [pc, #36]	; (80239d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80239aa:	480a      	ldr	r0, [pc, #40]	; (80239d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80239ac:	f007 fcb0 	bl	802b310 <__aeabi_atexit>
 80239b0:	4b05      	ldr	r3, [pc, #20]	; (80239c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80239b2:	61ab      	str	r3, [r5, #24]
 80239b4:	4b07      	ldr	r3, [pc, #28]	; (80239d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80239b6:	61eb      	str	r3, [r5, #28]
 80239b8:	bd38      	pop	{r3, r4, r5, pc}
 80239ba:	bf00      	nop
 80239bc:	20016f3c 	.word	0x20016f3c
 80239c0:	20000000 	.word	0x20000000
 80239c4:	080219fd 	.word	0x080219fd
 80239c8:	20000068 	.word	0x20000068
 80239cc:	20016f40 	.word	0x20016f40
 80239d0:	080219fb 	.word	0x080219fb
 80239d4:	2000006c 	.word	0x2000006c

080239d8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80239d8:	b510      	push	{r4, lr}
 80239da:	4604      	mov	r4, r0
 80239dc:	f7ff ff88 	bl	80238f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80239e0:	4620      	mov	r0, r4
 80239e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239e6:	f7ff bfbd 	b.w	8023964 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080239ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80239ec:	b538      	push	{r3, r4, r5, lr}
 80239ee:	4c15      	ldr	r4, [pc, #84]	; (8023a44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80239f0:	4605      	mov	r5, r0
 80239f2:	7823      	ldrb	r3, [r4, #0]
 80239f4:	f3bf 8f5b 	dmb	ish
 80239f8:	07da      	lsls	r2, r3, #31
 80239fa:	d40b      	bmi.n	8023a14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80239fc:	4620      	mov	r0, r4
 80239fe:	f007 fc8e 	bl	802b31e <__cxa_guard_acquire>
 8023a02:	b138      	cbz	r0, 8023a14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023a04:	4620      	mov	r0, r4
 8023a06:	f007 fc96 	bl	802b336 <__cxa_guard_release>
 8023a0a:	4a0f      	ldr	r2, [pc, #60]	; (8023a48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023a0c:	490f      	ldr	r1, [pc, #60]	; (8023a4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023a0e:	4810      	ldr	r0, [pc, #64]	; (8023a50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023a10:	f007 fc7e 	bl	802b310 <__aeabi_atexit>
 8023a14:	4c0f      	ldr	r4, [pc, #60]	; (8023a54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023a16:	7823      	ldrb	r3, [r4, #0]
 8023a18:	f3bf 8f5b 	dmb	ish
 8023a1c:	07db      	lsls	r3, r3, #31
 8023a1e:	d40b      	bmi.n	8023a38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023a20:	4620      	mov	r0, r4
 8023a22:	f007 fc7c 	bl	802b31e <__cxa_guard_acquire>
 8023a26:	b138      	cbz	r0, 8023a38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023a28:	4620      	mov	r0, r4
 8023a2a:	f007 fc84 	bl	802b336 <__cxa_guard_release>
 8023a2e:	4a06      	ldr	r2, [pc, #24]	; (8023a48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023a30:	4909      	ldr	r1, [pc, #36]	; (8023a58 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023a32:	480a      	ldr	r0, [pc, #40]	; (8023a5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023a34:	f007 fc6c 	bl	802b310 <__aeabi_atexit>
 8023a38:	4b05      	ldr	r3, [pc, #20]	; (8023a50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023a3a:	632b      	str	r3, [r5, #48]	; 0x30
 8023a3c:	4b07      	ldr	r3, [pc, #28]	; (8023a5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023a3e:	636b      	str	r3, [r5, #52]	; 0x34
 8023a40:	bd38      	pop	{r3, r4, r5, pc}
 8023a42:	bf00      	nop
 8023a44:	20016f74 	.word	0x20016f74
 8023a48:	20000000 	.word	0x20000000
 8023a4c:	080219f1 	.word	0x080219f1
 8023a50:	200000a0 	.word	0x200000a0
 8023a54:	20016f78 	.word	0x20016f78
 8023a58:	080219ef 	.word	0x080219ef
 8023a5c:	200000a4 	.word	0x200000a4

08023a60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023a60:	b538      	push	{r3, r4, r5, lr}
 8023a62:	4c15      	ldr	r4, [pc, #84]	; (8023ab8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023a64:	4605      	mov	r5, r0
 8023a66:	7823      	ldrb	r3, [r4, #0]
 8023a68:	f3bf 8f5b 	dmb	ish
 8023a6c:	07da      	lsls	r2, r3, #31
 8023a6e:	d40b      	bmi.n	8023a88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023a70:	4620      	mov	r0, r4
 8023a72:	f007 fc54 	bl	802b31e <__cxa_guard_acquire>
 8023a76:	b138      	cbz	r0, 8023a88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023a78:	4620      	mov	r0, r4
 8023a7a:	f007 fc5c 	bl	802b336 <__cxa_guard_release>
 8023a7e:	4a0f      	ldr	r2, [pc, #60]	; (8023abc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023a80:	490f      	ldr	r1, [pc, #60]	; (8023ac0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023a82:	4810      	ldr	r0, [pc, #64]	; (8023ac4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023a84:	f007 fc44 	bl	802b310 <__aeabi_atexit>
 8023a88:	4c0f      	ldr	r4, [pc, #60]	; (8023ac8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8023a8a:	7823      	ldrb	r3, [r4, #0]
 8023a8c:	f3bf 8f5b 	dmb	ish
 8023a90:	07db      	lsls	r3, r3, #31
 8023a92:	d40b      	bmi.n	8023aac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023a94:	4620      	mov	r0, r4
 8023a96:	f007 fc42 	bl	802b31e <__cxa_guard_acquire>
 8023a9a:	b138      	cbz	r0, 8023aac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023a9c:	4620      	mov	r0, r4
 8023a9e:	f007 fc4a 	bl	802b336 <__cxa_guard_release>
 8023aa2:	4a06      	ldr	r2, [pc, #24]	; (8023abc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023aa4:	4909      	ldr	r1, [pc, #36]	; (8023acc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023aa6:	480a      	ldr	r0, [pc, #40]	; (8023ad0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023aa8:	f007 fc32 	bl	802b310 <__aeabi_atexit>
 8023aac:	4b05      	ldr	r3, [pc, #20]	; (8023ac4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023aae:	62ab      	str	r3, [r5, #40]	; 0x28
 8023ab0:	4b07      	ldr	r3, [pc, #28]	; (8023ad0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023ab2:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023ab4:	bd38      	pop	{r3, r4, r5, pc}
 8023ab6:	bf00      	nop
 8023ab8:	20016f44 	.word	0x20016f44
 8023abc:	20000000 	.word	0x20000000
 8023ac0:	080219f5 	.word	0x080219f5
 8023ac4:	20000070 	.word	0x20000070
 8023ac8:	20016f48 	.word	0x20016f48
 8023acc:	080219f3 	.word	0x080219f3
 8023ad0:	20000074 	.word	0x20000074

08023ad4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023ad4:	b510      	push	{r4, lr}
 8023ad6:	4604      	mov	r4, r0
 8023ad8:	f7ff ff88 	bl	80239ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023adc:	4620      	mov	r0, r4
 8023ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ae2:	f7ff bfbd 	b.w	8023a60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023ae8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023ae8:	b538      	push	{r3, r4, r5, lr}
 8023aea:	4c15      	ldr	r4, [pc, #84]	; (8023b40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023aec:	4605      	mov	r5, r0
 8023aee:	7823      	ldrb	r3, [r4, #0]
 8023af0:	f3bf 8f5b 	dmb	ish
 8023af4:	07da      	lsls	r2, r3, #31
 8023af6:	d40b      	bmi.n	8023b10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023af8:	4620      	mov	r0, r4
 8023afa:	f007 fc10 	bl	802b31e <__cxa_guard_acquire>
 8023afe:	b138      	cbz	r0, 8023b10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023b00:	4620      	mov	r0, r4
 8023b02:	f007 fc18 	bl	802b336 <__cxa_guard_release>
 8023b06:	4a0f      	ldr	r2, [pc, #60]	; (8023b44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023b08:	490f      	ldr	r1, [pc, #60]	; (8023b48 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8023b0a:	4810      	ldr	r0, [pc, #64]	; (8023b4c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023b0c:	f007 fc00 	bl	802b310 <__aeabi_atexit>
 8023b10:	4c0f      	ldr	r4, [pc, #60]	; (8023b50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8023b12:	7823      	ldrb	r3, [r4, #0]
 8023b14:	f3bf 8f5b 	dmb	ish
 8023b18:	07db      	lsls	r3, r3, #31
 8023b1a:	d40b      	bmi.n	8023b34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023b1c:	4620      	mov	r0, r4
 8023b1e:	f007 fbfe 	bl	802b31e <__cxa_guard_acquire>
 8023b22:	b138      	cbz	r0, 8023b34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023b24:	4620      	mov	r0, r4
 8023b26:	f007 fc06 	bl	802b336 <__cxa_guard_release>
 8023b2a:	4a06      	ldr	r2, [pc, #24]	; (8023b44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023b2c:	4909      	ldr	r1, [pc, #36]	; (8023b54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8023b2e:	480a      	ldr	r0, [pc, #40]	; (8023b58 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023b30:	f007 fbee 	bl	802b310 <__aeabi_atexit>
 8023b34:	4b05      	ldr	r3, [pc, #20]	; (8023b4c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023b36:	652b      	str	r3, [r5, #80]	; 0x50
 8023b38:	4b07      	ldr	r3, [pc, #28]	; (8023b58 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023b3a:	656b      	str	r3, [r5, #84]	; 0x54
 8023b3c:	bd38      	pop	{r3, r4, r5, pc}
 8023b3e:	bf00      	nop
 8023b40:	20016f7c 	.word	0x20016f7c
 8023b44:	20000000 	.word	0x20000000
 8023b48:	080219e1 	.word	0x080219e1
 8023b4c:	200000a8 	.word	0x200000a8
 8023b50:	20016f80 	.word	0x20016f80
 8023b54:	080219df 	.word	0x080219df
 8023b58:	200000ac 	.word	0x200000ac

08023b5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8023b5c:	b538      	push	{r3, r4, r5, lr}
 8023b5e:	4c15      	ldr	r4, [pc, #84]	; (8023bb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023b60:	4605      	mov	r5, r0
 8023b62:	7823      	ldrb	r3, [r4, #0]
 8023b64:	f3bf 8f5b 	dmb	ish
 8023b68:	07da      	lsls	r2, r3, #31
 8023b6a:	d40b      	bmi.n	8023b84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023b6c:	4620      	mov	r0, r4
 8023b6e:	f007 fbd6 	bl	802b31e <__cxa_guard_acquire>
 8023b72:	b138      	cbz	r0, 8023b84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023b74:	4620      	mov	r0, r4
 8023b76:	f007 fbde 	bl	802b336 <__cxa_guard_release>
 8023b7a:	4a0f      	ldr	r2, [pc, #60]	; (8023bb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023b7c:	490f      	ldr	r1, [pc, #60]	; (8023bbc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8023b7e:	4810      	ldr	r0, [pc, #64]	; (8023bc0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023b80:	f007 fbc6 	bl	802b310 <__aeabi_atexit>
 8023b84:	4c0f      	ldr	r4, [pc, #60]	; (8023bc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023b86:	7823      	ldrb	r3, [r4, #0]
 8023b88:	f3bf 8f5b 	dmb	ish
 8023b8c:	07db      	lsls	r3, r3, #31
 8023b8e:	d40b      	bmi.n	8023ba8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023b90:	4620      	mov	r0, r4
 8023b92:	f007 fbc4 	bl	802b31e <__cxa_guard_acquire>
 8023b96:	b138      	cbz	r0, 8023ba8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023b98:	4620      	mov	r0, r4
 8023b9a:	f007 fbcc 	bl	802b336 <__cxa_guard_release>
 8023b9e:	4a06      	ldr	r2, [pc, #24]	; (8023bb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023ba0:	4909      	ldr	r1, [pc, #36]	; (8023bc8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023ba2:	480a      	ldr	r0, [pc, #40]	; (8023bcc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023ba4:	f007 fbb4 	bl	802b310 <__aeabi_atexit>
 8023ba8:	4b05      	ldr	r3, [pc, #20]	; (8023bc0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023baa:	64ab      	str	r3, [r5, #72]	; 0x48
 8023bac:	4b07      	ldr	r3, [pc, #28]	; (8023bcc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023bae:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023bb0:	bd38      	pop	{r3, r4, r5, pc}
 8023bb2:	bf00      	nop
 8023bb4:	20016f84 	.word	0x20016f84
 8023bb8:	20000000 	.word	0x20000000
 8023bbc:	080219e5 	.word	0x080219e5
 8023bc0:	200000b0 	.word	0x200000b0
 8023bc4:	20016f88 	.word	0x20016f88
 8023bc8:	080219e3 	.word	0x080219e3
 8023bcc:	200000b4 	.word	0x200000b4

08023bd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023bd0:	b538      	push	{r3, r4, r5, lr}
 8023bd2:	4c15      	ldr	r4, [pc, #84]	; (8023c28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023bd4:	4605      	mov	r5, r0
 8023bd6:	7823      	ldrb	r3, [r4, #0]
 8023bd8:	f3bf 8f5b 	dmb	ish
 8023bdc:	07da      	lsls	r2, r3, #31
 8023bde:	d40b      	bmi.n	8023bf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023be0:	4620      	mov	r0, r4
 8023be2:	f007 fb9c 	bl	802b31e <__cxa_guard_acquire>
 8023be6:	b138      	cbz	r0, 8023bf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023be8:	4620      	mov	r0, r4
 8023bea:	f007 fba4 	bl	802b336 <__cxa_guard_release>
 8023bee:	4a0f      	ldr	r2, [pc, #60]	; (8023c2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023bf0:	490f      	ldr	r1, [pc, #60]	; (8023c30 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023bf2:	4810      	ldr	r0, [pc, #64]	; (8023c34 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023bf4:	f007 fb8c 	bl	802b310 <__aeabi_atexit>
 8023bf8:	4c0f      	ldr	r4, [pc, #60]	; (8023c38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8023bfa:	7823      	ldrb	r3, [r4, #0]
 8023bfc:	f3bf 8f5b 	dmb	ish
 8023c00:	07db      	lsls	r3, r3, #31
 8023c02:	d40b      	bmi.n	8023c1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023c04:	4620      	mov	r0, r4
 8023c06:	f007 fb8a 	bl	802b31e <__cxa_guard_acquire>
 8023c0a:	b138      	cbz	r0, 8023c1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023c0c:	4620      	mov	r0, r4
 8023c0e:	f007 fb92 	bl	802b336 <__cxa_guard_release>
 8023c12:	4a06      	ldr	r2, [pc, #24]	; (8023c2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023c14:	4909      	ldr	r1, [pc, #36]	; (8023c3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023c16:	480a      	ldr	r0, [pc, #40]	; (8023c40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023c18:	f007 fb7a 	bl	802b310 <__aeabi_atexit>
 8023c1c:	4b05      	ldr	r3, [pc, #20]	; (8023c34 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023c1e:	642b      	str	r3, [r5, #64]	; 0x40
 8023c20:	4b07      	ldr	r3, [pc, #28]	; (8023c40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023c22:	646b      	str	r3, [r5, #68]	; 0x44
 8023c24:	bd38      	pop	{r3, r4, r5, pc}
 8023c26:	bf00      	nop
 8023c28:	20016f4c 	.word	0x20016f4c
 8023c2c:	20000000 	.word	0x20000000
 8023c30:	080219e9 	.word	0x080219e9
 8023c34:	20000078 	.word	0x20000078
 8023c38:	20016f50 	.word	0x20016f50
 8023c3c:	080219e7 	.word	0x080219e7
 8023c40:	2000007c 	.word	0x2000007c

08023c44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023c44:	b538      	push	{r3, r4, r5, lr}
 8023c46:	4c15      	ldr	r4, [pc, #84]	; (8023c9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023c48:	4605      	mov	r5, r0
 8023c4a:	7823      	ldrb	r3, [r4, #0]
 8023c4c:	f3bf 8f5b 	dmb	ish
 8023c50:	07da      	lsls	r2, r3, #31
 8023c52:	d40b      	bmi.n	8023c6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023c54:	4620      	mov	r0, r4
 8023c56:	f007 fb62 	bl	802b31e <__cxa_guard_acquire>
 8023c5a:	b138      	cbz	r0, 8023c6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023c5c:	4620      	mov	r0, r4
 8023c5e:	f007 fb6a 	bl	802b336 <__cxa_guard_release>
 8023c62:	4a0f      	ldr	r2, [pc, #60]	; (8023ca0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023c64:	490f      	ldr	r1, [pc, #60]	; (8023ca4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023c66:	4810      	ldr	r0, [pc, #64]	; (8023ca8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023c68:	f007 fb52 	bl	802b310 <__aeabi_atexit>
 8023c6c:	4c0f      	ldr	r4, [pc, #60]	; (8023cac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8023c6e:	7823      	ldrb	r3, [r4, #0]
 8023c70:	f3bf 8f5b 	dmb	ish
 8023c74:	07db      	lsls	r3, r3, #31
 8023c76:	d40b      	bmi.n	8023c90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023c78:	4620      	mov	r0, r4
 8023c7a:	f007 fb50 	bl	802b31e <__cxa_guard_acquire>
 8023c7e:	b138      	cbz	r0, 8023c90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023c80:	4620      	mov	r0, r4
 8023c82:	f007 fb58 	bl	802b336 <__cxa_guard_release>
 8023c86:	4a06      	ldr	r2, [pc, #24]	; (8023ca0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023c88:	4909      	ldr	r1, [pc, #36]	; (8023cb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8023c8a:	480a      	ldr	r0, [pc, #40]	; (8023cb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023c8c:	f007 fb40 	bl	802b310 <__aeabi_atexit>
 8023c90:	4b05      	ldr	r3, [pc, #20]	; (8023ca8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023c92:	63ab      	str	r3, [r5, #56]	; 0x38
 8023c94:	4b07      	ldr	r3, [pc, #28]	; (8023cb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023c96:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023c98:	bd38      	pop	{r3, r4, r5, pc}
 8023c9a:	bf00      	nop
 8023c9c:	20016f6c 	.word	0x20016f6c
 8023ca0:	20000000 	.word	0x20000000
 8023ca4:	080219ed 	.word	0x080219ed
 8023ca8:	20000098 	.word	0x20000098
 8023cac:	20016f70 	.word	0x20016f70
 8023cb0:	080219eb 	.word	0x080219eb
 8023cb4:	2000009c 	.word	0x2000009c

08023cb8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023cb8:	b510      	push	{r4, lr}
 8023cba:	4604      	mov	r4, r0
 8023cbc:	f7ff ff14 	bl	8023ae8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023cc0:	4620      	mov	r0, r4
 8023cc2:	f7ff ff85 	bl	8023bd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023cc6:	4620      	mov	r0, r4
 8023cc8:	f7ff ff48 	bl	8023b5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8023ccc:	4620      	mov	r0, r4
 8023cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023cd2:	f7ff bfb7 	b.w	8023c44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023cd8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023cd8:	b538      	push	{r3, r4, r5, lr}
 8023cda:	4c15      	ldr	r4, [pc, #84]	; (8023d30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023cdc:	4605      	mov	r5, r0
 8023cde:	7823      	ldrb	r3, [r4, #0]
 8023ce0:	f3bf 8f5b 	dmb	ish
 8023ce4:	07da      	lsls	r2, r3, #31
 8023ce6:	d40b      	bmi.n	8023d00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023ce8:	4620      	mov	r0, r4
 8023cea:	f007 fb18 	bl	802b31e <__cxa_guard_acquire>
 8023cee:	b138      	cbz	r0, 8023d00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023cf0:	4620      	mov	r0, r4
 8023cf2:	f007 fb20 	bl	802b336 <__cxa_guard_release>
 8023cf6:	4a0f      	ldr	r2, [pc, #60]	; (8023d34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023cf8:	490f      	ldr	r1, [pc, #60]	; (8023d38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023cfa:	4810      	ldr	r0, [pc, #64]	; (8023d3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023cfc:	f007 fb08 	bl	802b310 <__aeabi_atexit>
 8023d00:	4c0f      	ldr	r4, [pc, #60]	; (8023d40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023d02:	7823      	ldrb	r3, [r4, #0]
 8023d04:	f3bf 8f5b 	dmb	ish
 8023d08:	07db      	lsls	r3, r3, #31
 8023d0a:	d40b      	bmi.n	8023d24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023d0c:	4620      	mov	r0, r4
 8023d0e:	f007 fb06 	bl	802b31e <__cxa_guard_acquire>
 8023d12:	b138      	cbz	r0, 8023d24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023d14:	4620      	mov	r0, r4
 8023d16:	f007 fb0e 	bl	802b336 <__cxa_guard_release>
 8023d1a:	4a06      	ldr	r2, [pc, #24]	; (8023d34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023d1c:	4909      	ldr	r1, [pc, #36]	; (8023d44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023d1e:	480a      	ldr	r0, [pc, #40]	; (8023d48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023d20:	f007 faf6 	bl	802b310 <__aeabi_atexit>
 8023d24:	4b05      	ldr	r3, [pc, #20]	; (8023d3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023d26:	662b      	str	r3, [r5, #96]	; 0x60
 8023d28:	4b07      	ldr	r3, [pc, #28]	; (8023d48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023d2a:	666b      	str	r3, [r5, #100]	; 0x64
 8023d2c:	bd38      	pop	{r3, r4, r5, pc}
 8023d2e:	bf00      	nop
 8023d30:	20016f54 	.word	0x20016f54
 8023d34:	20000000 	.word	0x20000000
 8023d38:	080219d9 	.word	0x080219d9
 8023d3c:	20000080 	.word	0x20000080
 8023d40:	20016f58 	.word	0x20016f58
 8023d44:	080219d7 	.word	0x080219d7
 8023d48:	20000084 	.word	0x20000084

08023d4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023d4c:	b538      	push	{r3, r4, r5, lr}
 8023d4e:	4c15      	ldr	r4, [pc, #84]	; (8023da4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023d50:	4605      	mov	r5, r0
 8023d52:	7823      	ldrb	r3, [r4, #0]
 8023d54:	f3bf 8f5b 	dmb	ish
 8023d58:	07da      	lsls	r2, r3, #31
 8023d5a:	d40b      	bmi.n	8023d74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023d5c:	4620      	mov	r0, r4
 8023d5e:	f007 fade 	bl	802b31e <__cxa_guard_acquire>
 8023d62:	b138      	cbz	r0, 8023d74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023d64:	4620      	mov	r0, r4
 8023d66:	f007 fae6 	bl	802b336 <__cxa_guard_release>
 8023d6a:	4a0f      	ldr	r2, [pc, #60]	; (8023da8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023d6c:	490f      	ldr	r1, [pc, #60]	; (8023dac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023d6e:	4810      	ldr	r0, [pc, #64]	; (8023db0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023d70:	f007 face 	bl	802b310 <__aeabi_atexit>
 8023d74:	4c0f      	ldr	r4, [pc, #60]	; (8023db4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023d76:	7823      	ldrb	r3, [r4, #0]
 8023d78:	f3bf 8f5b 	dmb	ish
 8023d7c:	07db      	lsls	r3, r3, #31
 8023d7e:	d40b      	bmi.n	8023d98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023d80:	4620      	mov	r0, r4
 8023d82:	f007 facc 	bl	802b31e <__cxa_guard_acquire>
 8023d86:	b138      	cbz	r0, 8023d98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023d88:	4620      	mov	r0, r4
 8023d8a:	f007 fad4 	bl	802b336 <__cxa_guard_release>
 8023d8e:	4a06      	ldr	r2, [pc, #24]	; (8023da8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023d90:	4909      	ldr	r1, [pc, #36]	; (8023db8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023d92:	480a      	ldr	r0, [pc, #40]	; (8023dbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023d94:	f007 fabc 	bl	802b310 <__aeabi_atexit>
 8023d98:	4b05      	ldr	r3, [pc, #20]	; (8023db0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023d9a:	65ab      	str	r3, [r5, #88]	; 0x58
 8023d9c:	4b07      	ldr	r3, [pc, #28]	; (8023dbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023d9e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8023da0:	bd38      	pop	{r3, r4, r5, pc}
 8023da2:	bf00      	nop
 8023da4:	20016f2c 	.word	0x20016f2c
 8023da8:	20000000 	.word	0x20000000
 8023dac:	080219dd 	.word	0x080219dd
 8023db0:	20000058 	.word	0x20000058
 8023db4:	20016f30 	.word	0x20016f30
 8023db8:	080219db 	.word	0x080219db
 8023dbc:	2000005c 	.word	0x2000005c

08023dc0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023dc0:	b510      	push	{r4, lr}
 8023dc2:	4604      	mov	r4, r0
 8023dc4:	f7ff ff88 	bl	8023cd8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023dc8:	4620      	mov	r0, r4
 8023dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023dce:	f7ff bfbd 	b.w	8023d4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023dd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023dd4:	b538      	push	{r3, r4, r5, lr}
 8023dd6:	4c15      	ldr	r4, [pc, #84]	; (8023e2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023dd8:	4605      	mov	r5, r0
 8023dda:	7823      	ldrb	r3, [r4, #0]
 8023ddc:	f3bf 8f5b 	dmb	ish
 8023de0:	07da      	lsls	r2, r3, #31
 8023de2:	d40b      	bmi.n	8023dfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023de4:	4620      	mov	r0, r4
 8023de6:	f007 fa9a 	bl	802b31e <__cxa_guard_acquire>
 8023dea:	b138      	cbz	r0, 8023dfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023dec:	4620      	mov	r0, r4
 8023dee:	f007 faa2 	bl	802b336 <__cxa_guard_release>
 8023df2:	4a0f      	ldr	r2, [pc, #60]	; (8023e30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023df4:	490f      	ldr	r1, [pc, #60]	; (8023e34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023df6:	4810      	ldr	r0, [pc, #64]	; (8023e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023df8:	f007 fa8a 	bl	802b310 <__aeabi_atexit>
 8023dfc:	4c0f      	ldr	r4, [pc, #60]	; (8023e3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023dfe:	7823      	ldrb	r3, [r4, #0]
 8023e00:	f3bf 8f5b 	dmb	ish
 8023e04:	07db      	lsls	r3, r3, #31
 8023e06:	d40b      	bmi.n	8023e20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023e08:	4620      	mov	r0, r4
 8023e0a:	f007 fa88 	bl	802b31e <__cxa_guard_acquire>
 8023e0e:	b138      	cbz	r0, 8023e20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023e10:	4620      	mov	r0, r4
 8023e12:	f007 fa90 	bl	802b336 <__cxa_guard_release>
 8023e16:	4a06      	ldr	r2, [pc, #24]	; (8023e30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023e18:	4909      	ldr	r1, [pc, #36]	; (8023e40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023e1a:	480a      	ldr	r0, [pc, #40]	; (8023e44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023e1c:	f007 fa78 	bl	802b310 <__aeabi_atexit>
 8023e20:	4b05      	ldr	r3, [pc, #20]	; (8023e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023e22:	672b      	str	r3, [r5, #112]	; 0x70
 8023e24:	4b07      	ldr	r3, [pc, #28]	; (8023e44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023e26:	676b      	str	r3, [r5, #116]	; 0x74
 8023e28:	bd38      	pop	{r3, r4, r5, pc}
 8023e2a:	bf00      	nop
 8023e2c:	20016f24 	.word	0x20016f24
 8023e30:	20000000 	.word	0x20000000
 8023e34:	080219d1 	.word	0x080219d1
 8023e38:	20000050 	.word	0x20000050
 8023e3c:	20016f28 	.word	0x20016f28
 8023e40:	080219cf 	.word	0x080219cf
 8023e44:	20000054 	.word	0x20000054

08023e48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023e48:	b538      	push	{r3, r4, r5, lr}
 8023e4a:	4c15      	ldr	r4, [pc, #84]	; (8023ea0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023e4c:	4605      	mov	r5, r0
 8023e4e:	7823      	ldrb	r3, [r4, #0]
 8023e50:	f3bf 8f5b 	dmb	ish
 8023e54:	07da      	lsls	r2, r3, #31
 8023e56:	d40b      	bmi.n	8023e70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023e58:	4620      	mov	r0, r4
 8023e5a:	f007 fa60 	bl	802b31e <__cxa_guard_acquire>
 8023e5e:	b138      	cbz	r0, 8023e70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023e60:	4620      	mov	r0, r4
 8023e62:	f007 fa68 	bl	802b336 <__cxa_guard_release>
 8023e66:	4a0f      	ldr	r2, [pc, #60]	; (8023ea4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023e68:	490f      	ldr	r1, [pc, #60]	; (8023ea8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023e6a:	4810      	ldr	r0, [pc, #64]	; (8023eac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023e6c:	f007 fa50 	bl	802b310 <__aeabi_atexit>
 8023e70:	4c0f      	ldr	r4, [pc, #60]	; (8023eb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023e72:	7823      	ldrb	r3, [r4, #0]
 8023e74:	f3bf 8f5b 	dmb	ish
 8023e78:	07db      	lsls	r3, r3, #31
 8023e7a:	d40b      	bmi.n	8023e94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023e7c:	4620      	mov	r0, r4
 8023e7e:	f007 fa4e 	bl	802b31e <__cxa_guard_acquire>
 8023e82:	b138      	cbz	r0, 8023e94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023e84:	4620      	mov	r0, r4
 8023e86:	f007 fa56 	bl	802b336 <__cxa_guard_release>
 8023e8a:	4a06      	ldr	r2, [pc, #24]	; (8023ea4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023e8c:	4909      	ldr	r1, [pc, #36]	; (8023eb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023e8e:	480a      	ldr	r0, [pc, #40]	; (8023eb8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023e90:	f007 fa3e 	bl	802b310 <__aeabi_atexit>
 8023e94:	4b05      	ldr	r3, [pc, #20]	; (8023eac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023e96:	66ab      	str	r3, [r5, #104]	; 0x68
 8023e98:	4b07      	ldr	r3, [pc, #28]	; (8023eb8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023e9a:	66eb      	str	r3, [r5, #108]	; 0x6c
 8023e9c:	bd38      	pop	{r3, r4, r5, pc}
 8023e9e:	bf00      	nop
 8023ea0:	20016f1c 	.word	0x20016f1c
 8023ea4:	20000000 	.word	0x20000000
 8023ea8:	080219d5 	.word	0x080219d5
 8023eac:	20000048 	.word	0x20000048
 8023eb0:	20016f20 	.word	0x20016f20
 8023eb4:	080219d3 	.word	0x080219d3
 8023eb8:	2000004c 	.word	0x2000004c

08023ebc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8023ebc:	b510      	push	{r4, lr}
 8023ebe:	4604      	mov	r4, r0
 8023ec0:	f7ff ff88 	bl	8023dd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023ec4:	4620      	mov	r0, r4
 8023ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023eca:	f7ff bfbd 	b.w	8023e48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08023ece <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8023ece:	b510      	push	{r4, lr}
 8023ed0:	4604      	mov	r4, r0
 8023ed2:	f7ff fff3 	bl	8023ebc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023ed6:	4620      	mov	r0, r4
 8023ed8:	f7ff ff72 	bl	8023dc0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023edc:	4620      	mov	r0, r4
 8023ede:	f7ff fdf9 	bl	8023ad4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023ee2:	4620      	mov	r0, r4
 8023ee4:	f7ff fcfa 	bl	80238dc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023ee8:	4620      	mov	r0, r4
 8023eea:	f7ff fd75 	bl	80239d8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023eee:	4620      	mov	r0, r4
 8023ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ef4:	f7ff bee0 	b.w	8023cb8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023ef8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023efc:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8023f00:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8023f04:	2d00      	cmp	r5, #0
 8023f06:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8023f0a:	fb05 4c0e 	mla	ip, r5, lr, r4
 8023f0e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8023f12:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023f16:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8023f1a:	eb02 0a0c 	add.w	sl, r2, ip
 8023f1e:	8808      	ldrh	r0, [r1, #0]
 8023f20:	f2c0 80b0 	blt.w	8024084 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023f24:	45ab      	cmp	fp, r5
 8023f26:	f340 80ad 	ble.w	8024084 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023f2a:	2c00      	cmp	r4, #0
 8023f2c:	f2c0 80a8 	blt.w	8024080 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023f30:	45a6      	cmp	lr, r4
 8023f32:	f340 80a5 	ble.w	8024080 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023f36:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023f3a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8023f3e:	1c62      	adds	r2, r4, #1
 8023f40:	f100 80a3 	bmi.w	802408a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023f44:	4596      	cmp	lr, r2
 8023f46:	f340 80a0 	ble.w	802408a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023f4a:	f1b9 0f00 	cmp.w	r9, #0
 8023f4e:	f000 809c 	beq.w	802408a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023f52:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023f56:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023f5a:	3501      	adds	r5, #1
 8023f5c:	f100 8099 	bmi.w	8024092 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023f60:	45ab      	cmp	fp, r5
 8023f62:	f340 8096 	ble.w	8024092 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023f66:	2f00      	cmp	r7, #0
 8023f68:	f000 8093 	beq.w	8024092 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023f6c:	2c00      	cmp	r4, #0
 8023f6e:	f2c0 808e 	blt.w	802408e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023f72:	45a6      	cmp	lr, r4
 8023f74:	f340 808b 	ble.w	802408e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023f78:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8023f7c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8023f80:	3401      	adds	r4, #1
 8023f82:	f100 8089 	bmi.w	8024098 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023f86:	45a6      	cmp	lr, r4
 8023f88:	f340 8086 	ble.w	8024098 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023f8c:	f1b9 0f00 	cmp.w	r9, #0
 8023f90:	f000 8082 	beq.w	8024098 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023f94:	44d6      	add	lr, sl
 8023f96:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023f9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023f9e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023fa2:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8023fa6:	fb19 fe07 	smulbb	lr, r9, r7
 8023faa:	f1c7 0210 	rsb	r2, r7, #16
 8023fae:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023fb2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023fb6:	eba2 0209 	sub.w	r2, r2, r9
 8023fba:	ea44 0808 	orr.w	r8, r4, r8
 8023fbe:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023fc2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023fc6:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023fca:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023fce:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023fd2:	ea44 0c0c 	orr.w	ip, r4, ip
 8023fd6:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023fda:	fb04 f40c 	mul.w	r4, r4, ip
 8023fde:	fb02 4808 	mla	r8, r2, r8, r4
 8023fe2:	041a      	lsls	r2, r3, #16
 8023fe4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023fe8:	b2b4      	uxth	r4, r6
 8023fea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023fee:	43f6      	mvns	r6, r6
 8023ff0:	4313      	orrs	r3, r2
 8023ff2:	042a      	lsls	r2, r5, #16
 8023ff4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023ff8:	b2f6      	uxtb	r6, r6
 8023ffa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023ffe:	fb0e 8303 	mla	r3, lr, r3, r8
 8024002:	432a      	orrs	r2, r5
 8024004:	fb07 3202 	mla	r2, r7, r2, r3
 8024008:	10c7      	asrs	r7, r0, #3
 802400a:	0d53      	lsrs	r3, r2, #21
 802400c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024010:	0952      	lsrs	r2, r2, #5
 8024012:	fb17 f706 	smulbb	r7, r7, r6
 8024016:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802401a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802401e:	431a      	orrs	r2, r3
 8024020:	b293      	uxth	r3, r2
 8024022:	1202      	asrs	r2, r0, #8
 8024024:	121d      	asrs	r5, r3, #8
 8024026:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802402a:	00c0      	lsls	r0, r0, #3
 802402c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024030:	fb12 f206 	smulbb	r2, r2, r6
 8024034:	b2c0      	uxtb	r0, r0
 8024036:	fb05 2504 	mla	r5, r5, r4, r2
 802403a:	10da      	asrs	r2, r3, #3
 802403c:	fb10 f006 	smulbb	r0, r0, r6
 8024040:	00db      	lsls	r3, r3, #3
 8024042:	b2ad      	uxth	r5, r5
 8024044:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024048:	b2db      	uxtb	r3, r3
 802404a:	fb02 7204 	mla	r2, r2, r4, r7
 802404e:	fb03 0004 	mla	r0, r3, r4, r0
 8024052:	1c6b      	adds	r3, r5, #1
 8024054:	b292      	uxth	r2, r2
 8024056:	b280      	uxth	r0, r0
 8024058:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802405c:	1c43      	adds	r3, r0, #1
 802405e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024062:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024066:	1c50      	adds	r0, r2, #1
 8024068:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802406c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024070:	0952      	lsrs	r2, r2, #5
 8024072:	432b      	orrs	r3, r5
 8024074:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024078:	4313      	orrs	r3, r2
 802407a:	800b      	strh	r3, [r1, #0]
 802407c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024080:	4680      	mov	r8, r0
 8024082:	e75c      	b.n	8023f3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8024084:	4684      	mov	ip, r0
 8024086:	4680      	mov	r8, r0
 8024088:	e767      	b.n	8023f5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802408a:	4684      	mov	ip, r0
 802408c:	e765      	b.n	8023f5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802408e:	4605      	mov	r5, r0
 8024090:	e776      	b.n	8023f80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8024092:	4603      	mov	r3, r0
 8024094:	4605      	mov	r5, r0
 8024096:	e782      	b.n	8023f9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024098:	4603      	mov	r3, r0
 802409a:	e780      	b.n	8023f9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0802409c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240a0:	b099      	sub	sp, #100	; 0x64
 80240a2:	9215      	str	r2, [sp, #84]	; 0x54
 80240a4:	9309      	str	r3, [sp, #36]	; 0x24
 80240a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80240a8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 80240ac:	9016      	str	r0, [sp, #88]	; 0x58
 80240ae:	930d      	str	r3, [sp, #52]	; 0x34
 80240b0:	6850      	ldr	r0, [r2, #4]
 80240b2:	910c      	str	r1, [sp, #48]	; 0x30
 80240b4:	6812      	ldr	r2, [r2, #0]
 80240b6:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80240ba:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 80240be:	fb00 1303 	mla	r3, r0, r3, r1
 80240c2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80240c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80240cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240ce:	685e      	ldr	r6, [r3, #4]
 80240d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240d2:	3604      	adds	r6, #4
 80240d4:	43db      	mvns	r3, r3
 80240d6:	b2db      	uxtb	r3, r3
 80240d8:	930a      	str	r3, [sp, #40]	; 0x28
 80240da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240dc:	2b00      	cmp	r3, #0
 80240de:	dc03      	bgt.n	80240e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80240e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80240e2:	2b00      	cmp	r3, #0
 80240e4:	f340 8225 	ble.w	8024532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80240e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80240ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80240f2:	1e48      	subs	r0, r1, #1
 80240f4:	1e57      	subs	r7, r2, #1
 80240f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	f340 80e3 	ble.w	80242c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80240fe:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8024102:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024106:	d406      	bmi.n	8024116 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024108:	4584      	cmp	ip, r0
 802410a:	da04      	bge.n	8024116 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802410c:	2b00      	cmp	r3, #0
 802410e:	db02      	blt.n	8024116 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024110:	42bb      	cmp	r3, r7
 8024112:	f2c0 80d8 	blt.w	80242c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024116:	f11c 0c01 	adds.w	ip, ip, #1
 802411a:	f100 80c9 	bmi.w	80242b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802411e:	4561      	cmp	r1, ip
 8024120:	f2c0 80c6 	blt.w	80242b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024124:	3301      	adds	r3, #1
 8024126:	f100 80c3 	bmi.w	80242b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802412a:	429a      	cmp	r2, r3
 802412c:	f2c0 80c0 	blt.w	80242b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024130:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024134:	4647      	mov	r7, r8
 8024136:	f1bb 0f00 	cmp.w	fp, #0
 802413a:	f340 80e3 	ble.w	8024304 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802413e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024140:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024144:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024146:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802414a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802414e:	ea5f 422a 	movs.w	r2, sl, asr #16
 8024152:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024156:	689b      	ldr	r3, [r3, #8]
 8024158:	f100 8121 	bmi.w	802439e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802415c:	f103 39ff 	add.w	r9, r3, #4294967295
 8024160:	454a      	cmp	r2, r9
 8024162:	f280 811c 	bge.w	802439e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024166:	f1bc 0f00 	cmp.w	ip, #0
 802416a:	f2c0 8118 	blt.w	802439e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802416e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024172:	45cc      	cmp	ip, r9
 8024174:	f280 8113 	bge.w	802439e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024178:	b21b      	sxth	r3, r3
 802417a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802417c:	fb0c 2203 	mla	r2, ip, r3, r2
 8024180:	eb04 0902 	add.w	r9, r4, r2
 8024184:	5ca2      	ldrb	r2, [r4, r2]
 8024186:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802418a:	2800      	cmp	r0, #0
 802418c:	f000 80fe 	beq.w	802438c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8024190:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024194:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024198:	9211      	str	r2, [sp, #68]	; 0x44
 802419a:	b151      	cbz	r1, 80241b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802419c:	eb09 0203 	add.w	r2, r9, r3
 80241a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80241a4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80241a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80241aa:	7853      	ldrb	r3, [r2, #1]
 80241ac:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80241b0:	9312      	str	r3, [sp, #72]	; 0x48
 80241b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80241b4:	fb10 f201 	smulbb	r2, r0, r1
 80241b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80241ba:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80241be:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80241c2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80241c6:	10d2      	asrs	r2, r2, #3
 80241c8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80241cc:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80241d0:	ea4c 0c03 	orr.w	ip, ip, r3
 80241d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80241d6:	041b      	lsls	r3, r3, #16
 80241d8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80241dc:	4323      	orrs	r3, r4
 80241de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80241e0:	4353      	muls	r3, r2
 80241e2:	fb09 330c 	mla	r3, r9, ip, r3
 80241e6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80241ea:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80241ee:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80241f2:	ea4c 0e0e 	orr.w	lr, ip, lr
 80241f6:	f1c1 0c10 	rsb	ip, r1, #16
 80241fa:	ebac 0c00 	sub.w	ip, ip, r0
 80241fe:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024202:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024206:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802420a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802420c:	0418      	lsls	r0, r3, #16
 802420e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024212:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024216:	4318      	orrs	r0, r3
 8024218:	fb02 c200 	mla	r2, r2, r0, ip
 802421c:	8838      	ldrh	r0, [r7, #0]
 802421e:	0d53      	lsrs	r3, r2, #21
 8024220:	0952      	lsrs	r2, r2, #5
 8024222:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024226:	1201      	asrs	r1, r0, #8
 8024228:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802422c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024230:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024234:	00c0      	lsls	r0, r0, #3
 8024236:	431a      	orrs	r2, r3
 8024238:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802423c:	fb11 f104 	smulbb	r1, r1, r4
 8024240:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024244:	b292      	uxth	r2, r2
 8024246:	fb1e fe04 	smulbb	lr, lr, r4
 802424a:	b2c0      	uxtb	r0, r0
 802424c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024250:	fb10 f004 	smulbb	r0, r0, r4
 8024254:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024258:	fb0c 1c03 	mla	ip, ip, r3, r1
 802425c:	10d1      	asrs	r1, r2, #3
 802425e:	00d2      	lsls	r2, r2, #3
 8024260:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024264:	fa1f fc8c 	uxth.w	ip, ip
 8024268:	b2d2      	uxtb	r2, r2
 802426a:	fb01 e103 	mla	r1, r1, r3, lr
 802426e:	fb02 0303 	mla	r3, r2, r3, r0
 8024272:	b289      	uxth	r1, r1
 8024274:	b29a      	uxth	r2, r3
 8024276:	f10c 0301 	add.w	r3, ip, #1
 802427a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802427e:	1c53      	adds	r3, r2, #1
 8024280:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024284:	1c4a      	adds	r2, r1, #1
 8024286:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802428a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802428e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024292:	0949      	lsrs	r1, r1, #5
 8024294:	ea43 030c 	orr.w	r3, r3, ip
 8024298:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802429c:	430b      	orrs	r3, r1
 802429e:	803b      	strh	r3, [r7, #0]
 80242a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80242a2:	3702      	adds	r7, #2
 80242a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80242a8:	449a      	add	sl, r3
 80242aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80242ac:	441d      	add	r5, r3
 80242ae:	e742      	b.n	8024136 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80242b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80242b2:	f108 0802 	add.w	r8, r8, #2
 80242b6:	449a      	add	sl, r3
 80242b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80242ba:	441d      	add	r5, r3
 80242bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242be:	3b01      	subs	r3, #1
 80242c0:	9309      	str	r3, [sp, #36]	; 0x24
 80242c2:	e718      	b.n	80240f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80242c4:	d023      	beq.n	802430e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80242c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242c8:	9825      	ldr	r0, [sp, #148]	; 0x94
 80242ca:	3b01      	subs	r3, #1
 80242cc:	fb00 a003 	mla	r0, r0, r3, sl
 80242d0:	1400      	asrs	r0, r0, #16
 80242d2:	f53f af2d 	bmi.w	8024130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80242d6:	3901      	subs	r1, #1
 80242d8:	4288      	cmp	r0, r1
 80242da:	f6bf af29 	bge.w	8024130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80242de:	9926      	ldr	r1, [sp, #152]	; 0x98
 80242e0:	fb01 5303 	mla	r3, r1, r3, r5
 80242e4:	141b      	asrs	r3, r3, #16
 80242e6:	f53f af23 	bmi.w	8024130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80242ea:	3a01      	subs	r2, #1
 80242ec:	4293      	cmp	r3, r2
 80242ee:	f6bf af1f 	bge.w	8024130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80242f2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80242f6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80242fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80242fe:	f1be 0f00 	cmp.w	lr, #0
 8024302:	dc6c      	bgt.n	80243de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024306:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802430a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802430e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024310:	2b00      	cmp	r3, #0
 8024312:	f340 810e 	ble.w	8024532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802431a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802431c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024320:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024324:	eef0 6a62 	vmov.f32	s13, s5
 8024328:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802432c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024330:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024334:	ee16 aa90 	vmov	sl, s13
 8024338:	eef0 6a43 	vmov.f32	s13, s6
 802433c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024340:	ee16 5a90 	vmov	r5, s13
 8024344:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024348:	ee61 7a27 	vmul.f32	s15, s2, s15
 802434c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024350:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024354:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024358:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802435c:	ee12 2a90 	vmov	r2, s5
 8024360:	eef0 2a47 	vmov.f32	s5, s14
 8024364:	fb92 f3f3 	sdiv	r3, r2, r3
 8024368:	ee13 2a10 	vmov	r2, s6
 802436c:	9325      	str	r3, [sp, #148]	; 0x94
 802436e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024370:	eeb0 3a67 	vmov.f32	s6, s15
 8024374:	fb92 f3f3 	sdiv	r3, r2, r3
 8024378:	9326      	str	r3, [sp, #152]	; 0x98
 802437a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802437c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802437e:	3b01      	subs	r3, #1
 8024380:	930c      	str	r3, [sp, #48]	; 0x30
 8024382:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024384:	bf08      	it	eq
 8024386:	4613      	moveq	r3, r2
 8024388:	9309      	str	r3, [sp, #36]	; 0x24
 802438a:	e6a6      	b.n	80240da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802438c:	2900      	cmp	r1, #0
 802438e:	f43f af10 	beq.w	80241b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024392:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024396:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802439a:	930f      	str	r3, [sp, #60]	; 0x3c
 802439c:	e709      	b.n	80241b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802439e:	f112 0901 	adds.w	r9, r2, #1
 80243a2:	f53f af7d 	bmi.w	80242a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80243a6:	454b      	cmp	r3, r9
 80243a8:	f6ff af7a 	blt.w	80242a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80243ac:	f11c 0901 	adds.w	r9, ip, #1
 80243b0:	f53f af76 	bmi.w	80242a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80243b4:	45ce      	cmp	lr, r9
 80243b6:	f6ff af73 	blt.w	80242a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80243ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80243bc:	b21b      	sxth	r3, r3
 80243be:	9202      	str	r2, [sp, #8]
 80243c0:	fa0f f28e 	sxth.w	r2, lr
 80243c4:	9300      	str	r3, [sp, #0]
 80243c6:	4633      	mov	r3, r6
 80243c8:	9201      	str	r2, [sp, #4]
 80243ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80243cc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80243d0:	e9cd c003 	strd	ip, r0, [sp, #12]
 80243d4:	4639      	mov	r1, r7
 80243d6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80243d8:	f7ff fd8e 	bl	8023ef8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80243dc:	e760      	b.n	80242a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80243de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80243e0:	ea4f 422a 	mov.w	r2, sl, asr #16
 80243e4:	1429      	asrs	r1, r5, #16
 80243e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80243e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80243ec:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80243f0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80243f4:	fb03 2101 	mla	r1, r3, r1, r2
 80243f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80243fa:	440a      	add	r2, r1
 80243fc:	5c61      	ldrb	r1, [r4, r1]
 80243fe:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024402:	f1bc 0f00 	cmp.w	ip, #0
 8024406:	f000 808c 	beq.w	8024522 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802440a:	7857      	ldrb	r7, [r2, #1]
 802440c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024410:	9413      	str	r4, [sp, #76]	; 0x4c
 8024412:	b140      	cbz	r0, 8024426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024414:	18d7      	adds	r7, r2, r3
 8024416:	5cd3      	ldrb	r3, [r2, r3]
 8024418:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802441c:	9310      	str	r3, [sp, #64]	; 0x40
 802441e:	787b      	ldrb	r3, [r7, #1]
 8024420:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024424:	9314      	str	r3, [sp, #80]	; 0x50
 8024426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024428:	fb1c f200 	smulbb	r2, ip, r0
 802442c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802442e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024432:	041f      	lsls	r7, r3, #16
 8024434:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024438:	10d2      	asrs	r2, r2, #3
 802443a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 802443e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8024442:	431f      	orrs	r7, r3
 8024444:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024448:	9317      	str	r3, [sp, #92]	; 0x5c
 802444a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802444c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802444e:	041b      	lsls	r3, r3, #16
 8024450:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024454:	ea43 030b 	orr.w	r3, r3, fp
 8024458:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802445c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024460:	4353      	muls	r3, r2
 8024462:	fb04 3707 	mla	r7, r4, r7, r3
 8024466:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802446a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802446c:	ea43 0b01 	orr.w	fp, r3, r1
 8024470:	f1c0 0110 	rsb	r1, r0, #16
 8024474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024476:	eba1 0c0c 	sub.w	ip, r1, ip
 802447a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802447e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024482:	fb0c 770b 	mla	r7, ip, fp, r7
 8024486:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802448a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802448e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024492:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024496:	fb02 770c 	mla	r7, r2, ip, r7
 802449a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802449c:	0d79      	lsrs	r1, r7, #21
 802449e:	8812      	ldrh	r2, [r2, #0]
 80244a0:	097f      	lsrs	r7, r7, #5
 80244a2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80244a6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80244aa:	430f      	orrs	r7, r1
 80244ac:	1211      	asrs	r1, r2, #8
 80244ae:	b2bb      	uxth	r3, r7
 80244b0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80244b4:	10d7      	asrs	r7, r2, #3
 80244b6:	fb11 f104 	smulbb	r1, r1, r4
 80244ba:	1218      	asrs	r0, r3, #8
 80244bc:	00d2      	lsls	r2, r2, #3
 80244be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80244c2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80244c6:	fb17 f704 	smulbb	r7, r7, r4
 80244ca:	b2d2      	uxtb	r2, r2
 80244cc:	fb00 1009 	mla	r0, r0, r9, r1
 80244d0:	10d9      	asrs	r1, r3, #3
 80244d2:	fb12 f204 	smulbb	r2, r2, r4
 80244d6:	00db      	lsls	r3, r3, #3
 80244d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80244dc:	b280      	uxth	r0, r0
 80244de:	b2db      	uxtb	r3, r3
 80244e0:	fb01 7109 	mla	r1, r1, r9, r7
 80244e4:	fb03 2309 	mla	r3, r3, r9, r2
 80244e8:	1c42      	adds	r2, r0, #1
 80244ea:	b289      	uxth	r1, r1
 80244ec:	b29b      	uxth	r3, r3
 80244ee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80244f2:	1c4f      	adds	r7, r1, #1
 80244f4:	1c5a      	adds	r2, r3, #1
 80244f6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80244fa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80244fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024504:	0949      	lsrs	r1, r1, #5
 8024506:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802450a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802450e:	4310      	orrs	r0, r2
 8024510:	4308      	orrs	r0, r1
 8024512:	f823 0b02 	strh.w	r0, [r3], #2
 8024516:	930e      	str	r3, [sp, #56]	; 0x38
 8024518:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802451a:	449a      	add	sl, r3
 802451c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802451e:	441d      	add	r5, r3
 8024520:	e6ed      	b.n	80242fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8024522:	2800      	cmp	r0, #0
 8024524:	f43f af7f 	beq.w	8024426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024528:	5cd3      	ldrb	r3, [r2, r3]
 802452a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802452e:	9310      	str	r3, [sp, #64]	; 0x40
 8024530:	e779      	b.n	8024426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024532:	b019      	add	sp, #100	; 0x64
 8024534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024538 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802453c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8024540:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024544:	f1b8 0f00 	cmp.w	r8, #0
 8024548:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 802454c:	fb08 470e 	mla	r7, r8, lr, r4
 8024550:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8024554:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8024558:	eb02 0907 	add.w	r9, r2, r7
 802455c:	8808      	ldrh	r0, [r1, #0]
 802455e:	db67      	blt.n	8024630 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024560:	45c2      	cmp	sl, r8
 8024562:	dd65      	ble.n	8024630 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024564:	2c00      	cmp	r4, #0
 8024566:	db61      	blt.n	802462c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024568:	45a6      	cmp	lr, r4
 802456a:	dd5f      	ble.n	802462c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802456c:	5dd2      	ldrb	r2, [r2, r7]
 802456e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024572:	1c62      	adds	r2, r4, #1
 8024574:	d45f      	bmi.n	8024636 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8024576:	4596      	cmp	lr, r2
 8024578:	dd5d      	ble.n	8024636 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802457a:	2d00      	cmp	r5, #0
 802457c:	d05b      	beq.n	8024636 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802457e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024582:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024586:	f118 0801 	adds.w	r8, r8, #1
 802458a:	d458      	bmi.n	802463e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802458c:	45c2      	cmp	sl, r8
 802458e:	dd56      	ble.n	802463e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024590:	2e00      	cmp	r6, #0
 8024592:	d054      	beq.n	802463e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024594:	2c00      	cmp	r4, #0
 8024596:	db50      	blt.n	802463a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8024598:	45a6      	cmp	lr, r4
 802459a:	dd4e      	ble.n	802463a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802459c:	f819 200e 	ldrb.w	r2, [r9, lr]
 80245a0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80245a4:	3401      	adds	r4, #1
 80245a6:	d407      	bmi.n	80245b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80245a8:	45a6      	cmp	lr, r4
 80245aa:	dd05      	ble.n	80245b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80245ac:	b125      	cbz	r5, 80245b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80245ae:	44ce      	add	lr, r9
 80245b0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80245b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80245b8:	fb15 f406 	smulbb	r4, r5, r6
 80245bc:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80245c0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80245c4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80245c8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80245cc:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80245d0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80245d4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80245d8:	ea43 0c0c 	orr.w	ip, r3, ip
 80245dc:	f1c6 0310 	rsb	r3, r6, #16
 80245e0:	ea4e 0707 	orr.w	r7, lr, r7
 80245e4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80245e8:	1b5b      	subs	r3, r3, r5
 80245ea:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80245ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80245f2:	437d      	muls	r5, r7
 80245f4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80245f8:	0403      	lsls	r3, r0, #16
 80245fa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80245fe:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024602:	4318      	orrs	r0, r3
 8024604:	0413      	lsls	r3, r2, #16
 8024606:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802460a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802460e:	fb04 c000 	mla	r0, r4, r0, ip
 8024612:	4313      	orrs	r3, r2
 8024614:	fb06 0003 	mla	r0, r6, r3, r0
 8024618:	0d43      	lsrs	r3, r0, #21
 802461a:	0940      	lsrs	r0, r0, #5
 802461c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024620:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024624:	4318      	orrs	r0, r3
 8024626:	8008      	strh	r0, [r1, #0]
 8024628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802462c:	4684      	mov	ip, r0
 802462e:	e7a0      	b.n	8024572 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8024630:	4607      	mov	r7, r0
 8024632:	4684      	mov	ip, r0
 8024634:	e7a7      	b.n	8024586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8024636:	4607      	mov	r7, r0
 8024638:	e7a5      	b.n	8024586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802463a:	4602      	mov	r2, r0
 802463c:	e7b2      	b.n	80245a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802463e:	4602      	mov	r2, r0
 8024640:	e7ba      	b.n	80245b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08024642 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024646:	b093      	sub	sp, #76	; 0x4c
 8024648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802464c:	920f      	str	r2, [sp, #60]	; 0x3c
 802464e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024650:	9010      	str	r0, [sp, #64]	; 0x40
 8024652:	9108      	str	r1, [sp, #32]
 8024654:	6850      	ldr	r0, [r2, #4]
 8024656:	9306      	str	r3, [sp, #24]
 8024658:	6812      	ldr	r2, [r2, #0]
 802465a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802465e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024662:	fb00 1303 	mla	r3, r0, r3, r1
 8024666:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802466a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802466c:	681b      	ldr	r3, [r3, #0]
 802466e:	9307      	str	r3, [sp, #28]
 8024670:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024672:	685f      	ldr	r7, [r3, #4]
 8024674:	3704      	adds	r7, #4
 8024676:	9b08      	ldr	r3, [sp, #32]
 8024678:	2b00      	cmp	r3, #0
 802467a:	dc03      	bgt.n	8024684 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802467c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802467e:	2b00      	cmp	r3, #0
 8024680:	f340 81b2 	ble.w	80249e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024684:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024686:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802468a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802468e:	1e48      	subs	r0, r1, #1
 8024690:	f102 3cff 	add.w	ip, r2, #4294967295
 8024694:	9b06      	ldr	r3, [sp, #24]
 8024696:	2b00      	cmp	r3, #0
 8024698:	f340 80a9 	ble.w	80247ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802469c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80246a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80246a4:	d406      	bmi.n	80246b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80246a6:	4586      	cmp	lr, r0
 80246a8:	da04      	bge.n	80246b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80246aa:	2b00      	cmp	r3, #0
 80246ac:	db02      	blt.n	80246b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80246ae:	4563      	cmp	r3, ip
 80246b0:	f2c0 809e 	blt.w	80247f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80246b4:	f11e 0e01 	adds.w	lr, lr, #1
 80246b8:	f100 808f 	bmi.w	80247da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80246bc:	4571      	cmp	r1, lr
 80246be:	f2c0 808c 	blt.w	80247da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80246c2:	3301      	adds	r3, #1
 80246c4:	f100 8089 	bmi.w	80247da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80246c8:	429a      	cmp	r2, r3
 80246ca:	f2c0 8086 	blt.w	80247da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80246ce:	f8dd b018 	ldr.w	fp, [sp, #24]
 80246d2:	46c8      	mov	r8, r9
 80246d4:	f1bb 0f00 	cmp.w	fp, #0
 80246d8:	f340 80a6 	ble.w	8024828 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80246dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80246de:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80246e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80246e4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80246e8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80246ec:	1422      	asrs	r2, r4, #16
 80246ee:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80246f2:	689b      	ldr	r3, [r3, #8]
 80246f4:	f100 80e3 	bmi.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80246f8:	f103 3aff 	add.w	sl, r3, #4294967295
 80246fc:	4552      	cmp	r2, sl
 80246fe:	f280 80de 	bge.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024702:	f1bc 0f00 	cmp.w	ip, #0
 8024706:	f2c0 80da 	blt.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802470a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802470e:	45d4      	cmp	ip, sl
 8024710:	f280 80d5 	bge.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024714:	b21b      	sxth	r3, r3
 8024716:	9d07      	ldr	r5, [sp, #28]
 8024718:	fb0c 2203 	mla	r2, ip, r3, r2
 802471c:	eb05 0a02 	add.w	sl, r5, r2
 8024720:	5caa      	ldrb	r2, [r5, r2]
 8024722:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024726:	2800      	cmp	r0, #0
 8024728:	f000 80c0 	beq.w	80248ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802472c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024730:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024734:	920b      	str	r2, [sp, #44]	; 0x2c
 8024736:	b151      	cbz	r1, 802474e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024738:	eb0a 0203 	add.w	r2, sl, r3
 802473c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024740:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024744:	9309      	str	r3, [sp, #36]	; 0x24
 8024746:	7853      	ldrb	r3, [r2, #1]
 8024748:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802474c:	930c      	str	r3, [sp, #48]	; 0x30
 802474e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024750:	fb10 f201 	smulbb	r2, r0, r1
 8024754:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024756:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802475a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802475e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024762:	10d2      	asrs	r2, r2, #3
 8024764:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024768:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802476c:	ea4c 0c03 	orr.w	ip, ip, r3
 8024770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024772:	041b      	lsls	r3, r3, #16
 8024774:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024778:	432b      	orrs	r3, r5
 802477a:	4353      	muls	r3, r2
 802477c:	fb0a 330c 	mla	r3, sl, ip, r3
 8024780:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024784:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024788:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802478c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024790:	f1c1 0c10 	rsb	ip, r1, #16
 8024794:	ebac 0c00 	sub.w	ip, ip, r0
 8024798:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802479c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80247a0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80247a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247a6:	0418      	lsls	r0, r3, #16
 80247a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80247ac:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80247b0:	4318      	orrs	r0, r3
 80247b2:	fb02 c200 	mla	r2, r2, r0, ip
 80247b6:	0d53      	lsrs	r3, r2, #21
 80247b8:	0952      	lsrs	r2, r2, #5
 80247ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80247be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80247c2:	431a      	orrs	r2, r3
 80247c4:	f8a8 2000 	strh.w	r2, [r8]
 80247c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80247ca:	f108 0802 	add.w	r8, r8, #2
 80247ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80247d2:	441c      	add	r4, r3
 80247d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80247d6:	441e      	add	r6, r3
 80247d8:	e77c      	b.n	80246d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80247da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80247dc:	f109 0902 	add.w	r9, r9, #2
 80247e0:	441c      	add	r4, r3
 80247e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80247e4:	441e      	add	r6, r3
 80247e6:	9b06      	ldr	r3, [sp, #24]
 80247e8:	3b01      	subs	r3, #1
 80247ea:	9306      	str	r3, [sp, #24]
 80247ec:	e752      	b.n	8024694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80247ee:	d020      	beq.n	8024832 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80247f0:	9b06      	ldr	r3, [sp, #24]
 80247f2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80247f4:	3b01      	subs	r3, #1
 80247f6:	fb00 4003 	mla	r0, r0, r3, r4
 80247fa:	1400      	asrs	r0, r0, #16
 80247fc:	f53f af67 	bmi.w	80246ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024800:	3901      	subs	r1, #1
 8024802:	4288      	cmp	r0, r1
 8024804:	f6bf af63 	bge.w	80246ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024808:	9920      	ldr	r1, [sp, #128]	; 0x80
 802480a:	fb01 6303 	mla	r3, r1, r3, r6
 802480e:	141b      	asrs	r3, r3, #16
 8024810:	f53f af5d 	bmi.w	80246ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024814:	3a01      	subs	r2, #1
 8024816:	4293      	cmp	r3, r2
 8024818:	f6bf af59 	bge.w	80246ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802481c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024820:	46ca      	mov	sl, r9
 8024822:	f1b8 0f00 	cmp.w	r8, #0
 8024826:	dc67      	bgt.n	80248f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8024828:	9b06      	ldr	r3, [sp, #24]
 802482a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802482e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024832:	9b08      	ldr	r3, [sp, #32]
 8024834:	2b00      	cmp	r3, #0
 8024836:	f340 80d7 	ble.w	80249e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802483a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802483e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024840:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024844:	eeb0 6a62 	vmov.f32	s12, s5
 8024848:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802484c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024850:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024854:	ee16 4a10 	vmov	r4, s12
 8024858:	eeb0 6a43 	vmov.f32	s12, s6
 802485c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024860:	ee16 6a10 	vmov	r6, s12
 8024864:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024868:	ee61 7a27 	vmul.f32	s15, s2, s15
 802486c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024870:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024874:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024878:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802487c:	ee12 2a90 	vmov	r2, s5
 8024880:	eef0 2a47 	vmov.f32	s5, s14
 8024884:	fb92 f3f3 	sdiv	r3, r2, r3
 8024888:	ee13 2a10 	vmov	r2, s6
 802488c:	931f      	str	r3, [sp, #124]	; 0x7c
 802488e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024890:	eeb0 3a67 	vmov.f32	s6, s15
 8024894:	fb92 f3f3 	sdiv	r3, r2, r3
 8024898:	9320      	str	r3, [sp, #128]	; 0x80
 802489a:	9b08      	ldr	r3, [sp, #32]
 802489c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802489e:	3b01      	subs	r3, #1
 80248a0:	9308      	str	r3, [sp, #32]
 80248a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80248a4:	bf08      	it	eq
 80248a6:	4613      	moveq	r3, r2
 80248a8:	9306      	str	r3, [sp, #24]
 80248aa:	e6e4      	b.n	8024676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80248ac:	2900      	cmp	r1, #0
 80248ae:	f43f af4e 	beq.w	802474e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80248b2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80248b6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80248ba:	9309      	str	r3, [sp, #36]	; 0x24
 80248bc:	e747      	b.n	802474e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80248be:	f112 0a01 	adds.w	sl, r2, #1
 80248c2:	d481      	bmi.n	80247c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80248c4:	4553      	cmp	r3, sl
 80248c6:	f6ff af7f 	blt.w	80247c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80248ca:	f11c 0a01 	adds.w	sl, ip, #1
 80248ce:	f53f af7b 	bmi.w	80247c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80248d2:	45d6      	cmp	lr, sl
 80248d4:	f6ff af78 	blt.w	80247c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80248d8:	b21b      	sxth	r3, r3
 80248da:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80248de:	fa0f f28e 	sxth.w	r2, lr
 80248e2:	9300      	str	r3, [sp, #0]
 80248e4:	463b      	mov	r3, r7
 80248e6:	9201      	str	r2, [sp, #4]
 80248e8:	9a07      	ldr	r2, [sp, #28]
 80248ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80248ee:	4641      	mov	r1, r8
 80248f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80248f2:	f7ff fe21 	bl	8024538 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80248f6:	e767      	b.n	80247c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80248f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80248fa:	1422      	asrs	r2, r4, #16
 80248fc:	1431      	asrs	r1, r6, #16
 80248fe:	9d07      	ldr	r5, [sp, #28]
 8024900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024904:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8024908:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802490c:	fb03 2101 	mla	r1, r3, r1, r2
 8024910:	9a07      	ldr	r2, [sp, #28]
 8024912:	440a      	add	r2, r1
 8024914:	5c69      	ldrb	r1, [r5, r1]
 8024916:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802491a:	f1be 0f00 	cmp.w	lr, #0
 802491e:	d05c      	beq.n	80249da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024920:	f892 c001 	ldrb.w	ip, [r2, #1]
 8024924:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8024928:	950d      	str	r5, [sp, #52]	; 0x34
 802492a:	b150      	cbz	r0, 8024942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802492c:	eb02 0c03 	add.w	ip, r2, r3
 8024930:	5cd3      	ldrb	r3, [r2, r3]
 8024932:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024936:	930a      	str	r3, [sp, #40]	; 0x28
 8024938:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802493c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024940:	930e      	str	r3, [sp, #56]	; 0x38
 8024942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024944:	fb1e f200 	smulbb	r2, lr, r0
 8024948:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802494a:	f108 38ff 	add.w	r8, r8, #4294967295
 802494e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024952:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024956:	10d2      	asrs	r2, r2, #3
 8024958:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802495c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024960:	ea4c 0c03 	orr.w	ip, ip, r3
 8024964:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8024968:	9311      	str	r3, [sp, #68]	; 0x44
 802496a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802496c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802496e:	041b      	lsls	r3, r3, #16
 8024970:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024974:	ea43 030b 	orr.w	r3, r3, fp
 8024978:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802497c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024980:	4353      	muls	r3, r2
 8024982:	fb05 3c0c 	mla	ip, r5, ip, r3
 8024986:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802498a:	ea43 0b01 	orr.w	fp, r3, r1
 802498e:	f1c0 0110 	rsb	r1, r0, #16
 8024992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024994:	eba1 0e0e 	sub.w	lr, r1, lr
 8024998:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802499c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80249a0:	fb0e cc0b 	mla	ip, lr, fp, ip
 80249a4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80249a8:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80249ac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80249b0:	ea4b 0e0e 	orr.w	lr, fp, lr
 80249b4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80249b8:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80249bc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80249c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80249c4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80249c8:	ea43 0c0c 	orr.w	ip, r3, ip
 80249cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80249ce:	441c      	add	r4, r3
 80249d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80249d2:	f82a cb02 	strh.w	ip, [sl], #2
 80249d6:	441e      	add	r6, r3
 80249d8:	e723      	b.n	8024822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80249da:	2800      	cmp	r0, #0
 80249dc:	d0b1      	beq.n	8024942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80249de:	5cd3      	ldrb	r3, [r2, r3]
 80249e0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80249e4:	930a      	str	r3, [sp, #40]	; 0x28
 80249e6:	e7ac      	b.n	8024942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80249e8:	b013      	add	sp, #76	; 0x4c
 80249ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080249ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80249ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249f2:	880d      	ldrh	r5, [r1, #0]
 80249f4:	b087      	sub	sp, #28
 80249f6:	10ef      	asrs	r7, r5, #3
 80249f8:	9103      	str	r1, [sp, #12]
 80249fa:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80249fe:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8024a02:	00ed      	lsls	r5, r5, #3
 8024a04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024a08:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8024a0c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024a10:	b2ed      	uxtb	r5, r5
 8024a12:	9701      	str	r7, [sp, #4]
 8024a14:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8024a18:	9502      	str	r5, [sp, #8]
 8024a1a:	9d01      	ldr	r5, [sp, #4]
 8024a1c:	9902      	ldr	r1, [sp, #8]
 8024a1e:	022d      	lsls	r5, r5, #8
 8024a20:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8024a24:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8024a28:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8024a2c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8024a30:	430d      	orrs	r5, r1
 8024a32:	fb06 0709 	mla	r7, r6, r9, r0
 8024a36:	2e00      	cmp	r6, #0
 8024a38:	9505      	str	r5, [sp, #20]
 8024a3a:	eb02 0c07 	add.w	ip, r2, r7
 8024a3e:	f2c0 80b6 	blt.w	8024bae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024a42:	45b3      	cmp	fp, r6
 8024a44:	f340 80b3 	ble.w	8024bae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024a48:	2800      	cmp	r0, #0
 8024a4a:	f2c0 80ae 	blt.w	8024baa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024a4e:	4581      	cmp	r9, r0
 8024a50:	f340 80ab 	ble.w	8024baa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024a54:	5dd7      	ldrb	r7, [r2, r7]
 8024a56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024a5a:	441f      	add	r7, r3
 8024a5c:	1c42      	adds	r2, r0, #1
 8024a5e:	f100 80a9 	bmi.w	8024bb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024a62:	4591      	cmp	r9, r2
 8024a64:	f340 80a6 	ble.w	8024bb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024a68:	2c00      	cmp	r4, #0
 8024a6a:	f000 80a3 	beq.w	8024bb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024a6e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024a72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024a76:	441d      	add	r5, r3
 8024a78:	3601      	adds	r6, #1
 8024a7a:	f100 809f 	bmi.w	8024bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024a7e:	45b3      	cmp	fp, r6
 8024a80:	f340 809c 	ble.w	8024bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024a84:	f1be 0f00 	cmp.w	lr, #0
 8024a88:	f000 8098 	beq.w	8024bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024a8c:	2800      	cmp	r0, #0
 8024a8e:	f2c0 8093 	blt.w	8024bb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024a92:	4581      	cmp	r9, r0
 8024a94:	f340 8090 	ble.w	8024bb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024a98:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8024a9c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024aa0:	441e      	add	r6, r3
 8024aa2:	3001      	adds	r0, #1
 8024aa4:	f100 808d 	bmi.w	8024bc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024aa8:	4581      	cmp	r9, r0
 8024aaa:	f340 808a 	ble.w	8024bc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024aae:	2c00      	cmp	r4, #0
 8024ab0:	f000 8087 	beq.w	8024bc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024ab4:	44e1      	add	r9, ip
 8024ab6:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024aba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024abe:	4413      	add	r3, r2
 8024ac0:	b2a4      	uxth	r4, r4
 8024ac2:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024ac6:	fa1f fe8e 	uxth.w	lr, lr
 8024aca:	9901      	ldr	r1, [sp, #4]
 8024acc:	fb04 fb0e 	mul.w	fp, r4, lr
 8024ad0:	0124      	lsls	r4, r4, #4
 8024ad2:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8024ad6:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8024ada:	eba4 040b 	sub.w	r4, r4, fp
 8024ade:	fa1f f08e 	uxth.w	r0, lr
 8024ae2:	b2a2      	uxth	r2, r4
 8024ae4:	78ac      	ldrb	r4, [r5, #2]
 8024ae6:	eba9 0900 	sub.w	r9, r9, r0
 8024aea:	fa1f fe88 	uxth.w	lr, r8
 8024aee:	4354      	muls	r4, r2
 8024af0:	ea6f 0808 	mvn.w	r8, r8
 8024af4:	fa1f f989 	uxth.w	r9, r9
 8024af8:	fa5f f888 	uxtb.w	r8, r8
 8024afc:	fb09 440c 	mla	r4, r9, ip, r4
 8024b00:	f896 c002 	ldrb.w	ip, [r6, #2]
 8024b04:	fb1a fa08 	smulbb	sl, sl, r8
 8024b08:	fb00 440c 	mla	r4, r0, ip, r4
 8024b0c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8024b10:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024b14:	787c      	ldrb	r4, [r7, #1]
 8024b16:	783f      	ldrb	r7, [r7, #0]
 8024b18:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024b1c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024b20:	f895 a001 	ldrb.w	sl, [r5, #1]
 8024b24:	782d      	ldrb	r5, [r5, #0]
 8024b26:	fb02 fa0a 	mul.w	sl, r2, sl
 8024b2a:	fa1f fc8c 	uxth.w	ip, ip
 8024b2e:	436a      	muls	r2, r5
 8024b30:	7835      	ldrb	r5, [r6, #0]
 8024b32:	fb09 aa04 	mla	sl, r9, r4, sl
 8024b36:	7874      	ldrb	r4, [r6, #1]
 8024b38:	fb09 2207 	mla	r2, r9, r7, r2
 8024b3c:	fb00 aa04 	mla	sl, r0, r4, sl
 8024b40:	785c      	ldrb	r4, [r3, #1]
 8024b42:	fb00 2005 	mla	r0, r0, r5, r2
 8024b46:	781b      	ldrb	r3, [r3, #0]
 8024b48:	fb0b a404 	mla	r4, fp, r4, sl
 8024b4c:	fb11 fa08 	smulbb	sl, r1, r8
 8024b50:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024b54:	9b02      	ldr	r3, [sp, #8]
 8024b56:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024b5a:	fb13 f808 	smulbb	r8, r3, r8
 8024b5e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024b62:	fb04 a40e 	mla	r4, r4, lr, sl
 8024b66:	f10c 0301 	add.w	r3, ip, #1
 8024b6a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8024b6e:	b2a4      	uxth	r4, r4
 8024b70:	fa1f fe8e 	uxth.w	lr, lr
 8024b74:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024b78:	f104 0a01 	add.w	sl, r4, #1
 8024b7c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8024b80:	f10e 0c01 	add.w	ip, lr, #1
 8024b84:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024b88:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024b8c:	0964      	lsrs	r4, r4, #5
 8024b8e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024b92:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8024b9a:	9b03      	ldr	r3, [sp, #12]
 8024b9c:	ea4c 0c04 	orr.w	ip, ip, r4
 8024ba0:	f8a3 c000 	strh.w	ip, [r3]
 8024ba4:	b007      	add	sp, #28
 8024ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024baa:	af05      	add	r7, sp, #20
 8024bac:	e756      	b.n	8024a5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8024bae:	ad05      	add	r5, sp, #20
 8024bb0:	462f      	mov	r7, r5
 8024bb2:	e761      	b.n	8024a78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024bb4:	ad05      	add	r5, sp, #20
 8024bb6:	e75f      	b.n	8024a78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024bb8:	ae05      	add	r6, sp, #20
 8024bba:	e772      	b.n	8024aa2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8024bbc:	ab05      	add	r3, sp, #20
 8024bbe:	461e      	mov	r6, r3
 8024bc0:	e77e      	b.n	8024ac0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8024bc2:	ab05      	add	r3, sp, #20
 8024bc4:	e77c      	b.n	8024ac0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08024bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bca:	b095      	sub	sp, #84	; 0x54
 8024bcc:	9212      	str	r2, [sp, #72]	; 0x48
 8024bce:	9309      	str	r3, [sp, #36]	; 0x24
 8024bd0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024bd2:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8024bd6:	9013      	str	r0, [sp, #76]	; 0x4c
 8024bd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8024bda:	6850      	ldr	r0, [r2, #4]
 8024bdc:	910e      	str	r1, [sp, #56]	; 0x38
 8024bde:	6812      	ldr	r2, [r2, #0]
 8024be0:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8024be4:	fb00 1303 	mla	r3, r0, r3, r1
 8024be8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024bec:	930a      	str	r3, [sp, #40]	; 0x28
 8024bee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024bf0:	681b      	ldr	r3, [r3, #0]
 8024bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8024bf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024bf6:	685c      	ldr	r4, [r3, #4]
 8024bf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024bfa:	3404      	adds	r4, #4
 8024bfc:	43db      	mvns	r3, r3
 8024bfe:	b2db      	uxtb	r3, r3
 8024c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024c04:	2b00      	cmp	r3, #0
 8024c06:	dc03      	bgt.n	8024c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024c0a:	2b00      	cmp	r3, #0
 8024c0c:	f340 8255 	ble.w	80250ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024c10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024c12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c16:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c1a:	1e48      	subs	r0, r1, #1
 8024c1c:	1e55      	subs	r5, r2, #1
 8024c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c20:	2b00      	cmp	r3, #0
 8024c22:	f340 80f9 	ble.w	8024e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8024c26:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8024c28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c2a:	1436      	asrs	r6, r6, #16
 8024c2c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024c30:	d406      	bmi.n	8024c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024c32:	4286      	cmp	r6, r0
 8024c34:	da04      	bge.n	8024c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024c36:	2b00      	cmp	r3, #0
 8024c38:	db02      	blt.n	8024c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024c3a:	42ab      	cmp	r3, r5
 8024c3c:	f2c0 80ed 	blt.w	8024e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024c40:	3601      	adds	r6, #1
 8024c42:	f100 80da 	bmi.w	8024dfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024c46:	42b1      	cmp	r1, r6
 8024c48:	f2c0 80d7 	blt.w	8024dfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024c4c:	3301      	adds	r3, #1
 8024c4e:	f100 80d4 	bmi.w	8024dfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024c52:	429a      	cmp	r2, r3
 8024c54:	f2c0 80d1 	blt.w	8024dfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c5a:	9311      	str	r3, [sp, #68]	; 0x44
 8024c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8024c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024c62:	2b00      	cmp	r3, #0
 8024c64:	f340 80fa 	ble.w	8024e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024c68:	9826      	ldr	r0, [sp, #152]	; 0x98
 8024c6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024c6e:	68c6      	ldr	r6, [r0, #12]
 8024c70:	141d      	asrs	r5, r3, #16
 8024c72:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024c74:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024c78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024c7a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024c7c:	1400      	asrs	r0, r0, #16
 8024c7e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024c82:	6892      	ldr	r2, [r2, #8]
 8024c84:	f100 813e 	bmi.w	8024f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c88:	1e57      	subs	r7, r2, #1
 8024c8a:	42b8      	cmp	r0, r7
 8024c8c:	f280 813a 	bge.w	8024f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c90:	2d00      	cmp	r5, #0
 8024c92:	f2c0 8137 	blt.w	8024f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c96:	1e77      	subs	r7, r6, #1
 8024c98:	42bd      	cmp	r5, r7
 8024c9a:	f280 8133 	bge.w	8024f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c9e:	b212      	sxth	r2, r2
 8024ca0:	fb05 0002 	mla	r0, r5, r2, r0
 8024ca4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024ca6:	f815 a000 	ldrb.w	sl, [r5, r0]
 8024caa:	182e      	adds	r6, r5, r0
 8024cac:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024cb0:	eb04 050a 	add.w	r5, r4, sl
 8024cb4:	2b00      	cmp	r3, #0
 8024cb6:	f000 8117 	beq.w	8024ee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024cba:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024cbe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024cc2:	44a4      	add	ip, r4
 8024cc4:	2900      	cmp	r1, #0
 8024cc6:	f000 8117 	beq.w	8024ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024cca:	18b0      	adds	r0, r6, r2
 8024ccc:	5cb2      	ldrb	r2, [r6, r2]
 8024cce:	7840      	ldrb	r0, [r0, #1]
 8024cd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024cd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024cd8:	4422      	add	r2, r4
 8024cda:	4420      	add	r0, r4
 8024cdc:	b29b      	uxth	r3, r3
 8024cde:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024ce2:	b289      	uxth	r1, r1
 8024ce4:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024ce8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024cea:	fb03 f901 	mul.w	r9, r3, r1
 8024cee:	011b      	lsls	r3, r3, #4
 8024cf0:	f8b6 e000 	ldrh.w	lr, [r6]
 8024cf4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024cf8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8024cfc:	eba3 0309 	sub.w	r3, r3, r9
 8024d00:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8024d04:	b289      	uxth	r1, r1
 8024d06:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024d0a:	b29b      	uxth	r3, r3
 8024d0c:	eba8 0801 	sub.w	r8, r8, r1
 8024d10:	435f      	muls	r7, r3
 8024d12:	fa1f f888 	uxth.w	r8, r8
 8024d16:	9310      	str	r3, [sp, #64]	; 0x40
 8024d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d1a:	fb08 770b 	mla	r7, r8, fp, r7
 8024d1e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024d22:	fb01 770b 	mla	r7, r1, fp, r7
 8024d26:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024d2a:	fb09 770b 	mla	r7, r9, fp, r7
 8024d2e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024d32:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024d36:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024d3a:	fb1b fb03 	smulbb	fp, fp, r3
 8024d3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024d40:	fb07 b706 	mla	r7, r7, r6, fp
 8024d44:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024d48:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024d4c:	f89c c000 	ldrb.w	ip, [ip]
 8024d50:	b2bf      	uxth	r7, r7
 8024d52:	435d      	muls	r5, r3
 8024d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d56:	fb08 550b 	mla	r5, r8, fp, r5
 8024d5a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024d5e:	fb01 550b 	mla	r5, r1, fp, r5
 8024d62:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024d66:	fb09 550b 	mla	r5, r9, fp, r5
 8024d6a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024d6e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024d72:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024d76:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024d7a:	fa5f fe8e 	uxtb.w	lr, lr
 8024d7e:	fb1b fb03 	smulbb	fp, fp, r3
 8024d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024d84:	fb03 f30c 	mul.w	r3, r3, ip
 8024d88:	f892 c000 	ldrb.w	ip, [r2]
 8024d8c:	fb05 b506 	mla	r5, r5, r6, fp
 8024d90:	fb08 330a 	mla	r3, r8, sl, r3
 8024d94:	b2ad      	uxth	r5, r5
 8024d96:	fb01 330c 	mla	r3, r1, ip, r3
 8024d9a:	f890 c000 	ldrb.w	ip, [r0]
 8024d9e:	f105 0b01 	add.w	fp, r5, #1
 8024da2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024da8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024dac:	fb1e fe03 	smulbb	lr, lr, r3
 8024db0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024db4:	1c7b      	adds	r3, r7, #1
 8024db6:	096d      	lsrs	r5, r5, #5
 8024db8:	fb0c e606 	mla	r6, ip, r6, lr
 8024dbc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024dc0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024dc4:	b2b6      	uxth	r6, r6
 8024dc6:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8024dca:	1c77      	adds	r7, r6, #1
 8024dcc:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024dd0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024dd4:	431f      	orrs	r7, r3
 8024dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024dd8:	433d      	orrs	r5, r7
 8024dda:	801d      	strh	r5, [r3, #0]
 8024ddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024dde:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024de0:	3302      	adds	r3, #2
 8024de2:	930c      	str	r3, [sp, #48]	; 0x30
 8024de4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024de6:	4413      	add	r3, r2
 8024de8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024dea:	931f      	str	r3, [sp, #124]	; 0x7c
 8024dec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024dee:	4413      	add	r3, r2
 8024df0:	9320      	str	r3, [sp, #128]	; 0x80
 8024df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024df4:	3b01      	subs	r3, #1
 8024df6:	9311      	str	r3, [sp, #68]	; 0x44
 8024df8:	e732      	b.n	8024c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024dfc:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024dfe:	4433      	add	r3, r6
 8024e00:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8024e02:	931f      	str	r3, [sp, #124]	; 0x7c
 8024e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024e06:	4433      	add	r3, r6
 8024e08:	9320      	str	r3, [sp, #128]	; 0x80
 8024e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e0c:	3b01      	subs	r3, #1
 8024e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8024e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e12:	3302      	adds	r3, #2
 8024e14:	930a      	str	r3, [sp, #40]	; 0x28
 8024e16:	e702      	b.n	8024c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024e18:	d027      	beq.n	8024e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e1c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8024e1e:	3b01      	subs	r3, #1
 8024e20:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8024e22:	fb00 5003 	mla	r0, r0, r3, r5
 8024e26:	1400      	asrs	r0, r0, #16
 8024e28:	f53f af16 	bmi.w	8024c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e2c:	3901      	subs	r1, #1
 8024e2e:	4288      	cmp	r0, r1
 8024e30:	f6bf af12 	bge.w	8024c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e34:	9922      	ldr	r1, [sp, #136]	; 0x88
 8024e36:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024e38:	fb01 0303 	mla	r3, r1, r3, r0
 8024e3c:	141b      	asrs	r3, r3, #16
 8024e3e:	f53f af0b 	bmi.w	8024c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e42:	3a01      	subs	r2, #1
 8024e44:	4293      	cmp	r3, r2
 8024e46:	f6bf af07 	bge.w	8024c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e4c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8024e50:	9311      	str	r3, [sp, #68]	; 0x44
 8024e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e54:	930c      	str	r3, [sp, #48]	; 0x30
 8024e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024e58:	2b00      	cmp	r3, #0
 8024e5a:	dc70      	bgt.n	8024f3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024e64:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024e68:	930a      	str	r3, [sp, #40]	; 0x28
 8024e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024e6c:	2b00      	cmp	r3, #0
 8024e6e:	f340 8124 	ble.w	80250ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024e78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024e7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024e80:	eef0 6a62 	vmov.f32	s13, s5
 8024e84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024e88:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024e8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e90:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8024e94:	eef0 6a43 	vmov.f32	s13, s6
 8024e98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e9c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8024ea0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024ea4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024ea8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024eac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024eb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024eb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024eb8:	ee12 2a90 	vmov	r2, s5
 8024ebc:	eef0 2a47 	vmov.f32	s5, s14
 8024ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ec4:	ee13 2a10 	vmov	r2, s6
 8024ec8:	9321      	str	r3, [sp, #132]	; 0x84
 8024eca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024ecc:	eeb0 3a67 	vmov.f32	s6, s15
 8024ed0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ed4:	9322      	str	r3, [sp, #136]	; 0x88
 8024ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024ed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024eda:	3b01      	subs	r3, #1
 8024edc:	930e      	str	r3, [sp, #56]	; 0x38
 8024ede:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024ee0:	bf08      	it	eq
 8024ee2:	4613      	moveq	r3, r2
 8024ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8024ee6:	e68c      	b.n	8024c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024ee8:	b149      	cbz	r1, 8024efe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024eea:	5cb2      	ldrb	r2, [r6, r2]
 8024eec:	4628      	mov	r0, r5
 8024eee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024ef2:	4422      	add	r2, r4
 8024ef4:	46ac      	mov	ip, r5
 8024ef6:	e6f1      	b.n	8024cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024ef8:	4628      	mov	r0, r5
 8024efa:	462a      	mov	r2, r5
 8024efc:	e6ee      	b.n	8024cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024efe:	4628      	mov	r0, r5
 8024f00:	462a      	mov	r2, r5
 8024f02:	e7f7      	b.n	8024ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024f04:	1c47      	adds	r7, r0, #1
 8024f06:	f53f af69 	bmi.w	8024ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024f0a:	42ba      	cmp	r2, r7
 8024f0c:	f6ff af66 	blt.w	8024ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024f10:	1c6f      	adds	r7, r5, #1
 8024f12:	f53f af63 	bmi.w	8024ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024f16:	42be      	cmp	r6, r7
 8024f18:	f6ff af60 	blt.w	8024ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024f1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024f1e:	b236      	sxth	r6, r6
 8024f20:	b212      	sxth	r2, r2
 8024f22:	9002      	str	r0, [sp, #8]
 8024f24:	9601      	str	r6, [sp, #4]
 8024f26:	9200      	str	r2, [sp, #0]
 8024f28:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024f2a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024f2e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024f32:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8024f36:	4623      	mov	r3, r4
 8024f38:	f7ff fd59 	bl	80249ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024f3c:	e74e      	b.n	8024ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024f3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024f40:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024f42:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024f46:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8024f48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024f4a:	1400      	asrs	r0, r0, #16
 8024f4c:	142d      	asrs	r5, r5, #16
 8024f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024f50:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024f54:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024f58:	fb02 5000 	mla	r0, r2, r0, r5
 8024f5c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024f5e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024f62:	182e      	adds	r6, r5, r0
 8024f64:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024f68:	eb04 0509 	add.w	r5, r4, r9
 8024f6c:	2b00      	cmp	r3, #0
 8024f6e:	f000 8096 	beq.w	802509e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024f72:	7877      	ldrb	r7, [r6, #1]
 8024f74:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024f78:	4427      	add	r7, r4
 8024f7a:	2900      	cmp	r1, #0
 8024f7c:	f000 8097 	beq.w	80250ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8024f80:	18b0      	adds	r0, r6, r2
 8024f82:	5cb2      	ldrb	r2, [r6, r2]
 8024f84:	7840      	ldrb	r0, [r0, #1]
 8024f86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f8e:	4422      	add	r2, r4
 8024f90:	4420      	add	r0, r4
 8024f92:	b29b      	uxth	r3, r3
 8024f94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024f96:	b289      	uxth	r1, r1
 8024f98:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024f9c:	f8b6 c000 	ldrh.w	ip, [r6]
 8024fa0:	fb03 f801 	mul.w	r8, r3, r1
 8024fa4:	011b      	lsls	r3, r3, #4
 8024fa6:	78be      	ldrb	r6, [r7, #2]
 8024fa8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024fac:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024fb0:	eba3 0308 	sub.w	r3, r3, r8
 8024fb4:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024fb8:	b289      	uxth	r1, r1
 8024fba:	b29b      	uxth	r3, r3
 8024fbc:	ebae 0e01 	sub.w	lr, lr, r1
 8024fc0:	435e      	muls	r6, r3
 8024fc2:	fa1f fe8e 	uxth.w	lr, lr
 8024fc6:	9310      	str	r3, [sp, #64]	; 0x40
 8024fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024fca:	fb0e 660b 	mla	r6, lr, fp, r6
 8024fce:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024fd2:	fb01 660b 	mla	r6, r1, fp, r6
 8024fd6:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024fda:	fb08 660b 	mla	r6, r8, fp, r6
 8024fde:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024fe2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024fe6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024fea:	fb1b fb03 	smulbb	fp, fp, r3
 8024fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ff0:	fb06 b60a 	mla	r6, r6, sl, fp
 8024ff4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024ff8:	787d      	ldrb	r5, [r7, #1]
 8024ffa:	783f      	ldrb	r7, [r7, #0]
 8024ffc:	b2b6      	uxth	r6, r6
 8024ffe:	435d      	muls	r5, r3
 8025000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025002:	fb0e 550b 	mla	r5, lr, fp, r5
 8025006:	f892 b001 	ldrb.w	fp, [r2, #1]
 802500a:	fb01 550b 	mla	r5, r1, fp, r5
 802500e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025012:	fb08 550b 	mla	r5, r8, fp, r5
 8025016:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802501a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802501e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025022:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025026:	fa5f fc8c 	uxtb.w	ip, ip
 802502a:	fb1b fb03 	smulbb	fp, fp, r3
 802502e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025030:	437b      	muls	r3, r7
 8025032:	7817      	ldrb	r7, [r2, #0]
 8025034:	fb05 b50a 	mla	r5, r5, sl, fp
 8025038:	fb0e 3309 	mla	r3, lr, r9, r3
 802503c:	b2ad      	uxth	r5, r5
 802503e:	fb01 3307 	mla	r3, r1, r7, r3
 8025042:	7807      	ldrb	r7, [r0, #0]
 8025044:	f105 0b01 	add.w	fp, r5, #1
 8025048:	fb08 3707 	mla	r7, r8, r7, r3
 802504c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802504e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025052:	fb1c fc03 	smulbb	ip, ip, r3
 8025056:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802505a:	1c73      	adds	r3, r6, #1
 802505c:	096d      	lsrs	r5, r5, #5
 802505e:	fb07 c70a 	mla	r7, r7, sl, ip
 8025062:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025066:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802506a:	b2bf      	uxth	r7, r7
 802506c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802506e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8025072:	1c7a      	adds	r2, r7, #1
 8025074:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025078:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802507c:	4316      	orrs	r6, r2
 802507e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025080:	432e      	orrs	r6, r5
 8025082:	f823 6b02 	strh.w	r6, [r3], #2
 8025086:	930c      	str	r3, [sp, #48]	; 0x30
 8025088:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802508a:	4413      	add	r3, r2
 802508c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802508e:	931f      	str	r3, [sp, #124]	; 0x7c
 8025090:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025092:	4413      	add	r3, r2
 8025094:	9320      	str	r3, [sp, #128]	; 0x80
 8025096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025098:	3b01      	subs	r3, #1
 802509a:	9311      	str	r3, [sp, #68]	; 0x44
 802509c:	e6db      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802509e:	b149      	cbz	r1, 80250b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 80250a0:	5cb2      	ldrb	r2, [r6, r2]
 80250a2:	4628      	mov	r0, r5
 80250a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80250a8:	4422      	add	r2, r4
 80250aa:	462f      	mov	r7, r5
 80250ac:	e771      	b.n	8024f92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80250ae:	4628      	mov	r0, r5
 80250b0:	462a      	mov	r2, r5
 80250b2:	e76e      	b.n	8024f92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80250b4:	4628      	mov	r0, r5
 80250b6:	462a      	mov	r2, r5
 80250b8:	e7f7      	b.n	80250aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80250ba:	b015      	add	sp, #84	; 0x54
 80250bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080250c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80250c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250c4:	880f      	ldrh	r7, [r1, #0]
 80250c6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80250ca:	023c      	lsls	r4, r7, #8
 80250cc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80250d0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80250d4:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 80250d8:	017c      	lsls	r4, r7, #5
 80250da:	00ff      	lsls	r7, r7, #3
 80250dc:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80250e0:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80250e4:	b2ff      	uxtb	r7, r7
 80250e6:	ea4b 0404 	orr.w	r4, fp, r4
 80250ea:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 80250ee:	4327      	orrs	r7, r4
 80250f0:	fb05 ca0e 	mla	sl, r5, lr, ip
 80250f4:	2d00      	cmp	r5, #0
 80250f6:	9701      	str	r7, [sp, #4]
 80250f8:	eb02 080a 	add.w	r8, r2, sl
 80250fc:	db7e      	blt.n	80251fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80250fe:	45a9      	cmp	r9, r5
 8025100:	dd7c      	ble.n	80251fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025102:	f1bc 0f00 	cmp.w	ip, #0
 8025106:	db77      	blt.n	80251f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025108:	45e6      	cmp	lr, ip
 802510a:	dd75      	ble.n	80251f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 802510c:	f812 700a 	ldrb.w	r7, [r2, sl]
 8025110:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025114:	441f      	add	r7, r3
 8025116:	f11c 0201 	adds.w	r2, ip, #1
 802511a:	d472      	bmi.n	8025202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802511c:	4596      	cmp	lr, r2
 802511e:	dd70      	ble.n	8025202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025120:	2800      	cmp	r0, #0
 8025122:	d06e      	beq.n	8025202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025124:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025128:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802512c:	441c      	add	r4, r3
 802512e:	3501      	adds	r5, #1
 8025130:	d46b      	bmi.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025132:	45a9      	cmp	r9, r5
 8025134:	dd69      	ble.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025136:	2e00      	cmp	r6, #0
 8025138:	d067      	beq.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802513a:	f1bc 0f00 	cmp.w	ip, #0
 802513e:	db62      	blt.n	8025206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025140:	45e6      	cmp	lr, ip
 8025142:	dd60      	ble.n	8025206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025144:	f818 500e 	ldrb.w	r5, [r8, lr]
 8025148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802514c:	441d      	add	r5, r3
 802514e:	f11c 0201 	adds.w	r2, ip, #1
 8025152:	d45d      	bmi.n	8025210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025154:	4596      	cmp	lr, r2
 8025156:	dd5b      	ble.n	8025210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025158:	2800      	cmp	r0, #0
 802515a:	d059      	beq.n	8025210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 802515c:	44c6      	add	lr, r8
 802515e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025162:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025166:	4413      	add	r3, r2
 8025168:	b280      	uxth	r0, r0
 802516a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802516e:	b2b2      	uxth	r2, r6
 8025170:	f897 9000 	ldrb.w	r9, [r7]
 8025174:	787f      	ldrb	r7, [r7, #1]
 8025176:	fb00 f602 	mul.w	r6, r0, r2
 802517a:	0100      	lsls	r0, r0, #4
 802517c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025180:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8025184:	1b80      	subs	r0, r0, r6
 8025186:	fa1f fc82 	uxth.w	ip, r2
 802518a:	b282      	uxth	r2, r0
 802518c:	78a0      	ldrb	r0, [r4, #2]
 802518e:	eba8 080c 	sub.w	r8, r8, ip
 8025192:	4350      	muls	r0, r2
 8025194:	fa1f f888 	uxth.w	r8, r8
 8025198:	fb08 0e0e 	mla	lr, r8, lr, r0
 802519c:	78a8      	ldrb	r0, [r5, #2]
 802519e:	fb0c e000 	mla	r0, ip, r0, lr
 80251a2:	f893 e002 	ldrb.w	lr, [r3, #2]
 80251a6:	fb06 0e0e 	mla	lr, r6, lr, r0
 80251aa:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 80251ae:	f894 e000 	ldrb.w	lr, [r4]
 80251b2:	fb02 fe0e 	mul.w	lr, r2, lr
 80251b6:	fb08 e909 	mla	r9, r8, r9, lr
 80251ba:	f895 e000 	ldrb.w	lr, [r5]
 80251be:	fb0c 990e 	mla	r9, ip, lr, r9
 80251c2:	f893 e000 	ldrb.w	lr, [r3]
 80251c6:	785b      	ldrb	r3, [r3, #1]
 80251c8:	fb06 9e0e 	mla	lr, r6, lr, r9
 80251cc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80251d0:	ea4e 0e00 	orr.w	lr, lr, r0
 80251d4:	7860      	ldrb	r0, [r4, #1]
 80251d6:	4350      	muls	r0, r2
 80251d8:	786a      	ldrb	r2, [r5, #1]
 80251da:	fb08 0007 	mla	r0, r8, r7, r0
 80251de:	fb0c 0202 	mla	r2, ip, r2, r0
 80251e2:	fb06 2303 	mla	r3, r6, r3, r2
 80251e6:	095b      	lsrs	r3, r3, #5
 80251e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80251ec:	ea4e 0303 	orr.w	r3, lr, r3
 80251f0:	800b      	strh	r3, [r1, #0]
 80251f2:	b003      	add	sp, #12
 80251f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251f8:	af01      	add	r7, sp, #4
 80251fa:	e78c      	b.n	8025116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80251fc:	ac01      	add	r4, sp, #4
 80251fe:	4627      	mov	r7, r4
 8025200:	e795      	b.n	802512e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025202:	ac01      	add	r4, sp, #4
 8025204:	e793      	b.n	802512e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025206:	ad01      	add	r5, sp, #4
 8025208:	e7a1      	b.n	802514e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802520a:	ab01      	add	r3, sp, #4
 802520c:	461d      	mov	r5, r3
 802520e:	e7ab      	b.n	8025168 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8025210:	ab01      	add	r3, sp, #4
 8025212:	e7a9      	b.n	8025168 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08025214 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025218:	b08f      	sub	sp, #60	; 0x3c
 802521a:	920c      	str	r2, [sp, #48]	; 0x30
 802521c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802521e:	900d      	str	r0, [sp, #52]	; 0x34
 8025220:	910a      	str	r1, [sp, #40]	; 0x28
 8025222:	6850      	ldr	r0, [r2, #4]
 8025224:	9306      	str	r3, [sp, #24]
 8025226:	6812      	ldr	r2, [r2, #0]
 8025228:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802522c:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8025230:	fb00 1303 	mla	r3, r0, r3, r1
 8025234:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025238:	9307      	str	r3, [sp, #28]
 802523a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802523c:	681b      	ldr	r3, [r3, #0]
 802523e:	9308      	str	r3, [sp, #32]
 8025240:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025242:	685c      	ldr	r4, [r3, #4]
 8025244:	3404      	adds	r4, #4
 8025246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025248:	2b00      	cmp	r3, #0
 802524a:	dc03      	bgt.n	8025254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802524c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802524e:	2b00      	cmp	r3, #0
 8025250:	f340 81d5 	ble.w	80255fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025254:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025256:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802525a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802525e:	1e48      	subs	r0, r1, #1
 8025260:	1e56      	subs	r6, r2, #1
 8025262:	9b06      	ldr	r3, [sp, #24]
 8025264:	2b00      	cmp	r3, #0
 8025266:	f340 80b6 	ble.w	80253d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802526a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802526e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025272:	d406      	bmi.n	8025282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025274:	4287      	cmp	r7, r0
 8025276:	da04      	bge.n	8025282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025278:	2b00      	cmp	r3, #0
 802527a:	db02      	blt.n	8025282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802527c:	42b3      	cmp	r3, r6
 802527e:	f2c0 80ab 	blt.w	80253d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8025282:	3701      	adds	r7, #1
 8025284:	f100 809c 	bmi.w	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025288:	42b9      	cmp	r1, r7
 802528a:	f2c0 8099 	blt.w	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802528e:	3301      	adds	r3, #1
 8025290:	f100 8096 	bmi.w	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025294:	429a      	cmp	r2, r3
 8025296:	f2c0 8093 	blt.w	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802529a:	9b06      	ldr	r3, [sp, #24]
 802529c:	930b      	str	r3, [sp, #44]	; 0x2c
 802529e:	9b07      	ldr	r3, [sp, #28]
 80252a0:	9309      	str	r3, [sp, #36]	; 0x24
 80252a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80252a4:	2b00      	cmp	r3, #0
 80252a6:	f340 80b4 	ble.w	8025412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80252aa:	9820      	ldr	r0, [sp, #128]	; 0x80
 80252ac:	142e      	asrs	r6, r5, #16
 80252ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80252b0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80252b4:	68c7      	ldr	r7, [r0, #12]
 80252b6:	ea5f 402b 	movs.w	r0, fp, asr #16
 80252ba:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80252be:	6892      	ldr	r2, [r2, #8]
 80252c0:	f100 80fb 	bmi.w	80254ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80252c4:	f102 3cff 	add.w	ip, r2, #4294967295
 80252c8:	4560      	cmp	r0, ip
 80252ca:	f280 80f6 	bge.w	80254ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80252ce:	2e00      	cmp	r6, #0
 80252d0:	f2c0 80f3 	blt.w	80254ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80252d4:	f107 3cff 	add.w	ip, r7, #4294967295
 80252d8:	4566      	cmp	r6, ip
 80252da:	f280 80ee 	bge.w	80254ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80252de:	b212      	sxth	r2, r2
 80252e0:	fb06 0002 	mla	r0, r6, r2, r0
 80252e4:	9e08      	ldr	r6, [sp, #32]
 80252e6:	1837      	adds	r7, r6, r0
 80252e8:	5c30      	ldrb	r0, [r6, r0]
 80252ea:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80252ee:	eb04 0c08 	add.w	ip, r4, r8
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	f000 80d3 	beq.w	802549e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80252f8:	787e      	ldrb	r6, [r7, #1]
 80252fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80252fe:	4426      	add	r6, r4
 8025300:	2900      	cmp	r1, #0
 8025302:	f000 80d4 	beq.w	80254ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8025306:	18b8      	adds	r0, r7, r2
 8025308:	5cba      	ldrb	r2, [r7, r2]
 802530a:	7840      	ldrb	r0, [r0, #1]
 802530c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025310:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025314:	4422      	add	r2, r4
 8025316:	4420      	add	r0, r4
 8025318:	b29b      	uxth	r3, r3
 802531a:	78b7      	ldrb	r7, [r6, #2]
 802531c:	b289      	uxth	r1, r1
 802531e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025322:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025326:	fb03 f901 	mul.w	r9, r3, r1
 802532a:	011b      	lsls	r3, r3, #4
 802532c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025330:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025334:	eba3 0309 	sub.w	r3, r3, r9
 8025338:	b289      	uxth	r1, r1
 802533a:	b29b      	uxth	r3, r3
 802533c:	ebae 0e01 	sub.w	lr, lr, r1
 8025340:	435f      	muls	r7, r3
 8025342:	fa1f fe8e 	uxth.w	lr, lr
 8025346:	fb0e 770a 	mla	r7, lr, sl, r7
 802534a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802534e:	fb01 770a 	mla	r7, r1, sl, r7
 8025352:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025356:	fb09 7a0a 	mla	sl, r9, sl, r7
 802535a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802535e:	f896 8000 	ldrb.w	r8, [r6]
 8025362:	7876      	ldrb	r6, [r6, #1]
 8025364:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025368:	fb03 f808 	mul.w	r8, r3, r8
 802536c:	4373      	muls	r3, r6
 802536e:	fb0e 8807 	mla	r8, lr, r7, r8
 8025372:	7817      	ldrb	r7, [r2, #0]
 8025374:	fb0e 330c 	mla	r3, lr, ip, r3
 8025378:	fb01 8807 	mla	r8, r1, r7, r8
 802537c:	7807      	ldrb	r7, [r0, #0]
 802537e:	fb09 8707 	mla	r7, r9, r7, r8
 8025382:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025386:	ea47 070a 	orr.w	r7, r7, sl
 802538a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802538e:	fb01 310a 	mla	r1, r1, sl, r3
 8025392:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025398:	fb09 1a0a 	mla	sl, r9, sl, r1
 802539c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80253a0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80253a4:	ea47 070a 	orr.w	r7, r7, sl
 80253a8:	801f      	strh	r7, [r3, #0]
 80253aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253ac:	3302      	adds	r3, #2
 80253ae:	9309      	str	r3, [sp, #36]	; 0x24
 80253b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80253b2:	449b      	add	fp, r3
 80253b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80253b6:	441d      	add	r5, r3
 80253b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80253ba:	3b01      	subs	r3, #1
 80253bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80253be:	e770      	b.n	80252a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80253c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80253c2:	449b      	add	fp, r3
 80253c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80253c6:	441d      	add	r5, r3
 80253c8:	9b06      	ldr	r3, [sp, #24]
 80253ca:	3b01      	subs	r3, #1
 80253cc:	9306      	str	r3, [sp, #24]
 80253ce:	9b07      	ldr	r3, [sp, #28]
 80253d0:	3302      	adds	r3, #2
 80253d2:	9307      	str	r3, [sp, #28]
 80253d4:	e745      	b.n	8025262 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80253d6:	d023      	beq.n	8025420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80253d8:	9b06      	ldr	r3, [sp, #24]
 80253da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80253dc:	3b01      	subs	r3, #1
 80253de:	fb00 b003 	mla	r0, r0, r3, fp
 80253e2:	1400      	asrs	r0, r0, #16
 80253e4:	f53f af59 	bmi.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80253e8:	3901      	subs	r1, #1
 80253ea:	4288      	cmp	r0, r1
 80253ec:	f6bf af55 	bge.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80253f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80253f2:	fb01 5303 	mla	r3, r1, r3, r5
 80253f6:	141b      	asrs	r3, r3, #16
 80253f8:	f53f af4f 	bmi.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80253fc:	3a01      	subs	r2, #1
 80253fe:	4293      	cmp	r3, r2
 8025400:	f6bf af4b 	bge.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025404:	9b06      	ldr	r3, [sp, #24]
 8025406:	9309      	str	r3, [sp, #36]	; 0x24
 8025408:	9b07      	ldr	r3, [sp, #28]
 802540a:	930b      	str	r3, [sp, #44]	; 0x2c
 802540c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802540e:	2b00      	cmp	r3, #0
 8025410:	dc70      	bgt.n	80254f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8025412:	9b06      	ldr	r3, [sp, #24]
 8025414:	9a07      	ldr	r2, [sp, #28]
 8025416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802541a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802541e:	9307      	str	r3, [sp, #28]
 8025420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025422:	2b00      	cmp	r3, #0
 8025424:	f340 80eb 	ble.w	80255fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802542c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802542e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025432:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025436:	eef0 6a62 	vmov.f32	s13, s5
 802543a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802543e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025442:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025446:	ee16 ba90 	vmov	fp, s13
 802544a:	eef0 6a43 	vmov.f32	s13, s6
 802544e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025452:	ee16 5a90 	vmov	r5, s13
 8025456:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802545a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802545e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025462:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025466:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802546a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802546e:	ee12 2a90 	vmov	r2, s5
 8025472:	eef0 2a47 	vmov.f32	s5, s14
 8025476:	fb92 f3f3 	sdiv	r3, r2, r3
 802547a:	ee13 2a10 	vmov	r2, s6
 802547e:	931b      	str	r3, [sp, #108]	; 0x6c
 8025480:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025482:	eeb0 3a67 	vmov.f32	s6, s15
 8025486:	fb92 f3f3 	sdiv	r3, r2, r3
 802548a:	931c      	str	r3, [sp, #112]	; 0x70
 802548c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802548e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025490:	3b01      	subs	r3, #1
 8025492:	930a      	str	r3, [sp, #40]	; 0x28
 8025494:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025496:	bf08      	it	eq
 8025498:	4613      	moveq	r3, r2
 802549a:	9306      	str	r3, [sp, #24]
 802549c:	e6d3      	b.n	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802549e:	b149      	cbz	r1, 80254b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80254a0:	5cba      	ldrb	r2, [r7, r2]
 80254a2:	4660      	mov	r0, ip
 80254a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80254a8:	4422      	add	r2, r4
 80254aa:	4666      	mov	r6, ip
 80254ac:	e734      	b.n	8025318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 80254ae:	4660      	mov	r0, ip
 80254b0:	4662      	mov	r2, ip
 80254b2:	e731      	b.n	8025318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 80254b4:	4660      	mov	r0, ip
 80254b6:	4662      	mov	r2, ip
 80254b8:	e7f7      	b.n	80254aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80254ba:	f110 0c01 	adds.w	ip, r0, #1
 80254be:	f53f af74 	bmi.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80254c2:	4562      	cmp	r2, ip
 80254c4:	f6ff af71 	blt.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80254c8:	f116 0c01 	adds.w	ip, r6, #1
 80254cc:	f53f af6d 	bmi.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80254d0:	4567      	cmp	r7, ip
 80254d2:	f6ff af6a 	blt.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80254d6:	b23f      	sxth	r7, r7
 80254d8:	b212      	sxth	r2, r2
 80254da:	9701      	str	r7, [sp, #4]
 80254dc:	9200      	str	r2, [sp, #0]
 80254de:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80254e2:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80254e6:	4623      	mov	r3, r4
 80254e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80254ea:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80254ee:	f7ff fde7 	bl	80250c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80254f2:	e75a      	b.n	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80254f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80254f6:	ea4f 462b 	mov.w	r6, fp, asr #16
 80254fa:	1428      	asrs	r0, r5, #16
 80254fc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025500:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025504:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025508:	fb02 6000 	mla	r0, r2, r0, r6
 802550c:	9e08      	ldr	r6, [sp, #32]
 802550e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025512:	1837      	adds	r7, r6, r0
 8025514:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025518:	eb04 0c08 	add.w	ip, r4, r8
 802551c:	2b00      	cmp	r3, #0
 802551e:	d060      	beq.n	80255e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8025520:	787e      	ldrb	r6, [r7, #1]
 8025522:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025526:	4426      	add	r6, r4
 8025528:	2900      	cmp	r1, #0
 802552a:	d062      	beq.n	80255f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802552c:	18b8      	adds	r0, r7, r2
 802552e:	5cba      	ldrb	r2, [r7, r2]
 8025530:	7840      	ldrb	r0, [r0, #1]
 8025532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025536:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802553a:	4422      	add	r2, r4
 802553c:	4420      	add	r0, r4
 802553e:	b29b      	uxth	r3, r3
 8025540:	78b7      	ldrb	r7, [r6, #2]
 8025542:	b289      	uxth	r1, r1
 8025544:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025548:	f89c c001 	ldrb.w	ip, [ip, #1]
 802554c:	fb03 f901 	mul.w	r9, r3, r1
 8025550:	011b      	lsls	r3, r3, #4
 8025552:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025556:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802555a:	eba3 0309 	sub.w	r3, r3, r9
 802555e:	b289      	uxth	r1, r1
 8025560:	b29b      	uxth	r3, r3
 8025562:	ebae 0e01 	sub.w	lr, lr, r1
 8025566:	435f      	muls	r7, r3
 8025568:	fa1f fe8e 	uxth.w	lr, lr
 802556c:	fb0e 770a 	mla	r7, lr, sl, r7
 8025570:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025574:	fb01 770a 	mla	r7, r1, sl, r7
 8025578:	f890 a002 	ldrb.w	sl, [r0, #2]
 802557c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025580:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025584:	f896 8000 	ldrb.w	r8, [r6]
 8025588:	7876      	ldrb	r6, [r6, #1]
 802558a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802558e:	fb03 f808 	mul.w	r8, r3, r8
 8025592:	4373      	muls	r3, r6
 8025594:	7856      	ldrb	r6, [r2, #1]
 8025596:	fb0e 8807 	mla	r8, lr, r7, r8
 802559a:	7817      	ldrb	r7, [r2, #0]
 802559c:	fb0e 330c 	mla	r3, lr, ip, r3
 80255a0:	fb01 8807 	mla	r8, r1, r7, r8
 80255a4:	7807      	ldrb	r7, [r0, #0]
 80255a6:	fb01 3306 	mla	r3, r1, r6, r3
 80255aa:	fb09 8707 	mla	r7, r9, r7, r8
 80255ae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80255b2:	ea47 070a 	orr.w	r7, r7, sl
 80255b6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80255ba:	fb09 3a0a 	mla	sl, r9, sl, r3
 80255be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80255c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80255c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80255c8:	ea47 070a 	orr.w	r7, r7, sl
 80255cc:	f823 7b02 	strh.w	r7, [r3], #2
 80255d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80255d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80255d4:	449b      	add	fp, r3
 80255d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80255d8:	441d      	add	r5, r3
 80255da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80255dc:	3b01      	subs	r3, #1
 80255de:	9309      	str	r3, [sp, #36]	; 0x24
 80255e0:	e714      	b.n	802540c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80255e2:	b149      	cbz	r1, 80255f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80255e4:	5cba      	ldrb	r2, [r7, r2]
 80255e6:	4660      	mov	r0, ip
 80255e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80255ec:	4422      	add	r2, r4
 80255ee:	4666      	mov	r6, ip
 80255f0:	e7a5      	b.n	802553e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80255f2:	4660      	mov	r0, ip
 80255f4:	4662      	mov	r2, ip
 80255f6:	e7a2      	b.n	802553e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80255f8:	4660      	mov	r0, ip
 80255fa:	4662      	mov	r2, ip
 80255fc:	e7f7      	b.n	80255ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80255fe:	b00f      	add	sp, #60	; 0x3c
 8025600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025604 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025608:	b085      	sub	sp, #20
 802560a:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 802560e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025612:	9102      	str	r1, [sp, #8]
 8025614:	2c00      	cmp	r4, #0
 8025616:	fb04 710c 	mla	r1, r4, ip, r7
 802561a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802561e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8025622:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8025626:	eb02 0e01 	add.w	lr, r2, r1
 802562a:	f2c0 8122 	blt.w	8025872 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802562e:	45a0      	cmp	r8, r4
 8025630:	f340 811f 	ble.w	8025872 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8025634:	2f00      	cmp	r7, #0
 8025636:	f2c0 811a 	blt.w	802586e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802563a:	45bc      	cmp	ip, r7
 802563c:	f340 8117 	ble.w	802586e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8025640:	5c52      	ldrb	r2, [r2, r1]
 8025642:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025646:	1c7a      	adds	r2, r7, #1
 8025648:	f100 8116 	bmi.w	8025878 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802564c:	4594      	cmp	ip, r2
 802564e:	f340 8113 	ble.w	8025878 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025652:	2e00      	cmp	r6, #0
 8025654:	f000 8112 	beq.w	802587c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8025658:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802565c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025660:	3401      	adds	r4, #1
 8025662:	f100 810f 	bmi.w	8025884 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025666:	45a0      	cmp	r8, r4
 8025668:	f340 810c 	ble.w	8025884 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802566c:	2800      	cmp	r0, #0
 802566e:	f000 810c 	beq.w	802588a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8025672:	2f00      	cmp	r7, #0
 8025674:	f2c0 8104 	blt.w	8025880 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025678:	45bc      	cmp	ip, r7
 802567a:	f340 8101 	ble.w	8025880 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802567e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8025682:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025686:	3701      	adds	r7, #1
 8025688:	f100 8102 	bmi.w	8025890 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802568c:	45bc      	cmp	ip, r7
 802568e:	f340 80ff 	ble.w	8025890 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025692:	2e00      	cmp	r6, #0
 8025694:	f000 80fe 	beq.w	8025894 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8025698:	44f4      	add	ip, lr
 802569a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802569e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80256a2:	b2b6      	uxth	r6, r6
 80256a4:	b280      	uxth	r0, r0
 80256a6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80256aa:	fb00 fe06 	mul.w	lr, r0, r6
 80256ae:	0136      	lsls	r6, r6, #4
 80256b0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80256b4:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80256b8:	eba6 070e 	sub.w	r7, r6, lr
 80256bc:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80256c0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80256c4:	b280      	uxth	r0, r0
 80256c6:	b2bf      	uxth	r7, r7
 80256c8:	1a1b      	subs	r3, r3, r0
 80256ca:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80256ce:	fb0a f607 	mul.w	r6, sl, r7
 80256d2:	b29b      	uxth	r3, r3
 80256d4:	fb0b 6603 	mla	r6, fp, r3, r6
 80256d8:	fb00 6609 	mla	r6, r0, r9, r6
 80256dc:	fb0e 6608 	mla	r6, lr, r8, r6
 80256e0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80256e4:	9600      	str	r6, [sp, #0]
 80256e6:	2e00      	cmp	r6, #0
 80256e8:	f000 80be 	beq.w	8025868 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80256ec:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80256f0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80256f4:	9e02      	ldr	r6, [sp, #8]
 80256f6:	fb0b fc0c 	mul.w	ip, fp, ip
 80256fa:	fb0b f505 	mul.w	r5, fp, r5
 80256fe:	8836      	ldrh	r6, [r6, #0]
 8025700:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025704:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025708:	9501      	str	r5, [sp, #4]
 802570a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802570e:	44dc      	add	ip, fp
 8025710:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025714:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8025718:	9503      	str	r5, [sp, #12]
 802571a:	9d01      	ldr	r5, [sp, #4]
 802571c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8025720:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8025724:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8025728:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802572c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025730:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025734:	fb0a fa01 	mul.w	sl, sl, r1
 8025738:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802573c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025740:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8025744:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025748:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802574c:	4465      	add	r5, ip
 802574e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025752:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025756:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802575a:	fb09 fc0c 	mul.w	ip, r9, ip
 802575e:	0a2d      	lsrs	r5, r5, #8
 8025760:	fb09 f904 	mul.w	r9, r9, r4
 8025764:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025768:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802576c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025770:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8025774:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025778:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802577c:	437d      	muls	r5, r7
 802577e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025782:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8025786:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802578a:	4461      	add	r1, ip
 802578c:	fb08 f404 	mul.w	r4, r8, r4
 8025790:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025794:	fb08 f802 	mul.w	r8, r8, r2
 8025798:	0a09      	lsrs	r1, r1, #8
 802579a:	0a22      	lsrs	r2, r4, #8
 802579c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80257a0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80257a4:	fb07 f70a 	mul.w	r7, r7, sl
 80257a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80257ac:	4414      	add	r4, r2
 80257ae:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80257b2:	0a24      	lsrs	r4, r4, #8
 80257b4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80257b8:	9a03      	ldr	r2, [sp, #12]
 80257ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80257be:	fb02 5503 	mla	r5, r2, r3, r5
 80257c2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80257c6:	9a00      	ldr	r2, [sp, #0]
 80257c8:	fb04 540e 	mla	r4, r4, lr, r5
 80257cc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80257d0:	1235      	asrs	r5, r6, #8
 80257d2:	fb01 4100 	mla	r1, r1, r0, r4
 80257d6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80257da:	0a09      	lsrs	r1, r1, #8
 80257dc:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80257e0:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80257e4:	fb03 7101 	mla	r1, r3, r1, r7
 80257e8:	fb0e 1e08 	mla	lr, lr, r8, r1
 80257ec:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80257f0:	fb00 e101 	mla	r1, r0, r1, lr
 80257f4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80257f8:	b287      	uxth	r7, r0
 80257fa:	0a09      	lsrs	r1, r1, #8
 80257fc:	437a      	muls	r2, r7
 80257fe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025802:	1c53      	adds	r3, r2, #1
 8025804:	4321      	orrs	r1, r4
 8025806:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802580a:	0c0a      	lsrs	r2, r1, #16
 802580c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8025810:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025814:	b2c8      	uxtb	r0, r1
 8025816:	fb12 f207 	smulbb	r2, r2, r7
 802581a:	fb14 f407 	smulbb	r4, r4, r7
 802581e:	b2db      	uxtb	r3, r3
 8025820:	fb10 f007 	smulbb	r0, r0, r7
 8025824:	fb05 2503 	mla	r5, r5, r3, r2
 8025828:	10f2      	asrs	r2, r6, #3
 802582a:	00f6      	lsls	r6, r6, #3
 802582c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025830:	b2ad      	uxth	r5, r5
 8025832:	b2f6      	uxtb	r6, r6
 8025834:	fb02 4203 	mla	r2, r2, r3, r4
 8025838:	fb06 0303 	mla	r3, r6, r3, r0
 802583c:	b294      	uxth	r4, r2
 802583e:	b299      	uxth	r1, r3
 8025840:	1c6b      	adds	r3, r5, #1
 8025842:	1c62      	adds	r2, r4, #1
 8025844:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025848:	1c4b      	adds	r3, r1, #1
 802584a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802584e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025852:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025856:	0952      	lsrs	r2, r2, #5
 8025858:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802585c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025860:	432b      	orrs	r3, r5
 8025862:	4313      	orrs	r3, r2
 8025864:	9a02      	ldr	r2, [sp, #8]
 8025866:	8013      	strh	r3, [r2, #0]
 8025868:	b005      	add	sp, #20
 802586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802586e:	2500      	movs	r5, #0
 8025870:	e6e9      	b.n	8025646 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8025872:	2100      	movs	r1, #0
 8025874:	460d      	mov	r5, r1
 8025876:	e6f3      	b.n	8025660 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025878:	2100      	movs	r1, #0
 802587a:	e6f1      	b.n	8025660 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802587c:	4631      	mov	r1, r6
 802587e:	e6ef      	b.n	8025660 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025880:	2400      	movs	r4, #0
 8025882:	e700      	b.n	8025686 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8025884:	2200      	movs	r2, #0
 8025886:	4614      	mov	r4, r2
 8025888:	e70b      	b.n	80256a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802588a:	4602      	mov	r2, r0
 802588c:	4604      	mov	r4, r0
 802588e:	e708      	b.n	80256a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025890:	2200      	movs	r2, #0
 8025892:	e706      	b.n	80256a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025894:	4632      	mov	r2, r6
 8025896:	e704      	b.n	80256a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08025898 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802589c:	b09f      	sub	sp, #124	; 0x7c
 802589e:	921b      	str	r2, [sp, #108]	; 0x6c
 80258a0:	9309      	str	r3, [sp, #36]	; 0x24
 80258a2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80258a4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80258a8:	901d      	str	r0, [sp, #116]	; 0x74
 80258aa:	931c      	str	r3, [sp, #112]	; 0x70
 80258ac:	6850      	ldr	r0, [r2, #4]
 80258ae:	9119      	str	r1, [sp, #100]	; 0x64
 80258b0:	6812      	ldr	r2, [r2, #0]
 80258b2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80258b4:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80258b8:	fb00 1303 	mla	r3, r0, r3, r1
 80258bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80258c0:	930c      	str	r3, [sp, #48]	; 0x30
 80258c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80258c4:	681b      	ldr	r3, [r3, #0]
 80258c6:	9312      	str	r3, [sp, #72]	; 0x48
 80258c8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80258ca:	685e      	ldr	r6, [r3, #4]
 80258cc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80258d0:	3604      	adds	r6, #4
 80258d2:	930d      	str	r3, [sp, #52]	; 0x34
 80258d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	dc03      	bgt.n	80258e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80258da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80258dc:	2b00      	cmp	r3, #0
 80258de:	f340 8387 	ble.w	8025ff0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80258e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80258e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80258e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80258ec:	1e48      	subs	r0, r1, #1
 80258ee:	1e57      	subs	r7, r2, #1
 80258f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258f2:	2b00      	cmp	r3, #0
 80258f4:	f340 8194 	ble.w	8025c20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80258f8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80258fa:	142b      	asrs	r3, r5, #16
 80258fc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025900:	d406      	bmi.n	8025910 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025902:	4584      	cmp	ip, r0
 8025904:	da04      	bge.n	8025910 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025906:	2b00      	cmp	r3, #0
 8025908:	db02      	blt.n	8025910 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802590a:	42bb      	cmp	r3, r7
 802590c:	f2c0 8189 	blt.w	8025c22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025910:	f11c 0c01 	adds.w	ip, ip, #1
 8025914:	f100 8177 	bmi.w	8025c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025918:	4561      	cmp	r1, ip
 802591a:	f2c0 8174 	blt.w	8025c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802591e:	3301      	adds	r3, #1
 8025920:	f100 8171 	bmi.w	8025c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025924:	429a      	cmp	r2, r3
 8025926:	f2c0 816e 	blt.w	8025c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802592a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802592c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802592e:	931a      	str	r3, [sp, #104]	; 0x68
 8025930:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025932:	2b00      	cmp	r3, #0
 8025934:	f340 8193 	ble.w	8025c5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8025938:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802593a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802593e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025942:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025946:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025948:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802594c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802594e:	141b      	asrs	r3, r3, #16
 8025950:	f100 81d6 	bmi.w	8025d00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025954:	f100 38ff 	add.w	r8, r0, #4294967295
 8025958:	4543      	cmp	r3, r8
 802595a:	f280 81d1 	bge.w	8025d00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802595e:	f1bc 0f00 	cmp.w	ip, #0
 8025962:	f2c0 81cd 	blt.w	8025d00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025966:	f10e 38ff 	add.w	r8, lr, #4294967295
 802596a:	45c4      	cmp	ip, r8
 802596c:	f280 81c8 	bge.w	8025d00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025970:	b200      	sxth	r0, r0
 8025972:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025974:	fb0c 3300 	mla	r3, ip, r0, r3
 8025978:	eb04 0803 	add.w	r8, r4, r3
 802597c:	5ce3      	ldrb	r3, [r4, r3]
 802597e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025982:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025986:	2a00      	cmp	r2, #0
 8025988:	f000 81af 	beq.w	8025cea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802598c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025990:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025994:	940e      	str	r4, [sp, #56]	; 0x38
 8025996:	0e24      	lsrs	r4, r4, #24
 8025998:	9415      	str	r4, [sp, #84]	; 0x54
 802599a:	b179      	cbz	r1, 80259bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802599c:	eb08 0c00 	add.w	ip, r8, r0
 80259a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80259a4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80259a8:	900a      	str	r0, [sp, #40]	; 0x28
 80259aa:	0e00      	lsrs	r0, r0, #24
 80259ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80259ae:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80259b2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80259b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80259b8:	0e00      	lsrs	r0, r0, #24
 80259ba:	9016      	str	r0, [sp, #88]	; 0x58
 80259bc:	b292      	uxth	r2, r2
 80259be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80259c0:	b289      	uxth	r1, r1
 80259c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80259c4:	fb02 f901 	mul.w	r9, r2, r1
 80259c8:	0112      	lsls	r2, r2, #4
 80259ca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80259ce:	eba2 0809 	sub.w	r8, r2, r9
 80259d2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80259d6:	b289      	uxth	r1, r1
 80259d8:	fa1f f888 	uxth.w	r8, r8
 80259dc:	1a52      	subs	r2, r2, r1
 80259de:	fb08 f000 	mul.w	r0, r8, r0
 80259e2:	b292      	uxth	r2, r2
 80259e4:	fb02 000e 	mla	r0, r2, lr, r0
 80259e8:	fb01 0004 	mla	r0, r1, r4, r0
 80259ec:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80259ee:	fb09 0004 	mla	r0, r9, r4, r0
 80259f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80259f6:	2800      	cmp	r0, #0
 80259f8:	f000 80fa 	beq.w	8025bf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80259fc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025a00:	d01b      	beq.n	8025a3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025a02:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a0a:	fb0e fa0a 	mul.w	sl, lr, sl
 8025a0e:	fb0e fe03 	mul.w	lr, lr, r3
 8025a12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025a16:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025a1a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025a1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a22:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025a26:	4453      	add	r3, sl
 8025a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a2c:	0a1b      	lsrs	r3, r3, #8
 8025a2e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025a32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a36:	ea43 030c 	orr.w	r3, r3, ip
 8025a3a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a3c:	2cff      	cmp	r4, #255	; 0xff
 8025a3e:	d021      	beq.n	8025a84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8025a40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a42:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025a46:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a48:	fb04 fb0b 	mul.w	fp, r4, fp
 8025a4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a4e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a52:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025a58:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025a5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025a64:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025a68:	44de      	add	lr, fp
 8025a6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025a6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025a7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a7e:	ea4e 040a 	orr.w	r4, lr, sl
 8025a82:	940e      	str	r4, [sp, #56]	; 0x38
 8025a84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025a86:	2cff      	cmp	r4, #255	; 0xff
 8025a88:	d021      	beq.n	8025ace <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8025a8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025a8c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025a90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025a92:	fb04 fb0b 	mul.w	fp, r4, fp
 8025a96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025a98:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025a9e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025aa2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025aa6:	fb04 fa0a 	mul.w	sl, r4, sl
 8025aaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025aae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025ab2:	44de      	add	lr, fp
 8025ab4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025ab8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025abc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ac0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ac4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ac8:	ea4e 040a 	orr.w	r4, lr, sl
 8025acc:	940a      	str	r4, [sp, #40]	; 0x28
 8025ace:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025ad0:	2cff      	cmp	r4, #255	; 0xff
 8025ad2:	d021      	beq.n	8025b18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8025ad4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ad6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025ada:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025adc:	fb04 fb0b 	mul.w	fp, r4, fp
 8025ae0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ae2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ae6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025ae8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025aec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025af0:	fb04 fa0a 	mul.w	sl, r4, sl
 8025af4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025af8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025afc:	44de      	add	lr, fp
 8025afe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025b02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b12:	ea4e 040a 	orr.w	r4, lr, sl
 8025b16:	940f      	str	r4, [sp, #60]	; 0x3c
 8025b18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025b1a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025b1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b22:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025b26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025b28:	fb08 fc0c 	mul.w	ip, r8, ip
 8025b2c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025b30:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025b34:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025b36:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025b3a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025b3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025b40:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025b44:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025b48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025b4a:	fb08 f80e 	mul.w	r8, r8, lr
 8025b4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b52:	fb02 8303 	mla	r3, r2, r3, r8
 8025b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025b58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b5c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025b62:	fb01 330a 	mla	r3, r1, sl, r3
 8025b66:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025b6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025b6c:	fb09 3901 	mla	r9, r9, r1, r3
 8025b70:	883b      	ldrh	r3, [r7, #0]
 8025b72:	4342      	muls	r2, r0
 8025b74:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025b78:	1c50      	adds	r0, r2, #1
 8025b7a:	1219      	asrs	r1, r3, #8
 8025b7c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025b80:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025b84:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025b88:	ea4c 0c09 	orr.w	ip, ip, r9
 8025b8c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025b90:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025b94:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025b98:	b2c0      	uxtb	r0, r0
 8025b9a:	fb12 f204 	smulbb	r2, r2, r4
 8025b9e:	fa5f fc8c 	uxtb.w	ip, ip
 8025ba2:	fb1e fe04 	smulbb	lr, lr, r4
 8025ba6:	fb01 2100 	mla	r1, r1, r0, r2
 8025baa:	10da      	asrs	r2, r3, #3
 8025bac:	fb1c fc04 	smulbb	ip, ip, r4
 8025bb0:	00db      	lsls	r3, r3, #3
 8025bb2:	b289      	uxth	r1, r1
 8025bb4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025bb8:	b2db      	uxtb	r3, r3
 8025bba:	fb02 e200 	mla	r2, r2, r0, lr
 8025bbe:	fb03 c300 	mla	r3, r3, r0, ip
 8025bc2:	b292      	uxth	r2, r2
 8025bc4:	fa1f fc83 	uxth.w	ip, r3
 8025bc8:	1c4b      	adds	r3, r1, #1
 8025bca:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025bce:	f10c 0301 	add.w	r3, ip, #1
 8025bd2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025bd6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025bda:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025bde:	430b      	orrs	r3, r1
 8025be0:	1c51      	adds	r1, r2, #1
 8025be2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025be6:	0952      	lsrs	r2, r2, #5
 8025be8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025bec:	4313      	orrs	r3, r2
 8025bee:	803b      	strh	r3, [r7, #0]
 8025bf0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025bf2:	3702      	adds	r7, #2
 8025bf4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025bf6:	441a      	add	r2, r3
 8025bf8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025bfa:	441d      	add	r5, r3
 8025bfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025bfe:	9229      	str	r2, [sp, #164]	; 0xa4
 8025c00:	3b01      	subs	r3, #1
 8025c02:	931a      	str	r3, [sp, #104]	; 0x68
 8025c04:	e694      	b.n	8025930 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025c06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025c08:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025c0a:	441c      	add	r4, r3
 8025c0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025c0e:	441d      	add	r5, r3
 8025c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c12:	9429      	str	r4, [sp, #164]	; 0xa4
 8025c14:	3b01      	subs	r3, #1
 8025c16:	9309      	str	r3, [sp, #36]	; 0x24
 8025c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c1a:	3302      	adds	r3, #2
 8025c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8025c1e:	e667      	b.n	80258f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025c20:	d024      	beq.n	8025c6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c24:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025c26:	3b01      	subs	r3, #1
 8025c28:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025c2a:	fb00 4003 	mla	r0, r0, r3, r4
 8025c2e:	1400      	asrs	r0, r0, #16
 8025c30:	f53f ae7b 	bmi.w	802592a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c34:	3901      	subs	r1, #1
 8025c36:	4288      	cmp	r0, r1
 8025c38:	f6bf ae77 	bge.w	802592a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c3c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025c3e:	fb01 5303 	mla	r3, r1, r3, r5
 8025c42:	141b      	asrs	r3, r3, #16
 8025c44:	f53f ae71 	bmi.w	802592a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c48:	3a01      	subs	r2, #1
 8025c4a:	4293      	cmp	r3, r2
 8025c4c:	f6bf ae6d 	bge.w	802592a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c50:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025c54:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8025c58:	f1bb 0f00 	cmp.w	fp, #0
 8025c5c:	dc70      	bgt.n	8025d40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c60:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c66:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8025c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025c6e:	2b00      	cmp	r3, #0
 8025c70:	f340 81be 	ble.w	8025ff0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025c78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025c7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025c7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025c82:	eef0 6a62 	vmov.f32	s13, s5
 8025c86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025c8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025c8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c92:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025c96:	eef0 6a43 	vmov.f32	s13, s6
 8025c9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c9e:	ee16 5a90 	vmov	r5, s13
 8025ca2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025ca6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025caa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025cae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025cb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025cb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025cba:	ee12 2a90 	vmov	r2, s5
 8025cbe:	eef0 2a47 	vmov.f32	s5, s14
 8025cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cc6:	ee13 2a10 	vmov	r2, s6
 8025cca:	932b      	str	r3, [sp, #172]	; 0xac
 8025ccc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025cce:	eeb0 3a67 	vmov.f32	s6, s15
 8025cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cd6:	932c      	str	r3, [sp, #176]	; 0xb0
 8025cd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025cda:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025cdc:	3b01      	subs	r3, #1
 8025cde:	9319      	str	r3, [sp, #100]	; 0x64
 8025ce0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ce2:	bf08      	it	eq
 8025ce4:	4613      	moveq	r3, r2
 8025ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8025ce8:	e5f4      	b.n	80258d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025cea:	2900      	cmp	r1, #0
 8025cec:	f43f ae66 	beq.w	80259bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025cf0:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025cf4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025cf8:	900a      	str	r0, [sp, #40]	; 0x28
 8025cfa:	0e00      	lsrs	r0, r0, #24
 8025cfc:	9013      	str	r0, [sp, #76]	; 0x4c
 8025cfe:	e65d      	b.n	80259bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025d00:	f113 0801 	adds.w	r8, r3, #1
 8025d04:	f53f af74 	bmi.w	8025bf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025d08:	4540      	cmp	r0, r8
 8025d0a:	f6ff af71 	blt.w	8025bf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025d0e:	f11c 0801 	adds.w	r8, ip, #1
 8025d12:	f53f af6d 	bmi.w	8025bf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025d16:	45c6      	cmp	lr, r8
 8025d18:	f6ff af6a 	blt.w	8025bf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025d1c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8025d1e:	b200      	sxth	r0, r0
 8025d20:	9302      	str	r3, [sp, #8]
 8025d22:	fa0f f38e 	sxth.w	r3, lr
 8025d26:	9000      	str	r0, [sp, #0]
 8025d28:	9301      	str	r3, [sp, #4]
 8025d2a:	4633      	mov	r3, r6
 8025d2c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8025d2e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025d32:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025d36:	4639      	mov	r1, r7
 8025d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025d3a:	f7ff fc63 	bl	8025604 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025d3e:	e757      	b.n	8025bf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025d40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025d42:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025d46:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025d48:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025d4c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d4e:	1427      	asrs	r7, r4, #16
 8025d50:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025d52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d56:	142b      	asrs	r3, r5, #16
 8025d58:	fb01 7303 	mla	r3, r1, r3, r7
 8025d5c:	18e7      	adds	r7, r4, r3
 8025d5e:	5ce3      	ldrb	r3, [r4, r3]
 8025d60:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025d64:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025d68:	2a00      	cmp	r2, #0
 8025d6a:	f000 8137 	beq.w	8025fdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8025d6e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025d72:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025d76:	9410      	str	r4, [sp, #64]	; 0x40
 8025d78:	0e24      	lsrs	r4, r4, #24
 8025d7a:	9417      	str	r4, [sp, #92]	; 0x5c
 8025d7c:	b170      	cbz	r0, 8025d9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025d7e:	eb07 0e01 	add.w	lr, r7, r1
 8025d82:	5c79      	ldrb	r1, [r7, r1]
 8025d84:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025d88:	910b      	str	r1, [sp, #44]	; 0x2c
 8025d8a:	0e09      	lsrs	r1, r1, #24
 8025d8c:	9114      	str	r1, [sp, #80]	; 0x50
 8025d8e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025d92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025d96:	9111      	str	r1, [sp, #68]	; 0x44
 8025d98:	0e09      	lsrs	r1, r1, #24
 8025d9a:	9118      	str	r1, [sp, #96]	; 0x60
 8025d9c:	b292      	uxth	r2, r2
 8025d9e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025da0:	b280      	uxth	r0, r0
 8025da2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025da4:	fb02 f800 	mul.w	r8, r2, r0
 8025da8:	0112      	lsls	r2, r2, #4
 8025daa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025dae:	eba2 0e08 	sub.w	lr, r2, r8
 8025db2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025db6:	b280      	uxth	r0, r0
 8025db8:	fa1f fe8e 	uxth.w	lr, lr
 8025dbc:	1a12      	subs	r2, r2, r0
 8025dbe:	fb0e f101 	mul.w	r1, lr, r1
 8025dc2:	b292      	uxth	r2, r2
 8025dc4:	fb02 110c 	mla	r1, r2, ip, r1
 8025dc8:	fb00 1104 	mla	r1, r0, r4, r1
 8025dcc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025dce:	fb08 1104 	mla	r1, r8, r4, r1
 8025dd2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025dd6:	2900      	cmp	r1, #0
 8025dd8:	f000 80f5 	beq.w	8025fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025ddc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025de0:	d019      	beq.n	8025e16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8025de2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025de6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025dea:	fb0c fa0a 	mul.w	sl, ip, sl
 8025dee:	fb0c fc03 	mul.w	ip, ip, r3
 8025df2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025df6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025dfa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025dfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e02:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025e06:	4453      	add	r3, sl
 8025e08:	0a3f      	lsrs	r7, r7, #8
 8025e0a:	0a1b      	lsrs	r3, r3, #8
 8025e0c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025e10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e14:	433b      	orrs	r3, r7
 8025e16:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025e18:	2cff      	cmp	r4, #255	; 0xff
 8025e1a:	d020      	beq.n	8025e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8025e1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025e1e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025e22:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025e24:	4367      	muls	r7, r4
 8025e26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025e28:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025e2c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025e30:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025e32:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025e36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e3a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e3e:	44bc      	add	ip, r7
 8025e40:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025e44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025e4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025e58:	ea4c 040a 	orr.w	r4, ip, sl
 8025e5c:	9410      	str	r4, [sp, #64]	; 0x40
 8025e5e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025e60:	2cff      	cmp	r4, #255	; 0xff
 8025e62:	d020      	beq.n	8025ea6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025e64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025e66:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025e6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025e6c:	4367      	muls	r7, r4
 8025e6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025e70:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025e74:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025e78:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025e7a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025e7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e82:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e86:	44bc      	add	ip, r7
 8025e88:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025e8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e90:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025e94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e9c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ea0:	ea4c 040a 	orr.w	r4, ip, sl
 8025ea4:	940b      	str	r4, [sp, #44]	; 0x2c
 8025ea6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025ea8:	2cff      	cmp	r4, #255	; 0xff
 8025eaa:	d020      	beq.n	8025eee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8025eac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025eae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025eb2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025eb4:	4367      	muls	r7, r4
 8025eb6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025eb8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ebc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ec0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025ec2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025ec6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025eca:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ece:	44bc      	add	ip, r7
 8025ed0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025ed4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ed8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025edc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ee0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ee4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ee8:	ea4c 040a 	orr.w	r4, ip, sl
 8025eec:	9411      	str	r4, [sp, #68]	; 0x44
 8025eee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025ef0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025ef4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025ef8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025efc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025efe:	fb0e f707 	mul.w	r7, lr, r7
 8025f02:	fb02 770c 	mla	r7, r2, ip, r7
 8025f06:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025f0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025f0c:	fb00 770c 	mla	r7, r0, ip, r7
 8025f10:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025f14:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025f16:	fb08 770c 	mla	r7, r8, ip, r7
 8025f1a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025f1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025f20:	fb0e fe0c 	mul.w	lr, lr, ip
 8025f24:	0a3f      	lsrs	r7, r7, #8
 8025f26:	fb02 e303 	mla	r3, r2, r3, lr
 8025f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025f2c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025f30:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025f34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025f36:	fb00 330a 	mla	r3, r0, sl, r3
 8025f3a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025f3e:	f8b9 0000 	ldrh.w	r0, [r9]
 8025f42:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025f48:	1202      	asrs	r2, r0, #8
 8025f4a:	434b      	muls	r3, r1
 8025f4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f50:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025f54:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025f58:	1c59      	adds	r1, r3, #1
 8025f5a:	ea47 070c 	orr.w	r7, r7, ip
 8025f5e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025f62:	0c3b      	lsrs	r3, r7, #16
 8025f64:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025f68:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025f6c:	b2ff      	uxtb	r7, r7
 8025f6e:	fb13 f304 	smulbb	r3, r3, r4
 8025f72:	b2c9      	uxtb	r1, r1
 8025f74:	fb1c fc04 	smulbb	ip, ip, r4
 8025f78:	fb02 3201 	mla	r2, r2, r1, r3
 8025f7c:	10c3      	asrs	r3, r0, #3
 8025f7e:	fb17 f704 	smulbb	r7, r7, r4
 8025f82:	00c0      	lsls	r0, r0, #3
 8025f84:	b292      	uxth	r2, r2
 8025f86:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025f8a:	b2c0      	uxtb	r0, r0
 8025f8c:	fb03 c301 	mla	r3, r3, r1, ip
 8025f90:	f102 0c01 	add.w	ip, r2, #1
 8025f94:	fb00 7001 	mla	r0, r0, r1, r7
 8025f98:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025f9c:	b280      	uxth	r0, r0
 8025f9e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8025fa2:	b29b      	uxth	r3, r3
 8025fa4:	1c42      	adds	r2, r0, #1
 8025fa6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025faa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025fae:	ea42 020c 	orr.w	r2, r2, ip
 8025fb2:	f103 0c01 	add.w	ip, r3, #1
 8025fb6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025fba:	095b      	lsrs	r3, r3, #5
 8025fbc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025fc0:	431a      	orrs	r2, r3
 8025fc2:	f8a9 2000 	strh.w	r2, [r9]
 8025fc6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025fc8:	f109 0902 	add.w	r9, r9, #2
 8025fcc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025fce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025fd2:	441a      	add	r2, r3
 8025fd4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025fd6:	9229      	str	r2, [sp, #164]	; 0xa4
 8025fd8:	441d      	add	r5, r3
 8025fda:	e63d      	b.n	8025c58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025fdc:	2800      	cmp	r0, #0
 8025fde:	f43f aedd 	beq.w	8025d9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025fe2:	5c79      	ldrb	r1, [r7, r1]
 8025fe4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025fe8:	910b      	str	r1, [sp, #44]	; 0x2c
 8025fea:	0e09      	lsrs	r1, r1, #24
 8025fec:	9114      	str	r1, [sp, #80]	; 0x50
 8025fee:	e6d5      	b.n	8025d9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025ff0:	b01f      	add	sp, #124	; 0x7c
 8025ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025ff6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ffa:	b089      	sub	sp, #36	; 0x24
 8025ffc:	9101      	str	r1, [sp, #4]
 8025ffe:	9801      	ldr	r0, [sp, #4]
 8026000:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8026004:	8800      	ldrh	r0, [r0, #0]
 8026006:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 802600a:	1206      	asrs	r6, r0, #8
 802600c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8026010:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8026014:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8026018:	9602      	str	r6, [sp, #8]
 802601a:	10c6      	asrs	r6, r0, #3
 802601c:	00c0      	lsls	r0, r0, #3
 802601e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8026022:	b2c0      	uxtb	r0, r0
 8026024:	9603      	str	r6, [sp, #12]
 8026026:	9004      	str	r0, [sp, #16]
 8026028:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 802602c:	fb07 100c 	mla	r0, r7, ip, r1
 8026030:	2f00      	cmp	r7, #0
 8026032:	eb02 0e00 	add.w	lr, r2, r0
 8026036:	f2c0 810a 	blt.w	802624e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802603a:	45b8      	cmp	r8, r7
 802603c:	f340 8107 	ble.w	802624e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8026040:	2900      	cmp	r1, #0
 8026042:	f2c0 8102 	blt.w	802624a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8026046:	458c      	cmp	ip, r1
 8026048:	f340 80ff 	ble.w	802624a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802604c:	5c12      	ldrb	r2, [r2, r0]
 802604e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026052:	1c4a      	adds	r2, r1, #1
 8026054:	f100 80fe 	bmi.w	8026254 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026058:	4594      	cmp	ip, r2
 802605a:	f340 80fb 	ble.w	8026254 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802605e:	2d00      	cmp	r5, #0
 8026060:	f000 80fa 	beq.w	8026258 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8026064:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026068:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802606c:	3701      	adds	r7, #1
 802606e:	f100 80f7 	bmi.w	8026260 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026072:	45b8      	cmp	r8, r7
 8026074:	f340 80f4 	ble.w	8026260 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026078:	2c00      	cmp	r4, #0
 802607a:	f000 80f4 	beq.w	8026266 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802607e:	2900      	cmp	r1, #0
 8026080:	eb0e 020c 	add.w	r2, lr, ip
 8026084:	f2c0 80ea 	blt.w	802625c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026088:	458c      	cmp	ip, r1
 802608a:	f340 80e7 	ble.w	802625c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802608e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8026092:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8026096:	3101      	adds	r1, #1
 8026098:	f100 80e8 	bmi.w	802626c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802609c:	458c      	cmp	ip, r1
 802609e:	f340 80e5 	ble.w	802626c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80260a2:	2d00      	cmp	r5, #0
 80260a4:	f000 80e4 	beq.w	8026270 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 80260a8:	7852      	ldrb	r2, [r2, #1]
 80260aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80260ae:	0e0b      	lsrs	r3, r1, #24
 80260b0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80260b4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80260b8:	9300      	str	r3, [sp, #0]
 80260ba:	b2a4      	uxth	r4, r4
 80260bc:	b2ab      	uxth	r3, r5
 80260be:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80260c2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80260c6:	fb03 f904 	mul.w	r9, r3, r4
 80260ca:	011b      	lsls	r3, r3, #4
 80260cc:	fb0a f505 	mul.w	r5, sl, r5
 80260d0:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80260d4:	eba3 0e09 	sub.w	lr, r3, r9
 80260d8:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80260dc:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80260e0:	0a28      	lsrs	r0, r5, #8
 80260e2:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80260e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80260ea:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80260ee:	fb0a f303 	mul.w	r3, sl, r3
 80260f2:	fb08 f707 	mul.w	r7, r8, r7
 80260f6:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80260fa:	4405      	add	r5, r0
 80260fc:	fb08 fc0c 	mul.w	ip, r8, ip
 8026100:	b2a4      	uxth	r4, r4
 8026102:	0a2d      	lsrs	r5, r5, #8
 8026104:	fa1f fe8e 	uxth.w	lr, lr
 8026108:	1b12      	subs	r2, r2, r4
 802610a:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802610e:	b292      	uxth	r2, r2
 8026110:	9005      	str	r0, [sp, #20]
 8026112:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8026116:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802611a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802611e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026122:	0a1b      	lsrs	r3, r3, #8
 8026124:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026128:	9306      	str	r3, [sp, #24]
 802612a:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802612e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026132:	4460      	add	r0, ip
 8026134:	fb0b f303 	mul.w	r3, fp, r3
 8026138:	fb0b f606 	mul.w	r6, fp, r6
 802613c:	0a00      	lsrs	r0, r0, #8
 802613e:	0a1d      	lsrs	r5, r3, #8
 8026140:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8026144:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026148:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802614c:	441d      	add	r5, r3
 802614e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8026152:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8026156:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802615a:	0a2d      	lsrs	r5, r5, #8
 802615c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026160:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8026164:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026168:	0a36      	lsrs	r6, r6, #8
 802616a:	0a1b      	lsrs	r3, r3, #8
 802616c:	fb05 f50e 	mul.w	r5, r5, lr
 8026170:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026174:	9307      	str	r3, [sp, #28]
 8026176:	0e0b      	lsrs	r3, r1, #24
 8026178:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802617c:	fb0e f606 	mul.w	r6, lr, r6
 8026180:	435f      	muls	r7, r3
 8026182:	4359      	muls	r1, r3
 8026184:	9b05      	ldr	r3, [sp, #20]
 8026186:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802618a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802618e:	fb03 5502 	mla	r5, r3, r2, r5
 8026192:	9b06      	ldr	r3, [sp, #24]
 8026194:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026198:	fb0e fe0b 	mul.w	lr, lr, fp
 802619c:	44bc      	add	ip, r7
 802619e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80261a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261a6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80261aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80261ae:	0a09      	lsrs	r1, r1, #8
 80261b0:	fb0c 5509 	mla	r5, ip, r9, r5
 80261b4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80261b8:	fb00 5504 	mla	r5, r0, r4, r5
 80261bc:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80261c0:	9b07      	ldr	r3, [sp, #28]
 80261c2:	fb02 6000 	mla	r0, r2, r0, r6
 80261c6:	0a2d      	lsrs	r5, r5, #8
 80261c8:	fb02 e20a 	mla	r2, r2, sl, lr
 80261cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80261d0:	fb09 0001 	mla	r0, r9, r1, r0
 80261d4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80261d8:	fb04 0003 	mla	r0, r4, r3, r0
 80261dc:	9b00      	ldr	r3, [sp, #0]
 80261de:	fb04 2408 	mla	r4, r4, r8, r2
 80261e2:	9a04      	ldr	r2, [sp, #16]
 80261e4:	0a00      	lsrs	r0, r0, #8
 80261e6:	fb09 4903 	mla	r9, r9, r3, r4
 80261ea:	9b02      	ldr	r3, [sp, #8]
 80261ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80261f0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80261f4:	4305      	orrs	r5, r0
 80261f6:	fa5f f989 	uxtb.w	r9, r9
 80261fa:	fb03 f109 	mul.w	r1, r3, r9
 80261fe:	9b03      	ldr	r3, [sp, #12]
 8026200:	fb03 f309 	mul.w	r3, r3, r9
 8026204:	fb02 f909 	mul.w	r9, r2, r9
 8026208:	1c4a      	adds	r2, r1, #1
 802620a:	1c58      	adds	r0, r3, #1
 802620c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026210:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026214:	0c2a      	lsrs	r2, r5, #16
 8026216:	0a2b      	lsrs	r3, r5, #8
 8026218:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802621c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026220:	0212      	lsls	r2, r2, #8
 8026222:	00db      	lsls	r3, r3, #3
 8026224:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026228:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802622c:	4313      	orrs	r3, r2
 802622e:	f109 0201 	add.w	r2, r9, #1
 8026232:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8026236:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802623a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802623e:	431d      	orrs	r5, r3
 8026240:	9b01      	ldr	r3, [sp, #4]
 8026242:	801d      	strh	r5, [r3, #0]
 8026244:	b009      	add	sp, #36	; 0x24
 8026246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802624a:	2000      	movs	r0, #0
 802624c:	e701      	b.n	8026052 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802624e:	2600      	movs	r6, #0
 8026250:	4630      	mov	r0, r6
 8026252:	e70b      	b.n	802606c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026254:	2600      	movs	r6, #0
 8026256:	e709      	b.n	802606c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026258:	462e      	mov	r6, r5
 802625a:	e707      	b.n	802606c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802625c:	2700      	movs	r7, #0
 802625e:	e71a      	b.n	8026096 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8026260:	2100      	movs	r1, #0
 8026262:	460f      	mov	r7, r1
 8026264:	e723      	b.n	80260ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026266:	4621      	mov	r1, r4
 8026268:	4627      	mov	r7, r4
 802626a:	e720      	b.n	80260ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802626c:	2100      	movs	r1, #0
 802626e:	e71e      	b.n	80260ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026270:	4629      	mov	r1, r5
 8026272:	e71c      	b.n	80260ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08026274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026278:	b09b      	sub	sp, #108	; 0x6c
 802627a:	9218      	str	r2, [sp, #96]	; 0x60
 802627c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802627e:	9019      	str	r0, [sp, #100]	; 0x64
 8026280:	9116      	str	r1, [sp, #88]	; 0x58
 8026282:	6850      	ldr	r0, [r2, #4]
 8026284:	9307      	str	r3, [sp, #28]
 8026286:	6812      	ldr	r2, [r2, #0]
 8026288:	9d26      	ldr	r5, [sp, #152]	; 0x98
 802628a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802628e:	fb00 1303 	mla	r3, r0, r3, r1
 8026292:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026296:	930a      	str	r3, [sp, #40]	; 0x28
 8026298:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802629a:	681b      	ldr	r3, [r3, #0]
 802629c:	930f      	str	r3, [sp, #60]	; 0x3c
 802629e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262a0:	685e      	ldr	r6, [r3, #4]
 80262a2:	3604      	adds	r6, #4
 80262a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80262a6:	2b00      	cmp	r3, #0
 80262a8:	dc03      	bgt.n	80262b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80262aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80262ac:	2b00      	cmp	r3, #0
 80262ae:	f340 8373 	ble.w	8026998 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80262b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80262b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80262bc:	1e48      	subs	r0, r1, #1
 80262be:	1e57      	subs	r7, r2, #1
 80262c0:	9b07      	ldr	r3, [sp, #28]
 80262c2:	2b00      	cmp	r3, #0
 80262c4:	f340 818f 	ble.w	80265e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80262c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80262ca:	142b      	asrs	r3, r5, #16
 80262cc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80262d0:	d406      	bmi.n	80262e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80262d2:	4584      	cmp	ip, r0
 80262d4:	da04      	bge.n	80262e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80262d6:	2b00      	cmp	r3, #0
 80262d8:	db02      	blt.n	80262e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80262da:	42bb      	cmp	r3, r7
 80262dc:	f2c0 8184 	blt.w	80265e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80262e0:	f11c 0c01 	adds.w	ip, ip, #1
 80262e4:	f100 8172 	bmi.w	80265cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80262e8:	4561      	cmp	r1, ip
 80262ea:	f2c0 816f 	blt.w	80265cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80262ee:	3301      	adds	r3, #1
 80262f0:	f100 816c 	bmi.w	80265cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80262f4:	429a      	cmp	r2, r3
 80262f6:	f2c0 8169 	blt.w	80265cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80262fa:	9b07      	ldr	r3, [sp, #28]
 80262fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80262fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8026300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026302:	2b00      	cmp	r3, #0
 8026304:	f340 818e 	ble.w	8026624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8026308:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802630a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802630e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026312:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026316:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026318:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802631c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802631e:	141b      	asrs	r3, r3, #16
 8026320:	f100 81d1 	bmi.w	80266c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026324:	f101 38ff 	add.w	r8, r1, #4294967295
 8026328:	4543      	cmp	r3, r8
 802632a:	f280 81cc 	bge.w	80266c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802632e:	f1bc 0f00 	cmp.w	ip, #0
 8026332:	f2c0 81c8 	blt.w	80266c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026336:	f10e 38ff 	add.w	r8, lr, #4294967295
 802633a:	45c4      	cmp	ip, r8
 802633c:	f280 81c3 	bge.w	80266c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026340:	b209      	sxth	r1, r1
 8026342:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026344:	fb0c 3301 	mla	r3, ip, r1, r3
 8026348:	eb04 0803 	add.w	r8, r4, r3
 802634c:	5ce3      	ldrb	r3, [r4, r3]
 802634e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026352:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026356:	2a00      	cmp	r2, #0
 8026358:	f000 81aa 	beq.w	80266b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802635c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026360:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026364:	940b      	str	r4, [sp, #44]	; 0x2c
 8026366:	0e24      	lsrs	r4, r4, #24
 8026368:	9412      	str	r4, [sp, #72]	; 0x48
 802636a:	b178      	cbz	r0, 802638c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802636c:	eb08 0c01 	add.w	ip, r8, r1
 8026370:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026374:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026378:	9108      	str	r1, [sp, #32]
 802637a:	0e09      	lsrs	r1, r1, #24
 802637c:	9110      	str	r1, [sp, #64]	; 0x40
 802637e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026382:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026386:	910c      	str	r1, [sp, #48]	; 0x30
 8026388:	0e09      	lsrs	r1, r1, #24
 802638a:	9113      	str	r1, [sp, #76]	; 0x4c
 802638c:	b292      	uxth	r2, r2
 802638e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026390:	b280      	uxth	r0, r0
 8026392:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026394:	fb02 f900 	mul.w	r9, r2, r0
 8026398:	0112      	lsls	r2, r2, #4
 802639a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802639e:	eba2 0809 	sub.w	r8, r2, r9
 80263a2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80263a6:	b280      	uxth	r0, r0
 80263a8:	fa1f f888 	uxth.w	r8, r8
 80263ac:	1a12      	subs	r2, r2, r0
 80263ae:	fb08 f101 	mul.w	r1, r8, r1
 80263b2:	b292      	uxth	r2, r2
 80263b4:	fb02 110e 	mla	r1, r2, lr, r1
 80263b8:	fb00 1104 	mla	r1, r0, r4, r1
 80263bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80263be:	fb09 1104 	mla	r1, r9, r4, r1
 80263c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80263c6:	2900      	cmp	r1, #0
 80263c8:	f000 80f5 	beq.w	80265b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80263cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80263d0:	d01b      	beq.n	802640a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80263d2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80263d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80263da:	fb0e fa0a 	mul.w	sl, lr, sl
 80263de:	fb0e fe03 	mul.w	lr, lr, r3
 80263e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80263e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80263ea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80263ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263f2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80263f6:	4453      	add	r3, sl
 80263f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263fc:	0a1b      	lsrs	r3, r3, #8
 80263fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026402:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026406:	ea43 030c 	orr.w	r3, r3, ip
 802640a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802640c:	2cff      	cmp	r4, #255	; 0xff
 802640e:	d021      	beq.n	8026454 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8026410:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026412:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026416:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026418:	fb04 fb0b 	mul.w	fp, r4, fp
 802641c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802641e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026422:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026424:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026428:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802642c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026430:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026434:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026438:	44de      	add	lr, fp
 802643a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802643e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026442:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026446:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802644a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802644e:	ea4e 040a 	orr.w	r4, lr, sl
 8026452:	940b      	str	r4, [sp, #44]	; 0x2c
 8026454:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026456:	2cff      	cmp	r4, #255	; 0xff
 8026458:	d021      	beq.n	802649e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802645a:	9c08      	ldr	r4, [sp, #32]
 802645c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026460:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026462:	fb04 fb0b 	mul.w	fp, r4, fp
 8026466:	9c08      	ldr	r4, [sp, #32]
 8026468:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802646c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802646e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026472:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026476:	fb04 fa0a 	mul.w	sl, r4, sl
 802647a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802647e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026482:	44de      	add	lr, fp
 8026484:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026488:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802648c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026490:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026494:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026498:	ea4e 040a 	orr.w	r4, lr, sl
 802649c:	9408      	str	r4, [sp, #32]
 802649e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80264a0:	2cff      	cmp	r4, #255	; 0xff
 80264a2:	d021      	beq.n	80264e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80264a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80264a6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80264aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80264ac:	fb04 fb0b 	mul.w	fp, r4, fp
 80264b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80264b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80264b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80264b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80264bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80264c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80264c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80264c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80264cc:	44de      	add	lr, fp
 80264ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80264d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80264d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80264de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80264e2:	ea4e 040a 	orr.w	r4, lr, sl
 80264e6:	940c      	str	r4, [sp, #48]	; 0x30
 80264e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80264ea:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80264ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80264f2:	43c9      	mvns	r1, r1
 80264f4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80264f8:	9c08      	ldr	r4, [sp, #32]
 80264fa:	fb08 fc0c 	mul.w	ip, r8, ip
 80264fe:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026502:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026506:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026508:	fb00 cc0e 	mla	ip, r0, lr, ip
 802650c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026510:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026512:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026516:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802651a:	fb08 f80e 	mul.w	r8, r8, lr
 802651e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026522:	fa5f fe81 	uxtb.w	lr, r1
 8026526:	fb02 8303 	mla	r3, r2, r3, r8
 802652a:	9a08      	ldr	r2, [sp, #32]
 802652c:	f8b7 8000 	ldrh.w	r8, [r7]
 8026530:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026534:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802653a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802653e:	fb00 330a 	mla	r3, r0, sl, r3
 8026542:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8026546:	ea4f 2228 	mov.w	r2, r8, asr #8
 802654a:	fb09 3900 	mla	r9, r9, r0, r3
 802654e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026552:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026556:	b2c9      	uxtb	r1, r1
 8026558:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802655c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026560:	fb02 f20e 	mul.w	r2, r2, lr
 8026564:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026568:	fb00 f00e 	mul.w	r0, r0, lr
 802656c:	1c53      	adds	r3, r2, #1
 802656e:	fb01 f10e 	mul.w	r1, r1, lr
 8026572:	ea4c 0c09 	orr.w	ip, ip, r9
 8026576:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802657a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802657e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026582:	4a60      	ldr	r2, [pc, #384]	; (8026704 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8026584:	b2db      	uxtb	r3, r3
 8026586:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802658a:	1c43      	adds	r3, r0, #1
 802658c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026590:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026594:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026598:	00db      	lsls	r3, r3, #3
 802659a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802659e:	4313      	orrs	r3, r2
 80265a0:	1c4a      	adds	r2, r1, #1
 80265a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80265a6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80265aa:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80265ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80265b2:	f8a7 c000 	strh.w	ip, [r7]
 80265b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80265b8:	3702      	adds	r7, #2
 80265ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80265bc:	441a      	add	r2, r3
 80265be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80265c0:	441d      	add	r5, r3
 80265c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80265c4:	9225      	str	r2, [sp, #148]	; 0x94
 80265c6:	3b01      	subs	r3, #1
 80265c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80265ca:	e699      	b.n	8026300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80265cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80265ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80265d0:	441c      	add	r4, r3
 80265d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80265d4:	441d      	add	r5, r3
 80265d6:	9b07      	ldr	r3, [sp, #28]
 80265d8:	9425      	str	r4, [sp, #148]	; 0x94
 80265da:	3b01      	subs	r3, #1
 80265dc:	9307      	str	r3, [sp, #28]
 80265de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80265e0:	3302      	adds	r3, #2
 80265e2:	930a      	str	r3, [sp, #40]	; 0x28
 80265e4:	e66c      	b.n	80262c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80265e6:	d024      	beq.n	8026632 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80265e8:	9b07      	ldr	r3, [sp, #28]
 80265ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80265ec:	3b01      	subs	r3, #1
 80265ee:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80265f0:	fb00 4003 	mla	r0, r0, r3, r4
 80265f4:	1400      	asrs	r0, r0, #16
 80265f6:	f53f ae80 	bmi.w	80262fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80265fa:	3901      	subs	r1, #1
 80265fc:	4288      	cmp	r0, r1
 80265fe:	f6bf ae7c 	bge.w	80262fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026602:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026604:	fb01 5303 	mla	r3, r1, r3, r5
 8026608:	141b      	asrs	r3, r3, #16
 802660a:	f53f ae76 	bmi.w	80262fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802660e:	3a01      	subs	r2, #1
 8026610:	4293      	cmp	r3, r2
 8026612:	f6bf ae72 	bge.w	80262fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026616:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802661a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802661e:	f1bb 0f00 	cmp.w	fp, #0
 8026622:	dc71      	bgt.n	8026708 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8026624:	9b07      	ldr	r3, [sp, #28]
 8026626:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802662a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802662c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026630:	930a      	str	r3, [sp, #40]	; 0x28
 8026632:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026634:	2b00      	cmp	r3, #0
 8026636:	f340 81af 	ble.w	8026998 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802663a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802663e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026640:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026644:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026648:	eef0 6a62 	vmov.f32	s13, s5
 802664c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026650:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026654:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026658:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802665c:	eef0 6a43 	vmov.f32	s13, s6
 8026660:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026664:	ee16 5a90 	vmov	r5, s13
 8026668:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802666c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026670:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026674:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026678:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802667c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026680:	ee12 2a90 	vmov	r2, s5
 8026684:	eef0 2a47 	vmov.f32	s5, s14
 8026688:	fb92 f3f3 	sdiv	r3, r2, r3
 802668c:	ee13 2a10 	vmov	r2, s6
 8026690:	9327      	str	r3, [sp, #156]	; 0x9c
 8026692:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026694:	eeb0 3a67 	vmov.f32	s6, s15
 8026698:	fb92 f3f3 	sdiv	r3, r2, r3
 802669c:	9328      	str	r3, [sp, #160]	; 0xa0
 802669e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80266a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80266a2:	3b01      	subs	r3, #1
 80266a4:	9316      	str	r3, [sp, #88]	; 0x58
 80266a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80266a8:	bf08      	it	eq
 80266aa:	4613      	moveq	r3, r2
 80266ac:	9307      	str	r3, [sp, #28]
 80266ae:	e5f9      	b.n	80262a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80266b0:	2800      	cmp	r0, #0
 80266b2:	f43f ae6b 	beq.w	802638c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80266b6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80266ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80266be:	9108      	str	r1, [sp, #32]
 80266c0:	0e09      	lsrs	r1, r1, #24
 80266c2:	9110      	str	r1, [sp, #64]	; 0x40
 80266c4:	e662      	b.n	802638c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80266c6:	f113 0801 	adds.w	r8, r3, #1
 80266ca:	f53f af74 	bmi.w	80265b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80266ce:	4541      	cmp	r1, r8
 80266d0:	f6ff af71 	blt.w	80265b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80266d4:	f11c 0801 	adds.w	r8, ip, #1
 80266d8:	f53f af6d 	bmi.w	80265b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80266dc:	45c6      	cmp	lr, r8
 80266de:	f6ff af6a 	blt.w	80265b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80266e2:	b209      	sxth	r1, r1
 80266e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80266e8:	fa0f f38e 	sxth.w	r3, lr
 80266ec:	9100      	str	r1, [sp, #0]
 80266ee:	4639      	mov	r1, r7
 80266f0:	9301      	str	r3, [sp, #4]
 80266f2:	4633      	mov	r3, r6
 80266f4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80266f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80266fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80266fc:	f7ff fc7b 	bl	8025ff6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026700:	e759      	b.n	80265b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026702:	bf00      	nop
 8026704:	fffff800 	.word	0xfffff800
 8026708:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802670a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802670e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026710:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026714:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026716:	1427      	asrs	r7, r4, #16
 8026718:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802671a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802671e:	142b      	asrs	r3, r5, #16
 8026720:	fb01 7303 	mla	r3, r1, r3, r7
 8026724:	18e7      	adds	r7, r4, r3
 8026726:	5ce3      	ldrb	r3, [r4, r3]
 8026728:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802672c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026730:	2a00      	cmp	r2, #0
 8026732:	f000 8127 	beq.w	8026984 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8026736:	f897 e001 	ldrb.w	lr, [r7, #1]
 802673a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802673e:	940d      	str	r4, [sp, #52]	; 0x34
 8026740:	0e24      	lsrs	r4, r4, #24
 8026742:	9414      	str	r4, [sp, #80]	; 0x50
 8026744:	b170      	cbz	r0, 8026764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026746:	eb07 0e01 	add.w	lr, r7, r1
 802674a:	5c79      	ldrb	r1, [r7, r1]
 802674c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026750:	9109      	str	r1, [sp, #36]	; 0x24
 8026752:	0e09      	lsrs	r1, r1, #24
 8026754:	9111      	str	r1, [sp, #68]	; 0x44
 8026756:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802675a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802675e:	910e      	str	r1, [sp, #56]	; 0x38
 8026760:	0e09      	lsrs	r1, r1, #24
 8026762:	9115      	str	r1, [sp, #84]	; 0x54
 8026764:	b292      	uxth	r2, r2
 8026766:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026768:	b280      	uxth	r0, r0
 802676a:	fb02 f800 	mul.w	r8, r2, r0
 802676e:	0112      	lsls	r2, r2, #4
 8026770:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026774:	eba2 0e08 	sub.w	lr, r2, r8
 8026778:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802677c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802677e:	b280      	uxth	r0, r0
 8026780:	fa1f fe8e 	uxth.w	lr, lr
 8026784:	1a09      	subs	r1, r1, r0
 8026786:	fb0e f202 	mul.w	r2, lr, r2
 802678a:	b289      	uxth	r1, r1
 802678c:	fb01 220c 	mla	r2, r1, ip, r2
 8026790:	fb00 2204 	mla	r2, r0, r4, r2
 8026794:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026796:	fb08 2204 	mla	r2, r8, r4, r2
 802679a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802679e:	2a00      	cmp	r2, #0
 80267a0:	f000 80e5 	beq.w	802696e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80267a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80267a8:	d019      	beq.n	80267de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80267aa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80267ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80267b2:	fb0c fa0a 	mul.w	sl, ip, sl
 80267b6:	fb0c fc03 	mul.w	ip, ip, r3
 80267ba:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80267be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80267c2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80267c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80267ca:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80267ce:	4453      	add	r3, sl
 80267d0:	0a3f      	lsrs	r7, r7, #8
 80267d2:	0a1b      	lsrs	r3, r3, #8
 80267d4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80267d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80267dc:	433b      	orrs	r3, r7
 80267de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267e0:	2cff      	cmp	r4, #255	; 0xff
 80267e2:	d020      	beq.n	8026826 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80267e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80267ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267ec:	4367      	muls	r7, r4
 80267ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80267f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80267fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026802:	fb04 fa0a 	mul.w	sl, r4, sl
 8026806:	44bc      	add	ip, r7
 8026808:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802680c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026810:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026814:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026818:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802681c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026820:	ea4c 040a 	orr.w	r4, ip, sl
 8026824:	940d      	str	r4, [sp, #52]	; 0x34
 8026826:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026828:	2cff      	cmp	r4, #255	; 0xff
 802682a:	d020      	beq.n	802686e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802682c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802682e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026832:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026834:	4367      	muls	r7, r4
 8026836:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026838:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802683c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026840:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026842:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026846:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802684a:	fb04 fa0a 	mul.w	sl, r4, sl
 802684e:	44bc      	add	ip, r7
 8026850:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026854:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026858:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802685c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026860:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026864:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026868:	ea4c 040a 	orr.w	r4, ip, sl
 802686c:	9409      	str	r4, [sp, #36]	; 0x24
 802686e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026870:	2cff      	cmp	r4, #255	; 0xff
 8026872:	d020      	beq.n	80268b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8026874:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026876:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802687a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802687c:	4367      	muls	r7, r4
 802687e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026880:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026884:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026888:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802688a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802688e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026892:	fb04 fa0a 	mul.w	sl, r4, sl
 8026896:	44bc      	add	ip, r7
 8026898:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802689c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80268a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268b0:	ea4c 040a 	orr.w	r4, ip, sl
 80268b4:	940e      	str	r4, [sp, #56]	; 0x38
 80268b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80268b8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80268bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80268c0:	43d2      	mvns	r2, r2
 80268c2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80268c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80268c8:	b2d2      	uxtb	r2, r2
 80268ca:	fb0e f707 	mul.w	r7, lr, r7
 80268ce:	fb01 770c 	mla	r7, r1, ip, r7
 80268d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80268d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80268d8:	fb00 770c 	mla	r7, r0, ip, r7
 80268dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80268e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80268e2:	fb08 770c 	mla	r7, r8, ip, r7
 80268e6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80268ea:	fb0e fe0c 	mul.w	lr, lr, ip
 80268ee:	0a3f      	lsrs	r7, r7, #8
 80268f0:	fb01 e303 	mla	r3, r1, r3, lr
 80268f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80268f6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80268fa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80268fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026900:	fb00 330a 	mla	r3, r0, sl, r3
 8026904:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026908:	fb08 3c0c 	mla	ip, r8, ip, r3
 802690c:	f8b9 3000 	ldrh.w	r3, [r9]
 8026910:	1218      	asrs	r0, r3, #8
 8026912:	10d9      	asrs	r1, r3, #3
 8026914:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026918:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802691c:	00db      	lsls	r3, r3, #3
 802691e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026922:	4350      	muls	r0, r2
 8026924:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026928:	b2db      	uxtb	r3, r3
 802692a:	4351      	muls	r1, r2
 802692c:	ea47 070c 	orr.w	r7, r7, ip
 8026930:	4353      	muls	r3, r2
 8026932:	1c42      	adds	r2, r0, #1
 8026934:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026938:	0c3a      	lsrs	r2, r7, #16
 802693a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802693e:	4a18      	ldr	r2, [pc, #96]	; (80269a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8026940:	b2c0      	uxtb	r0, r0
 8026942:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8026946:	1c4a      	adds	r2, r1, #1
 8026948:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802694c:	0a3a      	lsrs	r2, r7, #8
 802694e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026952:	00c9      	lsls	r1, r1, #3
 8026954:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026958:	4301      	orrs	r1, r0
 802695a:	1c58      	adds	r0, r3, #1
 802695c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026960:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026964:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026968:	4308      	orrs	r0, r1
 802696a:	f8a9 0000 	strh.w	r0, [r9]
 802696e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026970:	f109 0902 	add.w	r9, r9, #2
 8026974:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026976:	f10b 3bff 	add.w	fp, fp, #4294967295
 802697a:	441a      	add	r2, r3
 802697c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802697e:	9225      	str	r2, [sp, #148]	; 0x94
 8026980:	441d      	add	r5, r3
 8026982:	e64c      	b.n	802661e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026984:	2800      	cmp	r0, #0
 8026986:	f43f aeed 	beq.w	8026764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802698a:	5c79      	ldrb	r1, [r7, r1]
 802698c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026990:	9109      	str	r1, [sp, #36]	; 0x24
 8026992:	0e09      	lsrs	r1, r1, #24
 8026994:	9111      	str	r1, [sp, #68]	; 0x44
 8026996:	e6e5      	b.n	8026764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026998:	b01b      	add	sp, #108	; 0x6c
 802699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802699e:	bf00      	nop
 80269a0:	fffff800 	.word	0xfffff800

080269a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80269a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269a8:	b085      	sub	sp, #20
 80269aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80269ae:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80269b2:	2800      	cmp	r0, #0
 80269b4:	9103      	str	r1, [sp, #12]
 80269b6:	fb00 7406 	mla	r4, r0, r6, r7
 80269ba:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80269be:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80269c2:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80269c6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80269ca:	eb03 0904 	add.w	r9, r3, r4
 80269ce:	9501      	str	r5, [sp, #4]
 80269d0:	f2c0 8150 	blt.w	8026c74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80269d4:	4583      	cmp	fp, r0
 80269d6:	f340 814d 	ble.w	8026c74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80269da:	2f00      	cmp	r7, #0
 80269dc:	f2c0 8146 	blt.w	8026c6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80269e0:	42be      	cmp	r6, r7
 80269e2:	f340 8143 	ble.w	8026c6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80269e6:	f813 c004 	ldrb.w	ip, [r3, r4]
 80269ea:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80269ee:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80269f2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80269f6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80269fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80269fe:	4355      	muls	r5, r2
 8026a00:	fb0c f203 	mul.w	r2, ip, r3
 8026a04:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026a08:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8026a0c:	441d      	add	r5, r3
 8026a0e:	f102 0320 	add.w	r3, r2, #32
 8026a12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026a16:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026a1a:	0a1b      	lsrs	r3, r3, #8
 8026a1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a20:	431c      	orrs	r4, r3
 8026a22:	1c7b      	adds	r3, r7, #1
 8026a24:	f100 812b 	bmi.w	8026c7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026a28:	429e      	cmp	r6, r3
 8026a2a:	f340 8128 	ble.w	8026c7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026a2e:	2900      	cmp	r1, #0
 8026a30:	f000 8128 	beq.w	8026c84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8026a34:	9a01      	ldr	r2, [sp, #4]
 8026a36:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026a3a:	8855      	ldrh	r5, [r2, #2]
 8026a3c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026a40:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8026a44:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026a48:	fb08 f802 	mul.w	r8, r8, r2
 8026a4c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026a50:	435d      	muls	r5, r3
 8026a52:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026a56:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026a5a:	44d0      	add	r8, sl
 8026a5c:	f105 0a20 	add.w	sl, r5, #32
 8026a60:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026a64:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026a68:	0a2d      	lsrs	r5, r5, #8
 8026a6a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026a6e:	432a      	orrs	r2, r5
 8026a70:	3001      	adds	r0, #1
 8026a72:	f100 810d 	bmi.w	8026c90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026a76:	4583      	cmp	fp, r0
 8026a78:	f340 810a 	ble.w	8026c90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026a7c:	f1be 0f00 	cmp.w	lr, #0
 8026a80:	f000 810b 	beq.w	8026c9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8026a84:	2f00      	cmp	r7, #0
 8026a86:	f2c0 8100 	blt.w	8026c8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026a8a:	42be      	cmp	r6, r7
 8026a8c:	f340 80fd 	ble.w	8026c8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026a90:	9801      	ldr	r0, [sp, #4]
 8026a92:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026a96:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026a9a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8026a9e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8026aa2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8026aa6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8026aaa:	fb0a fa00 	mul.w	sl, sl, r0
 8026aae:	fb05 f808 	mul.w	r8, r5, r8
 8026ab2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8026ab6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8026aba:	4482      	add	sl, r0
 8026abc:	f108 0020 	add.w	r0, r8, #32
 8026ac0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026ac4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026ac8:	0a00      	lsrs	r0, r0, #8
 8026aca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026ace:	ea4b 0b00 	orr.w	fp, fp, r0
 8026ad2:	3701      	adds	r7, #1
 8026ad4:	f100 80e6 	bmi.w	8026ca4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026ad8:	42be      	cmp	r6, r7
 8026ada:	f340 80e3 	ble.w	8026ca4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026ade:	2900      	cmp	r1, #0
 8026ae0:	f000 80e3 	beq.w	8026caa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8026ae4:	3601      	adds	r6, #1
 8026ae6:	9801      	ldr	r0, [sp, #4]
 8026ae8:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026aec:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026af0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8026af4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8026af8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026afc:	fb09 f906 	mul.w	r9, r9, r6
 8026b00:	fb07 f800 	mul.w	r8, r7, r0
 8026b04:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8026b08:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026b0c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8026b10:	44d1      	add	r9, sl
 8026b12:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8026b16:	f108 0020 	add.w	r0, r8, #32
 8026b1a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026b1e:	0a00      	lsrs	r0, r0, #8
 8026b20:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b24:	4330      	orrs	r0, r6
 8026b26:	b28e      	uxth	r6, r1
 8026b28:	fa1f f98e 	uxth.w	r9, lr
 8026b2c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026b30:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8026b34:	fb06 f809 	mul.w	r8, r6, r9
 8026b38:	0136      	lsls	r6, r6, #4
 8026b3a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026b3e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026b42:	9601      	str	r6, [sp, #4]
 8026b44:	ea4a 0404 	orr.w	r4, sl, r4
 8026b48:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026b4c:	fa1f f689 	uxth.w	r6, r9
 8026b50:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026b54:	fb11 f90e 	smulbb	r9, r1, lr
 8026b58:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026b5c:	9602      	str	r6, [sp, #8]
 8026b5e:	4626      	mov	r6, r4
 8026b60:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026b64:	f1ce 0410 	rsb	r4, lr, #16
 8026b68:	ea4a 0202 	orr.w	r2, sl, r2
 8026b6c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026b70:	1a64      	subs	r4, r4, r1
 8026b72:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026b76:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026b7a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026b7e:	434a      	muls	r2, r1
 8026b80:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026b84:	ea4a 0000 	orr.w	r0, sl, r0
 8026b88:	9903      	ldr	r1, [sp, #12]
 8026b8a:	fb04 2406 	mla	r4, r4, r6, r2
 8026b8e:	9e02      	ldr	r6, [sp, #8]
 8026b90:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026b94:	fb09 4200 	mla	r2, r9, r0, r4
 8026b98:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8026b9c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026ba0:	8808      	ldrh	r0, [r1, #0]
 8026ba2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026ba6:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8026baa:	ea44 0b0b 	orr.w	fp, r4, fp
 8026bae:	9c01      	ldr	r4, [sp, #4]
 8026bb0:	b289      	uxth	r1, r1
 8026bb2:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8026bb6:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8026bba:	1ba4      	subs	r4, r4, r6
 8026bbc:	9e01      	ldr	r6, [sp, #4]
 8026bbe:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026bc2:	eba6 0608 	sub.w	r6, r6, r8
 8026bc6:	b2a4      	uxth	r4, r4
 8026bc8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026bcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026bd0:	b2b6      	uxth	r6, r6
 8026bd2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026bd6:	4373      	muls	r3, r6
 8026bd8:	ea42 0e0e 	orr.w	lr, r2, lr
 8026bdc:	fb0c 3304 	mla	r3, ip, r4, r3
 8026be0:	9c02      	ldr	r4, [sp, #8]
 8026be2:	fa1f f28e 	uxth.w	r2, lr
 8026be6:	fb04 3505 	mla	r5, r4, r5, r3
 8026bea:	10d4      	asrs	r4, r2, #3
 8026bec:	fb08 5707 	mla	r7, r8, r7, r5
 8026bf0:	1215      	asrs	r5, r2, #8
 8026bf2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8026bf6:	00d2      	lsls	r2, r2, #3
 8026bf8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026bfc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026c00:	b2d2      	uxtb	r2, r2
 8026c02:	434f      	muls	r7, r1
 8026c04:	1c7b      	adds	r3, r7, #1
 8026c06:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8026c0a:	1203      	asrs	r3, r0, #8
 8026c0c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8026c10:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026c14:	b2ff      	uxtb	r7, r7
 8026c16:	fb13 f307 	smulbb	r3, r3, r7
 8026c1a:	fb05 3501 	mla	r5, r5, r1, r3
 8026c1e:	10c3      	asrs	r3, r0, #3
 8026c20:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026c24:	b2ad      	uxth	r5, r5
 8026c26:	fb13 f307 	smulbb	r3, r3, r7
 8026c2a:	fb04 3401 	mla	r4, r4, r1, r3
 8026c2e:	00c3      	lsls	r3, r0, #3
 8026c30:	b2db      	uxtb	r3, r3
 8026c32:	b2a4      	uxth	r4, r4
 8026c34:	fb13 f307 	smulbb	r3, r3, r7
 8026c38:	fb02 3101 	mla	r1, r2, r1, r3
 8026c3c:	1c6b      	adds	r3, r5, #1
 8026c3e:	1c62      	adds	r2, r4, #1
 8026c40:	b289      	uxth	r1, r1
 8026c42:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026c46:	1c4b      	adds	r3, r1, #1
 8026c48:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026c4c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026c50:	9a03      	ldr	r2, [sp, #12]
 8026c52:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026c56:	0964      	lsrs	r4, r4, #5
 8026c58:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c5c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8026c60:	432b      	orrs	r3, r5
 8026c62:	4323      	orrs	r3, r4
 8026c64:	8013      	strh	r3, [r2, #0]
 8026c66:	b005      	add	sp, #20
 8026c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c6c:	f04f 0c00 	mov.w	ip, #0
 8026c70:	4664      	mov	r4, ip
 8026c72:	e6d6      	b.n	8026a22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8026c74:	2300      	movs	r3, #0
 8026c76:	469c      	mov	ip, r3
 8026c78:	461a      	mov	r2, r3
 8026c7a:	461c      	mov	r4, r3
 8026c7c:	e6f8      	b.n	8026a70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026c7e:	2300      	movs	r3, #0
 8026c80:	461a      	mov	r2, r3
 8026c82:	e6f5      	b.n	8026a70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026c84:	460b      	mov	r3, r1
 8026c86:	460a      	mov	r2, r1
 8026c88:	e6f2      	b.n	8026a70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026c8a:	2500      	movs	r5, #0
 8026c8c:	46ab      	mov	fp, r5
 8026c8e:	e720      	b.n	8026ad2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8026c90:	2700      	movs	r7, #0
 8026c92:	463d      	mov	r5, r7
 8026c94:	4638      	mov	r0, r7
 8026c96:	46bb      	mov	fp, r7
 8026c98:	e745      	b.n	8026b26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026c9a:	4677      	mov	r7, lr
 8026c9c:	4675      	mov	r5, lr
 8026c9e:	4670      	mov	r0, lr
 8026ca0:	46f3      	mov	fp, lr
 8026ca2:	e740      	b.n	8026b26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026ca4:	2700      	movs	r7, #0
 8026ca6:	4638      	mov	r0, r7
 8026ca8:	e73d      	b.n	8026b26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026caa:	460f      	mov	r7, r1
 8026cac:	4608      	mov	r0, r1
 8026cae:	e73a      	b.n	8026b26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08026cb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cb4:	b097      	sub	sp, #92	; 0x5c
 8026cb6:	9214      	str	r2, [sp, #80]	; 0x50
 8026cb8:	9308      	str	r3, [sp, #32]
 8026cba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026cbc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8026cc0:	9015      	str	r0, [sp, #84]	; 0x54
 8026cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8026cc4:	6850      	ldr	r0, [r2, #4]
 8026cc6:	9111      	str	r1, [sp, #68]	; 0x44
 8026cc8:	6812      	ldr	r2, [r2, #0]
 8026cca:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8026cce:	fb00 1303 	mla	r3, r0, r3, r1
 8026cd2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8026cd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026cda:	681b      	ldr	r3, [r3, #0]
 8026cdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8026cde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ce0:	685b      	ldr	r3, [r3, #4]
 8026ce2:	930c      	str	r3, [sp, #48]	; 0x30
 8026ce4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8026ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8026cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026cec:	2b00      	cmp	r3, #0
 8026cee:	dc03      	bgt.n	8026cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026cf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026cf2:	2b00      	cmp	r3, #0
 8026cf4:	f340 83cd 	ble.w	8027492 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8026cf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026cfa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026cfe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d02:	1e48      	subs	r0, r1, #1
 8026d04:	1e55      	subs	r5, r2, #1
 8026d06:	9b08      	ldr	r3, [sp, #32]
 8026d08:	2b00      	cmp	r3, #0
 8026d0a:	f340 81a5 	ble.w	8027058 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8026d0e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8026d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026d12:	1436      	asrs	r6, r6, #16
 8026d14:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026d18:	d406      	bmi.n	8026d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026d1a:	4286      	cmp	r6, r0
 8026d1c:	da04      	bge.n	8026d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	db02      	blt.n	8026d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026d22:	42ab      	cmp	r3, r5
 8026d24:	f2c0 8199 	blt.w	802705a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026d28:	3601      	adds	r6, #1
 8026d2a:	f100 8186 	bmi.w	802703a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026d2e:	42b1      	cmp	r1, r6
 8026d30:	f2c0 8183 	blt.w	802703a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026d34:	3301      	adds	r3, #1
 8026d36:	f100 8180 	bmi.w	802703a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026d3a:	429a      	cmp	r2, r3
 8026d3c:	f2c0 817d 	blt.w	802703a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026d40:	9b08      	ldr	r3, [sp, #32]
 8026d42:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026d46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026d48:	9313      	str	r3, [sp, #76]	; 0x4c
 8026d4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	f340 81a6 	ble.w	802709e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026d52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026d54:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8026d56:	1418      	asrs	r0, r3, #16
 8026d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026d5a:	142d      	asrs	r5, r5, #16
 8026d5c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026d62:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026d66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026d6c:	f100 81fa 	bmi.w	8027164 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026d70:	f102 3eff 	add.w	lr, r2, #4294967295
 8026d74:	4575      	cmp	r5, lr
 8026d76:	f280 81f5 	bge.w	8027164 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026d7a:	2800      	cmp	r0, #0
 8026d7c:	f2c0 81f2 	blt.w	8027164 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026d80:	f103 3eff 	add.w	lr, r3, #4294967295
 8026d84:	4570      	cmp	r0, lr
 8026d86:	f280 81ed 	bge.w	8027164 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026d8a:	b212      	sxth	r2, r2
 8026d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d8e:	fa1f fe81 	uxth.w	lr, r1
 8026d92:	fb00 5002 	mla	r0, r0, r2, r5
 8026d96:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026d9a:	eb03 0a00 	add.w	sl, r3, r0
 8026d9e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026da2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026da6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026daa:	b29b      	uxth	r3, r3
 8026dac:	f1bc 0f00 	cmp.w	ip, #0
 8026db0:	f000 81bb 	beq.w	802712a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8026db4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026db8:	eb0a 0b02 	add.w	fp, sl, r2
 8026dbc:	fa1f fa8c 	uxth.w	sl, ip
 8026dc0:	940d      	str	r4, [sp, #52]	; 0x34
 8026dc2:	fb0a fe0e 	mul.w	lr, sl, lr
 8026dc6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026dca:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026dce:	eba5 050e 	sub.w	r5, r5, lr
 8026dd2:	940e      	str	r4, [sp, #56]	; 0x38
 8026dd4:	fa1f fa8a 	uxth.w	sl, sl
 8026dd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026dda:	b2ad      	uxth	r5, r5
 8026ddc:	eba3 030a 	sub.w	r3, r3, sl
 8026de0:	fb08 f505 	mul.w	r5, r8, r5
 8026de4:	b29b      	uxth	r3, r3
 8026de6:	fb09 5303 	mla	r3, r9, r3, r5
 8026dea:	fb0a 3304 	mla	r3, sl, r4, r3
 8026dee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026df0:	fb0e 3304 	mla	r3, lr, r4, r3
 8026df4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026df8:	2b00      	cmp	r3, #0
 8026dfa:	f000 8111 	beq.w	8027020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026dfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026e00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026e04:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026e08:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026e0c:	f000 8192 	beq.w	8027134 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8026e10:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026e14:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026e18:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e1c:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e20:	fb09 f000 	mul.w	r0, r9, r0
 8026e24:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026e28:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026e2c:	f100 0b20 	add.w	fp, r0, #32
 8026e30:	44ce      	add	lr, r9
 8026e32:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026e36:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026e3a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026e3e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026e42:	ea4e 0909 	orr.w	r9, lr, r9
 8026e46:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026e4a:	8868      	ldrh	r0, [r5, #2]
 8026e4c:	d019      	beq.n	8026e82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8026e4e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026e52:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026e56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e5a:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e5e:	fb08 f800 	mul.w	r8, r8, r0
 8026e62:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026e66:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026e6a:	f108 0b20 	add.w	fp, r8, #32
 8026e6e:	4486      	add	lr, r0
 8026e70:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026e74:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026e78:	0a00      	lsrs	r0, r0, #8
 8026e7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e7e:	ea4e 0000 	orr.w	r0, lr, r0
 8026e82:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026e86:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026e8a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026e8e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026e92:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026e96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026e9a:	ea4e 0909 	orr.w	r9, lr, r9
 8026e9e:	ea4a 0000 	orr.w	r0, sl, r0
 8026ea2:	f1bc 0f00 	cmp.w	ip, #0
 8026ea6:	f000 8147 	beq.w	8027138 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026eaa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026eae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026eb0:	3a01      	subs	r2, #1
 8026eb2:	2cff      	cmp	r4, #255	; 0xff
 8026eb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026eb8:	f102 0202 	add.w	r2, r2, #2
 8026ebc:	eb05 0e02 	add.w	lr, r5, r2
 8026ec0:	5aaa      	ldrh	r2, [r5, r2]
 8026ec2:	d018      	beq.n	8026ef6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026ec4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026ec8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026ecc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026ed0:	fb04 fa02 	mul.w	sl, r4, r2
 8026ed4:	fb08 f805 	mul.w	r8, r8, r5
 8026ed8:	f10a 0520 	add.w	r5, sl, #32
 8026edc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026ee0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ee4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026ee8:	4442      	add	r2, r8
 8026eea:	0a2d      	lsrs	r5, r5, #8
 8026eec:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026ef0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026ef4:	432a      	orrs	r2, r5
 8026ef6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026ef8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026efc:	2cff      	cmp	r4, #255	; 0xff
 8026efe:	d01a      	beq.n	8026f36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8026f00:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026f04:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026f08:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f0c:	fb04 fa05 	mul.w	sl, r4, r5
 8026f10:	fb08 f80e 	mul.w	r8, r8, lr
 8026f14:	f10a 0e20 	add.w	lr, sl, #32
 8026f18:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026f1c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026f20:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026f24:	4445      	add	r5, r8
 8026f26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f2a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026f2e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026f32:	ea45 050e 	orr.w	r5, r5, lr
 8026f36:	fb1c fe01 	smulbb	lr, ip, r1
 8026f3a:	f1cc 0810 	rsb	r8, ip, #16
 8026f3e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026f42:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026f46:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026f4a:	eba8 0801 	sub.w	r8, r8, r1
 8026f4e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026f52:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026f56:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026f5a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026f5e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026f62:	ea4a 0202 	orr.w	r2, sl, r2
 8026f66:	4341      	muls	r1, r0
 8026f68:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026f6c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026f70:	fb09 1108 	mla	r1, r9, r8, r1
 8026f74:	ea4b 0505 	orr.w	r5, fp, r5
 8026f78:	fb0c 1102 	mla	r1, ip, r2, r1
 8026f7c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026f80:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026f84:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026f88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026f8c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026f90:	ea42 0e0e 	orr.w	lr, r2, lr
 8026f94:	fa1f f28e 	uxth.w	r2, lr
 8026f98:	2bff      	cmp	r3, #255	; 0xff
 8026f9a:	d103      	bne.n	8026fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026f9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026f9e:	29ff      	cmp	r1, #255	; 0xff
 8026fa0:	f000 80de 	beq.w	8027160 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026fa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026fa6:	1215      	asrs	r5, r2, #8
 8026fa8:	8838      	ldrh	r0, [r7, #0]
 8026faa:	434b      	muls	r3, r1
 8026fac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026fb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026fb2:	f103 0c01 	add.w	ip, r3, #1
 8026fb6:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026fba:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026fbe:	fa5f fc83 	uxtb.w	ip, r3
 8026fc2:	1203      	asrs	r3, r0, #8
 8026fc4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026fc8:	fb13 f30c 	smulbb	r3, r3, ip
 8026fcc:	fb05 3501 	mla	r5, r5, r1, r3
 8026fd0:	10c3      	asrs	r3, r0, #3
 8026fd2:	10d1      	asrs	r1, r2, #3
 8026fd4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026fd8:	00d2      	lsls	r2, r2, #3
 8026fda:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026fde:	b2ad      	uxth	r5, r5
 8026fe0:	fb13 f30c 	smulbb	r3, r3, ip
 8026fe4:	b2d2      	uxtb	r2, r2
 8026fe6:	fb01 3104 	mla	r1, r1, r4, r3
 8026fea:	00c3      	lsls	r3, r0, #3
 8026fec:	b2db      	uxtb	r3, r3
 8026fee:	b289      	uxth	r1, r1
 8026ff0:	fb13 f30c 	smulbb	r3, r3, ip
 8026ff4:	fb02 3304 	mla	r3, r2, r4, r3
 8026ff8:	b29a      	uxth	r2, r3
 8026ffa:	1c6b      	adds	r3, r5, #1
 8026ffc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027000:	1c53      	adds	r3, r2, #1
 8027002:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027006:	1c4a      	adds	r2, r1, #1
 8027008:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802700c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027010:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027014:	0949      	lsrs	r1, r1, #5
 8027016:	432b      	orrs	r3, r5
 8027018:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802701c:	430b      	orrs	r3, r1
 802701e:	803b      	strh	r3, [r7, #0]
 8027020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027022:	3702      	adds	r7, #2
 8027024:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027026:	4413      	add	r3, r2
 8027028:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802702a:	9321      	str	r3, [sp, #132]	; 0x84
 802702c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802702e:	441a      	add	r2, r3
 8027030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027032:	3b01      	subs	r3, #1
 8027034:	9222      	str	r2, [sp, #136]	; 0x88
 8027036:	9313      	str	r3, [sp, #76]	; 0x4c
 8027038:	e687      	b.n	8026d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802703a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802703c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802703e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8027040:	4433      	add	r3, r6
 8027042:	9321      	str	r3, [sp, #132]	; 0x84
 8027044:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027046:	441c      	add	r4, r3
 8027048:	9b08      	ldr	r3, [sp, #32]
 802704a:	3b01      	subs	r3, #1
 802704c:	9422      	str	r4, [sp, #136]	; 0x88
 802704e:	9308      	str	r3, [sp, #32]
 8027050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027052:	3302      	adds	r3, #2
 8027054:	9309      	str	r3, [sp, #36]	; 0x24
 8027056:	e656      	b.n	8026d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027058:	d028      	beq.n	80270ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802705a:	9b08      	ldr	r3, [sp, #32]
 802705c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802705e:	3b01      	subs	r3, #1
 8027060:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8027062:	fb00 5003 	mla	r0, r0, r3, r5
 8027066:	1400      	asrs	r0, r0, #16
 8027068:	f53f ae6a 	bmi.w	8026d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802706c:	3901      	subs	r1, #1
 802706e:	4288      	cmp	r0, r1
 8027070:	f6bf ae66 	bge.w	8026d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027074:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027076:	9822      	ldr	r0, [sp, #136]	; 0x88
 8027078:	fb01 0303 	mla	r3, r1, r3, r0
 802707c:	141b      	asrs	r3, r3, #16
 802707e:	f53f ae5f 	bmi.w	8026d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027082:	3a01      	subs	r2, #1
 8027084:	4293      	cmp	r3, r2
 8027086:	f6bf ae5b 	bge.w	8026d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802708a:	9b08      	ldr	r3, [sp, #32]
 802708c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027090:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027094:	9313      	str	r3, [sp, #76]	; 0x4c
 8027096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027098:	2b00      	cmp	r3, #0
 802709a:	f300 8082 	bgt.w	80271a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802709e:	9b08      	ldr	r3, [sp, #32]
 80270a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80270a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270a6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80270aa:	9309      	str	r3, [sp, #36]	; 0x24
 80270ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80270ae:	2b00      	cmp	r3, #0
 80270b0:	f340 81ef 	ble.w	8027492 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80270b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80270b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80270ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80270be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80270c2:	eef0 6a62 	vmov.f32	s13, s5
 80270c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80270ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80270ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270d2:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80270d6:	eef0 6a43 	vmov.f32	s13, s6
 80270da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270de:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80270e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80270e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80270ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80270ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80270f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80270f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80270fa:	ee12 2a90 	vmov	r2, s5
 80270fe:	eef0 2a47 	vmov.f32	s5, s14
 8027102:	fb92 f3f3 	sdiv	r3, r2, r3
 8027106:	ee13 2a10 	vmov	r2, s6
 802710a:	9323      	str	r3, [sp, #140]	; 0x8c
 802710c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802710e:	eeb0 3a67 	vmov.f32	s6, s15
 8027112:	fb92 f3f3 	sdiv	r3, r2, r3
 8027116:	9324      	str	r3, [sp, #144]	; 0x90
 8027118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802711a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802711c:	3b01      	subs	r3, #1
 802711e:	9311      	str	r3, [sp, #68]	; 0x44
 8027120:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027122:	bf08      	it	eq
 8027124:	4613      	moveq	r3, r2
 8027126:	9308      	str	r3, [sp, #32]
 8027128:	e5df      	b.n	8026cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802712a:	fb08 f505 	mul.w	r5, r8, r5
 802712e:	fb09 5303 	mla	r3, r9, r3, r5
 8027132:	e65f      	b.n	8026df4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027134:	4681      	mov	r9, r0
 8027136:	e686      	b.n	8026e46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8027138:	f1c1 0210 	rsb	r2, r1, #16
 802713c:	4341      	muls	r1, r0
 802713e:	fb09 1902 	mla	r9, r9, r2, r1
 8027142:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027146:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802714a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802714e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027152:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027156:	ea42 0909 	orr.w	r9, r2, r9
 802715a:	fa1f f289 	uxth.w	r2, r9
 802715e:	e71b      	b.n	8026f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8027160:	803a      	strh	r2, [r7, #0]
 8027162:	e75d      	b.n	8027020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027164:	f115 0e01 	adds.w	lr, r5, #1
 8027168:	f53f af5a 	bmi.w	8027020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802716c:	4572      	cmp	r2, lr
 802716e:	f6ff af57 	blt.w	8027020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027172:	f110 0e01 	adds.w	lr, r0, #1
 8027176:	f53f af53 	bmi.w	8027020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802717a:	4573      	cmp	r3, lr
 802717c:	f6ff af50 	blt.w	8027020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027180:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027182:	b21b      	sxth	r3, r3
 8027184:	b212      	sxth	r2, r2
 8027186:	9502      	str	r5, [sp, #8]
 8027188:	9301      	str	r3, [sp, #4]
 802718a:	9200      	str	r2, [sp, #0]
 802718c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027190:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027194:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027198:	4639      	mov	r1, r7
 802719a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802719c:	f7ff fc02 	bl	80269a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80271a0:	e73e      	b.n	8027020 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80271a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80271a4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80271a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80271aa:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80271ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80271b0:	fa1f fc82 	uxth.w	ip, r2
 80271b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80271b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80271ba:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80271be:	141f      	asrs	r7, r3, #16
 80271c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80271c2:	141b      	asrs	r3, r3, #16
 80271c4:	fb01 3707 	mla	r7, r1, r7, r3
 80271c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80271ca:	eb03 0a07 	add.w	sl, r3, r7
 80271ce:	f813 9007 	ldrb.w	r9, [r3, r7]
 80271d2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80271d6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80271da:	b29b      	uxth	r3, r3
 80271dc:	2d00      	cmp	r5, #0
 80271de:	f000 813d 	beq.w	802745c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 80271e2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80271e6:	eb0a 0b01 	add.w	fp, sl, r1
 80271ea:	fa1f fa85 	uxth.w	sl, r5
 80271ee:	940f      	str	r4, [sp, #60]	; 0x3c
 80271f0:	fb0a fc0c 	mul.w	ip, sl, ip
 80271f4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80271f8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80271fc:	eba0 000c 	sub.w	r0, r0, ip
 8027200:	9410      	str	r4, [sp, #64]	; 0x40
 8027202:	fa1f fa8a 	uxth.w	sl, sl
 8027206:	b280      	uxth	r0, r0
 8027208:	eba3 030a 	sub.w	r3, r3, sl
 802720c:	fb08 f000 	mul.w	r0, r8, r0
 8027210:	b29b      	uxth	r3, r3
 8027212:	fb09 0303 	mla	r3, r9, r3, r0
 8027216:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027218:	fb0a 3300 	mla	r3, sl, r0, r3
 802721c:	fb0c 3304 	mla	r3, ip, r4, r3
 8027220:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027224:	2b00      	cmp	r3, #0
 8027226:	f000 810b 	beq.w	8027440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802722a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802722c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027230:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027232:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027236:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802723a:	f000 8114 	beq.w	8027466 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802723e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027242:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027246:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802724a:	fb0a fc0c 	mul.w	ip, sl, ip
 802724e:	fb09 f707 	mul.w	r7, r9, r7
 8027252:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027256:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802725a:	f107 0b20 	add.w	fp, r7, #32
 802725e:	44cc      	add	ip, r9
 8027260:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027264:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027268:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802726c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027270:	ea4c 0909 	orr.w	r9, ip, r9
 8027274:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027278:	8847      	ldrh	r7, [r0, #2]
 802727a:	d019      	beq.n	80272b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 802727c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027280:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027284:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027288:	fb0a fc0c 	mul.w	ip, sl, ip
 802728c:	fb08 f807 	mul.w	r8, r8, r7
 8027290:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027294:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027298:	f108 0b20 	add.w	fp, r8, #32
 802729c:	44bc      	add	ip, r7
 802729e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80272a2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80272a6:	0a3f      	lsrs	r7, r7, #8
 80272a8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80272ac:	ea4c 0707 	orr.w	r7, ip, r7
 80272b0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80272b4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80272b8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80272bc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80272c0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80272c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80272c8:	ea4c 0909 	orr.w	r9, ip, r9
 80272cc:	ea4a 0707 	orr.w	r7, sl, r7
 80272d0:	2d00      	cmp	r5, #0
 80272d2:	f000 80ca 	beq.w	802746a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 80272d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80272da:	3901      	subs	r1, #1
 80272dc:	0049      	lsls	r1, r1, #1
 80272de:	3102      	adds	r1, #2
 80272e0:	eb00 0c01 	add.w	ip, r0, r1
 80272e4:	5a41      	ldrh	r1, [r0, r1]
 80272e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80272e8:	28ff      	cmp	r0, #255	; 0xff
 80272ea:	d019      	beq.n	8027320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80272ec:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80272f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80272f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80272f6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80272fa:	fb04 fa01 	mul.w	sl, r4, r1
 80272fe:	fb08 f800 	mul.w	r8, r8, r0
 8027302:	f10a 0020 	add.w	r0, sl, #32
 8027306:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802730a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802730e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027312:	4441      	add	r1, r8
 8027314:	0a00      	lsrs	r0, r0, #8
 8027316:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802731a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802731e:	4301      	orrs	r1, r0
 8027320:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027322:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027326:	2cff      	cmp	r4, #255	; 0xff
 8027328:	d01a      	beq.n	8027360 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 802732a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802732e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027332:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027336:	fb04 fa00 	mul.w	sl, r4, r0
 802733a:	fb08 f80c 	mul.w	r8, r8, ip
 802733e:	f10a 0c20 	add.w	ip, sl, #32
 8027342:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027346:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802734a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802734e:	4440      	add	r0, r8
 8027350:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027354:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027358:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802735c:	ea40 000c 	orr.w	r0, r0, ip
 8027360:	fb15 fc02 	smulbb	ip, r5, r2
 8027364:	f1c5 0810 	rsb	r8, r5, #16
 8027368:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802736c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027370:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027374:	eba8 0802 	sub.w	r8, r8, r2
 8027378:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802737c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027380:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027384:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027388:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802738c:	ea4a 0101 	orr.w	r1, sl, r1
 8027390:	437a      	muls	r2, r7
 8027392:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027396:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802739a:	fb09 2208 	mla	r2, r9, r8, r2
 802739e:	ea4b 0000 	orr.w	r0, fp, r0
 80273a2:	fb05 2201 	mla	r2, r5, r1, r2
 80273a6:	fb0c 2200 	mla	r2, ip, r0, r2
 80273aa:	0d57      	lsrs	r7, r2, #21
 80273ac:	0952      	lsrs	r2, r2, #5
 80273ae:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80273b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80273b6:	433a      	orrs	r2, r7
 80273b8:	2bff      	cmp	r3, #255	; 0xff
 80273ba:	b292      	uxth	r2, r2
 80273bc:	d102      	bne.n	80273c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80273be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80273c0:	29ff      	cmp	r1, #255	; 0xff
 80273c2:	d063      	beq.n	802748c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 80273c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80273c6:	1215      	asrs	r5, r2, #8
 80273c8:	f8be 1000 	ldrh.w	r1, [lr]
 80273cc:	4343      	muls	r3, r0
 80273ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80273d0:	10cf      	asrs	r7, r1, #3
 80273d2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80273d6:	1c58      	adds	r0, r3, #1
 80273d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80273dc:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80273e0:	1208      	asrs	r0, r1, #8
 80273e2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80273e6:	00c9      	lsls	r1, r1, #3
 80273e8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80273ec:	b2db      	uxtb	r3, r3
 80273ee:	b2c9      	uxtb	r1, r1
 80273f0:	fb10 f003 	smulbb	r0, r0, r3
 80273f4:	fb11 f103 	smulbb	r1, r1, r3
 80273f8:	fb05 0504 	mla	r5, r5, r4, r0
 80273fc:	10d0      	asrs	r0, r2, #3
 80273fe:	fb17 f703 	smulbb	r7, r7, r3
 8027402:	00d2      	lsls	r2, r2, #3
 8027404:	b2ad      	uxth	r5, r5
 8027406:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802740a:	b2d2      	uxtb	r2, r2
 802740c:	fb00 7004 	mla	r0, r0, r4, r7
 8027410:	1c6b      	adds	r3, r5, #1
 8027412:	fb02 1204 	mla	r2, r2, r4, r1
 8027416:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802741a:	b292      	uxth	r2, r2
 802741c:	b280      	uxth	r0, r0
 802741e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027422:	1c57      	adds	r7, r2, #1
 8027424:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027428:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802742c:	433d      	orrs	r5, r7
 802742e:	1c47      	adds	r7, r0, #1
 8027430:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027434:	097f      	lsrs	r7, r7, #5
 8027436:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802743a:	433d      	orrs	r5, r7
 802743c:	f8ae 5000 	strh.w	r5, [lr]
 8027440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027442:	f10e 0e02 	add.w	lr, lr, #2
 8027446:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027448:	4413      	add	r3, r2
 802744a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802744c:	9321      	str	r3, [sp, #132]	; 0x84
 802744e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027450:	441a      	add	r2, r3
 8027452:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027454:	3b01      	subs	r3, #1
 8027456:	9222      	str	r2, [sp, #136]	; 0x88
 8027458:	9313      	str	r3, [sp, #76]	; 0x4c
 802745a:	e61c      	b.n	8027096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802745c:	fb08 f000 	mul.w	r0, r8, r0
 8027460:	fb09 0303 	mla	r3, r9, r3, r0
 8027464:	e6dc      	b.n	8027220 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8027466:	46b9      	mov	r9, r7
 8027468:	e704      	b.n	8027274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802746a:	f1c2 0110 	rsb	r1, r2, #16
 802746e:	437a      	muls	r2, r7
 8027470:	fb09 2901 	mla	r9, r9, r1, r2
 8027474:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027478:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802747c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027480:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027484:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027488:	4302      	orrs	r2, r0
 802748a:	e795      	b.n	80273b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 802748c:	f8ae 2000 	strh.w	r2, [lr]
 8027490:	e7d6      	b.n	8027440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8027492:	b017      	add	sp, #92	; 0x5c
 8027494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802749c:	b085      	sub	sp, #20
 802749e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80274a2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80274a6:	2800      	cmp	r0, #0
 80274a8:	9103      	str	r1, [sp, #12]
 80274aa:	fb00 7406 	mla	r4, r0, r6, r7
 80274ae:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80274b2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80274b6:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80274ba:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80274be:	eb02 0904 	add.w	r9, r2, r4
 80274c2:	9501      	str	r5, [sp, #4]
 80274c4:	f2c0 8141 	blt.w	802774a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80274c8:	4583      	cmp	fp, r0
 80274ca:	f340 813e 	ble.w	802774a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80274ce:	2f00      	cmp	r7, #0
 80274d0:	f2c0 8137 	blt.w	8027742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80274d4:	42be      	cmp	r6, r7
 80274d6:	f340 8134 	ble.w	8027742 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80274da:	f812 c004 	ldrb.w	ip, [r2, r4]
 80274de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80274e2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80274e6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80274ea:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80274ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80274f2:	4355      	muls	r5, r2
 80274f4:	fb0c f203 	mul.w	r2, ip, r3
 80274f8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80274fc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8027500:	441d      	add	r5, r3
 8027502:	f102 0320 	add.w	r3, r2, #32
 8027506:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802750a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802750e:	0a1b      	lsrs	r3, r3, #8
 8027510:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027514:	431c      	orrs	r4, r3
 8027516:	1c7b      	adds	r3, r7, #1
 8027518:	f100 811c 	bmi.w	8027754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802751c:	429e      	cmp	r6, r3
 802751e:	f340 8119 	ble.w	8027754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8027522:	2900      	cmp	r1, #0
 8027524:	f000 8119 	beq.w	802775a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8027528:	9a01      	ldr	r2, [sp, #4]
 802752a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802752e:	8855      	ldrh	r5, [r2, #2]
 8027530:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027534:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8027538:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802753c:	fb08 f802 	mul.w	r8, r8, r2
 8027540:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8027544:	435d      	muls	r5, r3
 8027546:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802754a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802754e:	44d0      	add	r8, sl
 8027550:	f105 0a20 	add.w	sl, r5, #32
 8027554:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027558:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802755c:	0a2d      	lsrs	r5, r5, #8
 802755e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027562:	432a      	orrs	r2, r5
 8027564:	3001      	adds	r0, #1
 8027566:	f100 80fe 	bmi.w	8027766 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802756a:	4583      	cmp	fp, r0
 802756c:	f340 80fb 	ble.w	8027766 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8027570:	f1be 0f00 	cmp.w	lr, #0
 8027574:	f000 80fc 	beq.w	8027770 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8027578:	2f00      	cmp	r7, #0
 802757a:	f2c0 80f1 	blt.w	8027760 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802757e:	42be      	cmp	r6, r7
 8027580:	f340 80ee 	ble.w	8027760 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8027584:	9801      	ldr	r0, [sp, #4]
 8027586:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802758a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802758e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8027592:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027596:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802759a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802759e:	fb0a fa00 	mul.w	sl, sl, r0
 80275a2:	fb05 f808 	mul.w	r8, r5, r8
 80275a6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80275aa:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80275ae:	4482      	add	sl, r0
 80275b0:	f108 0020 	add.w	r0, r8, #32
 80275b4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80275b8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80275bc:	0a00      	lsrs	r0, r0, #8
 80275be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80275c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80275c6:	3701      	adds	r7, #1
 80275c8:	f100 80d7 	bmi.w	802777a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80275cc:	42be      	cmp	r6, r7
 80275ce:	f340 80d4 	ble.w	802777a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80275d2:	2900      	cmp	r1, #0
 80275d4:	f000 80d4 	beq.w	8027780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80275d8:	3601      	adds	r6, #1
 80275da:	9801      	ldr	r0, [sp, #4]
 80275dc:	f819 7006 	ldrb.w	r7, [r9, r6]
 80275e0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80275e4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80275e8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80275ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80275f0:	fb09 f906 	mul.w	r9, r9, r6
 80275f4:	fb07 f800 	mul.w	r8, r7, r0
 80275f8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80275fc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8027600:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8027604:	44d1      	add	r9, sl
 8027606:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802760a:	f108 0020 	add.w	r0, r8, #32
 802760e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027612:	0a00      	lsrs	r0, r0, #8
 8027614:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027618:	4330      	orrs	r0, r6
 802761a:	b28e      	uxth	r6, r1
 802761c:	fa1f f98e 	uxth.w	r9, lr
 8027620:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8027624:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8027628:	fb06 f809 	mul.w	r8, r6, r9
 802762c:	0136      	lsls	r6, r6, #4
 802762e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027632:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027636:	9601      	str	r6, [sp, #4]
 8027638:	ea4a 0404 	orr.w	r4, sl, r4
 802763c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027640:	fa1f f689 	uxth.w	r6, r9
 8027644:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027648:	fb11 f90e 	smulbb	r9, r1, lr
 802764c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027650:	9602      	str	r6, [sp, #8]
 8027652:	4626      	mov	r6, r4
 8027654:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8027658:	f1ce 0410 	rsb	r4, lr, #16
 802765c:	ea4a 0202 	orr.w	r2, sl, r2
 8027660:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027664:	1a64      	subs	r4, r4, r1
 8027666:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802766a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802766e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027672:	434a      	muls	r2, r1
 8027674:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027678:	ea4a 0000 	orr.w	r0, sl, r0
 802767c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027680:	fb04 2406 	mla	r4, r4, r6, r2
 8027684:	9903      	ldr	r1, [sp, #12]
 8027686:	fb09 4200 	mla	r2, r9, r0, r4
 802768a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802768e:	9801      	ldr	r0, [sp, #4]
 8027690:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027694:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027698:	8809      	ldrh	r1, [r1, #0]
 802769a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802769e:	ea44 0b0b 	orr.w	fp, r4, fp
 80276a2:	9c02      	ldr	r4, [sp, #8]
 80276a4:	1b00      	subs	r0, r0, r4
 80276a6:	9c01      	ldr	r4, [sp, #4]
 80276a8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80276ac:	eba4 0608 	sub.w	r6, r4, r8
 80276b0:	b280      	uxth	r0, r0
 80276b2:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80276b6:	b2b6      	uxth	r6, r6
 80276b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80276bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80276c0:	4373      	muls	r3, r6
 80276c2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80276c6:	fb0c 3300 	mla	r3, ip, r0, r3
 80276ca:	9802      	ldr	r0, [sp, #8]
 80276cc:	ea42 0e0e 	orr.w	lr, r2, lr
 80276d0:	fb00 3505 	mla	r5, r0, r5, r3
 80276d4:	120b      	asrs	r3, r1, #8
 80276d6:	10c8      	asrs	r0, r1, #3
 80276d8:	fb08 5707 	mla	r7, r8, r7, r5
 80276dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80276e0:	00c9      	lsls	r1, r1, #3
 80276e2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80276e6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80276ea:	fa1f f28e 	uxth.w	r2, lr
 80276ee:	b2c9      	uxtb	r1, r1
 80276f0:	b2ff      	uxtb	r7, r7
 80276f2:	437b      	muls	r3, r7
 80276f4:	4378      	muls	r0, r7
 80276f6:	434f      	muls	r7, r1
 80276f8:	1c59      	adds	r1, r3, #1
 80276fa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80276fe:	1213      	asrs	r3, r2, #8
 8027700:	f023 0307 	bic.w	r3, r3, #7
 8027704:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027708:	1c41      	adds	r1, r0, #1
 802770a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802770e:	10d1      	asrs	r1, r2, #3
 8027710:	021b      	lsls	r3, r3, #8
 8027712:	f021 0103 	bic.w	r1, r1, #3
 8027716:	00d2      	lsls	r2, r2, #3
 8027718:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802771c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027720:	00c9      	lsls	r1, r1, #3
 8027722:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027726:	430b      	orrs	r3, r1
 8027728:	1c79      	adds	r1, r7, #1
 802772a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802772e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8027732:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027736:	431a      	orrs	r2, r3
 8027738:	9b03      	ldr	r3, [sp, #12]
 802773a:	801a      	strh	r2, [r3, #0]
 802773c:	b005      	add	sp, #20
 802773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027742:	f04f 0c00 	mov.w	ip, #0
 8027746:	4664      	mov	r4, ip
 8027748:	e6e5      	b.n	8027516 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802774a:	2300      	movs	r3, #0
 802774c:	469c      	mov	ip, r3
 802774e:	461a      	mov	r2, r3
 8027750:	461c      	mov	r4, r3
 8027752:	e707      	b.n	8027564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027754:	2300      	movs	r3, #0
 8027756:	461a      	mov	r2, r3
 8027758:	e704      	b.n	8027564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802775a:	460b      	mov	r3, r1
 802775c:	460a      	mov	r2, r1
 802775e:	e701      	b.n	8027564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027760:	2500      	movs	r5, #0
 8027762:	46ab      	mov	fp, r5
 8027764:	e72f      	b.n	80275c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8027766:	2700      	movs	r7, #0
 8027768:	463d      	mov	r5, r7
 802776a:	4638      	mov	r0, r7
 802776c:	46bb      	mov	fp, r7
 802776e:	e754      	b.n	802761a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027770:	4677      	mov	r7, lr
 8027772:	4675      	mov	r5, lr
 8027774:	4670      	mov	r0, lr
 8027776:	46f3      	mov	fp, lr
 8027778:	e74f      	b.n	802761a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802777a:	2700      	movs	r7, #0
 802777c:	4638      	mov	r0, r7
 802777e:	e74c      	b.n	802761a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027780:	460f      	mov	r7, r1
 8027782:	4608      	mov	r0, r1
 8027784:	e749      	b.n	802761a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08027788 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802778c:	b093      	sub	sp, #76	; 0x4c
 802778e:	9210      	str	r2, [sp, #64]	; 0x40
 8027790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027792:	9011      	str	r0, [sp, #68]	; 0x44
 8027794:	910e      	str	r1, [sp, #56]	; 0x38
 8027796:	6850      	ldr	r0, [r2, #4]
 8027798:	9306      	str	r3, [sp, #24]
 802779a:	6812      	ldr	r2, [r2, #0]
 802779c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80277a0:	fb00 1303 	mla	r3, r0, r3, r1
 80277a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80277a8:	9307      	str	r3, [sp, #28]
 80277aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80277ac:	681b      	ldr	r3, [r3, #0]
 80277ae:	9308      	str	r3, [sp, #32]
 80277b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80277b2:	685b      	ldr	r3, [r3, #4]
 80277b4:	9309      	str	r3, [sp, #36]	; 0x24
 80277b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80277b8:	2b00      	cmp	r3, #0
 80277ba:	dc03      	bgt.n	80277c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80277bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80277be:	2b00      	cmp	r3, #0
 80277c0:	f340 83b6 	ble.w	8027f30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80277c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80277c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80277ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80277ce:	1e48      	subs	r0, r1, #1
 80277d0:	1e55      	subs	r5, r2, #1
 80277d2:	9b06      	ldr	r3, [sp, #24]
 80277d4:	2b00      	cmp	r3, #0
 80277d6:	f340 8165 	ble.w	8027aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80277da:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80277dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80277de:	1436      	asrs	r6, r6, #16
 80277e0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80277e4:	d406      	bmi.n	80277f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80277e6:	4286      	cmp	r6, r0
 80277e8:	da04      	bge.n	80277f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80277ea:	2b00      	cmp	r3, #0
 80277ec:	db02      	blt.n	80277f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80277ee:	42ab      	cmp	r3, r5
 80277f0:	f2c0 8159 	blt.w	8027aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80277f4:	3601      	adds	r6, #1
 80277f6:	f100 8146 	bmi.w	8027a86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80277fa:	42b1      	cmp	r1, r6
 80277fc:	f2c0 8143 	blt.w	8027a86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027800:	3301      	adds	r3, #1
 8027802:	f100 8140 	bmi.w	8027a86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027806:	429a      	cmp	r2, r3
 8027808:	f2c0 813d 	blt.w	8027a86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802780c:	9b06      	ldr	r3, [sp, #24]
 802780e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027812:	9f07      	ldr	r7, [sp, #28]
 8027814:	930f      	str	r3, [sp, #60]	; 0x3c
 8027816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027818:	2b00      	cmp	r3, #0
 802781a:	f340 8166 	ble.w	8027aea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802781e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027820:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8027822:	1418      	asrs	r0, r3, #16
 8027824:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027826:	142d      	asrs	r5, r5, #16
 8027828:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802782c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802782e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027832:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027834:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027838:	f100 81f0 	bmi.w	8027c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802783c:	f102 3eff 	add.w	lr, r2, #4294967295
 8027840:	4575      	cmp	r5, lr
 8027842:	f280 81eb 	bge.w	8027c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8027846:	2800      	cmp	r0, #0
 8027848:	f2c0 81e8 	blt.w	8027c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802784c:	f103 3eff 	add.w	lr, r3, #4294967295
 8027850:	4570      	cmp	r0, lr
 8027852:	f280 81e3 	bge.w	8027c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8027856:	b212      	sxth	r2, r2
 8027858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802785a:	fa1f fe81 	uxth.w	lr, r1
 802785e:	fb00 5002 	mla	r0, r0, r2, r5
 8027862:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027866:	eb03 0a00 	add.w	sl, r3, r0
 802786a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802786e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027872:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027876:	b29b      	uxth	r3, r3
 8027878:	f1bc 0f00 	cmp.w	ip, #0
 802787c:	f000 817b 	beq.w	8027b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027880:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027884:	eb0a 0b02 	add.w	fp, sl, r2
 8027888:	fa1f fa8c 	uxth.w	sl, ip
 802788c:	940a      	str	r4, [sp, #40]	; 0x28
 802788e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027892:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027896:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802789a:	eba5 050e 	sub.w	r5, r5, lr
 802789e:	940b      	str	r4, [sp, #44]	; 0x2c
 80278a0:	fa1f fa8a 	uxth.w	sl, sl
 80278a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80278a6:	b2ad      	uxth	r5, r5
 80278a8:	eba3 030a 	sub.w	r3, r3, sl
 80278ac:	fb08 f505 	mul.w	r5, r8, r5
 80278b0:	b29b      	uxth	r3, r3
 80278b2:	fb09 5303 	mla	r3, r9, r3, r5
 80278b6:	fb0a 3304 	mla	r3, sl, r4, r3
 80278ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80278bc:	fb0e 3304 	mla	r3, lr, r4, r3
 80278c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80278c4:	2b00      	cmp	r3, #0
 80278c6:	f000 80d1 	beq.w	8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80278ca:	9c08      	ldr	r4, [sp, #32]
 80278cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80278d0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80278d4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80278d8:	f000 8152 	beq.w	8027b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80278dc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80278e0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80278e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80278e8:	fb0a fe0e 	mul.w	lr, sl, lr
 80278ec:	fb09 f000 	mul.w	r0, r9, r0
 80278f0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80278f4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80278f8:	f100 0b20 	add.w	fp, r0, #32
 80278fc:	44ce      	add	lr, r9
 80278fe:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027902:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027906:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802790a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802790e:	ea4e 0909 	orr.w	r9, lr, r9
 8027912:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027916:	8868      	ldrh	r0, [r5, #2]
 8027918:	d019      	beq.n	802794e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802791a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802791e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027922:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027926:	fb0a fe0e 	mul.w	lr, sl, lr
 802792a:	fb08 f800 	mul.w	r8, r8, r0
 802792e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027932:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027936:	f108 0b20 	add.w	fp, r8, #32
 802793a:	4486      	add	lr, r0
 802793c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027940:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027944:	0a00      	lsrs	r0, r0, #8
 8027946:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802794a:	ea4e 0000 	orr.w	r0, lr, r0
 802794e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027952:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027956:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802795a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802795e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027962:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027966:	ea4e 0909 	orr.w	r9, lr, r9
 802796a:	ea4a 0000 	orr.w	r0, sl, r0
 802796e:	f1bc 0f00 	cmp.w	ip, #0
 8027972:	f000 8107 	beq.w	8027b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8027976:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802797a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802797c:	3a01      	subs	r2, #1
 802797e:	2cff      	cmp	r4, #255	; 0xff
 8027980:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027984:	f102 0202 	add.w	r2, r2, #2
 8027988:	eb05 0e02 	add.w	lr, r5, r2
 802798c:	5aaa      	ldrh	r2, [r5, r2]
 802798e:	d018      	beq.n	80279c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8027990:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027994:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027998:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802799c:	fb04 fa02 	mul.w	sl, r4, r2
 80279a0:	fb08 f805 	mul.w	r8, r8, r5
 80279a4:	f10a 0520 	add.w	r5, sl, #32
 80279a8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80279ac:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80279b0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80279b4:	4442      	add	r2, r8
 80279b6:	0a2d      	lsrs	r5, r5, #8
 80279b8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80279bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80279c0:	432a      	orrs	r2, r5
 80279c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80279c4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80279c8:	2cff      	cmp	r4, #255	; 0xff
 80279ca:	d01a      	beq.n	8027a02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80279cc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80279d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80279d4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80279d8:	fb04 fa05 	mul.w	sl, r4, r5
 80279dc:	fb08 f80e 	mul.w	r8, r8, lr
 80279e0:	f10a 0e20 	add.w	lr, sl, #32
 80279e4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80279e8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80279ec:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80279f0:	4445      	add	r5, r8
 80279f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279f6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80279fa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80279fe:	ea45 050e 	orr.w	r5, r5, lr
 8027a02:	fb1c fe01 	smulbb	lr, ip, r1
 8027a06:	f1cc 0810 	rsb	r8, ip, #16
 8027a0a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027a0e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027a12:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027a16:	eba8 0801 	sub.w	r8, r8, r1
 8027a1a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027a1e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027a22:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027a26:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027a2a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027a2e:	ea4a 0202 	orr.w	r2, sl, r2
 8027a32:	4341      	muls	r1, r0
 8027a34:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027a38:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027a3c:	fb09 1108 	mla	r1, r9, r8, r1
 8027a40:	ea4b 0505 	orr.w	r5, fp, r5
 8027a44:	fb0c 1102 	mla	r1, ip, r2, r1
 8027a48:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027a4c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027a50:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027a54:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a58:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027a5c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027a60:	fa1f f28e 	uxth.w	r2, lr
 8027a64:	2bff      	cmp	r3, #255	; 0xff
 8027a66:	f040 80a1 	bne.w	8027bac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8027a6a:	803a      	strh	r2, [r7, #0]
 8027a6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027a6e:	3702      	adds	r7, #2
 8027a70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027a72:	4413      	add	r3, r2
 8027a74:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027a76:	931d      	str	r3, [sp, #116]	; 0x74
 8027a78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027a7a:	441a      	add	r2, r3
 8027a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027a7e:	3b01      	subs	r3, #1
 8027a80:	921e      	str	r2, [sp, #120]	; 0x78
 8027a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8027a84:	e6c7      	b.n	8027816 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027a86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027a88:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8027a8a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8027a8c:	4433      	add	r3, r6
 8027a8e:	931d      	str	r3, [sp, #116]	; 0x74
 8027a90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027a92:	441c      	add	r4, r3
 8027a94:	9b06      	ldr	r3, [sp, #24]
 8027a96:	3b01      	subs	r3, #1
 8027a98:	941e      	str	r4, [sp, #120]	; 0x78
 8027a9a:	9306      	str	r3, [sp, #24]
 8027a9c:	9b07      	ldr	r3, [sp, #28]
 8027a9e:	3302      	adds	r3, #2
 8027aa0:	9307      	str	r3, [sp, #28]
 8027aa2:	e696      	b.n	80277d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027aa4:	d028      	beq.n	8027af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027aa6:	9b06      	ldr	r3, [sp, #24]
 8027aa8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027aaa:	3b01      	subs	r3, #1
 8027aac:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8027aae:	fb00 5003 	mla	r0, r0, r3, r5
 8027ab2:	1400      	asrs	r0, r0, #16
 8027ab4:	f53f aeaa 	bmi.w	802780c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027ab8:	3901      	subs	r1, #1
 8027aba:	4288      	cmp	r0, r1
 8027abc:	f6bf aea6 	bge.w	802780c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027ac0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027ac2:	981e      	ldr	r0, [sp, #120]	; 0x78
 8027ac4:	fb01 0303 	mla	r3, r1, r3, r0
 8027ac8:	141b      	asrs	r3, r3, #16
 8027aca:	f53f ae9f 	bmi.w	802780c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027ace:	3a01      	subs	r2, #1
 8027ad0:	4293      	cmp	r3, r2
 8027ad2:	f6bf ae9b 	bge.w	802780c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027ad6:	9b06      	ldr	r3, [sp, #24]
 8027ad8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027adc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027ae0:	930f      	str	r3, [sp, #60]	; 0x3c
 8027ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027ae4:	2b00      	cmp	r3, #0
 8027ae6:	f300 80b6 	bgt.w	8027c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8027aea:	9b06      	ldr	r3, [sp, #24]
 8027aec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027af0:	9b07      	ldr	r3, [sp, #28]
 8027af2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027af6:	9307      	str	r3, [sp, #28]
 8027af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	f340 8218 	ble.w	8027f30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027b04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027b06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027b0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027b0e:	eef0 6a62 	vmov.f32	s13, s5
 8027b12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027b16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027b1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b1e:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8027b22:	eef0 6a43 	vmov.f32	s13, s6
 8027b26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b2a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8027b2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027b32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027b36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027b3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027b3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027b42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027b46:	ee12 2a90 	vmov	r2, s5
 8027b4a:	eef0 2a47 	vmov.f32	s5, s14
 8027b4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b52:	ee13 2a10 	vmov	r2, s6
 8027b56:	931f      	str	r3, [sp, #124]	; 0x7c
 8027b58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027b5a:	eeb0 3a67 	vmov.f32	s6, s15
 8027b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b62:	9320      	str	r3, [sp, #128]	; 0x80
 8027b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027b66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027b68:	3b01      	subs	r3, #1
 8027b6a:	930e      	str	r3, [sp, #56]	; 0x38
 8027b6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027b6e:	bf08      	it	eq
 8027b70:	4613      	moveq	r3, r2
 8027b72:	9306      	str	r3, [sp, #24]
 8027b74:	e61f      	b.n	80277b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027b76:	fb08 f505 	mul.w	r5, r8, r5
 8027b7a:	fb09 5303 	mla	r3, r9, r3, r5
 8027b7e:	e69f      	b.n	80278c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8027b80:	4681      	mov	r9, r0
 8027b82:	e6c6      	b.n	8027912 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027b84:	f1c1 0210 	rsb	r2, r1, #16
 8027b88:	4341      	muls	r1, r0
 8027b8a:	fb09 1902 	mla	r9, r9, r2, r1
 8027b8e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027b92:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027b96:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027b9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b9e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027ba2:	ea42 0909 	orr.w	r9, r2, r9
 8027ba6:	fa1f f289 	uxth.w	r2, r9
 8027baa:	e75b      	b.n	8027a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8027bac:	f8b7 c000 	ldrh.w	ip, [r7]
 8027bb0:	43db      	mvns	r3, r3
 8027bb2:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027bb6:	fa5f fe83 	uxtb.w	lr, r3
 8027bba:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027bbe:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027bc2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027bc6:	fb00 f00e 	mul.w	r0, r0, lr
 8027bca:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027bce:	b2db      	uxtb	r3, r3
 8027bd0:	1c41      	adds	r1, r0, #1
 8027bd2:	fb05 f50e 	mul.w	r5, r5, lr
 8027bd6:	fb03 f30e 	mul.w	r3, r3, lr
 8027bda:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027bde:	1211      	asrs	r1, r2, #8
 8027be0:	f021 0107 	bic.w	r1, r1, #7
 8027be4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027be8:	48d3      	ldr	r0, [pc, #844]	; (8027f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8027bea:	b2c9      	uxtb	r1, r1
 8027bec:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027bf0:	1c69      	adds	r1, r5, #1
 8027bf2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027bf6:	10d1      	asrs	r1, r2, #3
 8027bf8:	00d2      	lsls	r2, r2, #3
 8027bfa:	f021 0103 	bic.w	r1, r1, #3
 8027bfe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027c02:	00c9      	lsls	r1, r1, #3
 8027c04:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027c08:	4301      	orrs	r1, r0
 8027c0a:	1c58      	adds	r0, r3, #1
 8027c0c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027c10:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027c14:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027c18:	430a      	orrs	r2, r1
 8027c1a:	e726      	b.n	8027a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8027c1c:	f115 0e01 	adds.w	lr, r5, #1
 8027c20:	f53f af24 	bmi.w	8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027c24:	4572      	cmp	r2, lr
 8027c26:	f6ff af21 	blt.w	8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027c2a:	f110 0e01 	adds.w	lr, r0, #1
 8027c2e:	f53f af1d 	bmi.w	8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027c32:	4573      	cmp	r3, lr
 8027c34:	f6ff af1a 	blt.w	8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027c38:	b21b      	sxth	r3, r3
 8027c3a:	b212      	sxth	r2, r2
 8027c3c:	9301      	str	r3, [sp, #4]
 8027c3e:	9200      	str	r2, [sp, #0]
 8027c40:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027c44:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027c48:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8027c4c:	4639      	mov	r1, r7
 8027c4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027c50:	f7ff fc22 	bl	8027498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027c54:	e70a      	b.n	8027a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027c56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027c58:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027c5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027c5e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027c62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c64:	fa1f fc82 	uxth.w	ip, r2
 8027c68:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027c6e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027c72:	141f      	asrs	r7, r3, #16
 8027c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027c76:	141b      	asrs	r3, r3, #16
 8027c78:	fb01 3707 	mla	r7, r1, r7, r3
 8027c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c7e:	eb03 0a07 	add.w	sl, r3, r7
 8027c82:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027c86:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027c8a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027c8e:	b29b      	uxth	r3, r3
 8027c90:	2d00      	cmp	r5, #0
 8027c92:	f000 80fe 	beq.w	8027e92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8027c96:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027c9a:	eb0a 0b01 	add.w	fp, sl, r1
 8027c9e:	fa1f fa85 	uxth.w	sl, r5
 8027ca2:	940c      	str	r4, [sp, #48]	; 0x30
 8027ca4:	fb0a fc0c 	mul.w	ip, sl, ip
 8027ca8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027cac:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027cb0:	eba0 000c 	sub.w	r0, r0, ip
 8027cb4:	940d      	str	r4, [sp, #52]	; 0x34
 8027cb6:	fa1f fa8a 	uxth.w	sl, sl
 8027cba:	b280      	uxth	r0, r0
 8027cbc:	eba3 030a 	sub.w	r3, r3, sl
 8027cc0:	fb08 f000 	mul.w	r0, r8, r0
 8027cc4:	b29b      	uxth	r3, r3
 8027cc6:	fb09 0303 	mla	r3, r9, r3, r0
 8027cca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027ccc:	fb0a 3300 	mla	r3, sl, r0, r3
 8027cd0:	fb0c 3304 	mla	r3, ip, r4, r3
 8027cd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027cd8:	2b00      	cmp	r3, #0
 8027cda:	f000 80cc 	beq.w	8027e76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8027cde:	9808      	ldr	r0, [sp, #32]
 8027ce0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027ce4:	9c08      	ldr	r4, [sp, #32]
 8027ce6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027cea:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027cee:	f000 80d5 	beq.w	8027e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8027cf2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027cf6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027cfa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027cfe:	fb0a fc0c 	mul.w	ip, sl, ip
 8027d02:	fb09 f707 	mul.w	r7, r9, r7
 8027d06:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027d0a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027d0e:	f107 0b20 	add.w	fp, r7, #32
 8027d12:	44cc      	add	ip, r9
 8027d14:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027d18:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027d1c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d20:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027d24:	ea4c 0909 	orr.w	r9, ip, r9
 8027d28:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027d2c:	8847      	ldrh	r7, [r0, #2]
 8027d2e:	d019      	beq.n	8027d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8027d30:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027d34:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027d38:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027d3c:	fb0a fc0c 	mul.w	ip, sl, ip
 8027d40:	fb08 f807 	mul.w	r8, r8, r7
 8027d44:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027d48:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027d4c:	f108 0b20 	add.w	fp, r8, #32
 8027d50:	44bc      	add	ip, r7
 8027d52:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027d56:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027d5a:	0a3f      	lsrs	r7, r7, #8
 8027d5c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027d60:	ea4c 0707 	orr.w	r7, ip, r7
 8027d64:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027d68:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027d6c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027d70:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027d74:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027d78:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027d7c:	ea4c 0909 	orr.w	r9, ip, r9
 8027d80:	ea4a 0707 	orr.w	r7, sl, r7
 8027d84:	2d00      	cmp	r5, #0
 8027d86:	f000 808b 	beq.w	8027ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8027d8a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027d8e:	3901      	subs	r1, #1
 8027d90:	0049      	lsls	r1, r1, #1
 8027d92:	3102      	adds	r1, #2
 8027d94:	eb00 0c01 	add.w	ip, r0, r1
 8027d98:	5a41      	ldrh	r1, [r0, r1]
 8027d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027d9c:	28ff      	cmp	r0, #255	; 0xff
 8027d9e:	d019      	beq.n	8027dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8027da0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027da4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027da6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027daa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027dae:	fb04 fa01 	mul.w	sl, r4, r1
 8027db2:	fb08 f800 	mul.w	r8, r8, r0
 8027db6:	f10a 0020 	add.w	r0, sl, #32
 8027dba:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027dbe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027dc2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027dc6:	4441      	add	r1, r8
 8027dc8:	0a00      	lsrs	r0, r0, #8
 8027dca:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027dce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027dd2:	4301      	orrs	r1, r0
 8027dd4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027dd6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027dda:	2cff      	cmp	r4, #255	; 0xff
 8027ddc:	d01a      	beq.n	8027e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8027dde:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027de2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027de6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027dea:	fb04 fa00 	mul.w	sl, r4, r0
 8027dee:	fb08 f80c 	mul.w	r8, r8, ip
 8027df2:	f10a 0c20 	add.w	ip, sl, #32
 8027df6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027dfa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027dfe:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027e02:	4440      	add	r0, r8
 8027e04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e08:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027e0c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027e10:	ea40 000c 	orr.w	r0, r0, ip
 8027e14:	fb15 fc02 	smulbb	ip, r5, r2
 8027e18:	f1c5 0810 	rsb	r8, r5, #16
 8027e1c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027e20:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027e24:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027e28:	eba8 0802 	sub.w	r8, r8, r2
 8027e2c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027e30:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027e34:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027e38:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027e3c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027e40:	ea4a 0101 	orr.w	r1, sl, r1
 8027e44:	437a      	muls	r2, r7
 8027e46:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027e4a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027e4e:	fb09 2208 	mla	r2, r9, r8, r2
 8027e52:	ea4b 0000 	orr.w	r0, fp, r0
 8027e56:	fb05 2201 	mla	r2, r5, r1, r2
 8027e5a:	fb0c 2200 	mla	r2, ip, r0, r2
 8027e5e:	0d57      	lsrs	r7, r2, #21
 8027e60:	0952      	lsrs	r2, r2, #5
 8027e62:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e66:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027e6a:	433a      	orrs	r2, r7
 8027e6c:	2bff      	cmp	r3, #255	; 0xff
 8027e6e:	b292      	uxth	r2, r2
 8027e70:	d127      	bne.n	8027ec2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8027e72:	f8ae 2000 	strh.w	r2, [lr]
 8027e76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027e78:	f10e 0e02 	add.w	lr, lr, #2
 8027e7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027e7e:	4413      	add	r3, r2
 8027e80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027e82:	931d      	str	r3, [sp, #116]	; 0x74
 8027e84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027e86:	441a      	add	r2, r3
 8027e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027e8a:	3b01      	subs	r3, #1
 8027e8c:	921e      	str	r2, [sp, #120]	; 0x78
 8027e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027e90:	e627      	b.n	8027ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027e92:	fb08 f000 	mul.w	r0, r8, r0
 8027e96:	fb09 0303 	mla	r3, r9, r3, r0
 8027e9a:	e71b      	b.n	8027cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8027e9c:	46b9      	mov	r9, r7
 8027e9e:	e743      	b.n	8027d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8027ea0:	f1c2 0110 	rsb	r1, r2, #16
 8027ea4:	437a      	muls	r2, r7
 8027ea6:	fb09 2901 	mla	r9, r9, r1, r2
 8027eaa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027eae:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027eb2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027eb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027eba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027ebe:	4302      	orrs	r2, r0
 8027ec0:	e7d4      	b.n	8027e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8027ec2:	f8be 7000 	ldrh.w	r7, [lr]
 8027ec6:	43db      	mvns	r3, r3
 8027ec8:	4c1b      	ldr	r4, [pc, #108]	; (8027f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8027eca:	1238      	asrs	r0, r7, #8
 8027ecc:	fa5f fc83 	uxtb.w	ip, r3
 8027ed0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027ed4:	10fd      	asrs	r5, r7, #3
 8027ed6:	00fb      	lsls	r3, r7, #3
 8027ed8:	fb00 f00c 	mul.w	r0, r0, ip
 8027edc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027ee0:	b2db      	uxtb	r3, r3
 8027ee2:	fb05 f10c 	mul.w	r1, r5, ip
 8027ee6:	1c45      	adds	r5, r0, #1
 8027ee8:	fb03 f30c 	mul.w	r3, r3, ip
 8027eec:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027ef0:	1215      	asrs	r5, r2, #8
 8027ef2:	f025 0507 	bic.w	r5, r5, #7
 8027ef6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027efa:	1c4d      	adds	r5, r1, #1
 8027efc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027f00:	10d1      	asrs	r1, r2, #3
 8027f02:	b2c0      	uxtb	r0, r0
 8027f04:	f021 0103 	bic.w	r1, r1, #3
 8027f08:	00d2      	lsls	r2, r2, #3
 8027f0a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027f0e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027f12:	00c9      	lsls	r1, r1, #3
 8027f14:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027f18:	4308      	orrs	r0, r1
 8027f1a:	1c59      	adds	r1, r3, #1
 8027f1c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027f20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f24:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027f28:	4318      	orrs	r0, r3
 8027f2a:	f8ae 0000 	strh.w	r0, [lr]
 8027f2e:	e7a2      	b.n	8027e76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8027f30:	b013      	add	sp, #76	; 0x4c
 8027f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f36:	bf00      	nop
 8027f38:	fffff800 	.word	0xfffff800

08027f3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f40:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8027f44:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027f48:	fb05 4c03 	mla	ip, r5, r3, r4
 8027f4c:	2d00      	cmp	r5, #0
 8027f4e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8027f52:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027f56:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027f5a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8027f5e:	8808      	ldrh	r0, [r1, #0]
 8027f60:	f2c0 80a7 	blt.w	80280b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027f64:	45aa      	cmp	sl, r5
 8027f66:	f340 80a4 	ble.w	80280b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027f6a:	2c00      	cmp	r4, #0
 8027f6c:	f2c0 809f 	blt.w	80280ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027f70:	42a3      	cmp	r3, r4
 8027f72:	f340 809c 	ble.w	80280ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027f76:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8027f7a:	1c62      	adds	r2, r4, #1
 8027f7c:	f100 809c 	bmi.w	80280b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027f80:	4293      	cmp	r3, r2
 8027f82:	f340 8099 	ble.w	80280b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027f86:	f1b9 0f00 	cmp.w	r9, #0
 8027f8a:	f000 8095 	beq.w	80280b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027f8e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8027f92:	3501      	adds	r5, #1
 8027f94:	f100 8094 	bmi.w	80280c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027f98:	45aa      	cmp	sl, r5
 8027f9a:	f340 8091 	ble.w	80280c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027f9e:	2f00      	cmp	r7, #0
 8027fa0:	f000 808e 	beq.w	80280c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027fa4:	2c00      	cmp	r4, #0
 8027fa6:	f2c0 8089 	blt.w	80280bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027faa:	42a3      	cmp	r3, r4
 8027fac:	f340 8086 	ble.w	80280bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027fb0:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8027fb4:	3401      	adds	r4, #1
 8027fb6:	f100 8086 	bmi.w	80280c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027fba:	42a3      	cmp	r3, r4
 8027fbc:	f340 8083 	ble.w	80280c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027fc0:	f1b9 0f00 	cmp.w	r9, #0
 8027fc4:	d07f      	beq.n	80280c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027fc6:	3301      	adds	r3, #1
 8027fc8:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8027fcc:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027fd0:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8027fd4:	fb19 fe07 	smulbb	lr, r9, r7
 8027fd8:	f1c7 0210 	rsb	r2, r7, #16
 8027fdc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027fe0:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027fe4:	eba2 0209 	sub.w	r2, r2, r9
 8027fe8:	ea44 0808 	orr.w	r8, r4, r8
 8027fec:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027ff0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027ff4:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027ff8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027ffc:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8028000:	ea44 0c0c 	orr.w	ip, r4, ip
 8028004:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8028008:	fb04 f40c 	mul.w	r4, r4, ip
 802800c:	fb02 4808 	mla	r8, r2, r8, r4
 8028010:	041a      	lsls	r2, r3, #16
 8028012:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028016:	b2b4      	uxth	r4, r6
 8028018:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802801c:	43f6      	mvns	r6, r6
 802801e:	4313      	orrs	r3, r2
 8028020:	042a      	lsls	r2, r5, #16
 8028022:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8028026:	b2f6      	uxtb	r6, r6
 8028028:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802802c:	fb0e 8303 	mla	r3, lr, r3, r8
 8028030:	432a      	orrs	r2, r5
 8028032:	fb07 3202 	mla	r2, r7, r2, r3
 8028036:	10c7      	asrs	r7, r0, #3
 8028038:	0d53      	lsrs	r3, r2, #21
 802803a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802803e:	0952      	lsrs	r2, r2, #5
 8028040:	fb17 f706 	smulbb	r7, r7, r6
 8028044:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028048:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802804c:	431a      	orrs	r2, r3
 802804e:	b293      	uxth	r3, r2
 8028050:	1202      	asrs	r2, r0, #8
 8028052:	121d      	asrs	r5, r3, #8
 8028054:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028058:	00c0      	lsls	r0, r0, #3
 802805a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802805e:	fb12 f206 	smulbb	r2, r2, r6
 8028062:	b2c0      	uxtb	r0, r0
 8028064:	fb05 2504 	mla	r5, r5, r4, r2
 8028068:	10da      	asrs	r2, r3, #3
 802806a:	fb10 f006 	smulbb	r0, r0, r6
 802806e:	00db      	lsls	r3, r3, #3
 8028070:	b2ad      	uxth	r5, r5
 8028072:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028076:	b2db      	uxtb	r3, r3
 8028078:	fb02 7204 	mla	r2, r2, r4, r7
 802807c:	fb03 0004 	mla	r0, r3, r4, r0
 8028080:	1c6b      	adds	r3, r5, #1
 8028082:	b292      	uxth	r2, r2
 8028084:	b280      	uxth	r0, r0
 8028086:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802808a:	1c43      	adds	r3, r0, #1
 802808c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028090:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028094:	1c50      	adds	r0, r2, #1
 8028096:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802809a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802809e:	0952      	lsrs	r2, r2, #5
 80280a0:	432b      	orrs	r3, r5
 80280a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80280a6:	4313      	orrs	r3, r2
 80280a8:	800b      	strh	r3, [r1, #0]
 80280aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80280ae:	4680      	mov	r8, r0
 80280b0:	e763      	b.n	8027f7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80280b2:	4684      	mov	ip, r0
 80280b4:	4680      	mov	r8, r0
 80280b6:	e76c      	b.n	8027f92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80280b8:	4684      	mov	ip, r0
 80280ba:	e76a      	b.n	8027f92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80280bc:	4605      	mov	r5, r0
 80280be:	e779      	b.n	8027fb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80280c0:	4603      	mov	r3, r0
 80280c2:	4605      	mov	r5, r0
 80280c4:	e782      	b.n	8027fcc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80280c6:	4603      	mov	r3, r0
 80280c8:	e780      	b.n	8027fcc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080280ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80280ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280ce:	b093      	sub	sp, #76	; 0x4c
 80280d0:	461d      	mov	r5, r3
 80280d2:	9210      	str	r2, [sp, #64]	; 0x40
 80280d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80280d6:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80280da:	910a      	str	r1, [sp, #40]	; 0x28
 80280dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80280de:	6859      	ldr	r1, [r3, #4]
 80280e0:	681b      	ldr	r3, [r3, #0]
 80280e2:	9011      	str	r0, [sp, #68]	; 0x44
 80280e4:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80280e8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80280ec:	fb01 2707 	mla	r7, r1, r7, r2
 80280f0:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80280f4:	9307      	str	r3, [sp, #28]
 80280f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80280f8:	681b      	ldr	r3, [r3, #0]
 80280fa:	9309      	str	r3, [sp, #36]	; 0x24
 80280fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80280fe:	43db      	mvns	r3, r3
 8028100:	b2db      	uxtb	r3, r3
 8028102:	9308      	str	r3, [sp, #32]
 8028104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028106:	2b00      	cmp	r3, #0
 8028108:	dc03      	bgt.n	8028112 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802810a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802810c:	2b00      	cmp	r3, #0
 802810e:	f340 8205 	ble.w	802851c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028112:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028114:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028118:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802811c:	1e48      	subs	r0, r1, #1
 802811e:	f102 3cff 	add.w	ip, r2, #4294967295
 8028122:	2d00      	cmp	r5, #0
 8028124:	f340 80da 	ble.w	80282dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028128:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802812c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028130:	d406      	bmi.n	8028140 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028132:	4586      	cmp	lr, r0
 8028134:	da04      	bge.n	8028140 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028136:	2b00      	cmp	r3, #0
 8028138:	db02      	blt.n	8028140 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802813a:	4563      	cmp	r3, ip
 802813c:	f2c0 80cf 	blt.w	80282de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8028140:	f11e 0e01 	adds.w	lr, lr, #1
 8028144:	f100 80c1 	bmi.w	80282ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028148:	4571      	cmp	r1, lr
 802814a:	f2c0 80be 	blt.w	80282ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802814e:	3301      	adds	r3, #1
 8028150:	f100 80bb 	bmi.w	80282ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028154:	429a      	cmp	r2, r3
 8028156:	f2c0 80b8 	blt.w	80282ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802815a:	46a9      	mov	r9, r5
 802815c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028160:	f1b9 0f00 	cmp.w	r9, #0
 8028164:	f340 80d8 	ble.w	8028318 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8028168:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802816a:	1421      	asrs	r1, r4, #16
 802816c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028170:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028174:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028178:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802817c:	f100 8112 	bmi.w	80283a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8028180:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028184:	4551      	cmp	r1, sl
 8028186:	f280 810d 	bge.w	80283a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802818a:	2800      	cmp	r0, #0
 802818c:	f2c0 810a 	blt.w	80283a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8028190:	f103 3aff 	add.w	sl, r3, #4294967295
 8028194:	4550      	cmp	r0, sl
 8028196:	f280 8105 	bge.w	80283a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802819a:	fa0f f38e 	sxth.w	r3, lr
 802819e:	fb00 1103 	mla	r1, r0, r3, r1
 80281a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80281a4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80281a8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80281ac:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80281b0:	f1bc 0f00 	cmp.w	ip, #0
 80281b4:	d007      	beq.n	80281c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80281b6:	005b      	lsls	r3, r3, #1
 80281b8:	eb0a 0003 	add.w	r0, sl, r3
 80281bc:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80281c0:	930c      	str	r3, [sp, #48]	; 0x30
 80281c2:	8843      	ldrh	r3, [r0, #2]
 80281c4:	930d      	str	r3, [sp, #52]	; 0x34
 80281c6:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80281ca:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80281ce:	fb12 f30c 	smulbb	r3, r2, ip
 80281d2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80281d6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80281da:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80281de:	10db      	asrs	r3, r3, #3
 80281e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80281e4:	ea40 000e 	orr.w	r0, r0, lr
 80281e8:	f1cc 0e10 	rsb	lr, ip, #16
 80281ec:	ea4a 0101 	orr.w	r1, sl, r1
 80281f0:	9f08      	ldr	r7, [sp, #32]
 80281f2:	ebae 0e02 	sub.w	lr, lr, r2
 80281f6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80281fa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80281fe:	4351      	muls	r1, r2
 8028200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028202:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028206:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028208:	0410      	lsls	r0, r2, #16
 802820a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802820e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028212:	4310      	orrs	r0, r2
 8028214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028216:	0412      	lsls	r2, r2, #16
 8028218:	fb03 e000 	mla	r0, r3, r0, lr
 802821c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028220:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028224:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028228:	ea42 020e 	orr.w	r2, r2, lr
 802822c:	fb03 0302 	mla	r3, r3, r2, r0
 8028230:	f8b8 0000 	ldrh.w	r0, [r8]
 8028234:	0d5a      	lsrs	r2, r3, #21
 8028236:	095b      	lsrs	r3, r3, #5
 8028238:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802823c:	1201      	asrs	r1, r0, #8
 802823e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028242:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8028246:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802824a:	00c0      	lsls	r0, r0, #3
 802824c:	4313      	orrs	r3, r2
 802824e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8028252:	fb11 f107 	smulbb	r1, r1, r7
 8028256:	b2c0      	uxtb	r0, r0
 8028258:	b29b      	uxth	r3, r3
 802825a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802825e:	fb10 f007 	smulbb	r0, r0, r7
 8028262:	fb1e fe07 	smulbb	lr, lr, r7
 8028266:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802826a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802826e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028272:	10d9      	asrs	r1, r3, #3
 8028274:	00db      	lsls	r3, r3, #3
 8028276:	fa1f fc8c 	uxth.w	ip, ip
 802827a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802827e:	b2db      	uxtb	r3, r3
 8028280:	fb01 e102 	mla	r1, r1, r2, lr
 8028284:	fb03 0302 	mla	r3, r3, r2, r0
 8028288:	b289      	uxth	r1, r1
 802828a:	b29a      	uxth	r2, r3
 802828c:	f10c 0301 	add.w	r3, ip, #1
 8028290:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028294:	1c53      	adds	r3, r2, #1
 8028296:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802829a:	1c4a      	adds	r2, r1, #1
 802829c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80282a0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80282a4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80282a8:	0949      	lsrs	r1, r1, #5
 80282aa:	ea43 030c 	orr.w	r3, r3, ip
 80282ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80282b2:	430b      	orrs	r3, r1
 80282b4:	f8a8 3000 	strh.w	r3, [r8]
 80282b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80282ba:	f108 0802 	add.w	r8, r8, #2
 80282be:	f109 39ff 	add.w	r9, r9, #4294967295
 80282c2:	441c      	add	r4, r3
 80282c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80282c6:	441e      	add	r6, r3
 80282c8:	e74a      	b.n	8028160 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80282ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80282cc:	3d01      	subs	r5, #1
 80282ce:	441c      	add	r4, r3
 80282d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80282d2:	441e      	add	r6, r3
 80282d4:	9b07      	ldr	r3, [sp, #28]
 80282d6:	3302      	adds	r3, #2
 80282d8:	9307      	str	r3, [sp, #28]
 80282da:	e722      	b.n	8028122 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80282dc:	d022      	beq.n	8028324 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80282de:	1e6b      	subs	r3, r5, #1
 80282e0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80282e2:	fb00 4003 	mla	r0, r0, r3, r4
 80282e6:	1400      	asrs	r0, r0, #16
 80282e8:	f53f af37 	bmi.w	802815a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80282ec:	3901      	subs	r1, #1
 80282ee:	4288      	cmp	r0, r1
 80282f0:	f6bf af33 	bge.w	802815a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80282f4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80282f6:	fb01 6303 	mla	r3, r1, r3, r6
 80282fa:	141b      	asrs	r3, r3, #16
 80282fc:	f53f af2d 	bmi.w	802815a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028300:	3a01      	subs	r2, #1
 8028302:	4293      	cmp	r3, r2
 8028304:	f6bf af29 	bge.w	802815a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028308:	46a8      	mov	r8, r5
 802830a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802830e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8028312:	f1b8 0f00 	cmp.w	r8, #0
 8028316:	dc60      	bgt.n	80283da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8028318:	9b07      	ldr	r3, [sp, #28]
 802831a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802831e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028322:	9307      	str	r3, [sp, #28]
 8028324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028326:	2b00      	cmp	r3, #0
 8028328:	f340 80f8 	ble.w	802851c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802832c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028330:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028332:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028336:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802833a:	eef0 6a62 	vmov.f32	s13, s5
 802833e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028342:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028346:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802834a:	ee16 4a90 	vmov	r4, s13
 802834e:	eef0 6a43 	vmov.f32	s13, s6
 8028352:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028356:	ee16 6a90 	vmov	r6, s13
 802835a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802835e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028362:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028366:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802836a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802836e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028372:	ee12 2a90 	vmov	r2, s5
 8028376:	eef0 2a47 	vmov.f32	s5, s14
 802837a:	fb92 f3f3 	sdiv	r3, r2, r3
 802837e:	ee13 2a10 	vmov	r2, s6
 8028382:	931f      	str	r3, [sp, #124]	; 0x7c
 8028384:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028386:	eeb0 3a67 	vmov.f32	s6, s15
 802838a:	fb92 f3f3 	sdiv	r3, r2, r3
 802838e:	9320      	str	r3, [sp, #128]	; 0x80
 8028390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028392:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028394:	3b01      	subs	r3, #1
 8028396:	930a      	str	r3, [sp, #40]	; 0x28
 8028398:	bf08      	it	eq
 802839a:	4615      	moveq	r5, r2
 802839c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802839e:	bf18      	it	ne
 80283a0:	461d      	movne	r5, r3
 80283a2:	e6af      	b.n	8028104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80283a4:	f111 0a01 	adds.w	sl, r1, #1
 80283a8:	d486      	bmi.n	80282b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80283aa:	45d6      	cmp	lr, sl
 80283ac:	db84      	blt.n	80282b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80283ae:	f110 0a01 	adds.w	sl, r0, #1
 80283b2:	d481      	bmi.n	80282b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80283b4:	4553      	cmp	r3, sl
 80283b6:	f6ff af7f 	blt.w	80282b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80283ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80283bc:	b21b      	sxth	r3, r3
 80283be:	9101      	str	r1, [sp, #4]
 80283c0:	4641      	mov	r1, r8
 80283c2:	9300      	str	r3, [sp, #0]
 80283c4:	fa0f f38e 	sxth.w	r3, lr
 80283c8:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80283cc:	e9cd c704 	strd	ip, r7, [sp, #16]
 80283d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80283d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80283d4:	f7ff fdb2 	bl	8027f3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80283d8:	e76e      	b.n	80282b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80283da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80283dc:	1430      	asrs	r0, r6, #16
 80283de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80283e0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80283e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80283e8:	1423      	asrs	r3, r4, #16
 80283ea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80283ee:	fb01 3000 	mla	r0, r1, r0, r3
 80283f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80283f4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80283f8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80283fc:	8858      	ldrh	r0, [r3, #2]
 80283fe:	f1be 0f00 	cmp.w	lr, #0
 8028402:	d00b      	beq.n	802841c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8028404:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028408:	3901      	subs	r1, #1
 802840a:	0049      	lsls	r1, r1, #1
 802840c:	3102      	adds	r1, #2
 802840e:	eb03 0b01 	add.w	fp, r3, r1
 8028412:	5a5b      	ldrh	r3, [r3, r1]
 8028414:	930e      	str	r3, [sp, #56]	; 0x38
 8028416:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802841a:	930f      	str	r3, [sp, #60]	; 0x3c
 802841c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028420:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028424:	fb12 f30e 	smulbb	r3, r2, lr
 8028428:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802842c:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8028430:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028434:	10db      	asrs	r3, r3, #3
 8028436:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802843a:	ea41 010c 	orr.w	r1, r1, ip
 802843e:	f1ce 0c10 	rsb	ip, lr, #16
 8028442:	ea4b 0000 	orr.w	r0, fp, r0
 8028446:	9f08      	ldr	r7, [sp, #32]
 8028448:	ebac 0c02 	sub.w	ip, ip, r2
 802844c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028450:	f108 38ff 	add.w	r8, r8, #4294967295
 8028454:	4350      	muls	r0, r2
 8028456:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802845a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802845c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028460:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028462:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028466:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802846a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802846c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028470:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028474:	0412      	lsls	r2, r2, #16
 8028476:	ea4b 0101 	orr.w	r1, fp, r1
 802847a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802847e:	fb03 c101 	mla	r1, r3, r1, ip
 8028482:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028486:	4302      	orrs	r2, r0
 8028488:	fb03 1202 	mla	r2, r3, r2, r1
 802848c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028490:	0952      	lsrs	r2, r2, #5
 8028492:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028496:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802849a:	f8b9 2000 	ldrh.w	r2, [r9]
 802849e:	ea4b 0303 	orr.w	r3, fp, r3
 80284a2:	1211      	asrs	r1, r2, #8
 80284a4:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80284a8:	b29b      	uxth	r3, r3
 80284aa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80284ae:	00d2      	lsls	r2, r2, #3
 80284b0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80284b4:	fb11 f107 	smulbb	r1, r1, r7
 80284b8:	1218      	asrs	r0, r3, #8
 80284ba:	fb1c fc07 	smulbb	ip, ip, r7
 80284be:	b2d2      	uxtb	r2, r2
 80284c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80284c4:	fb12 f207 	smulbb	r2, r2, r7
 80284c8:	fb00 100a 	mla	r0, r0, sl, r1
 80284cc:	10d9      	asrs	r1, r3, #3
 80284ce:	00db      	lsls	r3, r3, #3
 80284d0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80284d4:	b280      	uxth	r0, r0
 80284d6:	b2db      	uxtb	r3, r3
 80284d8:	fb01 c10a 	mla	r1, r1, sl, ip
 80284dc:	fb03 230a 	mla	r3, r3, sl, r2
 80284e0:	1c42      	adds	r2, r0, #1
 80284e2:	b289      	uxth	r1, r1
 80284e4:	b29b      	uxth	r3, r3
 80284e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80284ea:	f101 0c01 	add.w	ip, r1, #1
 80284ee:	1c5a      	adds	r2, r3, #1
 80284f0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80284f4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80284f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80284fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80284fe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028502:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028506:	441c      	add	r4, r3
 8028508:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802850c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802850e:	4310      	orrs	r0, r2
 8028510:	441e      	add	r6, r3
 8028512:	ea40 000c 	orr.w	r0, r0, ip
 8028516:	f829 0b02 	strh.w	r0, [r9], #2
 802851a:	e6fa      	b.n	8028312 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802851c:	b013      	add	sp, #76	; 0x4c
 802851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028522 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8028522:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028526:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802852a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802852e:	fb0e 4703 	mla	r7, lr, r3, r4
 8028532:	f1be 0f00 	cmp.w	lr, #0
 8028536:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 802853a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802853e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8028542:	8808      	ldrh	r0, [r1, #0]
 8028544:	db60      	blt.n	8028608 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8028546:	45f1      	cmp	r9, lr
 8028548:	dd5e      	ble.n	8028608 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802854a:	2c00      	cmp	r4, #0
 802854c:	db5a      	blt.n	8028604 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802854e:	42a3      	cmp	r3, r4
 8028550:	dd58      	ble.n	8028604 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8028552:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8028556:	1c62      	adds	r2, r4, #1
 8028558:	d459      	bmi.n	802860e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802855a:	4293      	cmp	r3, r2
 802855c:	dd57      	ble.n	802860e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802855e:	2d00      	cmp	r5, #0
 8028560:	d055      	beq.n	802860e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028562:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8028566:	f11e 0e01 	adds.w	lr, lr, #1
 802856a:	d454      	bmi.n	8028616 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802856c:	45f1      	cmp	r9, lr
 802856e:	dd52      	ble.n	8028616 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028570:	2e00      	cmp	r6, #0
 8028572:	d050      	beq.n	8028616 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028574:	2c00      	cmp	r4, #0
 8028576:	db4c      	blt.n	8028612 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8028578:	42a3      	cmp	r3, r4
 802857a:	dd4a      	ble.n	8028612 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802857c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8028580:	3401      	adds	r4, #1
 8028582:	d405      	bmi.n	8028590 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028584:	42a3      	cmp	r3, r4
 8028586:	dd03      	ble.n	8028590 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028588:	b115      	cbz	r5, 8028590 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802858a:	3301      	adds	r3, #1
 802858c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8028590:	fb15 f406 	smulbb	r4, r5, r6
 8028594:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8028598:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802859c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80285a0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80285a4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80285a8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80285ac:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80285b0:	ea43 0c0c 	orr.w	ip, r3, ip
 80285b4:	f1c6 0310 	rsb	r3, r6, #16
 80285b8:	ea4e 0707 	orr.w	r7, lr, r7
 80285bc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80285c0:	1b5b      	subs	r3, r3, r5
 80285c2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80285c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80285ca:	437d      	muls	r5, r7
 80285cc:	fb03 5c0c 	mla	ip, r3, ip, r5
 80285d0:	0403      	lsls	r3, r0, #16
 80285d2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80285d6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80285da:	4318      	orrs	r0, r3
 80285dc:	0413      	lsls	r3, r2, #16
 80285de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80285e2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80285e6:	fb04 c000 	mla	r0, r4, r0, ip
 80285ea:	4313      	orrs	r3, r2
 80285ec:	fb06 0003 	mla	r0, r6, r3, r0
 80285f0:	0d43      	lsrs	r3, r0, #21
 80285f2:	0940      	lsrs	r0, r0, #5
 80285f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80285f8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80285fc:	4318      	orrs	r0, r3
 80285fe:	8008      	strh	r0, [r1, #0]
 8028600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028604:	4684      	mov	ip, r0
 8028606:	e7a6      	b.n	8028556 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8028608:	4607      	mov	r7, r0
 802860a:	4684      	mov	ip, r0
 802860c:	e7ab      	b.n	8028566 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802860e:	4607      	mov	r7, r0
 8028610:	e7a9      	b.n	8028566 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8028612:	4602      	mov	r2, r0
 8028614:	e7b4      	b.n	8028580 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8028616:	4602      	mov	r2, r0
 8028618:	e7ba      	b.n	8028590 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802861a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802861a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802861e:	b08f      	sub	sp, #60	; 0x3c
 8028620:	461d      	mov	r5, r3
 8028622:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028624:	9107      	str	r1, [sp, #28]
 8028626:	920c      	str	r2, [sp, #48]	; 0x30
 8028628:	6859      	ldr	r1, [r3, #4]
 802862a:	681b      	ldr	r3, [r3, #0]
 802862c:	900d      	str	r0, [sp, #52]	; 0x34
 802862e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8028632:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8028636:	fb01 2707 	mla	r7, r1, r7, r2
 802863a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802863e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028640:	f8d3 8000 	ldr.w	r8, [r3]
 8028644:	9b07      	ldr	r3, [sp, #28]
 8028646:	2b00      	cmp	r3, #0
 8028648:	dc03      	bgt.n	8028652 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802864a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802864c:	2b00      	cmp	r3, #0
 802864e:	f340 8182 	ble.w	8028956 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8028652:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028654:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028658:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802865c:	1e48      	subs	r0, r1, #1
 802865e:	f102 3cff 	add.w	ip, r2, #4294967295
 8028662:	2d00      	cmp	r5, #0
 8028664:	f340 809b 	ble.w	802879e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8028668:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802866c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028670:	d406      	bmi.n	8028680 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028672:	4586      	cmp	lr, r0
 8028674:	da04      	bge.n	8028680 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028676:	2b00      	cmp	r3, #0
 8028678:	db02      	blt.n	8028680 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802867a:	4563      	cmp	r3, ip
 802867c:	f2c0 8090 	blt.w	80287a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028680:	f11e 0e01 	adds.w	lr, lr, #1
 8028684:	f100 8084 	bmi.w	8028790 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028688:	4571      	cmp	r1, lr
 802868a:	f2c0 8081 	blt.w	8028790 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802868e:	3301      	adds	r3, #1
 8028690:	d47e      	bmi.n	8028790 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028692:	429a      	cmp	r2, r3
 8028694:	db7c      	blt.n	8028790 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028696:	46aa      	mov	sl, r5
 8028698:	46b9      	mov	r9, r7
 802869a:	f1ba 0f00 	cmp.w	sl, #0
 802869e:	f340 8099 	ble.w	80287d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80286a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80286a4:	1421      	asrs	r1, r4, #16
 80286a6:	ea4f 4026 	mov.w	r0, r6, asr #16
 80286aa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80286ae:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80286b2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80286b6:	f100 80d1 	bmi.w	802885c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80286ba:	f10e 3bff 	add.w	fp, lr, #4294967295
 80286be:	4559      	cmp	r1, fp
 80286c0:	f280 80cc 	bge.w	802885c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80286c4:	2800      	cmp	r0, #0
 80286c6:	f2c0 80c9 	blt.w	802885c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80286ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80286ce:	4558      	cmp	r0, fp
 80286d0:	f280 80c4 	bge.w	802885c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80286d4:	fa0f fe8e 	sxth.w	lr, lr
 80286d8:	fb00 110e 	mla	r1, r0, lr, r1
 80286dc:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80286e0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80286e4:	8841      	ldrh	r1, [r0, #2]
 80286e6:	f1bc 0f00 	cmp.w	ip, #0
 80286ea:	d00b      	beq.n	8028704 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80286ec:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80286f0:	3b01      	subs	r3, #1
 80286f2:	005b      	lsls	r3, r3, #1
 80286f4:	3302      	adds	r3, #2
 80286f6:	eb00 0e03 	add.w	lr, r0, r3
 80286fa:	5ac3      	ldrh	r3, [r0, r3]
 80286fc:	9308      	str	r3, [sp, #32]
 80286fe:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8028702:	9309      	str	r3, [sp, #36]	; 0x24
 8028704:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8028708:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802870c:	fb12 f30c 	smulbb	r3, r2, ip
 8028710:	f1cc 0e10 	rsb	lr, ip, #16
 8028714:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028718:	10db      	asrs	r3, r3, #3
 802871a:	ebae 0e02 	sub.w	lr, lr, r2
 802871e:	ea40 000b 	orr.w	r0, r0, fp
 8028722:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028726:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802872a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802872e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028732:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028736:	ea4b 0101 	orr.w	r1, fp, r1
 802873a:	4351      	muls	r1, r2
 802873c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802873e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028742:	0410      	lsls	r0, r2, #16
 8028744:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028748:	9908      	ldr	r1, [sp, #32]
 802874a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802874e:	4310      	orrs	r0, r2
 8028750:	9a08      	ldr	r2, [sp, #32]
 8028752:	0412      	lsls	r2, r2, #16
 8028754:	fb03 e000 	mla	r0, r3, r0, lr
 8028758:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802875c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028760:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028764:	ea42 020e 	orr.w	r2, r2, lr
 8028768:	fb03 0302 	mla	r3, r3, r2, r0
 802876c:	0d5a      	lsrs	r2, r3, #21
 802876e:	095b      	lsrs	r3, r3, #5
 8028770:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028774:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028778:	4313      	orrs	r3, r2
 802877a:	f8a9 3000 	strh.w	r3, [r9]
 802877e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028780:	f109 0902 	add.w	r9, r9, #2
 8028784:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028788:	441c      	add	r4, r3
 802878a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802878c:	441e      	add	r6, r3
 802878e:	e784      	b.n	802869a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8028790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028792:	3d01      	subs	r5, #1
 8028794:	3702      	adds	r7, #2
 8028796:	441c      	add	r4, r3
 8028798:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802879a:	441e      	add	r6, r3
 802879c:	e761      	b.n	8028662 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802879e:	d01d      	beq.n	80287dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80287a0:	1e6b      	subs	r3, r5, #1
 80287a2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80287a4:	fb00 4003 	mla	r0, r0, r3, r4
 80287a8:	1400      	asrs	r0, r0, #16
 80287aa:	f53f af74 	bmi.w	8028696 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80287ae:	3901      	subs	r1, #1
 80287b0:	4288      	cmp	r0, r1
 80287b2:	f6bf af70 	bge.w	8028696 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80287b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80287b8:	fb01 6303 	mla	r3, r1, r3, r6
 80287bc:	141b      	asrs	r3, r3, #16
 80287be:	f53f af6a 	bmi.w	8028696 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80287c2:	3a01      	subs	r2, #1
 80287c4:	4293      	cmp	r3, r2
 80287c6:	f6bf af66 	bge.w	8028696 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80287ca:	46a9      	mov	r9, r5
 80287cc:	46ba      	mov	sl, r7
 80287ce:	f1b9 0f00 	cmp.w	r9, #0
 80287d2:	dc5b      	bgt.n	802888c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80287d4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80287d8:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80287dc:	9b07      	ldr	r3, [sp, #28]
 80287de:	2b00      	cmp	r3, #0
 80287e0:	f340 80b9 	ble.w	8028956 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80287e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80287e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80287ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80287ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80287f2:	eef0 6a62 	vmov.f32	s13, s5
 80287f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80287fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80287fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028802:	ee16 4a90 	vmov	r4, s13
 8028806:	eef0 6a43 	vmov.f32	s13, s6
 802880a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802880e:	ee16 6a90 	vmov	r6, s13
 8028812:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028816:	ee61 7a27 	vmul.f32	s15, s2, s15
 802881a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802881e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028822:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028826:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802882a:	ee12 2a90 	vmov	r2, s5
 802882e:	eef0 2a47 	vmov.f32	s5, s14
 8028832:	fb92 f3f3 	sdiv	r3, r2, r3
 8028836:	ee13 2a10 	vmov	r2, s6
 802883a:	931b      	str	r3, [sp, #108]	; 0x6c
 802883c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802883e:	eeb0 3a67 	vmov.f32	s6, s15
 8028842:	fb92 f3f3 	sdiv	r3, r2, r3
 8028846:	931c      	str	r3, [sp, #112]	; 0x70
 8028848:	9b07      	ldr	r3, [sp, #28]
 802884a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802884c:	3b01      	subs	r3, #1
 802884e:	9307      	str	r3, [sp, #28]
 8028850:	bf08      	it	eq
 8028852:	4615      	moveq	r5, r2
 8028854:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028856:	bf18      	it	ne
 8028858:	461d      	movne	r5, r3
 802885a:	e6f3      	b.n	8028644 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802885c:	f111 0b01 	adds.w	fp, r1, #1
 8028860:	d48d      	bmi.n	802877e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028862:	45de      	cmp	lr, fp
 8028864:	db8b      	blt.n	802877e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028866:	f110 0b01 	adds.w	fp, r0, #1
 802886a:	d488      	bmi.n	802877e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802886c:	455b      	cmp	r3, fp
 802886e:	db86      	blt.n	802877e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028870:	b21b      	sxth	r3, r3
 8028872:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028876:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802887a:	9300      	str	r3, [sp, #0]
 802887c:	4642      	mov	r2, r8
 802887e:	fa0f f38e 	sxth.w	r3, lr
 8028882:	4649      	mov	r1, r9
 8028884:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028886:	f7ff fe4c 	bl	8028522 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802888a:	e778      	b.n	802877e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802888c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802888e:	1420      	asrs	r0, r4, #16
 8028890:	1431      	asrs	r1, r6, #16
 8028892:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802889a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802889e:	fb03 0101 	mla	r1, r3, r1, r0
 80288a2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80288a6:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80288aa:	8841      	ldrh	r1, [r0, #2]
 80288ac:	f1be 0f00 	cmp.w	lr, #0
 80288b0:	d00b      	beq.n	80288ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80288b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80288b6:	3b01      	subs	r3, #1
 80288b8:	005b      	lsls	r3, r3, #1
 80288ba:	3302      	adds	r3, #2
 80288bc:	eb00 0b03 	add.w	fp, r0, r3
 80288c0:	5ac3      	ldrh	r3, [r0, r3]
 80288c2:	930a      	str	r3, [sp, #40]	; 0x28
 80288c4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80288c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80288ca:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80288ce:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80288d2:	fb12 f30e 	smulbb	r3, r2, lr
 80288d6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80288da:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80288de:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80288e2:	10db      	asrs	r3, r3, #3
 80288e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80288e8:	ea40 000c 	orr.w	r0, r0, ip
 80288ec:	f1ce 0c10 	rsb	ip, lr, #16
 80288f0:	ea4b 0101 	orr.w	r1, fp, r1
 80288f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80288f8:	ebac 0c02 	sub.w	ip, ip, r2
 80288fc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028900:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028904:	4351      	muls	r1, r2
 8028906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028908:	fb0c 1c00 	mla	ip, ip, r0, r1
 802890c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802890e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028912:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8028916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028918:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802891c:	0412      	lsls	r2, r2, #16
 802891e:	ea4b 0000 	orr.w	r0, fp, r0
 8028922:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8028926:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802892a:	fb03 c000 	mla	r0, r3, r0, ip
 802892e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028932:	ea42 0b0b 	orr.w	fp, r2, fp
 8028936:	fb03 000b 	mla	r0, r3, fp, r0
 802893a:	0d43      	lsrs	r3, r0, #21
 802893c:	0940      	lsrs	r0, r0, #5
 802893e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028942:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028946:	4318      	orrs	r0, r3
 8028948:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802894a:	441c      	add	r4, r3
 802894c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802894e:	f82a 0b02 	strh.w	r0, [sl], #2
 8028952:	441e      	add	r6, r3
 8028954:	e73b      	b.n	80287ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028956:	b00f      	add	sp, #60	; 0x3c
 8028958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802895c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028960:	b085      	sub	sp, #20
 8028962:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8028966:	9102      	str	r1, [sp, #8]
 8028968:	2c00      	cmp	r4, #0
 802896a:	fb04 7103 	mla	r1, r4, r3, r7
 802896e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8028972:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028976:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802897a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802897e:	f2c0 811b 	blt.w	8028bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028982:	45a6      	cmp	lr, r4
 8028984:	f340 8118 	ble.w	8028bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028988:	2f00      	cmp	r7, #0
 802898a:	f2c0 8113 	blt.w	8028bb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802898e:	42bb      	cmp	r3, r7
 8028990:	f340 8110 	ble.w	8028bb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028994:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028998:	1c7a      	adds	r2, r7, #1
 802899a:	f100 8110 	bmi.w	8028bbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802899e:	4293      	cmp	r3, r2
 80289a0:	f340 810d 	ble.w	8028bbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80289a4:	2e00      	cmp	r6, #0
 80289a6:	f000 810c 	beq.w	8028bc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80289aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80289ae:	3401      	adds	r4, #1
 80289b0:	f100 810b 	bmi.w	8028bca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80289b4:	45a6      	cmp	lr, r4
 80289b6:	f340 8108 	ble.w	8028bca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80289ba:	2800      	cmp	r0, #0
 80289bc:	f000 8108 	beq.w	8028bd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80289c0:	2f00      	cmp	r7, #0
 80289c2:	f2c0 8100 	blt.w	8028bc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80289c6:	42bb      	cmp	r3, r7
 80289c8:	f340 80fd 	ble.w	8028bc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80289cc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80289d0:	3701      	adds	r7, #1
 80289d2:	f100 8100 	bmi.w	8028bd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80289d6:	42bb      	cmp	r3, r7
 80289d8:	f340 80fd 	ble.w	8028bd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80289dc:	2e00      	cmp	r6, #0
 80289de:	f000 80fc 	beq.w	8028bda <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80289e2:	3301      	adds	r3, #1
 80289e4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80289e8:	b2b6      	uxth	r6, r6
 80289ea:	b280      	uxth	r0, r0
 80289ec:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80289f0:	fb00 fe06 	mul.w	lr, r0, r6
 80289f4:	0136      	lsls	r6, r6, #4
 80289f6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80289fa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80289fe:	eba6 070e 	sub.w	r7, r6, lr
 8028a02:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8028a06:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028a0a:	b280      	uxth	r0, r0
 8028a0c:	b2bf      	uxth	r7, r7
 8028a0e:	1a1b      	subs	r3, r3, r0
 8028a10:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028a14:	fb0a f607 	mul.w	r6, sl, r7
 8028a18:	b29b      	uxth	r3, r3
 8028a1a:	fb0b 6603 	mla	r6, fp, r3, r6
 8028a1e:	fb00 6609 	mla	r6, r0, r9, r6
 8028a22:	fb0e 6608 	mla	r6, lr, r8, r6
 8028a26:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028a2a:	9600      	str	r6, [sp, #0]
 8028a2c:	2e00      	cmp	r6, #0
 8028a2e:	f000 80be 	beq.w	8028bae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8028a32:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028a36:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028a3a:	9e02      	ldr	r6, [sp, #8]
 8028a3c:	fb0b fc0c 	mul.w	ip, fp, ip
 8028a40:	fb0b f505 	mul.w	r5, fp, r5
 8028a44:	8836      	ldrh	r6, [r6, #0]
 8028a46:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028a4a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028a4e:	9501      	str	r5, [sp, #4]
 8028a50:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028a54:	44dc      	add	ip, fp
 8028a56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a5a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8028a5e:	9503      	str	r5, [sp, #12]
 8028a60:	9d01      	ldr	r5, [sp, #4]
 8028a62:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8028a66:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8028a6a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8028a6e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028a72:	fb0a fc0c 	mul.w	ip, sl, ip
 8028a76:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028a7a:	fb0a fa01 	mul.w	sl, sl, r1
 8028a7e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028a82:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028a86:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8028a8a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028a8e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028a92:	4465      	add	r5, ip
 8028a94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028a98:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028a9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028aa0:	fb09 fc0c 	mul.w	ip, r9, ip
 8028aa4:	0a2d      	lsrs	r5, r5, #8
 8028aa6:	fb09 f904 	mul.w	r9, r9, r4
 8028aaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028aae:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028ab2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028ab6:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8028aba:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028abe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028ac2:	437d      	muls	r5, r7
 8028ac4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028ac8:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8028acc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028ad0:	4461      	add	r1, ip
 8028ad2:	fb08 f404 	mul.w	r4, r8, r4
 8028ad6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028ada:	fb08 f802 	mul.w	r8, r8, r2
 8028ade:	0a09      	lsrs	r1, r1, #8
 8028ae0:	0a22      	lsrs	r2, r4, #8
 8028ae2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028ae6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028aea:	fb07 f70a 	mul.w	r7, r7, sl
 8028aee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028af2:	4414      	add	r4, r2
 8028af4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8028af8:	0a24      	lsrs	r4, r4, #8
 8028afa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028afe:	9a03      	ldr	r2, [sp, #12]
 8028b00:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028b04:	fb02 5503 	mla	r5, r2, r3, r5
 8028b08:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028b0c:	9a00      	ldr	r2, [sp, #0]
 8028b0e:	fb04 540e 	mla	r4, r4, lr, r5
 8028b12:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028b16:	1235      	asrs	r5, r6, #8
 8028b18:	fb01 4100 	mla	r1, r1, r0, r4
 8028b1c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028b20:	0a09      	lsrs	r1, r1, #8
 8028b22:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8028b26:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8028b2a:	fb03 7101 	mla	r1, r3, r1, r7
 8028b2e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028b32:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8028b36:	fb00 e101 	mla	r1, r0, r1, lr
 8028b3a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8028b3e:	b287      	uxth	r7, r0
 8028b40:	0a09      	lsrs	r1, r1, #8
 8028b42:	437a      	muls	r2, r7
 8028b44:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028b48:	1c53      	adds	r3, r2, #1
 8028b4a:	4321      	orrs	r1, r4
 8028b4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028b50:	0c0a      	lsrs	r2, r1, #16
 8028b52:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8028b56:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8028b5a:	b2c8      	uxtb	r0, r1
 8028b5c:	fb12 f207 	smulbb	r2, r2, r7
 8028b60:	fb14 f407 	smulbb	r4, r4, r7
 8028b64:	b2db      	uxtb	r3, r3
 8028b66:	fb10 f007 	smulbb	r0, r0, r7
 8028b6a:	fb05 2503 	mla	r5, r5, r3, r2
 8028b6e:	10f2      	asrs	r2, r6, #3
 8028b70:	00f6      	lsls	r6, r6, #3
 8028b72:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028b76:	b2ad      	uxth	r5, r5
 8028b78:	b2f6      	uxtb	r6, r6
 8028b7a:	fb02 4203 	mla	r2, r2, r3, r4
 8028b7e:	fb06 0303 	mla	r3, r6, r3, r0
 8028b82:	b294      	uxth	r4, r2
 8028b84:	b299      	uxth	r1, r3
 8028b86:	1c6b      	adds	r3, r5, #1
 8028b88:	1c62      	adds	r2, r4, #1
 8028b8a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028b8e:	1c4b      	adds	r3, r1, #1
 8028b90:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028b94:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028b98:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028b9c:	0952      	lsrs	r2, r2, #5
 8028b9e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028ba2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028ba6:	432b      	orrs	r3, r5
 8028ba8:	4313      	orrs	r3, r2
 8028baa:	9a02      	ldr	r2, [sp, #8]
 8028bac:	8013      	strh	r3, [r2, #0]
 8028bae:	b005      	add	sp, #20
 8028bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bb4:	2500      	movs	r5, #0
 8028bb6:	e6ef      	b.n	8028998 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8028bb8:	2100      	movs	r1, #0
 8028bba:	460d      	mov	r5, r1
 8028bbc:	e6f7      	b.n	80289ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028bbe:	2100      	movs	r1, #0
 8028bc0:	e6f5      	b.n	80289ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028bc2:	4631      	mov	r1, r6
 8028bc4:	e6f3      	b.n	80289ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028bc6:	2400      	movs	r4, #0
 8028bc8:	e702      	b.n	80289d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8028bca:	2200      	movs	r2, #0
 8028bcc:	4614      	mov	r4, r2
 8028bce:	e70b      	b.n	80289e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028bd0:	4602      	mov	r2, r0
 8028bd2:	4604      	mov	r4, r0
 8028bd4:	e708      	b.n	80289e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028bd6:	2200      	movs	r2, #0
 8028bd8:	e706      	b.n	80289e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028bda:	4632      	mov	r2, r6
 8028bdc:	e704      	b.n	80289e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08028bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028be2:	b09d      	sub	sp, #116	; 0x74
 8028be4:	9219      	str	r2, [sp, #100]	; 0x64
 8028be6:	9307      	str	r3, [sp, #28]
 8028be8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028bea:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8028bee:	901b      	str	r0, [sp, #108]	; 0x6c
 8028bf0:	931a      	str	r3, [sp, #104]	; 0x68
 8028bf2:	6850      	ldr	r0, [r2, #4]
 8028bf4:	9117      	str	r1, [sp, #92]	; 0x5c
 8028bf6:	6812      	ldr	r2, [r2, #0]
 8028bf8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8028bfc:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8028c00:	fb00 1303 	mla	r3, r0, r3, r1
 8028c04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028c08:	930a      	str	r3, [sp, #40]	; 0x28
 8028c0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028c0c:	681b      	ldr	r3, [r3, #0]
 8028c0e:	9310      	str	r3, [sp, #64]	; 0x40
 8028c10:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8028c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8028c16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	dc03      	bgt.n	8028c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8028c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028c1e:	2b00      	cmp	r3, #0
 8028c20:	f340 8375 	ble.w	802930e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028c24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028c26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028c2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028c2e:	1e48      	subs	r0, r1, #1
 8028c30:	1e57      	subs	r7, r2, #1
 8028c32:	9b07      	ldr	r3, [sp, #28]
 8028c34:	2b00      	cmp	r3, #0
 8028c36:	f340 818e 	ble.w	8028f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8028c3a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028c3e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028c42:	d406      	bmi.n	8028c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028c44:	4584      	cmp	ip, r0
 8028c46:	da04      	bge.n	8028c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	db02      	blt.n	8028c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028c4c:	42bb      	cmp	r3, r7
 8028c4e:	f2c0 8183 	blt.w	8028f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028c52:	f11c 0c01 	adds.w	ip, ip, #1
 8028c56:	f100 8173 	bmi.w	8028f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028c5a:	4561      	cmp	r1, ip
 8028c5c:	f2c0 8170 	blt.w	8028f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028c60:	3301      	adds	r3, #1
 8028c62:	f100 816d 	bmi.w	8028f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028c66:	429a      	cmp	r2, r3
 8028c68:	f2c0 816a 	blt.w	8028f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028c6c:	9b07      	ldr	r3, [sp, #28]
 8028c6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028c70:	9318      	str	r3, [sp, #96]	; 0x60
 8028c72:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028c74:	2b00      	cmp	r3, #0
 8028c76:	f340 818c 	ble.w	8028f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8028c7a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8028c7c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028c80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028c82:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028c86:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028c8a:	1422      	asrs	r2, r4, #16
 8028c8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028c90:	689b      	ldr	r3, [r3, #8]
 8028c92:	f100 81cd 	bmi.w	8029030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028c96:	f103 38ff 	add.w	r8, r3, #4294967295
 8028c9a:	4542      	cmp	r2, r8
 8028c9c:	f280 81c8 	bge.w	8029030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028ca0:	f1bc 0f00 	cmp.w	ip, #0
 8028ca4:	f2c0 81c4 	blt.w	8029030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028ca8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028cac:	45c4      	cmp	ip, r8
 8028cae:	f280 81bf 	bge.w	8029030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028cb2:	b21b      	sxth	r3, r3
 8028cb4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028cb6:	fb0c 2203 	mla	r2, ip, r3, r2
 8028cba:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028cbe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028cc2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028cc6:	2800      	cmp	r0, #0
 8028cc8:	f000 81a9 	beq.w	802901e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028ccc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028cd0:	950c      	str	r5, [sp, #48]	; 0x30
 8028cd2:	0e2d      	lsrs	r5, r5, #24
 8028cd4:	9513      	str	r5, [sp, #76]	; 0x4c
 8028cd6:	b181      	cbz	r1, 8028cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028cdc:	3b01      	subs	r3, #1
 8028cde:	009b      	lsls	r3, r3, #2
 8028ce0:	3304      	adds	r3, #4
 8028ce2:	eb08 0c03 	add.w	ip, r8, r3
 8028ce6:	f858 3003 	ldr.w	r3, [r8, r3]
 8028cea:	9308      	str	r3, [sp, #32]
 8028cec:	0e1b      	lsrs	r3, r3, #24
 8028cee:	9311      	str	r3, [sp, #68]	; 0x44
 8028cf0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028cf4:	930d      	str	r3, [sp, #52]	; 0x34
 8028cf6:	0e1b      	lsrs	r3, r3, #24
 8028cf8:	9314      	str	r3, [sp, #80]	; 0x50
 8028cfa:	b280      	uxth	r0, r0
 8028cfc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028cfe:	b289      	uxth	r1, r1
 8028d00:	fb00 f901 	mul.w	r9, r0, r1
 8028d04:	0100      	lsls	r0, r0, #4
 8028d06:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028d0a:	eba0 0809 	sub.w	r8, r0, r9
 8028d0e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028d12:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028d14:	b289      	uxth	r1, r1
 8028d16:	fa1f f888 	uxth.w	r8, r8
 8028d1a:	1a5b      	subs	r3, r3, r1
 8028d1c:	fb08 f000 	mul.w	r0, r8, r0
 8028d20:	b29b      	uxth	r3, r3
 8028d22:	fb03 000e 	mla	r0, r3, lr, r0
 8028d26:	fb01 0005 	mla	r0, r1, r5, r0
 8028d2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028d2c:	fb09 0005 	mla	r0, r9, r5, r0
 8028d30:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028d34:	2800      	cmp	r0, #0
 8028d36:	f000 80fa 	beq.w	8028f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028d3a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028d3e:	d01b      	beq.n	8028d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028d40:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028d44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028d48:	fb0e fa0a 	mul.w	sl, lr, sl
 8028d4c:	fb0e fe02 	mul.w	lr, lr, r2
 8028d50:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028d54:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028d58:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028d5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028d60:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028d64:	4452      	add	r2, sl
 8028d66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d6a:	0a12      	lsrs	r2, r2, #8
 8028d6c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028d70:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028d74:	ea42 020c 	orr.w	r2, r2, ip
 8028d78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028d7a:	2dff      	cmp	r5, #255	; 0xff
 8028d7c:	d021      	beq.n	8028dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8028d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028d80:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028d84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028d86:	fb05 fb0b 	mul.w	fp, r5, fp
 8028d8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028d8c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028d90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028d92:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028d96:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028d9a:	fb05 fa0a 	mul.w	sl, r5, sl
 8028d9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028da2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028da6:	44de      	add	lr, fp
 8028da8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028dac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028db0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028db4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028db8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028dbc:	ea4e 050a 	orr.w	r5, lr, sl
 8028dc0:	950c      	str	r5, [sp, #48]	; 0x30
 8028dc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028dc4:	2dff      	cmp	r5, #255	; 0xff
 8028dc6:	d021      	beq.n	8028e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028dc8:	9d08      	ldr	r5, [sp, #32]
 8028dca:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028dce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028dd0:	fb05 fb0b 	mul.w	fp, r5, fp
 8028dd4:	9d08      	ldr	r5, [sp, #32]
 8028dd6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028dda:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028ddc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028de0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028de4:	fb05 fa0a 	mul.w	sl, r5, sl
 8028de8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028dec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028df0:	44de      	add	lr, fp
 8028df2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028df6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028dfa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028dfe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e06:	ea4e 050a 	orr.w	r5, lr, sl
 8028e0a:	9508      	str	r5, [sp, #32]
 8028e0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028e0e:	2dff      	cmp	r5, #255	; 0xff
 8028e10:	d021      	beq.n	8028e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8028e12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028e14:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028e18:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028e1a:	fb05 fb0b 	mul.w	fp, r5, fp
 8028e1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028e20:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e24:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028e26:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028e2a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028e2e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e36:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028e3a:	44de      	add	lr, fp
 8028e3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028e40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e50:	ea4e 050a 	orr.w	r5, lr, sl
 8028e54:	950d      	str	r5, [sp, #52]	; 0x34
 8028e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e58:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028e5c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028e60:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028e64:	9d08      	ldr	r5, [sp, #32]
 8028e66:	fb08 fc0c 	mul.w	ip, r8, ip
 8028e6a:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028e6e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028e72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028e74:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028e78:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028e7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e7e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028e82:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028e86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028e88:	fb08 f80e 	mul.w	r8, r8, lr
 8028e8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e90:	fb03 8202 	mla	r2, r3, r2, r8
 8028e94:	9b08      	ldr	r3, [sp, #32]
 8028e96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e9a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8028e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028ea0:	fb01 220a 	mla	r2, r1, sl, r2
 8028ea4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8028ea8:	883b      	ldrh	r3, [r7, #0]
 8028eaa:	fb09 2901 	mla	r9, r9, r1, r2
 8028eae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028eb0:	1219      	asrs	r1, r3, #8
 8028eb2:	4342      	muls	r2, r0
 8028eb4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028eb8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028ebc:	1c50      	adds	r0, r2, #1
 8028ebe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028ec2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028ec6:	ea4c 0c09 	orr.w	ip, ip, r9
 8028eca:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028ece:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028ed2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028ed6:	fa5f fc8c 	uxtb.w	ip, ip
 8028eda:	fb12 f205 	smulbb	r2, r2, r5
 8028ede:	b2c0      	uxtb	r0, r0
 8028ee0:	fb1c fc05 	smulbb	ip, ip, r5
 8028ee4:	fb01 2100 	mla	r1, r1, r0, r2
 8028ee8:	10da      	asrs	r2, r3, #3
 8028eea:	fb1e fe05 	smulbb	lr, lr, r5
 8028eee:	00db      	lsls	r3, r3, #3
 8028ef0:	b289      	uxth	r1, r1
 8028ef2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028ef6:	b2db      	uxtb	r3, r3
 8028ef8:	fb02 e200 	mla	r2, r2, r0, lr
 8028efc:	fb03 c300 	mla	r3, r3, r0, ip
 8028f00:	b292      	uxth	r2, r2
 8028f02:	fa1f fc83 	uxth.w	ip, r3
 8028f06:	1c4b      	adds	r3, r1, #1
 8028f08:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028f0c:	f10c 0301 	add.w	r3, ip, #1
 8028f10:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028f14:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028f18:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028f1c:	430b      	orrs	r3, r1
 8028f1e:	1c51      	adds	r1, r2, #1
 8028f20:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028f24:	0952      	lsrs	r2, r2, #5
 8028f26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028f2a:	4313      	orrs	r3, r2
 8028f2c:	803b      	strh	r3, [r7, #0]
 8028f2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028f30:	3702      	adds	r7, #2
 8028f32:	441c      	add	r4, r3
 8028f34:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028f36:	441e      	add	r6, r3
 8028f38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028f3a:	3b01      	subs	r3, #1
 8028f3c:	9318      	str	r3, [sp, #96]	; 0x60
 8028f3e:	e698      	b.n	8028c72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028f40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028f42:	441c      	add	r4, r3
 8028f44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028f46:	441e      	add	r6, r3
 8028f48:	9b07      	ldr	r3, [sp, #28]
 8028f4a:	3b01      	subs	r3, #1
 8028f4c:	9307      	str	r3, [sp, #28]
 8028f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028f50:	3302      	adds	r3, #2
 8028f52:	930a      	str	r3, [sp, #40]	; 0x28
 8028f54:	e66d      	b.n	8028c32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028f56:	d023      	beq.n	8028fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028f58:	9b07      	ldr	r3, [sp, #28]
 8028f5a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8028f5c:	3b01      	subs	r3, #1
 8028f5e:	fb00 4003 	mla	r0, r0, r3, r4
 8028f62:	1400      	asrs	r0, r0, #16
 8028f64:	f53f ae82 	bmi.w	8028c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f68:	3901      	subs	r1, #1
 8028f6a:	4288      	cmp	r0, r1
 8028f6c:	f6bf ae7e 	bge.w	8028c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f70:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8028f72:	fb01 6303 	mla	r3, r1, r3, r6
 8028f76:	141b      	asrs	r3, r3, #16
 8028f78:	f53f ae78 	bmi.w	8028c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f7c:	3a01      	subs	r2, #1
 8028f7e:	4293      	cmp	r3, r2
 8028f80:	f6bf ae74 	bge.w	8028c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f84:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028f88:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8028f8c:	f1bb 0f00 	cmp.w	fp, #0
 8028f90:	dc6c      	bgt.n	802906c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028f92:	9b07      	ldr	r3, [sp, #28]
 8028f94:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028f9a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8028fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028fa2:	2b00      	cmp	r3, #0
 8028fa4:	f340 81b3 	ble.w	802930e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028fac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028fae:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028fb2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028fb6:	eef0 6a62 	vmov.f32	s13, s5
 8028fba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028fbe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028fc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028fc6:	ee16 4a90 	vmov	r4, s13
 8028fca:	eef0 6a43 	vmov.f32	s13, s6
 8028fce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028fd2:	ee16 6a90 	vmov	r6, s13
 8028fd6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028fda:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028fde:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028fe2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028fe6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028fea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028fee:	ee12 2a90 	vmov	r2, s5
 8028ff2:	eef0 2a47 	vmov.f32	s5, s14
 8028ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ffa:	ee13 2a10 	vmov	r2, s6
 8028ffe:	9329      	str	r3, [sp, #164]	; 0xa4
 8029000:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029002:	eeb0 3a67 	vmov.f32	s6, s15
 8029006:	fb92 f3f3 	sdiv	r3, r2, r3
 802900a:	932a      	str	r3, [sp, #168]	; 0xa8
 802900c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802900e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8029010:	3b01      	subs	r3, #1
 8029012:	9317      	str	r3, [sp, #92]	; 0x5c
 8029014:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029016:	bf08      	it	eq
 8029018:	4613      	moveq	r3, r2
 802901a:	9307      	str	r3, [sp, #28]
 802901c:	e5fb      	b.n	8028c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802901e:	2900      	cmp	r1, #0
 8029020:	f43f ae6b 	beq.w	8028cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029024:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029028:	9308      	str	r3, [sp, #32]
 802902a:	0e1b      	lsrs	r3, r3, #24
 802902c:	9311      	str	r3, [sp, #68]	; 0x44
 802902e:	e664      	b.n	8028cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029030:	f112 0801 	adds.w	r8, r2, #1
 8029034:	f53f af7b 	bmi.w	8028f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029038:	4543      	cmp	r3, r8
 802903a:	f6ff af78 	blt.w	8028f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802903e:	f11c 0801 	adds.w	r8, ip, #1
 8029042:	f53f af74 	bmi.w	8028f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029046:	45c6      	cmp	lr, r8
 8029048:	f6ff af71 	blt.w	8028f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802904c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802904e:	b21b      	sxth	r3, r3
 8029050:	9201      	str	r2, [sp, #4]
 8029052:	fa0f f28e 	sxth.w	r2, lr
 8029056:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802905a:	e9cd c002 	strd	ip, r0, [sp, #8]
 802905e:	9200      	str	r2, [sp, #0]
 8029060:	4639      	mov	r1, r7
 8029062:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029064:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029066:	f7ff fc79 	bl	802895c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802906a:	e760      	b.n	8028f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802906c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802906e:	1427      	asrs	r7, r4, #16
 8029070:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029072:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029076:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802907a:	1433      	asrs	r3, r6, #16
 802907c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029080:	fb01 7303 	mla	r3, r1, r3, r7
 8029084:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029088:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802908c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029090:	2a00      	cmp	r2, #0
 8029092:	f000 8133 	beq.w	80292fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8029096:	687d      	ldr	r5, [r7, #4]
 8029098:	950e      	str	r5, [sp, #56]	; 0x38
 802909a:	0e2d      	lsrs	r5, r5, #24
 802909c:	9515      	str	r5, [sp, #84]	; 0x54
 802909e:	b178      	cbz	r0, 80290c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80290a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80290a4:	3901      	subs	r1, #1
 80290a6:	0089      	lsls	r1, r1, #2
 80290a8:	3104      	adds	r1, #4
 80290aa:	eb07 0e01 	add.w	lr, r7, r1
 80290ae:	5879      	ldr	r1, [r7, r1]
 80290b0:	9109      	str	r1, [sp, #36]	; 0x24
 80290b2:	0e09      	lsrs	r1, r1, #24
 80290b4:	9112      	str	r1, [sp, #72]	; 0x48
 80290b6:	f8de 1004 	ldr.w	r1, [lr, #4]
 80290ba:	910f      	str	r1, [sp, #60]	; 0x3c
 80290bc:	0e09      	lsrs	r1, r1, #24
 80290be:	9116      	str	r1, [sp, #88]	; 0x58
 80290c0:	b292      	uxth	r2, r2
 80290c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80290c4:	b280      	uxth	r0, r0
 80290c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80290c8:	fb02 f800 	mul.w	r8, r2, r0
 80290cc:	0112      	lsls	r2, r2, #4
 80290ce:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80290d2:	eba2 0e08 	sub.w	lr, r2, r8
 80290d6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80290da:	b280      	uxth	r0, r0
 80290dc:	fa1f fe8e 	uxth.w	lr, lr
 80290e0:	1a12      	subs	r2, r2, r0
 80290e2:	fb0e f101 	mul.w	r1, lr, r1
 80290e6:	b292      	uxth	r2, r2
 80290e8:	fb02 110c 	mla	r1, r2, ip, r1
 80290ec:	fb00 1105 	mla	r1, r0, r5, r1
 80290f0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80290f2:	fb08 1105 	mla	r1, r8, r5, r1
 80290f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80290fa:	2900      	cmp	r1, #0
 80290fc:	f000 80f5 	beq.w	80292ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8029100:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029104:	d019      	beq.n	802913a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8029106:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802910a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802910e:	fb0c fa0a 	mul.w	sl, ip, sl
 8029112:	fb0c fc03 	mul.w	ip, ip, r3
 8029116:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802911a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802911e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029122:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029126:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802912a:	4453      	add	r3, sl
 802912c:	0a3f      	lsrs	r7, r7, #8
 802912e:	0a1b      	lsrs	r3, r3, #8
 8029130:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029134:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029138:	433b      	orrs	r3, r7
 802913a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802913c:	2dff      	cmp	r5, #255	; 0xff
 802913e:	d020      	beq.n	8029182 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8029140:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029142:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029146:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029148:	436f      	muls	r7, r5
 802914a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802914c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029150:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029154:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029156:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802915a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802915e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029162:	44bc      	add	ip, r7
 8029164:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029168:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802916c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029170:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029174:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029178:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802917c:	ea4c 050a 	orr.w	r5, ip, sl
 8029180:	950e      	str	r5, [sp, #56]	; 0x38
 8029182:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029184:	2dff      	cmp	r5, #255	; 0xff
 8029186:	d020      	beq.n	80291ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8029188:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802918a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802918e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029190:	436f      	muls	r7, r5
 8029192:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029194:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029198:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802919c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802919e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80291a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80291a6:	fb05 fa0a 	mul.w	sl, r5, sl
 80291aa:	44bc      	add	ip, r7
 80291ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80291b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80291b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80291b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80291bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80291c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80291c4:	ea4c 050a 	orr.w	r5, ip, sl
 80291c8:	9509      	str	r5, [sp, #36]	; 0x24
 80291ca:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80291cc:	2dff      	cmp	r5, #255	; 0xff
 80291ce:	d020      	beq.n	8029212 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80291d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80291d2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80291d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80291d8:	436f      	muls	r7, r5
 80291da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80291dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80291e0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80291e4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80291e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80291ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80291ee:	fb05 fa0a 	mul.w	sl, r5, sl
 80291f2:	44bc      	add	ip, r7
 80291f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80291f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80291fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029200:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029204:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029208:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802920c:	ea4c 050a 	orr.w	r5, ip, sl
 8029210:	950f      	str	r5, [sp, #60]	; 0x3c
 8029212:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029214:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029218:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802921c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029220:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029222:	fb0e f707 	mul.w	r7, lr, r7
 8029226:	fb02 770c 	mla	r7, r2, ip, r7
 802922a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802922e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029230:	fb00 770c 	mla	r7, r0, ip, r7
 8029234:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029238:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802923a:	fb08 770c 	mla	r7, r8, ip, r7
 802923e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029242:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029244:	fb0e fe0c 	mul.w	lr, lr, ip
 8029248:	0a3f      	lsrs	r7, r7, #8
 802924a:	fb02 e303 	mla	r3, r2, r3, lr
 802924e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029250:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029254:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8029258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802925a:	fb00 330a 	mla	r3, r0, sl, r3
 802925e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8029262:	f8b9 0000 	ldrh.w	r0, [r9]
 8029266:	fb08 3c0c 	mla	ip, r8, ip, r3
 802926a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802926c:	1202      	asrs	r2, r0, #8
 802926e:	4359      	muls	r1, r3
 8029270:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029274:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029278:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802927c:	1c4b      	adds	r3, r1, #1
 802927e:	ea47 070c 	orr.w	r7, r7, ip
 8029282:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029286:	0c3b      	lsrs	r3, r7, #16
 8029288:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802928c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029290:	b2ff      	uxtb	r7, r7
 8029292:	fb13 f305 	smulbb	r3, r3, r5
 8029296:	b2c9      	uxtb	r1, r1
 8029298:	fb17 f705 	smulbb	r7, r7, r5
 802929c:	fb02 3201 	mla	r2, r2, r1, r3
 80292a0:	10c3      	asrs	r3, r0, #3
 80292a2:	fb1c fc05 	smulbb	ip, ip, r5
 80292a6:	00c0      	lsls	r0, r0, #3
 80292a8:	b292      	uxth	r2, r2
 80292aa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80292ae:	b2c0      	uxtb	r0, r0
 80292b0:	fb03 c301 	mla	r3, r3, r1, ip
 80292b4:	fb00 7001 	mla	r0, r0, r1, r7
 80292b8:	1c51      	adds	r1, r2, #1
 80292ba:	b29b      	uxth	r3, r3
 80292bc:	b280      	uxth	r0, r0
 80292be:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80292c2:	f100 0c01 	add.w	ip, r0, #1
 80292c6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80292ca:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80292ce:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80292d2:	ea4c 0202 	orr.w	r2, ip, r2
 80292d6:	f103 0c01 	add.w	ip, r3, #1
 80292da:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80292de:	095b      	lsrs	r3, r3, #5
 80292e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80292e4:	431a      	orrs	r2, r3
 80292e6:	f8a9 2000 	strh.w	r2, [r9]
 80292ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80292ec:	f109 0902 	add.w	r9, r9, #2
 80292f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80292f4:	441c      	add	r4, r3
 80292f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80292f8:	441e      	add	r6, r3
 80292fa:	e647      	b.n	8028f8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80292fc:	2800      	cmp	r0, #0
 80292fe:	f43f aedf 	beq.w	80290c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029302:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029306:	9109      	str	r1, [sp, #36]	; 0x24
 8029308:	0e09      	lsrs	r1, r1, #24
 802930a:	9112      	str	r1, [sp, #72]	; 0x48
 802930c:	e6d8      	b.n	80290c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802930e:	b01d      	add	sp, #116	; 0x74
 8029310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029314 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029318:	b085      	sub	sp, #20
 802931a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802931e:	9102      	str	r1, [sp, #8]
 8029320:	2c00      	cmp	r4, #0
 8029322:	fb04 7103 	mla	r1, r4, r3, r7
 8029326:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802932a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802932e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029332:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8029336:	f2c0 810c 	blt.w	8029552 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802933a:	45a6      	cmp	lr, r4
 802933c:	f340 8109 	ble.w	8029552 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8029340:	2f00      	cmp	r7, #0
 8029342:	f2c0 8104 	blt.w	802954e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8029346:	42bb      	cmp	r3, r7
 8029348:	f340 8101 	ble.w	802954e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802934c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8029350:	1c7a      	adds	r2, r7, #1
 8029352:	f100 8101 	bmi.w	8029558 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8029356:	4293      	cmp	r3, r2
 8029358:	f340 80fe 	ble.w	8029558 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802935c:	2e00      	cmp	r6, #0
 802935e:	f000 80fd 	beq.w	802955c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8029362:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029366:	3401      	adds	r4, #1
 8029368:	f100 80fc 	bmi.w	8029564 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802936c:	45a6      	cmp	lr, r4
 802936e:	f340 80f9 	ble.w	8029564 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029372:	2800      	cmp	r0, #0
 8029374:	f000 80f9 	beq.w	802956a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8029378:	2f00      	cmp	r7, #0
 802937a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802937e:	f2c0 80ef 	blt.w	8029560 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029382:	42bb      	cmp	r3, r7
 8029384:	f340 80ec 	ble.w	8029560 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029388:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802938c:	3701      	adds	r7, #1
 802938e:	f100 80ef 	bmi.w	8029570 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029392:	42bb      	cmp	r3, r7
 8029394:	f340 80ec 	ble.w	8029570 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029398:	2e00      	cmp	r6, #0
 802939a:	f000 80eb 	beq.w	8029574 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802939e:	6852      	ldr	r2, [r2, #4]
 80293a0:	b2b6      	uxth	r6, r6
 80293a2:	b280      	uxth	r0, r0
 80293a4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80293a8:	fb00 fe06 	mul.w	lr, r0, r6
 80293ac:	0136      	lsls	r6, r6, #4
 80293ae:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80293b2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80293b6:	eba6 070e 	sub.w	r7, r6, lr
 80293ba:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80293be:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80293c2:	b280      	uxth	r0, r0
 80293c4:	b2bf      	uxth	r7, r7
 80293c6:	1a1b      	subs	r3, r3, r0
 80293c8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80293cc:	fb07 f60a 	mul.w	r6, r7, sl
 80293d0:	b29b      	uxth	r3, r3
 80293d2:	fb0b 6603 	mla	r6, fp, r3, r6
 80293d6:	fb00 6609 	mla	r6, r0, r9, r6
 80293da:	fb0e 6608 	mla	r6, lr, r8, r6
 80293de:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80293e2:	9600      	str	r6, [sp, #0]
 80293e4:	2e00      	cmp	r6, #0
 80293e6:	f000 80af 	beq.w	8029548 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80293ea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80293ee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80293f2:	9e02      	ldr	r6, [sp, #8]
 80293f4:	fb0b fc0c 	mul.w	ip, fp, ip
 80293f8:	fb0b f505 	mul.w	r5, fp, r5
 80293fc:	8836      	ldrh	r6, [r6, #0]
 80293fe:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029402:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029406:	9501      	str	r5, [sp, #4]
 8029408:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802940c:	44dc      	add	ip, fp
 802940e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029412:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8029416:	9503      	str	r5, [sp, #12]
 8029418:	9d01      	ldr	r5, [sp, #4]
 802941a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802941e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8029422:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8029426:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802942a:	fb0a fc0c 	mul.w	ip, sl, ip
 802942e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029432:	fb0a fa01 	mul.w	sl, sl, r1
 8029436:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802943a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802943e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8029442:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8029446:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802944a:	4465      	add	r5, ip
 802944c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8029450:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029454:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029458:	fb09 fc0c 	mul.w	ip, r9, ip
 802945c:	0a2d      	lsrs	r5, r5, #8
 802945e:	fb09 f904 	mul.w	r9, r9, r4
 8029462:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029466:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802946a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802946e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8029472:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029476:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802947a:	437d      	muls	r5, r7
 802947c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8029480:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8029484:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029488:	4461      	add	r1, ip
 802948a:	fb08 f404 	mul.w	r4, r8, r4
 802948e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029492:	fb08 f802 	mul.w	r8, r8, r2
 8029496:	0a09      	lsrs	r1, r1, #8
 8029498:	0a22      	lsrs	r2, r4, #8
 802949a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802949e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80294a2:	fb07 f70a 	mul.w	r7, r7, sl
 80294a6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80294aa:	4414      	add	r4, r2
 80294ac:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80294b0:	0a24      	lsrs	r4, r4, #8
 80294b2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80294b6:	9a03      	ldr	r2, [sp, #12]
 80294b8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80294bc:	fb02 5503 	mla	r5, r2, r3, r5
 80294c0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80294c4:	fb04 540e 	mla	r4, r4, lr, r5
 80294c8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80294cc:	fb01 4100 	mla	r1, r1, r0, r4
 80294d0:	0a09      	lsrs	r1, r1, #8
 80294d2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80294d6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80294da:	fb03 7101 	mla	r1, r3, r1, r7
 80294de:	9b00      	ldr	r3, [sp, #0]
 80294e0:	fb0e 1e08 	mla	lr, lr, r8, r1
 80294e4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80294e8:	43da      	mvns	r2, r3
 80294ea:	1233      	asrs	r3, r6, #8
 80294ec:	fb00 e101 	mla	r1, r0, r1, lr
 80294f0:	10f0      	asrs	r0, r6, #3
 80294f2:	b2d2      	uxtb	r2, r2
 80294f4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80294f8:	0a09      	lsrs	r1, r1, #8
 80294fa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80294fe:	00f6      	lsls	r6, r6, #3
 8029500:	4353      	muls	r3, r2
 8029502:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8029506:	4350      	muls	r0, r2
 8029508:	b2f6      	uxtb	r6, r6
 802950a:	4321      	orrs	r1, r4
 802950c:	4356      	muls	r6, r2
 802950e:	1c5a      	adds	r2, r3, #1
 8029510:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029514:	0c0b      	lsrs	r3, r1, #16
 8029516:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802951a:	1c42      	adds	r2, r0, #1
 802951c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029520:	0a0a      	lsrs	r2, r1, #8
 8029522:	021b      	lsls	r3, r3, #8
 8029524:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029528:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802952c:	00d2      	lsls	r2, r2, #3
 802952e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029532:	4313      	orrs	r3, r2
 8029534:	1c72      	adds	r2, r6, #1
 8029536:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802953a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802953e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8029542:	4319      	orrs	r1, r3
 8029544:	9b02      	ldr	r3, [sp, #8]
 8029546:	8019      	strh	r1, [r3, #0]
 8029548:	b005      	add	sp, #20
 802954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802954e:	2500      	movs	r5, #0
 8029550:	e6fe      	b.n	8029350 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8029552:	2100      	movs	r1, #0
 8029554:	460d      	mov	r5, r1
 8029556:	e706      	b.n	8029366 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029558:	2100      	movs	r1, #0
 802955a:	e704      	b.n	8029366 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802955c:	4631      	mov	r1, r6
 802955e:	e702      	b.n	8029366 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029560:	2400      	movs	r4, #0
 8029562:	e713      	b.n	802938c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8029564:	2200      	movs	r2, #0
 8029566:	4614      	mov	r4, r2
 8029568:	e71a      	b.n	80293a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802956a:	4602      	mov	r2, r0
 802956c:	4604      	mov	r4, r0
 802956e:	e717      	b.n	80293a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029570:	2200      	movs	r2, #0
 8029572:	e715      	b.n	80293a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029574:	4632      	mov	r2, r6
 8029576:	e713      	b.n	80293a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08029578 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802957c:	b09b      	sub	sp, #108	; 0x6c
 802957e:	9218      	str	r2, [sp, #96]	; 0x60
 8029580:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029582:	9019      	str	r0, [sp, #100]	; 0x64
 8029584:	9116      	str	r1, [sp, #88]	; 0x58
 8029586:	6850      	ldr	r0, [r2, #4]
 8029588:	9307      	str	r3, [sp, #28]
 802958a:	6812      	ldr	r2, [r2, #0]
 802958c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029590:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029594:	fb00 1303 	mla	r3, r0, r3, r1
 8029598:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802959c:	930a      	str	r3, [sp, #40]	; 0x28
 802959e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80295a0:	681b      	ldr	r3, [r3, #0]
 80295a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80295a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80295a6:	2b00      	cmp	r3, #0
 80295a8:	dc03      	bgt.n	80295b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80295aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80295ac:	2b00      	cmp	r3, #0
 80295ae:	f340 8387 	ble.w	8029cc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80295b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80295b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80295b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80295bc:	1e48      	subs	r0, r1, #1
 80295be:	1e57      	subs	r7, r2, #1
 80295c0:	9b07      	ldr	r3, [sp, #28]
 80295c2:	2b00      	cmp	r3, #0
 80295c4:	f340 8166 	ble.w	8029894 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80295c8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80295cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80295d0:	d406      	bmi.n	80295e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80295d2:	4584      	cmp	ip, r0
 80295d4:	da04      	bge.n	80295e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80295d6:	2b00      	cmp	r3, #0
 80295d8:	db02      	blt.n	80295e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80295da:	42bb      	cmp	r3, r7
 80295dc:	f2c0 815b 	blt.w	8029896 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80295e0:	f11c 0c01 	adds.w	ip, ip, #1
 80295e4:	f100 814b 	bmi.w	802987e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80295e8:	4561      	cmp	r1, ip
 80295ea:	f2c0 8148 	blt.w	802987e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80295ee:	3301      	adds	r3, #1
 80295f0:	f100 8145 	bmi.w	802987e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80295f4:	429a      	cmp	r2, r3
 80295f6:	f2c0 8142 	blt.w	802987e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80295fa:	9b07      	ldr	r3, [sp, #28]
 80295fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80295fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8029600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029602:	2b00      	cmp	r3, #0
 8029604:	f340 8165 	ble.w	80298d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8029608:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802960a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802960e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029610:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029614:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029618:	1422      	asrs	r2, r4, #16
 802961a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802961e:	689b      	ldr	r3, [r3, #8]
 8029620:	f100 81d5 	bmi.w	80299ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029624:	f103 38ff 	add.w	r8, r3, #4294967295
 8029628:	4542      	cmp	r2, r8
 802962a:	f280 81d0 	bge.w	80299ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802962e:	f1bc 0f00 	cmp.w	ip, #0
 8029632:	f2c0 81cc 	blt.w	80299ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029636:	f10e 38ff 	add.w	r8, lr, #4294967295
 802963a:	45c4      	cmp	ip, r8
 802963c:	f280 81c7 	bge.w	80299ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029640:	b21b      	sxth	r3, r3
 8029642:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029644:	fb0c 2203 	mla	r2, ip, r3, r2
 8029648:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802964c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029650:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029654:	2900      	cmp	r1, #0
 8029656:	f000 8182 	beq.w	802995e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802965a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802965e:	950b      	str	r5, [sp, #44]	; 0x2c
 8029660:	0e2d      	lsrs	r5, r5, #24
 8029662:	9512      	str	r5, [sp, #72]	; 0x48
 8029664:	b180      	cbz	r0, 8029688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029666:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802966a:	3b01      	subs	r3, #1
 802966c:	009b      	lsls	r3, r3, #2
 802966e:	3304      	adds	r3, #4
 8029670:	eb08 0c03 	add.w	ip, r8, r3
 8029674:	f858 3003 	ldr.w	r3, [r8, r3]
 8029678:	9308      	str	r3, [sp, #32]
 802967a:	0e1b      	lsrs	r3, r3, #24
 802967c:	9310      	str	r3, [sp, #64]	; 0x40
 802967e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029682:	930c      	str	r3, [sp, #48]	; 0x30
 8029684:	0e1b      	lsrs	r3, r3, #24
 8029686:	9313      	str	r3, [sp, #76]	; 0x4c
 8029688:	b289      	uxth	r1, r1
 802968a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802968c:	b280      	uxth	r0, r0
 802968e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029690:	fb01 f900 	mul.w	r9, r1, r0
 8029694:	0109      	lsls	r1, r1, #4
 8029696:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802969a:	eba1 0809 	sub.w	r8, r1, r9
 802969e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80296a2:	b280      	uxth	r0, r0
 80296a4:	fa1f f888 	uxth.w	r8, r8
 80296a8:	1a09      	subs	r1, r1, r0
 80296aa:	fb08 f303 	mul.w	r3, r8, r3
 80296ae:	b289      	uxth	r1, r1
 80296b0:	fb01 330e 	mla	r3, r1, lr, r3
 80296b4:	fb00 3305 	mla	r3, r0, r5, r3
 80296b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80296ba:	fb09 3305 	mla	r3, r9, r5, r3
 80296be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80296c2:	2b00      	cmp	r3, #0
 80296c4:	f000 80d2 	beq.w	802986c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80296c8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80296cc:	d01b      	beq.n	8029706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80296ce:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80296d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80296d6:	fb0e fa0a 	mul.w	sl, lr, sl
 80296da:	fb0e fe02 	mul.w	lr, lr, r2
 80296de:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80296e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80296e6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80296ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80296ee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80296f2:	4452      	add	r2, sl
 80296f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80296f8:	0a12      	lsrs	r2, r2, #8
 80296fa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80296fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029702:	ea42 020c 	orr.w	r2, r2, ip
 8029706:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029708:	2dff      	cmp	r5, #255	; 0xff
 802970a:	d021      	beq.n	8029750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802970c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802970e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029712:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029714:	fb05 fb0b 	mul.w	fp, r5, fp
 8029718:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802971a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802971e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029720:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029724:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029728:	fb05 fa0a 	mul.w	sl, r5, sl
 802972c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029730:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029734:	44de      	add	lr, fp
 8029736:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802973a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802973e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029742:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029746:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802974a:	ea4e 050a 	orr.w	r5, lr, sl
 802974e:	950b      	str	r5, [sp, #44]	; 0x2c
 8029750:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029752:	2dff      	cmp	r5, #255	; 0xff
 8029754:	d021      	beq.n	802979a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8029756:	9d08      	ldr	r5, [sp, #32]
 8029758:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802975c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802975e:	fb05 fb0b 	mul.w	fp, r5, fp
 8029762:	9d08      	ldr	r5, [sp, #32]
 8029764:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029768:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802976a:	fb05 fa0e 	mul.w	sl, r5, lr
 802976e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029772:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029776:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802977a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802977e:	44de      	add	lr, fp
 8029780:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029784:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029788:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802978c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029790:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029794:	ea4e 050a 	orr.w	r5, lr, sl
 8029798:	9508      	str	r5, [sp, #32]
 802979a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802979c:	2dff      	cmp	r5, #255	; 0xff
 802979e:	d021      	beq.n	80297e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80297a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80297a2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80297a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80297a8:	fb05 fb0b 	mul.w	fp, r5, fp
 80297ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80297ae:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80297b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80297b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80297b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80297bc:	fb05 fa0a 	mul.w	sl, r5, sl
 80297c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80297c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80297c8:	44de      	add	lr, fp
 80297ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80297ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80297d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80297d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80297da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80297de:	ea4e 050a 	orr.w	r5, lr, sl
 80297e2:	950c      	str	r5, [sp, #48]	; 0x30
 80297e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80297e6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80297ea:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80297ee:	2bff      	cmp	r3, #255	; 0xff
 80297f0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80297f4:	9d08      	ldr	r5, [sp, #32]
 80297f6:	fb08 fc0c 	mul.w	ip, r8, ip
 80297fa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80297fe:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029804:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029808:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802980c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802980e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029812:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029816:	fb08 f80e 	mul.w	r8, r8, lr
 802981a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802981e:	fb01 8202 	mla	r2, r1, r2, r8
 8029822:	9908      	ldr	r1, [sp, #32]
 8029824:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029828:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802982c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802982e:	fb00 220a 	mla	r2, r0, sl, r2
 8029832:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8029836:	fb09 2900 	mla	r9, r9, r0, r2
 802983a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802983e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029842:	ea4c 0c09 	orr.w	ip, ip, r9
 8029846:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802984a:	f040 8091 	bne.w	8029970 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802984e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8029852:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8029856:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802985a:	f022 0207 	bic.w	r2, r2, #7
 802985e:	431a      	orrs	r2, r3
 8029860:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029864:	ea4c 0c02 	orr.w	ip, ip, r2
 8029868:	f8a7 c000 	strh.w	ip, [r7]
 802986c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802986e:	3702      	adds	r7, #2
 8029870:	441c      	add	r4, r3
 8029872:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029874:	441e      	add	r6, r3
 8029876:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029878:	3b01      	subs	r3, #1
 802987a:	9317      	str	r3, [sp, #92]	; 0x5c
 802987c:	e6c0      	b.n	8029600 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802987e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029880:	441c      	add	r4, r3
 8029882:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029884:	441e      	add	r6, r3
 8029886:	9b07      	ldr	r3, [sp, #28]
 8029888:	3b01      	subs	r3, #1
 802988a:	9307      	str	r3, [sp, #28]
 802988c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802988e:	3302      	adds	r3, #2
 8029890:	930a      	str	r3, [sp, #40]	; 0x28
 8029892:	e695      	b.n	80295c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029894:	d024      	beq.n	80298e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8029896:	9b07      	ldr	r3, [sp, #28]
 8029898:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802989a:	3b01      	subs	r3, #1
 802989c:	fb00 4003 	mla	r0, r0, r3, r4
 80298a0:	1400      	asrs	r0, r0, #16
 80298a2:	f53f aeaa 	bmi.w	80295fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80298a6:	3901      	subs	r1, #1
 80298a8:	4288      	cmp	r0, r1
 80298aa:	f6bf aea6 	bge.w	80295fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80298ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80298b0:	fb01 6303 	mla	r3, r1, r3, r6
 80298b4:	141b      	asrs	r3, r3, #16
 80298b6:	f53f aea0 	bmi.w	80295fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80298ba:	3a01      	subs	r2, #1
 80298bc:	4293      	cmp	r3, r2
 80298be:	f6bf ae9c 	bge.w	80295fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80298c2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80298c6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80298ca:	f1bb 0f00 	cmp.w	fp, #0
 80298ce:	f300 809a 	bgt.w	8029a06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80298d2:	9b07      	ldr	r3, [sp, #28]
 80298d4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80298d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80298da:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80298de:	930a      	str	r3, [sp, #40]	; 0x28
 80298e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80298e2:	2b00      	cmp	r3, #0
 80298e4:	f340 81ec 	ble.w	8029cc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80298e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80298ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80298ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80298f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80298f6:	eef0 6a62 	vmov.f32	s13, s5
 80298fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80298fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029902:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029906:	ee16 4a90 	vmov	r4, s13
 802990a:	eef0 6a43 	vmov.f32	s13, s6
 802990e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029912:	ee16 6a90 	vmov	r6, s13
 8029916:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802991a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802991e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029922:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029926:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802992a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802992e:	ee12 2a90 	vmov	r2, s5
 8029932:	eef0 2a47 	vmov.f32	s5, s14
 8029936:	fb92 f3f3 	sdiv	r3, r2, r3
 802993a:	ee13 2a10 	vmov	r2, s6
 802993e:	9327      	str	r3, [sp, #156]	; 0x9c
 8029940:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029942:	eeb0 3a67 	vmov.f32	s6, s15
 8029946:	fb92 f3f3 	sdiv	r3, r2, r3
 802994a:	9328      	str	r3, [sp, #160]	; 0xa0
 802994c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802994e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029950:	3b01      	subs	r3, #1
 8029952:	9316      	str	r3, [sp, #88]	; 0x58
 8029954:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029956:	bf08      	it	eq
 8029958:	4613      	moveq	r3, r2
 802995a:	9307      	str	r3, [sp, #28]
 802995c:	e622      	b.n	80295a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802995e:	2800      	cmp	r0, #0
 8029960:	f43f ae92 	beq.w	8029688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029964:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029968:	9308      	str	r3, [sp, #32]
 802996a:	0e1b      	lsrs	r3, r3, #24
 802996c:	9310      	str	r3, [sp, #64]	; 0x40
 802996e:	e68b      	b.n	8029688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029970:	8839      	ldrh	r1, [r7, #0]
 8029972:	43db      	mvns	r3, r3
 8029974:	4dd4      	ldr	r5, [pc, #848]	; (8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029976:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802997a:	fa5f f883 	uxtb.w	r8, r3
 802997e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029982:	10c8      	asrs	r0, r1, #3
 8029984:	00cb      	lsls	r3, r1, #3
 8029986:	fb0e fe08 	mul.w	lr, lr, r8
 802998a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802998e:	b2db      	uxtb	r3, r3
 8029990:	f10e 0101 	add.w	r1, lr, #1
 8029994:	fb00 f008 	mul.w	r0, r0, r8
 8029998:	fb03 f308 	mul.w	r3, r3, r8
 802999c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80299a0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80299a4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80299a8:	f100 0e01 	add.w	lr, r0, #1
 80299ac:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80299b0:	b2c9      	uxtb	r1, r1
 80299b2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80299b6:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80299ba:	00d2      	lsls	r2, r2, #3
 80299bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80299c0:	430a      	orrs	r2, r1
 80299c2:	1c59      	adds	r1, r3, #1
 80299c4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80299c8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80299cc:	e748      	b.n	8029860 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80299ce:	f112 0801 	adds.w	r8, r2, #1
 80299d2:	f53f af4b 	bmi.w	802986c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80299d6:	4543      	cmp	r3, r8
 80299d8:	f6ff af48 	blt.w	802986c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80299dc:	f11c 0801 	adds.w	r8, ip, #1
 80299e0:	f53f af44 	bmi.w	802986c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80299e4:	45c6      	cmp	lr, r8
 80299e6:	f6ff af41 	blt.w	802986c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80299ea:	b21b      	sxth	r3, r3
 80299ec:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80299f0:	fa0f f28e 	sxth.w	r2, lr
 80299f4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80299f8:	9200      	str	r2, [sp, #0]
 80299fa:	4639      	mov	r1, r7
 80299fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80299fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8029a00:	f7ff fc88 	bl	8029314 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029a04:	e732      	b.n	802986c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029a06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a08:	1421      	asrs	r1, r4, #16
 8029a0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029a0c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029a10:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029a14:	1433      	asrs	r3, r6, #16
 8029a16:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029a1a:	fb07 1303 	mla	r3, r7, r3, r1
 8029a1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029a20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029a24:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029a28:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029a2c:	2a00      	cmp	r2, #0
 8029a2e:	f000 8108 	beq.w	8029c42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8029a32:	684d      	ldr	r5, [r1, #4]
 8029a34:	950d      	str	r5, [sp, #52]	; 0x34
 8029a36:	0e2d      	lsrs	r5, r5, #24
 8029a38:	9514      	str	r5, [sp, #80]	; 0x50
 8029a3a:	b178      	cbz	r0, 8029a5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029a3c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8029a40:	3f01      	subs	r7, #1
 8029a42:	00bf      	lsls	r7, r7, #2
 8029a44:	3704      	adds	r7, #4
 8029a46:	eb01 0e07 	add.w	lr, r1, r7
 8029a4a:	59c9      	ldr	r1, [r1, r7]
 8029a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8029a4e:	0e09      	lsrs	r1, r1, #24
 8029a50:	9111      	str	r1, [sp, #68]	; 0x44
 8029a52:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029a56:	910e      	str	r1, [sp, #56]	; 0x38
 8029a58:	0e09      	lsrs	r1, r1, #24
 8029a5a:	9115      	str	r1, [sp, #84]	; 0x54
 8029a5c:	b292      	uxth	r2, r2
 8029a5e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029a60:	b280      	uxth	r0, r0
 8029a62:	fb02 f900 	mul.w	r9, r2, r0
 8029a66:	0112      	lsls	r2, r2, #4
 8029a68:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029a6c:	eba2 0e09 	sub.w	lr, r2, r9
 8029a70:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8029a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029a76:	b280      	uxth	r0, r0
 8029a78:	fa1f fe8e 	uxth.w	lr, lr
 8029a7c:	1a09      	subs	r1, r1, r0
 8029a7e:	fb0e f202 	mul.w	r2, lr, r2
 8029a82:	b289      	uxth	r1, r1
 8029a84:	fb01 220c 	mla	r2, r1, ip, r2
 8029a88:	fb00 2205 	mla	r2, r0, r5, r2
 8029a8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029a8e:	fb09 2205 	mla	r2, r9, r5, r2
 8029a92:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029a96:	2a00      	cmp	r2, #0
 8029a98:	f000 80ca 	beq.w	8029c30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029a9c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029aa0:	d019      	beq.n	8029ad6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8029aa2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029aaa:	fb0c fa0a 	mul.w	sl, ip, sl
 8029aae:	fb0c fc03 	mul.w	ip, ip, r3
 8029ab2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029ab6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029aba:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029abe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029ac2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029ac6:	4453      	add	r3, sl
 8029ac8:	0a3f      	lsrs	r7, r7, #8
 8029aca:	0a1b      	lsrs	r3, r3, #8
 8029acc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029ad0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029ad4:	433b      	orrs	r3, r7
 8029ad6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029ad8:	2dff      	cmp	r5, #255	; 0xff
 8029ada:	d020      	beq.n	8029b1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8029adc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029ade:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029ae2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029ae4:	436f      	muls	r7, r5
 8029ae6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029ae8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029aec:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029af0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029af2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029af6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029afa:	fb05 fa0a 	mul.w	sl, r5, sl
 8029afe:	44bc      	add	ip, r7
 8029b00:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029b04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029b08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029b0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029b10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029b14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029b18:	ea4c 050a 	orr.w	r5, ip, sl
 8029b1c:	950d      	str	r5, [sp, #52]	; 0x34
 8029b1e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029b20:	2dff      	cmp	r5, #255	; 0xff
 8029b22:	d020      	beq.n	8029b66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8029b24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029b26:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029b2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029b2c:	436f      	muls	r7, r5
 8029b2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029b30:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029b34:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029b36:	fb05 fa0c 	mul.w	sl, r5, ip
 8029b3a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029b3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029b42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029b46:	44bc      	add	ip, r7
 8029b48:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029b4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029b50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029b54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029b58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029b5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029b60:	ea4c 050a 	orr.w	r5, ip, sl
 8029b64:	9509      	str	r5, [sp, #36]	; 0x24
 8029b66:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029b68:	2dff      	cmp	r5, #255	; 0xff
 8029b6a:	d020      	beq.n	8029bae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8029b6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029b6e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029b72:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029b74:	436f      	muls	r7, r5
 8029b76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029b78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029b7c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029b80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029b82:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029b86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029b8a:	fb05 fa0a 	mul.w	sl, r5, sl
 8029b8e:	44bc      	add	ip, r7
 8029b90:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029b94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029b98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029b9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029ba0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ba4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029ba8:	ea4c 050a 	orr.w	r5, ip, sl
 8029bac:	950e      	str	r5, [sp, #56]	; 0x38
 8029bae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029bb0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029bb8:	2aff      	cmp	r2, #255	; 0xff
 8029bba:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029bbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029bc0:	fb0e f707 	mul.w	r7, lr, r7
 8029bc4:	fb01 770c 	mla	r7, r1, ip, r7
 8029bc8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029bcc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029bce:	fb00 770c 	mla	r7, r0, ip, r7
 8029bd2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029bd6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029bd8:	fb09 770c 	mla	r7, r9, ip, r7
 8029bdc:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029be0:	fb0e fe0c 	mul.w	lr, lr, ip
 8029be4:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029be8:	fb01 e303 	mla	r3, r1, r3, lr
 8029bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029bee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029bf2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8029bf6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8029bf8:	fb00 330a 	mla	r3, r0, sl, r3
 8029bfc:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8029c00:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029c04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029c0c:	ea47 070c 	orr.w	r7, r7, ip
 8029c10:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029c14:	d11e      	bne.n	8029c54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029c16:	097a      	lsrs	r2, r7, #5
 8029c18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8029c1c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029c20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029c24:	f023 0307 	bic.w	r3, r3, #7
 8029c28:	4313      	orrs	r3, r2
 8029c2a:	431f      	orrs	r7, r3
 8029c2c:	f8a8 7000 	strh.w	r7, [r8]
 8029c30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029c32:	f108 0802 	add.w	r8, r8, #2
 8029c36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029c3a:	441c      	add	r4, r3
 8029c3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029c3e:	441e      	add	r6, r3
 8029c40:	e643      	b.n	80298ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029c42:	2800      	cmp	r0, #0
 8029c44:	f43f af0a 	beq.w	8029a5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029c48:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029c4c:	9109      	str	r1, [sp, #36]	; 0x24
 8029c4e:	0e09      	lsrs	r1, r1, #24
 8029c50:	9111      	str	r1, [sp, #68]	; 0x44
 8029c52:	e703      	b.n	8029a5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029c54:	f8b8 1000 	ldrh.w	r1, [r8]
 8029c58:	43d2      	mvns	r2, r2
 8029c5a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029c5e:	fa5f fe82 	uxtb.w	lr, r2
 8029c62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8029c66:	10c8      	asrs	r0, r1, #3
 8029c68:	00ca      	lsls	r2, r1, #3
 8029c6a:	fb0c fc0e 	mul.w	ip, ip, lr
 8029c6e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029c72:	b2d2      	uxtb	r2, r2
 8029c74:	f10c 0101 	add.w	r1, ip, #1
 8029c78:	fb00 f00e 	mul.w	r0, r0, lr
 8029c7c:	fb02 f20e 	mul.w	r2, r2, lr
 8029c80:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029c84:	0c39      	lsrs	r1, r7, #16
 8029c86:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029c8a:	490f      	ldr	r1, [pc, #60]	; (8029cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029c8c:	fa5f fc8c 	uxtb.w	ip, ip
 8029c90:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029c94:	1c41      	adds	r1, r0, #1
 8029c96:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029c9a:	1c51      	adds	r1, r2, #1
 8029c9c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029ca0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029ca4:	00c0      	lsls	r0, r0, #3
 8029ca6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029caa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029cae:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029cb2:	ea4c 0c00 	orr.w	ip, ip, r0
 8029cb6:	ea47 0c0c 	orr.w	ip, r7, ip
 8029cba:	f8a8 c000 	strh.w	ip, [r8]
 8029cbe:	e7b7      	b.n	8029c30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029cc0:	b01b      	add	sp, #108	; 0x6c
 8029cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029cc6:	bf00      	nop
 8029cc8:	fffff800 	.word	0xfffff800

08029ccc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029cd0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8029cd4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029cd8:	2d00      	cmp	r5, #0
 8029cda:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029cde:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8029ce2:	fb05 0e03 	mla	lr, r5, r3, r0
 8029ce6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8029cea:	f2c0 808c 	blt.w	8029e06 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029cee:	45a9      	cmp	r9, r5
 8029cf0:	f340 8089 	ble.w	8029e06 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029cf4:	2800      	cmp	r0, #0
 8029cf6:	f2c0 8084 	blt.w	8029e02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029cfa:	4580      	cmp	r8, r0
 8029cfc:	f340 8081 	ble.w	8029e02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029d00:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029d04:	f01e 0f01 	tst.w	lr, #1
 8029d08:	5d16      	ldrb	r6, [r2, r4]
 8029d0a:	bf0c      	ite	eq
 8029d0c:	f006 060f 	andeq.w	r6, r6, #15
 8029d10:	1136      	asrne	r6, r6, #4
 8029d12:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029d16:	b2f6      	uxtb	r6, r6
 8029d18:	1c44      	adds	r4, r0, #1
 8029d1a:	d477      	bmi.n	8029e0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029d1c:	45a0      	cmp	r8, r4
 8029d1e:	dd75      	ble.n	8029e0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029d20:	2f00      	cmp	r7, #0
 8029d22:	d075      	beq.n	8029e10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8029d24:	f10e 0a01 	add.w	sl, lr, #1
 8029d28:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8029d2c:	f01a 0f01 	tst.w	sl, #1
 8029d30:	5d14      	ldrb	r4, [r2, r4]
 8029d32:	bf0c      	ite	eq
 8029d34:	f004 040f 	andeq.w	r4, r4, #15
 8029d38:	1124      	asrne	r4, r4, #4
 8029d3a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029d3e:	b2e4      	uxtb	r4, r4
 8029d40:	3501      	adds	r5, #1
 8029d42:	d469      	bmi.n	8029e18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029d44:	45a9      	cmp	r9, r5
 8029d46:	dd67      	ble.n	8029e18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029d48:	f1bc 0f00 	cmp.w	ip, #0
 8029d4c:	d067      	beq.n	8029e1e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8029d4e:	2800      	cmp	r0, #0
 8029d50:	db60      	blt.n	8029e14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029d52:	4580      	cmp	r8, r0
 8029d54:	dd5e      	ble.n	8029e14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029d56:	eb03 090e 	add.w	r9, r3, lr
 8029d5a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8029d5e:	f019 0f01 	tst.w	r9, #1
 8029d62:	5d55      	ldrb	r5, [r2, r5]
 8029d64:	bf0c      	ite	eq
 8029d66:	f005 050f 	andeq.w	r5, r5, #15
 8029d6a:	112d      	asrne	r5, r5, #4
 8029d6c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029d70:	b2ed      	uxtb	r5, r5
 8029d72:	3001      	adds	r0, #1
 8029d74:	d456      	bmi.n	8029e24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029d76:	4580      	cmp	r8, r0
 8029d78:	dd54      	ble.n	8029e24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029d7a:	2f00      	cmp	r7, #0
 8029d7c:	d054      	beq.n	8029e28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8029d7e:	3301      	adds	r3, #1
 8029d80:	449e      	add	lr, r3
 8029d82:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029d86:	f01e 0f01 	tst.w	lr, #1
 8029d8a:	5cd0      	ldrb	r0, [r2, r3]
 8029d8c:	bf0c      	ite	eq
 8029d8e:	f000 000f 	andeq.w	r0, r0, #15
 8029d92:	1100      	asrne	r0, r0, #4
 8029d94:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029d98:	b2c3      	uxtb	r3, r0
 8029d9a:	b2ba      	uxth	r2, r7
 8029d9c:	fa1f fc8c 	uxth.w	ip, ip
 8029da0:	fb02 f00c 	mul.w	r0, r2, ip
 8029da4:	0112      	lsls	r2, r2, #4
 8029da6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029daa:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8029dae:	1a12      	subs	r2, r2, r0
 8029db0:	fa1f fc8c 	uxth.w	ip, ip
 8029db4:	b292      	uxth	r2, r2
 8029db6:	eba7 070c 	sub.w	r7, r7, ip
 8029dba:	4362      	muls	r2, r4
 8029dbc:	b2bf      	uxth	r7, r7
 8029dbe:	fb06 2207 	mla	r2, r6, r7, r2
 8029dc2:	fb0c 2505 	mla	r5, ip, r5, r2
 8029dc6:	fb00 5303 	mla	r3, r0, r3, r5
 8029dca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029dce:	b1b3      	cbz	r3, 8029dfe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029dd0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8029dd4:	435a      	muls	r2, r3
 8029dd6:	1c53      	adds	r3, r2, #1
 8029dd8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029ddc:	4a2d      	ldr	r2, [pc, #180]	; (8029e94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8029dde:	121b      	asrs	r3, r3, #8
 8029de0:	6812      	ldr	r2, [r2, #0]
 8029de2:	2bff      	cmp	r3, #255	; 0xff
 8029de4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029de8:	d120      	bne.n	8029e2c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8029dea:	0950      	lsrs	r0, r2, #5
 8029dec:	4b2a      	ldr	r3, [pc, #168]	; (8029e98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8029dee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029df2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029df6:	4033      	ands	r3, r6
 8029df8:	4318      	orrs	r0, r3
 8029dfa:	4302      	orrs	r2, r0
 8029dfc:	800a      	strh	r2, [r1, #0]
 8029dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029e02:	2600      	movs	r6, #0
 8029e04:	e788      	b.n	8029d18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8029e06:	2400      	movs	r4, #0
 8029e08:	4626      	mov	r6, r4
 8029e0a:	e799      	b.n	8029d40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029e0c:	2400      	movs	r4, #0
 8029e0e:	e797      	b.n	8029d40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029e10:	463c      	mov	r4, r7
 8029e12:	e795      	b.n	8029d40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029e14:	2500      	movs	r5, #0
 8029e16:	e7ac      	b.n	8029d72 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8029e18:	2300      	movs	r3, #0
 8029e1a:	461d      	mov	r5, r3
 8029e1c:	e7bd      	b.n	8029d9a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029e1e:	4663      	mov	r3, ip
 8029e20:	4665      	mov	r5, ip
 8029e22:	e7ba      	b.n	8029d9a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029e24:	2300      	movs	r3, #0
 8029e26:	e7b8      	b.n	8029d9a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029e28:	463b      	mov	r3, r7
 8029e2a:	e7b6      	b.n	8029d9a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029e2c:	880d      	ldrh	r5, [r1, #0]
 8029e2e:	b29f      	uxth	r7, r3
 8029e30:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029e34:	43db      	mvns	r3, r3
 8029e36:	122c      	asrs	r4, r5, #8
 8029e38:	fb10 f007 	smulbb	r0, r0, r7
 8029e3c:	b2db      	uxtb	r3, r3
 8029e3e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029e42:	b2f6      	uxtb	r6, r6
 8029e44:	b2d2      	uxtb	r2, r2
 8029e46:	fb04 0403 	mla	r4, r4, r3, r0
 8029e4a:	10e8      	asrs	r0, r5, #3
 8029e4c:	fb12 f207 	smulbb	r2, r2, r7
 8029e50:	00ed      	lsls	r5, r5, #3
 8029e52:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029e56:	b2a4      	uxth	r4, r4
 8029e58:	fb16 f607 	smulbb	r6, r6, r7
 8029e5c:	b2ed      	uxtb	r5, r5
 8029e5e:	fb00 6603 	mla	r6, r0, r3, r6
 8029e62:	fb05 2303 	mla	r3, r5, r3, r2
 8029e66:	b2b0      	uxth	r0, r6
 8029e68:	b29a      	uxth	r2, r3
 8029e6a:	1c63      	adds	r3, r4, #1
 8029e6c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029e70:	1c53      	adds	r3, r2, #1
 8029e72:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029e76:	1c42      	adds	r2, r0, #1
 8029e78:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029e7c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029e80:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029e84:	0940      	lsrs	r0, r0, #5
 8029e86:	4323      	orrs	r3, r4
 8029e88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029e8c:	4303      	orrs	r3, r0
 8029e8e:	800b      	strh	r3, [r1, #0]
 8029e90:	e7b5      	b.n	8029dfe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029e92:	bf00      	nop
 8029e94:	20016e98 	.word	0x20016e98
 8029e98:	00fff800 	.word	0x00fff800

08029e9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ea0:	b097      	sub	sp, #92	; 0x5c
 8029ea2:	9214      	str	r2, [sp, #80]	; 0x50
 8029ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8029ea6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8029ea8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8029eac:	9015      	str	r0, [sp, #84]	; 0x54
 8029eae:	910d      	str	r1, [sp, #52]	; 0x34
 8029eb0:	6850      	ldr	r0, [r2, #4]
 8029eb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8029eb4:	6812      	ldr	r2, [r2, #0]
 8029eb6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8029eba:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8029ebe:	fb00 1303 	mla	r3, r0, r3, r1
 8029ec2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029ec6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ec8:	689b      	ldr	r3, [r3, #8]
 8029eca:	3301      	adds	r3, #1
 8029ecc:	f023 0301 	bic.w	r3, r3, #1
 8029ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8029ed2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ed4:	681f      	ldr	r7, [r3, #0]
 8029ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029ed8:	2b00      	cmp	r3, #0
 8029eda:	dc03      	bgt.n	8029ee4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029edc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029ede:	2b00      	cmp	r3, #0
 8029ee0:	f340 8289 	ble.w	802a3f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8029ee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ee6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029eea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029eee:	1e48      	subs	r0, r1, #1
 8029ef0:	f102 3cff 	add.w	ip, r2, #4294967295
 8029ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029ef6:	2b00      	cmp	r3, #0
 8029ef8:	f340 80c5 	ble.w	802a086 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029efc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029f00:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029f04:	d406      	bmi.n	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029f06:	4586      	cmp	lr, r0
 8029f08:	da04      	bge.n	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029f0a:	2b00      	cmp	r3, #0
 8029f0c:	db02      	blt.n	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029f0e:	4563      	cmp	r3, ip
 8029f10:	f2c0 80ba 	blt.w	802a088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8029f14:	f11e 0e01 	adds.w	lr, lr, #1
 8029f18:	f100 80ab 	bmi.w	802a072 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029f1c:	4571      	cmp	r1, lr
 8029f1e:	f2c0 80a8 	blt.w	802a072 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029f22:	3301      	adds	r3, #1
 8029f24:	f100 80a5 	bmi.w	802a072 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029f28:	429a      	cmp	r2, r3
 8029f2a:	f2c0 80a2 	blt.w	802a072 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f30:	46c8      	mov	r8, r9
 8029f32:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8029f36:	930e      	str	r3, [sp, #56]	; 0x38
 8029f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029f3a:	2b00      	cmp	r3, #0
 8029f3c:	f340 80c4 	ble.w	802a0c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8029f40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029f42:	1430      	asrs	r0, r6, #16
 8029f44:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029f48:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029f4c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029f50:	1423      	asrs	r3, r4, #16
 8029f52:	f100 814f 	bmi.w	802a1f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029f56:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029f5a:	455b      	cmp	r3, fp
 8029f5c:	f280 814a 	bge.w	802a1f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029f60:	2800      	cmp	r0, #0
 8029f62:	f2c0 8147 	blt.w	802a1f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029f66:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029f6a:	4558      	cmp	r0, fp
 8029f6c:	f280 8142 	bge.w	802a1f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029f70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029f72:	fb00 3305 	mla	r3, r0, r5, r3
 8029f76:	0858      	lsrs	r0, r3, #1
 8029f78:	07dd      	lsls	r5, r3, #31
 8029f7a:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029f7e:	bf54      	ite	pl
 8029f80:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029f84:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029f88:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f8c:	fa5f fc8c 	uxtb.w	ip, ip
 8029f90:	2a00      	cmp	r2, #0
 8029f92:	f000 80dd 	beq.w	802a150 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8029f96:	1c58      	adds	r0, r3, #1
 8029f98:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029f9c:	07c0      	lsls	r0, r0, #31
 8029f9e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029fa2:	bf54      	ite	pl
 8029fa4:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029fa8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029fac:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029fb0:	fa5f f08e 	uxtb.w	r0, lr
 8029fb4:	9010      	str	r0, [sp, #64]	; 0x40
 8029fb6:	b1d9      	cbz	r1, 8029ff0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8029fb8:	4453      	add	r3, sl
 8029fba:	0858      	lsrs	r0, r3, #1
 8029fbc:	07dd      	lsls	r5, r3, #31
 8029fbe:	f103 0301 	add.w	r3, r3, #1
 8029fc2:	5c38      	ldrb	r0, [r7, r0]
 8029fc4:	bf54      	ite	pl
 8029fc6:	f000 000f 	andpl.w	r0, r0, #15
 8029fca:	1100      	asrmi	r0, r0, #4
 8029fcc:	07dd      	lsls	r5, r3, #31
 8029fce:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029fd2:	b2c0      	uxtb	r0, r0
 8029fd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8029fd6:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029fda:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029fde:	bf54      	ite	pl
 8029fe0:	f00e 030f 	andpl.w	r3, lr, #15
 8029fe4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029fe8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029fec:	b2db      	uxtb	r3, r3
 8029fee:	9311      	str	r3, [sp, #68]	; 0x44
 8029ff0:	b292      	uxth	r2, r2
 8029ff2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029ff4:	b289      	uxth	r1, r1
 8029ff6:	fb02 f301 	mul.w	r3, r2, r1
 8029ffa:	0112      	lsls	r2, r2, #4
 8029ffc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a000:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a004:	1ad2      	subs	r2, r2, r3
 802a006:	b289      	uxth	r1, r1
 802a008:	b292      	uxth	r2, r2
 802a00a:	1a40      	subs	r0, r0, r1
 802a00c:	436a      	muls	r2, r5
 802a00e:	b280      	uxth	r0, r0
 802a010:	fb0c 2c00 	mla	ip, ip, r0, r2
 802a014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a016:	fb01 c102 	mla	r1, r1, r2, ip
 802a01a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802a01c:	fb03 1302 	mla	r3, r3, r2, r1
 802a020:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a024:	b1db      	cbz	r3, 802a05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a028:	4353      	muls	r3, r2
 802a02a:	1c5a      	adds	r2, r3, #1
 802a02c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a030:	4ac6      	ldr	r2, [pc, #792]	; (802a34c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802a032:	121b      	asrs	r3, r3, #8
 802a034:	6812      	ldr	r2, [r2, #0]
 802a036:	2bff      	cmp	r3, #255	; 0xff
 802a038:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a03c:	f040 8099 	bne.w	802a172 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802a040:	0953      	lsrs	r3, r2, #5
 802a042:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a046:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a04a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a04e:	f02c 0c07 	bic.w	ip, ip, #7
 802a052:	ea43 0c0c 	orr.w	ip, r3, ip
 802a056:	ea4c 0202 	orr.w	r2, ip, r2
 802a05a:	f8a8 2000 	strh.w	r2, [r8]
 802a05e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a060:	f108 0802 	add.w	r8, r8, #2
 802a064:	441c      	add	r4, r3
 802a066:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a068:	441e      	add	r6, r3
 802a06a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a06c:	3b01      	subs	r3, #1
 802a06e:	930e      	str	r3, [sp, #56]	; 0x38
 802a070:	e762      	b.n	8029f38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a074:	f109 0902 	add.w	r9, r9, #2
 802a078:	441c      	add	r4, r3
 802a07a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a07c:	441e      	add	r6, r3
 802a07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a080:	3b01      	subs	r3, #1
 802a082:	9309      	str	r3, [sp, #36]	; 0x24
 802a084:	e736      	b.n	8029ef4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a086:	d024      	beq.n	802a0d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a08a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802a08c:	3b01      	subs	r3, #1
 802a08e:	fb00 4003 	mla	r0, r0, r3, r4
 802a092:	1400      	asrs	r0, r0, #16
 802a094:	f53f af4b 	bmi.w	8029f2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a098:	3901      	subs	r1, #1
 802a09a:	4288      	cmp	r0, r1
 802a09c:	f6bf af47 	bge.w	8029f2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a0a0:	9924      	ldr	r1, [sp, #144]	; 0x90
 802a0a2:	fb01 6303 	mla	r3, r1, r3, r6
 802a0a6:	141b      	asrs	r3, r3, #16
 802a0a8:	f53f af41 	bmi.w	8029f2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a0ac:	3a01      	subs	r2, #1
 802a0ae:	4293      	cmp	r3, r2
 802a0b0:	f6bf af3d 	bge.w	8029f2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a0b4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802a0b8:	46c8      	mov	r8, r9
 802a0ba:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802a0be:	930e      	str	r3, [sp, #56]	; 0x38
 802a0c0:	f1bb 0f00 	cmp.w	fp, #0
 802a0c4:	f300 80b7 	bgt.w	802a236 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0ca:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a0ce:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a0d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a0d4:	2b00      	cmp	r3, #0
 802a0d6:	f340 818e 	ble.w	802a3f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802a0da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a0de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a0e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a0e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a0e8:	eef0 6a62 	vmov.f32	s13, s5
 802a0ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a0f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a0f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a0f8:	ee16 4a90 	vmov	r4, s13
 802a0fc:	eef0 6a43 	vmov.f32	s13, s6
 802a100:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a104:	ee16 6a90 	vmov	r6, s13
 802a108:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a10c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a110:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a114:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a118:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a11c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a120:	ee12 2a90 	vmov	r2, s5
 802a124:	eef0 2a47 	vmov.f32	s5, s14
 802a128:	fb92 f3f3 	sdiv	r3, r2, r3
 802a12c:	ee13 2a10 	vmov	r2, s6
 802a130:	9323      	str	r3, [sp, #140]	; 0x8c
 802a132:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a134:	eeb0 3a67 	vmov.f32	s6, s15
 802a138:	fb92 f3f3 	sdiv	r3, r2, r3
 802a13c:	9324      	str	r3, [sp, #144]	; 0x90
 802a13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a140:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a142:	3b01      	subs	r3, #1
 802a144:	930d      	str	r3, [sp, #52]	; 0x34
 802a146:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a148:	bf08      	it	eq
 802a14a:	4613      	moveq	r3, r2
 802a14c:	9309      	str	r3, [sp, #36]	; 0x24
 802a14e:	e6c2      	b.n	8029ed6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a150:	2900      	cmp	r1, #0
 802a152:	f43f af4d 	beq.w	8029ff0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802a156:	eb0a 0003 	add.w	r0, sl, r3
 802a15a:	0843      	lsrs	r3, r0, #1
 802a15c:	07c0      	lsls	r0, r0, #31
 802a15e:	5cfb      	ldrb	r3, [r7, r3]
 802a160:	bf54      	ite	pl
 802a162:	f003 030f 	andpl.w	r3, r3, #15
 802a166:	111b      	asrmi	r3, r3, #4
 802a168:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a16c:	b2db      	uxtb	r3, r3
 802a16e:	930b      	str	r3, [sp, #44]	; 0x2c
 802a170:	e73e      	b.n	8029ff0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802a172:	f8b8 e000 	ldrh.w	lr, [r8]
 802a176:	fa1f fb83 	uxth.w	fp, r3
 802a17a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a17e:	43db      	mvns	r3, r3
 802a180:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a184:	fb11 f10b 	smulbb	r1, r1, fp
 802a188:	b2db      	uxtb	r3, r3
 802a18a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a18e:	fa5f fc8c 	uxtb.w	ip, ip
 802a192:	b2d2      	uxtb	r2, r2
 802a194:	fb00 1003 	mla	r0, r0, r3, r1
 802a198:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a19c:	fb1c fc0b 	smulbb	ip, ip, fp
 802a1a0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a1a4:	b280      	uxth	r0, r0
 802a1a6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a1aa:	fb12 fb0b 	smulbb	fp, r2, fp
 802a1ae:	fa5f fe8e 	uxtb.w	lr, lr
 802a1b2:	fb01 cc03 	mla	ip, r1, r3, ip
 802a1b6:	fb0e bb03 	mla	fp, lr, r3, fp
 802a1ba:	1c43      	adds	r3, r0, #1
 802a1bc:	fa1f fc8c 	uxth.w	ip, ip
 802a1c0:	fa1f fb8b 	uxth.w	fp, fp
 802a1c4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a1c8:	f10c 0101 	add.w	r1, ip, #1
 802a1cc:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802a1d0:	f10b 0001 	add.w	r0, fp, #1
 802a1d4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a1d8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a1dc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a1e0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a1e4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a1e8:	4318      	orrs	r0, r3
 802a1ea:	ea40 000c 	orr.w	r0, r0, ip
 802a1ee:	f8a8 0000 	strh.w	r0, [r8]
 802a1f2:	e734      	b.n	802a05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a1f4:	f113 0b01 	adds.w	fp, r3, #1
 802a1f8:	f53f af31 	bmi.w	802a05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a1fc:	45dc      	cmp	ip, fp
 802a1fe:	f6ff af2e 	blt.w	802a05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a202:	f110 0b01 	adds.w	fp, r0, #1
 802a206:	f53f af2a 	bmi.w	802a05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a20a:	45de      	cmp	lr, fp
 802a20c:	f6ff af27 	blt.w	802a05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a210:	9302      	str	r3, [sp, #8]
 802a212:	fa0f f38e 	sxth.w	r3, lr
 802a216:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a218:	9301      	str	r3, [sp, #4]
 802a21a:	fa0f f38c 	sxth.w	r3, ip
 802a21e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a222:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802a226:	9300      	str	r3, [sp, #0]
 802a228:	463a      	mov	r2, r7
 802a22a:	4653      	mov	r3, sl
 802a22c:	4641      	mov	r1, r8
 802a22e:	9815      	ldr	r0, [sp, #84]	; 0x54
 802a230:	f7ff fd4c 	bl	8029ccc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802a234:	e713      	b.n	802a05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a236:	1422      	asrs	r2, r4, #16
 802a238:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a23a:	1433      	asrs	r3, r6, #16
 802a23c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a240:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a244:	fb05 2303 	mla	r3, r5, r3, r2
 802a248:	085a      	lsrs	r2, r3, #1
 802a24a:	07dd      	lsls	r5, r3, #31
 802a24c:	5cba      	ldrb	r2, [r7, r2]
 802a24e:	bf54      	ite	pl
 802a250:	f002 020f 	andpl.w	r2, r2, #15
 802a254:	1112      	asrmi	r2, r2, #4
 802a256:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a25a:	b2d2      	uxtb	r2, r2
 802a25c:	2900      	cmp	r1, #0
 802a25e:	d077      	beq.n	802a350 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802a260:	f103 0e01 	add.w	lr, r3, #1
 802a264:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802a268:	f01e 0f01 	tst.w	lr, #1
 802a26c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a270:	bf0c      	ite	eq
 802a272:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a276:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a27a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a27e:	fa5f f58c 	uxtb.w	r5, ip
 802a282:	9512      	str	r5, [sp, #72]	; 0x48
 802a284:	b308      	cbz	r0, 802a2ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a286:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a288:	442b      	add	r3, r5
 802a28a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a28e:	07dd      	lsls	r5, r3, #31
 802a290:	f103 0301 	add.w	r3, r3, #1
 802a294:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a298:	bf54      	ite	pl
 802a29a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a29e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a2a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a2a6:	fa5f f58c 	uxtb.w	r5, ip
 802a2aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a2ae:	950c      	str	r5, [sp, #48]	; 0x30
 802a2b0:	07dd      	lsls	r5, r3, #31
 802a2b2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a2b6:	bf54      	ite	pl
 802a2b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a2bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a2c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a2c4:	fa5f f38c 	uxtb.w	r3, ip
 802a2c8:	9313      	str	r3, [sp, #76]	; 0x4c
 802a2ca:	b289      	uxth	r1, r1
 802a2cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2ce:	b280      	uxth	r0, r0
 802a2d0:	fb01 f300 	mul.w	r3, r1, r0
 802a2d4:	0109      	lsls	r1, r1, #4
 802a2d6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a2da:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802a2de:	1ac9      	subs	r1, r1, r3
 802a2e0:	b280      	uxth	r0, r0
 802a2e2:	b289      	uxth	r1, r1
 802a2e4:	ebac 0c00 	sub.w	ip, ip, r0
 802a2e8:	4369      	muls	r1, r5
 802a2ea:	fa1f fc8c 	uxth.w	ip, ip
 802a2ee:	fb02 120c 	mla	r2, r2, ip, r1
 802a2f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a2f4:	fb00 2001 	mla	r0, r0, r1, r2
 802a2f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802a2fa:	fb03 0302 	mla	r3, r3, r2, r0
 802a2fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a302:	b1d3      	cbz	r3, 802a33a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a306:	4353      	muls	r3, r2
 802a308:	1c5a      	adds	r2, r3, #1
 802a30a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a30e:	4a0f      	ldr	r2, [pc, #60]	; (802a34c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802a310:	121b      	asrs	r3, r3, #8
 802a312:	6812      	ldr	r2, [r2, #0]
 802a314:	2bff      	cmp	r3, #255	; 0xff
 802a316:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a31a:	d12d      	bne.n	802a378 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802a31c:	0953      	lsrs	r3, r2, #5
 802a31e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a322:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a326:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a32a:	f02c 0c07 	bic.w	ip, ip, #7
 802a32e:	ea43 0c0c 	orr.w	ip, r3, ip
 802a332:	ea4c 0202 	orr.w	r2, ip, r2
 802a336:	f8a8 2000 	strh.w	r2, [r8]
 802a33a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a33c:	f108 0802 	add.w	r8, r8, #2
 802a340:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a344:	441c      	add	r4, r3
 802a346:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a348:	441e      	add	r6, r3
 802a34a:	e6b9      	b.n	802a0c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802a34c:	20016e98 	.word	0x20016e98
 802a350:	2800      	cmp	r0, #0
 802a352:	d0ba      	beq.n	802a2ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a354:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a356:	442b      	add	r3, r5
 802a358:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a35c:	07db      	lsls	r3, r3, #31
 802a35e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a362:	bf54      	ite	pl
 802a364:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a368:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a36c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a370:	fa5f f38c 	uxtb.w	r3, ip
 802a374:	930c      	str	r3, [sp, #48]	; 0x30
 802a376:	e7a8      	b.n	802a2ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a378:	f8b8 e000 	ldrh.w	lr, [r8]
 802a37c:	fa1f fa83 	uxth.w	sl, r3
 802a380:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a384:	43db      	mvns	r3, r3
 802a386:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a38a:	fb11 f10a 	smulbb	r1, r1, sl
 802a38e:	b2db      	uxtb	r3, r3
 802a390:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a394:	b2d2      	uxtb	r2, r2
 802a396:	fa5f fc8c 	uxtb.w	ip, ip
 802a39a:	fb00 1003 	mla	r0, r0, r3, r1
 802a39e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a3a2:	fb12 f20a 	smulbb	r2, r2, sl
 802a3a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a3aa:	b280      	uxth	r0, r0
 802a3ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a3b0:	fb1c fc0a 	smulbb	ip, ip, sl
 802a3b4:	fa5f fe8e 	uxtb.w	lr, lr
 802a3b8:	fb0e 2203 	mla	r2, lr, r3, r2
 802a3bc:	fb01 cc03 	mla	ip, r1, r3, ip
 802a3c0:	1c43      	adds	r3, r0, #1
 802a3c2:	b292      	uxth	r2, r2
 802a3c4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a3c8:	1c51      	adds	r1, r2, #1
 802a3ca:	fa1f fc8c 	uxth.w	ip, ip
 802a3ce:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802a3d2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a3d6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a3da:	4308      	orrs	r0, r1
 802a3dc:	f10c 0101 	add.w	r1, ip, #1
 802a3e0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a3e4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a3e8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a3ec:	ea40 000c 	orr.w	r0, r0, ip
 802a3f0:	f8a8 0000 	strh.w	r0, [r8]
 802a3f4:	e7a1      	b.n	802a33a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a3f6:	b017      	add	sp, #92	; 0x5c
 802a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a3fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a400:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802a404:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a408:	2d00      	cmp	r5, #0
 802a40a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a40e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802a412:	fb05 0e03 	mla	lr, r5, r3, r0
 802a416:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802a41a:	f2c0 80b0 	blt.w	802a57e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a41e:	45a9      	cmp	r9, r5
 802a420:	f340 80ad 	ble.w	802a57e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a424:	2800      	cmp	r0, #0
 802a426:	f2c0 80a8 	blt.w	802a57a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a42a:	4580      	cmp	r8, r0
 802a42c:	f340 80a5 	ble.w	802a57a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a430:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a434:	f01e 0f01 	tst.w	lr, #1
 802a438:	5d16      	ldrb	r6, [r2, r4]
 802a43a:	bf0c      	ite	eq
 802a43c:	f006 060f 	andeq.w	r6, r6, #15
 802a440:	1136      	asrne	r6, r6, #4
 802a442:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a446:	b2f6      	uxtb	r6, r6
 802a448:	1c44      	adds	r4, r0, #1
 802a44a:	f100 809b 	bmi.w	802a584 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a44e:	45a0      	cmp	r8, r4
 802a450:	f340 8098 	ble.w	802a584 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a454:	2f00      	cmp	r7, #0
 802a456:	f000 8097 	beq.w	802a588 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a45a:	f10e 0a01 	add.w	sl, lr, #1
 802a45e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a462:	f01a 0f01 	tst.w	sl, #1
 802a466:	5d14      	ldrb	r4, [r2, r4]
 802a468:	bf0c      	ite	eq
 802a46a:	f004 040f 	andeq.w	r4, r4, #15
 802a46e:	1124      	asrne	r4, r4, #4
 802a470:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a474:	b2e4      	uxtb	r4, r4
 802a476:	3501      	adds	r5, #1
 802a478:	f100 808a 	bmi.w	802a590 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a47c:	45a9      	cmp	r9, r5
 802a47e:	f340 8087 	ble.w	802a590 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a482:	f1bc 0f00 	cmp.w	ip, #0
 802a486:	f000 8086 	beq.w	802a596 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a48a:	2800      	cmp	r0, #0
 802a48c:	db7e      	blt.n	802a58c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a48e:	4580      	cmp	r8, r0
 802a490:	dd7c      	ble.n	802a58c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a492:	eb03 090e 	add.w	r9, r3, lr
 802a496:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a49a:	f019 0f01 	tst.w	r9, #1
 802a49e:	5d55      	ldrb	r5, [r2, r5]
 802a4a0:	bf0c      	ite	eq
 802a4a2:	f005 050f 	andeq.w	r5, r5, #15
 802a4a6:	112d      	asrne	r5, r5, #4
 802a4a8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a4ac:	b2ed      	uxtb	r5, r5
 802a4ae:	3001      	adds	r0, #1
 802a4b0:	d474      	bmi.n	802a59c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a4b2:	4580      	cmp	r8, r0
 802a4b4:	dd72      	ble.n	802a59c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a4b6:	2f00      	cmp	r7, #0
 802a4b8:	d072      	beq.n	802a5a0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a4ba:	3301      	adds	r3, #1
 802a4bc:	449e      	add	lr, r3
 802a4be:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a4c2:	f01e 0f01 	tst.w	lr, #1
 802a4c6:	5cd0      	ldrb	r0, [r2, r3]
 802a4c8:	bf0c      	ite	eq
 802a4ca:	f000 000f 	andeq.w	r0, r0, #15
 802a4ce:	1100      	asrne	r0, r0, #4
 802a4d0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a4d4:	b2c3      	uxtb	r3, r0
 802a4d6:	b2ba      	uxth	r2, r7
 802a4d8:	fa1f fc8c 	uxth.w	ip, ip
 802a4dc:	fb02 f00c 	mul.w	r0, r2, ip
 802a4e0:	0112      	lsls	r2, r2, #4
 802a4e2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a4e6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a4ea:	1a12      	subs	r2, r2, r0
 802a4ec:	fa1f fc8c 	uxth.w	ip, ip
 802a4f0:	b292      	uxth	r2, r2
 802a4f2:	eba7 070c 	sub.w	r7, r7, ip
 802a4f6:	4362      	muls	r2, r4
 802a4f8:	b2bf      	uxth	r7, r7
 802a4fa:	fb06 2207 	mla	r2, r6, r7, r2
 802a4fe:	fb0c 2505 	mla	r5, ip, r5, r2
 802a502:	fb00 5303 	mla	r3, r0, r3, r5
 802a506:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a50a:	b3a3      	cbz	r3, 802a576 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a50c:	4a25      	ldr	r2, [pc, #148]	; (802a5a4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a50e:	880e      	ldrh	r6, [r1, #0]
 802a510:	6815      	ldr	r5, [r2, #0]
 802a512:	b29a      	uxth	r2, r3
 802a514:	1234      	asrs	r4, r6, #8
 802a516:	43db      	mvns	r3, r3
 802a518:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a51c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a520:	b2db      	uxtb	r3, r3
 802a522:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a526:	fb10 f002 	smulbb	r0, r0, r2
 802a52a:	b2ed      	uxtb	r5, r5
 802a52c:	fb17 f702 	smulbb	r7, r7, r2
 802a530:	fb04 0403 	mla	r4, r4, r3, r0
 802a534:	10f0      	asrs	r0, r6, #3
 802a536:	fb15 f202 	smulbb	r2, r5, r2
 802a53a:	00f6      	lsls	r6, r6, #3
 802a53c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a540:	b2a4      	uxth	r4, r4
 802a542:	b2f6      	uxtb	r6, r6
 802a544:	fb00 7003 	mla	r0, r0, r3, r7
 802a548:	fb06 2303 	mla	r3, r6, r3, r2
 802a54c:	b280      	uxth	r0, r0
 802a54e:	b29a      	uxth	r2, r3
 802a550:	1c63      	adds	r3, r4, #1
 802a552:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a556:	1c53      	adds	r3, r2, #1
 802a558:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a55c:	1c42      	adds	r2, r0, #1
 802a55e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a562:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a566:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a56a:	0940      	lsrs	r0, r0, #5
 802a56c:	4323      	orrs	r3, r4
 802a56e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a572:	4303      	orrs	r3, r0
 802a574:	800b      	strh	r3, [r1, #0]
 802a576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a57a:	2600      	movs	r6, #0
 802a57c:	e764      	b.n	802a448 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a57e:	2400      	movs	r4, #0
 802a580:	4626      	mov	r6, r4
 802a582:	e778      	b.n	802a476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a584:	2400      	movs	r4, #0
 802a586:	e776      	b.n	802a476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a588:	463c      	mov	r4, r7
 802a58a:	e774      	b.n	802a476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a58c:	2500      	movs	r5, #0
 802a58e:	e78e      	b.n	802a4ae <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a590:	2300      	movs	r3, #0
 802a592:	461d      	mov	r5, r3
 802a594:	e79f      	b.n	802a4d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a596:	4663      	mov	r3, ip
 802a598:	4665      	mov	r5, ip
 802a59a:	e79c      	b.n	802a4d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a59c:	2300      	movs	r3, #0
 802a59e:	e79a      	b.n	802a4d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a5a0:	463b      	mov	r3, r7
 802a5a2:	e798      	b.n	802a4d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a5a4:	20016e98 	.word	0x20016e98

0802a5a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a5ac:	b093      	sub	sp, #76	; 0x4c
 802a5ae:	461d      	mov	r5, r3
 802a5b0:	920c      	str	r2, [sp, #48]	; 0x30
 802a5b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802a5b4:	9011      	str	r0, [sp, #68]	; 0x44
 802a5b6:	9107      	str	r1, [sp, #28]
 802a5b8:	6850      	ldr	r0, [r2, #4]
 802a5ba:	6812      	ldr	r2, [r2, #0]
 802a5bc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802a5c0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802a5c4:	fb00 1303 	mla	r3, r0, r3, r1
 802a5c8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a5cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a5ce:	689b      	ldr	r3, [r3, #8]
 802a5d0:	3301      	adds	r3, #1
 802a5d2:	f023 0301 	bic.w	r3, r3, #1
 802a5d6:	9306      	str	r3, [sp, #24]
 802a5d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a5da:	681f      	ldr	r7, [r3, #0]
 802a5dc:	9b07      	ldr	r3, [sp, #28]
 802a5de:	2b00      	cmp	r3, #0
 802a5e0:	dc03      	bgt.n	802a5ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a5e4:	2b00      	cmp	r3, #0
 802a5e6:	f340 8267 	ble.w	802aab8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a5ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a5ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a5f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a5f4:	1e48      	subs	r0, r1, #1
 802a5f6:	f102 3cff 	add.w	ip, r2, #4294967295
 802a5fa:	2d00      	cmp	r5, #0
 802a5fc:	f340 80b7 	ble.w	802a76e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a600:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a604:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a608:	d406      	bmi.n	802a618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a60a:	4586      	cmp	lr, r0
 802a60c:	da04      	bge.n	802a618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a60e:	2b00      	cmp	r3, #0
 802a610:	db02      	blt.n	802a618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a612:	4563      	cmp	r3, ip
 802a614:	f2c0 80ac 	blt.w	802a770 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a618:	f11e 0e01 	adds.w	lr, lr, #1
 802a61c:	f100 809f 	bmi.w	802a75e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a620:	4571      	cmp	r1, lr
 802a622:	f2c0 809c 	blt.w	802a75e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a626:	3301      	adds	r3, #1
 802a628:	f100 8099 	bmi.w	802a75e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a62c:	429a      	cmp	r2, r3
 802a62e:	f2c0 8096 	blt.w	802a75e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a632:	46c8      	mov	r8, r9
 802a634:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a638:	9509      	str	r5, [sp, #36]	; 0x24
 802a63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a63c:	2b00      	cmp	r3, #0
 802a63e:	f340 80b5 	ble.w	802a7ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a642:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a646:	1430      	asrs	r0, r6, #16
 802a648:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a64c:	9308      	str	r3, [sp, #32]
 802a64e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a650:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a654:	1423      	asrs	r3, r4, #16
 802a656:	f100 813f 	bmi.w	802a8d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a65a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a65e:	455b      	cmp	r3, fp
 802a660:	f280 813a 	bge.w	802a8d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a664:	2800      	cmp	r0, #0
 802a666:	f2c0 8137 	blt.w	802a8d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a66a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a66e:	4558      	cmp	r0, fp
 802a670:	f280 8132 	bge.w	802a8d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a674:	9a06      	ldr	r2, [sp, #24]
 802a676:	fb00 3302 	mla	r3, r0, r2, r3
 802a67a:	0858      	lsrs	r0, r3, #1
 802a67c:	07da      	lsls	r2, r3, #31
 802a67e:	9a08      	ldr	r2, [sp, #32]
 802a680:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a684:	bf54      	ite	pl
 802a686:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a68a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a68e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a692:	fa5f fc8c 	uxtb.w	ip, ip
 802a696:	2a00      	cmp	r2, #0
 802a698:	f000 80cc 	beq.w	802a834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802a69c:	1c58      	adds	r0, r3, #1
 802a69e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a6a2:	07c0      	lsls	r0, r0, #31
 802a6a4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a6a8:	bf54      	ite	pl
 802a6aa:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a6ae:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a6b2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a6b6:	fa5f fe8e 	uxtb.w	lr, lr
 802a6ba:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802a6be:	b1b9      	cbz	r1, 802a6f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a6c0:	4453      	add	r3, sl
 802a6c2:	0858      	lsrs	r0, r3, #1
 802a6c4:	07da      	lsls	r2, r3, #31
 802a6c6:	5c38      	ldrb	r0, [r7, r0]
 802a6c8:	bf54      	ite	pl
 802a6ca:	f000 000f 	andpl.w	r0, r0, #15
 802a6ce:	1100      	asrmi	r0, r0, #4
 802a6d0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a6d4:	b2c0      	uxtb	r0, r0
 802a6d6:	900a      	str	r0, [sp, #40]	; 0x28
 802a6d8:	1c58      	adds	r0, r3, #1
 802a6da:	0843      	lsrs	r3, r0, #1
 802a6dc:	07c2      	lsls	r2, r0, #31
 802a6de:	5cfb      	ldrb	r3, [r7, r3]
 802a6e0:	bf54      	ite	pl
 802a6e2:	f003 030f 	andpl.w	r3, r3, #15
 802a6e6:	111b      	asrmi	r3, r3, #4
 802a6e8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a6ec:	b2db      	uxtb	r3, r3
 802a6ee:	930e      	str	r3, [sp, #56]	; 0x38
 802a6f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a6f4:	b289      	uxth	r1, r1
 802a6f6:	fb02 f301 	mul.w	r3, r2, r1
 802a6fa:	0112      	lsls	r2, r2, #4
 802a6fc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a700:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a704:	1ad2      	subs	r2, r2, r3
 802a706:	b289      	uxth	r1, r1
 802a708:	b292      	uxth	r2, r2
 802a70a:	1a40      	subs	r0, r0, r1
 802a70c:	fa1f fe80 	uxth.w	lr, r0
 802a710:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a712:	4342      	muls	r2, r0
 802a714:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a71a:	fb01 c102 	mla	r1, r1, r2, ip
 802a71e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a720:	fb03 1302 	mla	r3, r3, r2, r1
 802a724:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a728:	2bff      	cmp	r3, #255	; 0xff
 802a72a:	f040 8094 	bne.w	802a856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802a72e:	4bbf      	ldr	r3, [pc, #764]	; (802aa2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a730:	681a      	ldr	r2, [r3, #0]
 802a732:	4bbf      	ldr	r3, [pc, #764]	; (802aa30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802a734:	0951      	lsrs	r1, r2, #5
 802a736:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a73a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a73e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a742:	430b      	orrs	r3, r1
 802a744:	4313      	orrs	r3, r2
 802a746:	f8a8 3000 	strh.w	r3, [r8]
 802a74a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a74c:	f108 0802 	add.w	r8, r8, #2
 802a750:	441c      	add	r4, r3
 802a752:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a754:	441e      	add	r6, r3
 802a756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a758:	3b01      	subs	r3, #1
 802a75a:	9309      	str	r3, [sp, #36]	; 0x24
 802a75c:	e76d      	b.n	802a63a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a75e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a760:	3d01      	subs	r5, #1
 802a762:	f109 0902 	add.w	r9, r9, #2
 802a766:	441c      	add	r4, r3
 802a768:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a76a:	441e      	add	r6, r3
 802a76c:	e745      	b.n	802a5fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a76e:	d021      	beq.n	802a7b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a770:	1e6b      	subs	r3, r5, #1
 802a772:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802a774:	fb00 4003 	mla	r0, r0, r3, r4
 802a778:	1400      	asrs	r0, r0, #16
 802a77a:	f53f af5a 	bmi.w	802a632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a77e:	3901      	subs	r1, #1
 802a780:	4288      	cmp	r0, r1
 802a782:	f6bf af56 	bge.w	802a632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a786:	9920      	ldr	r1, [sp, #128]	; 0x80
 802a788:	fb01 6303 	mla	r3, r1, r3, r6
 802a78c:	141b      	asrs	r3, r3, #16
 802a78e:	f53f af50 	bmi.w	802a632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a792:	3a01      	subs	r2, #1
 802a794:	4293      	cmp	r3, r2
 802a796:	f6bf af4c 	bge.w	802a632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a79a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a79e:	46a8      	mov	r8, r5
 802a7a0:	46ce      	mov	lr, r9
 802a7a2:	9308      	str	r3, [sp, #32]
 802a7a4:	f1b8 0f00 	cmp.w	r8, #0
 802a7a8:	f300 80b6 	bgt.w	802a918 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802a7ac:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a7b0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a7b4:	9b07      	ldr	r3, [sp, #28]
 802a7b6:	2b00      	cmp	r3, #0
 802a7b8:	f340 817e 	ble.w	802aab8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a7bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a7c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a7c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a7c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a7ca:	eef0 6a62 	vmov.f32	s13, s5
 802a7ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a7d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a7d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a7da:	ee16 4a90 	vmov	r4, s13
 802a7de:	eef0 6a43 	vmov.f32	s13, s6
 802a7e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a7e6:	ee16 6a90 	vmov	r6, s13
 802a7ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a7ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a7f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a7f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a7fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a7fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a802:	ee12 2a90 	vmov	r2, s5
 802a806:	eef0 2a47 	vmov.f32	s5, s14
 802a80a:	fb92 f3f3 	sdiv	r3, r2, r3
 802a80e:	ee13 2a10 	vmov	r2, s6
 802a812:	931f      	str	r3, [sp, #124]	; 0x7c
 802a814:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a816:	eeb0 3a67 	vmov.f32	s6, s15
 802a81a:	fb92 f3f3 	sdiv	r3, r2, r3
 802a81e:	9320      	str	r3, [sp, #128]	; 0x80
 802a820:	9b07      	ldr	r3, [sp, #28]
 802a822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a824:	3b01      	subs	r3, #1
 802a826:	9307      	str	r3, [sp, #28]
 802a828:	bf08      	it	eq
 802a82a:	4615      	moveq	r5, r2
 802a82c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a82e:	bf18      	it	ne
 802a830:	461d      	movne	r5, r3
 802a832:	e6d3      	b.n	802a5dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a834:	2900      	cmp	r1, #0
 802a836:	f43f af5b 	beq.w	802a6f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a83a:	eb0a 0003 	add.w	r0, sl, r3
 802a83e:	0843      	lsrs	r3, r0, #1
 802a840:	07c0      	lsls	r0, r0, #31
 802a842:	5cfb      	ldrb	r3, [r7, r3]
 802a844:	bf54      	ite	pl
 802a846:	f003 030f 	andpl.w	r3, r3, #15
 802a84a:	111b      	asrmi	r3, r3, #4
 802a84c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a850:	b2db      	uxtb	r3, r3
 802a852:	930a      	str	r3, [sp, #40]	; 0x28
 802a854:	e74c      	b.n	802a6f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a856:	2b00      	cmp	r3, #0
 802a858:	f43f af77 	beq.w	802a74a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a85c:	4a73      	ldr	r2, [pc, #460]	; (802aa2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a85e:	fa1f fe83 	uxth.w	lr, r3
 802a862:	f8b8 c000 	ldrh.w	ip, [r8]
 802a866:	43db      	mvns	r3, r3
 802a868:	6810      	ldr	r0, [r2, #0]
 802a86a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a86e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a872:	b2db      	uxtb	r3, r3
 802a874:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a878:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a87c:	fb12 f20e 	smulbb	r2, r2, lr
 802a880:	b2c0      	uxtb	r0, r0
 802a882:	fb1b fb0e 	smulbb	fp, fp, lr
 802a886:	fb01 2103 	mla	r1, r1, r3, r2
 802a88a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a88e:	fb10 fe0e 	smulbb	lr, r0, lr
 802a892:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a896:	b289      	uxth	r1, r1
 802a898:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a89c:	fa5f fc8c 	uxtb.w	ip, ip
 802a8a0:	fb02 b203 	mla	r2, r2, r3, fp
 802a8a4:	1c48      	adds	r0, r1, #1
 802a8a6:	fb0c e303 	mla	r3, ip, r3, lr
 802a8aa:	b292      	uxth	r2, r2
 802a8ac:	b29b      	uxth	r3, r3
 802a8ae:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a8b2:	f102 0b01 	add.w	fp, r2, #1
 802a8b6:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802a8ba:	1c59      	adds	r1, r3, #1
 802a8bc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a8c0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a8c4:	0952      	lsrs	r2, r2, #5
 802a8c6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a8ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a8ce:	4301      	orrs	r1, r0
 802a8d0:	4311      	orrs	r1, r2
 802a8d2:	f8a8 1000 	strh.w	r1, [r8]
 802a8d6:	e738      	b.n	802a74a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a8d8:	f113 0b01 	adds.w	fp, r3, #1
 802a8dc:	f53f af35 	bmi.w	802a74a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a8e0:	45dc      	cmp	ip, fp
 802a8e2:	f6ff af32 	blt.w	802a74a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a8e6:	f110 0b01 	adds.w	fp, r0, #1
 802a8ea:	f53f af2e 	bmi.w	802a74a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a8ee:	45de      	cmp	lr, fp
 802a8f0:	f6ff af2b 	blt.w	802a74a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a8f4:	9302      	str	r3, [sp, #8]
 802a8f6:	fa0f f38e 	sxth.w	r3, lr
 802a8fa:	9a08      	ldr	r2, [sp, #32]
 802a8fc:	9301      	str	r3, [sp, #4]
 802a8fe:	fa0f f38c 	sxth.w	r3, ip
 802a902:	9105      	str	r1, [sp, #20]
 802a904:	4641      	mov	r1, r8
 802a906:	9300      	str	r3, [sp, #0]
 802a908:	4653      	mov	r3, sl
 802a90a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a90e:	463a      	mov	r2, r7
 802a910:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a912:	f7ff fd73 	bl	802a3fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a916:	e718      	b.n	802a74a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a918:	1422      	asrs	r2, r4, #16
 802a91a:	9906      	ldr	r1, [sp, #24]
 802a91c:	1433      	asrs	r3, r6, #16
 802a91e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a922:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a926:	fb01 2303 	mla	r3, r1, r3, r2
 802a92a:	085a      	lsrs	r2, r3, #1
 802a92c:	07d9      	lsls	r1, r3, #31
 802a92e:	5cba      	ldrb	r2, [r7, r2]
 802a930:	bf54      	ite	pl
 802a932:	f002 020f 	andpl.w	r2, r2, #15
 802a936:	1112      	asrmi	r2, r2, #4
 802a938:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a93c:	b2d2      	uxtb	r2, r2
 802a93e:	2800      	cmp	r0, #0
 802a940:	d063      	beq.n	802aa0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802a942:	f103 0a01 	add.w	sl, r3, #1
 802a946:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a94a:	f01a 0f01 	tst.w	sl, #1
 802a94e:	5c79      	ldrb	r1, [r7, r1]
 802a950:	bf0c      	ite	eq
 802a952:	f001 010f 	andeq.w	r1, r1, #15
 802a956:	1109      	asrne	r1, r1, #4
 802a958:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a95c:	b2c9      	uxtb	r1, r1
 802a95e:	910f      	str	r1, [sp, #60]	; 0x3c
 802a960:	f1bc 0f00 	cmp.w	ip, #0
 802a964:	d01a      	beq.n	802a99c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802a966:	9908      	ldr	r1, [sp, #32]
 802a968:	440b      	add	r3, r1
 802a96a:	0859      	lsrs	r1, r3, #1
 802a96c:	f013 0f01 	tst.w	r3, #1
 802a970:	f103 0301 	add.w	r3, r3, #1
 802a974:	5c79      	ldrb	r1, [r7, r1]
 802a976:	bf0c      	ite	eq
 802a978:	f001 010f 	andeq.w	r1, r1, #15
 802a97c:	1109      	asrne	r1, r1, #4
 802a97e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a982:	b2c9      	uxtb	r1, r1
 802a984:	910b      	str	r1, [sp, #44]	; 0x2c
 802a986:	0859      	lsrs	r1, r3, #1
 802a988:	07db      	lsls	r3, r3, #31
 802a98a:	5c79      	ldrb	r1, [r7, r1]
 802a98c:	bf54      	ite	pl
 802a98e:	f001 010f 	andpl.w	r1, r1, #15
 802a992:	1109      	asrmi	r1, r1, #4
 802a994:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a998:	b2c9      	uxtb	r1, r1
 802a99a:	9110      	str	r1, [sp, #64]	; 0x40
 802a99c:	b280      	uxth	r0, r0
 802a99e:	fa1f fc8c 	uxth.w	ip, ip
 802a9a2:	fb00 f30c 	mul.w	r3, r0, ip
 802a9a6:	0100      	lsls	r0, r0, #4
 802a9a8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a9ac:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802a9b0:	1ac0      	subs	r0, r0, r3
 802a9b2:	fa1f fc8c 	uxth.w	ip, ip
 802a9b6:	b280      	uxth	r0, r0
 802a9b8:	eba1 010c 	sub.w	r1, r1, ip
 802a9bc:	fa1f fa81 	uxth.w	sl, r1
 802a9c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a9c2:	4348      	muls	r0, r1
 802a9c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802a9c6:	fb02 020a 	mla	r2, r2, sl, r0
 802a9ca:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a9ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a9d0:	fb03 c302 	mla	r3, r3, r2, ip
 802a9d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a9d8:	2bff      	cmp	r3, #255	; 0xff
 802a9da:	d12b      	bne.n	802aa34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802a9dc:	4b13      	ldr	r3, [pc, #76]	; (802aa2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a9de:	681a      	ldr	r2, [r3, #0]
 802a9e0:	4b13      	ldr	r3, [pc, #76]	; (802aa30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802a9e2:	0951      	lsrs	r1, r2, #5
 802a9e4:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a9e8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a9ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a9f0:	430b      	orrs	r3, r1
 802a9f2:	4313      	orrs	r3, r2
 802a9f4:	f8ae 3000 	strh.w	r3, [lr]
 802a9f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a9fa:	f10e 0e02 	add.w	lr, lr, #2
 802a9fe:	f108 38ff 	add.w	r8, r8, #4294967295
 802aa02:	441c      	add	r4, r3
 802aa04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802aa06:	441e      	add	r6, r3
 802aa08:	e6cc      	b.n	802a7a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802aa0a:	f1bc 0f00 	cmp.w	ip, #0
 802aa0e:	d0c5      	beq.n	802a99c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802aa10:	9908      	ldr	r1, [sp, #32]
 802aa12:	440b      	add	r3, r1
 802aa14:	0859      	lsrs	r1, r3, #1
 802aa16:	07db      	lsls	r3, r3, #31
 802aa18:	5c79      	ldrb	r1, [r7, r1]
 802aa1a:	bf54      	ite	pl
 802aa1c:	f001 010f 	andpl.w	r1, r1, #15
 802aa20:	1109      	asrmi	r1, r1, #4
 802aa22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802aa26:	b2c9      	uxtb	r1, r1
 802aa28:	910b      	str	r1, [sp, #44]	; 0x2c
 802aa2a:	e7b7      	b.n	802a99c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802aa2c:	20016e98 	.word	0x20016e98
 802aa30:	fffff800 	.word	0xfffff800
 802aa34:	2b00      	cmp	r3, #0
 802aa36:	d0df      	beq.n	802a9f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802aa38:	4a21      	ldr	r2, [pc, #132]	; (802aac0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802aa3a:	fa1f fa83 	uxth.w	sl, r3
 802aa3e:	f8be c000 	ldrh.w	ip, [lr]
 802aa42:	43db      	mvns	r3, r3
 802aa44:	6810      	ldr	r0, [r2, #0]
 802aa46:	ea4f 212c 	mov.w	r1, ip, asr #8
 802aa4a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802aa4e:	b2db      	uxtb	r3, r3
 802aa50:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802aa54:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802aa58:	fb12 f20a 	smulbb	r2, r2, sl
 802aa5c:	b2c0      	uxtb	r0, r0
 802aa5e:	fb1b fb0a 	smulbb	fp, fp, sl
 802aa62:	fb01 2103 	mla	r1, r1, r3, r2
 802aa66:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802aa6a:	fb10 f00a 	smulbb	r0, r0, sl
 802aa6e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802aa72:	b289      	uxth	r1, r1
 802aa74:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802aa78:	fa5f fc8c 	uxtb.w	ip, ip
 802aa7c:	fb02 b203 	mla	r2, r2, r3, fp
 802aa80:	fb0c 0003 	mla	r0, ip, r3, r0
 802aa84:	1c4b      	adds	r3, r1, #1
 802aa86:	b292      	uxth	r2, r2
 802aa88:	b280      	uxth	r0, r0
 802aa8a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802aa8e:	f100 0b01 	add.w	fp, r0, #1
 802aa92:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802aa96:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802aa9a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802aa9e:	ea4b 0101 	orr.w	r1, fp, r1
 802aaa2:	f102 0b01 	add.w	fp, r2, #1
 802aaa6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802aaaa:	0952      	lsrs	r2, r2, #5
 802aaac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802aab0:	4311      	orrs	r1, r2
 802aab2:	f8ae 1000 	strh.w	r1, [lr]
 802aab6:	e79f      	b.n	802a9f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802aab8:	b013      	add	sp, #76	; 0x4c
 802aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aabe:	bf00      	nop
 802aac0:	20016e98 	.word	0x20016e98

0802aac4 <CRC_Lock>:
 802aac4:	4a20      	ldr	r2, [pc, #128]	; (802ab48 <CRC_Lock+0x84>)
 802aac6:	b530      	push	{r4, r5, lr}
 802aac8:	6813      	ldr	r3, [r2, #0]
 802aaca:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802aace:	f24c 2540 	movw	r5, #49728	; 0xc240
 802aad2:	f023 0301 	bic.w	r3, r3, #1
 802aad6:	6013      	str	r3, [r2, #0]
 802aad8:	4b1c      	ldr	r3, [pc, #112]	; (802ab4c <CRC_Lock+0x88>)
 802aada:	681a      	ldr	r2, [r3, #0]
 802aadc:	4022      	ands	r2, r4
 802aade:	42aa      	cmp	r2, r5
 802aae0:	d005      	beq.n	802aaee <CRC_Lock+0x2a>
 802aae2:	681b      	ldr	r3, [r3, #0]
 802aae4:	f24c 2270 	movw	r2, #49776	; 0xc270
 802aae8:	4023      	ands	r3, r4
 802aaea:	4293      	cmp	r3, r2
 802aaec:	d124      	bne.n	802ab38 <CRC_Lock+0x74>
 802aaee:	4b18      	ldr	r3, [pc, #96]	; (802ab50 <CRC_Lock+0x8c>)
 802aaf0:	681b      	ldr	r3, [r3, #0]
 802aaf2:	bb0b      	cbnz	r3, 802ab38 <CRC_Lock+0x74>
 802aaf4:	4b17      	ldr	r3, [pc, #92]	; (802ab54 <CRC_Lock+0x90>)
 802aaf6:	681a      	ldr	r2, [r3, #0]
 802aaf8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802aafc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802ab00:	d00d      	beq.n	802ab1e <CRC_Lock+0x5a>
 802ab02:	681a      	ldr	r2, [r3, #0]
 802ab04:	f240 4483 	movw	r4, #1155	; 0x483
 802ab08:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802ab0c:	42a2      	cmp	r2, r4
 802ab0e:	d006      	beq.n	802ab1e <CRC_Lock+0x5a>
 802ab10:	681b      	ldr	r3, [r3, #0]
 802ab12:	f240 4285 	movw	r2, #1157	; 0x485
 802ab16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802ab1a:	4293      	cmp	r3, r2
 802ab1c:	d10c      	bne.n	802ab38 <CRC_Lock+0x74>
 802ab1e:	4b0e      	ldr	r3, [pc, #56]	; (802ab58 <CRC_Lock+0x94>)
 802ab20:	2201      	movs	r2, #1
 802ab22:	601a      	str	r2, [r3, #0]
 802ab24:	681a      	ldr	r2, [r3, #0]
 802ab26:	2a00      	cmp	r2, #0
 802ab28:	d1fc      	bne.n	802ab24 <CRC_Lock+0x60>
 802ab2a:	4b0c      	ldr	r3, [pc, #48]	; (802ab5c <CRC_Lock+0x98>)
 802ab2c:	6018      	str	r0, [r3, #0]
 802ab2e:	6818      	ldr	r0, [r3, #0]
 802ab30:	1a43      	subs	r3, r0, r1
 802ab32:	4258      	negs	r0, r3
 802ab34:	4158      	adcs	r0, r3
 802ab36:	bd30      	pop	{r4, r5, pc}
 802ab38:	4b09      	ldr	r3, [pc, #36]	; (802ab60 <CRC_Lock+0x9c>)
 802ab3a:	2201      	movs	r2, #1
 802ab3c:	601a      	str	r2, [r3, #0]
 802ab3e:	681a      	ldr	r2, [r3, #0]
 802ab40:	2a00      	cmp	r2, #0
 802ab42:	d1fc      	bne.n	802ab3e <CRC_Lock+0x7a>
 802ab44:	4b07      	ldr	r3, [pc, #28]	; (802ab64 <CRC_Lock+0xa0>)
 802ab46:	e7f1      	b.n	802ab2c <CRC_Lock+0x68>
 802ab48:	e0002000 	.word	0xe0002000
 802ab4c:	e000ed00 	.word	0xe000ed00
 802ab50:	e0042000 	.word	0xe0042000
 802ab54:	5c001000 	.word	0x5c001000
 802ab58:	58024c08 	.word	0x58024c08
 802ab5c:	58024c00 	.word	0x58024c00
 802ab60:	40023008 	.word	0x40023008
 802ab64:	40023000 	.word	0x40023000

0802ab68 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802ab68:	6101      	str	r1, [r0, #16]
 802ab6a:	4770      	bx	lr

0802ab6c <_ZN8touchgfx8Gestures4tickEv>:
 802ab6c:	7b83      	ldrb	r3, [r0, #14]
 802ab6e:	b14b      	cbz	r3, 802ab84 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802ab70:	8903      	ldrh	r3, [r0, #8]
 802ab72:	3301      	adds	r3, #1
 802ab74:	b29b      	uxth	r3, r3
 802ab76:	2b07      	cmp	r3, #7
 802ab78:	8103      	strh	r3, [r0, #8]
 802ab7a:	bf81      	itttt	hi
 802ab7c:	2300      	movhi	r3, #0
 802ab7e:	8143      	strhhi	r3, [r0, #10]
 802ab80:	8183      	strhhi	r3, [r0, #12]
 802ab82:	7383      	strbhi	r3, [r0, #14]
 802ab84:	4770      	bx	lr
	...

0802ab88 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802ab88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802ab8c:	4698      	mov	r8, r3
 802ab8e:	8883      	ldrh	r3, [r0, #4]
 802ab90:	4604      	mov	r4, r0
 802ab92:	4617      	mov	r7, r2
 802ab94:	f8ad 3006 	strh.w	r3, [sp, #6]
 802ab98:	eba8 0303 	sub.w	r3, r8, r3
 802ab9c:	4a19      	ldr	r2, [pc, #100]	; (802ac04 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802ab9e:	460e      	mov	r6, r1
 802aba0:	b21b      	sxth	r3, r3
 802aba2:	88c1      	ldrh	r1, [r0, #6]
 802aba4:	9200      	str	r2, [sp, #0]
 802aba6:	2000      	movs	r0, #0
 802aba8:	2b00      	cmp	r3, #0
 802abaa:	8aa2      	ldrh	r2, [r4, #20]
 802abac:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802abb0:	bfb8      	it	lt
 802abb2:	425b      	neglt	r3, r3
 802abb4:	f88d 0004 	strb.w	r0, [sp, #4]
 802abb8:	f8ad 1008 	strh.w	r1, [sp, #8]
 802abbc:	b21b      	sxth	r3, r3
 802abbe:	f8ad 800a 	strh.w	r8, [sp, #10]
 802abc2:	f8ad 500c 	strh.w	r5, [sp, #12]
 802abc6:	4293      	cmp	r3, r2
 802abc8:	dc07      	bgt.n	802abda <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802abca:	1a69      	subs	r1, r5, r1
 802abcc:	b209      	sxth	r1, r1
 802abce:	2900      	cmp	r1, #0
 802abd0:	bfb8      	it	lt
 802abd2:	4249      	neglt	r1, r1
 802abd4:	b209      	sxth	r1, r1
 802abd6:	428a      	cmp	r2, r1
 802abd8:	da10      	bge.n	802abfc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802abda:	6920      	ldr	r0, [r4, #16]
 802abdc:	4669      	mov	r1, sp
 802abde:	eba8 0606 	sub.w	r6, r8, r6
 802abe2:	1bef      	subs	r7, r5, r7
 802abe4:	6803      	ldr	r3, [r0, #0]
 802abe6:	685b      	ldr	r3, [r3, #4]
 802abe8:	4798      	blx	r3
 802abea:	2300      	movs	r3, #0
 802abec:	2001      	movs	r0, #1
 802abee:	8166      	strh	r6, [r4, #10]
 802abf0:	8123      	strh	r3, [r4, #8]
 802abf2:	81a7      	strh	r7, [r4, #12]
 802abf4:	f8a4 8004 	strh.w	r8, [r4, #4]
 802abf8:	80e5      	strh	r5, [r4, #6]
 802abfa:	73a0      	strb	r0, [r4, #14]
 802abfc:	b004      	add	sp, #16
 802abfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ac02:	bf00      	nop
 802ac04:	080313b4 	.word	0x080313b4

0802ac08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ac0a:	461e      	mov	r6, r3
 802ac0c:	1e4b      	subs	r3, r1, #1
 802ac0e:	b085      	sub	sp, #20
 802ac10:	4604      	mov	r4, r0
 802ac12:	2b01      	cmp	r3, #1
 802ac14:	460d      	mov	r5, r1
 802ac16:	4617      	mov	r7, r2
 802ac18:	d84b      	bhi.n	802acb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802ac1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802ac1e:	1cd3      	adds	r3, r2, #3
 802ac20:	b29b      	uxth	r3, r3
 802ac22:	2b06      	cmp	r3, #6
 802ac24:	d916      	bls.n	802ac54 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802ac26:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802acc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802ac2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ac2e:	f8cd c004 	str.w	ip, [sp, #4]
 802ac32:	f04f 0c00 	mov.w	ip, #0
 802ac36:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802ac3a:	6900      	ldr	r0, [r0, #16]
 802ac3c:	f8ad 100c 	strh.w	r1, [sp, #12]
 802ac40:	a901      	add	r1, sp, #4
 802ac42:	f88d c008 	strb.w	ip, [sp, #8]
 802ac46:	f8ad 200a 	strh.w	r2, [sp, #10]
 802ac4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ac4e:	6803      	ldr	r3, [r0, #0]
 802ac50:	689b      	ldr	r3, [r3, #8]
 802ac52:	4798      	blx	r3
 802ac54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ac58:	1cd3      	adds	r3, r2, #3
 802ac5a:	b29b      	uxth	r3, r3
 802ac5c:	2b06      	cmp	r3, #6
 802ac5e:	d916      	bls.n	802ac8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802ac60:	f8df c064 	ldr.w	ip, [pc, #100]	; 802acc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802ac64:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ac68:	f8cd c004 	str.w	ip, [sp, #4]
 802ac6c:	f04f 0c01 	mov.w	ip, #1
 802ac70:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802ac74:	6920      	ldr	r0, [r4, #16]
 802ac76:	f8ad 100c 	strh.w	r1, [sp, #12]
 802ac7a:	a901      	add	r1, sp, #4
 802ac7c:	f88d c008 	strb.w	ip, [sp, #8]
 802ac80:	f8ad 200a 	strh.w	r2, [sp, #10]
 802ac84:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ac88:	6803      	ldr	r3, [r0, #0]
 802ac8a:	689b      	ldr	r3, [r3, #8]
 802ac8c:	4798      	blx	r3
 802ac8e:	4b0d      	ldr	r3, [pc, #52]	; (802acc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802ac90:	a901      	add	r1, sp, #4
 802ac92:	6920      	ldr	r0, [r4, #16]
 802ac94:	9301      	str	r3, [sp, #4]
 802ac96:	2300      	movs	r3, #0
 802ac98:	f88d 5008 	strb.w	r5, [sp, #8]
 802ac9c:	f8ad 700a 	strh.w	r7, [sp, #10]
 802aca0:	f8ad 600c 	strh.w	r6, [sp, #12]
 802aca4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802aca8:	6803      	ldr	r3, [r0, #0]
 802acaa:	681b      	ldr	r3, [r3, #0]
 802acac:	4798      	blx	r3
 802acae:	b005      	add	sp, #20
 802acb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802acb2:	2900      	cmp	r1, #0
 802acb4:	d1eb      	bne.n	802ac8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802acb6:	80a2      	strh	r2, [r4, #4]
 802acb8:	80c6      	strh	r6, [r0, #6]
 802acba:	60a1      	str	r1, [r4, #8]
 802acbc:	81a1      	strh	r1, [r4, #12]
 802acbe:	73a1      	strb	r1, [r4, #14]
 802acc0:	e7e5      	b.n	802ac8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802acc2:	bf00      	nop
 802acc4:	080313a0 	.word	0x080313a0
 802acc8:	080313c8 	.word	0x080313c8

0802accc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 802accc:	10c9      	asrs	r1, r1, #3
 802acce:	2900      	cmp	r1, #0
 802acd0:	bfb8      	it	lt
 802acd2:	4249      	neglt	r1, r1
 802acd4:	2801      	cmp	r0, #1
 802acd6:	d108      	bne.n	802acea <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802acd8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802acdc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802ace0:	4601      	mov	r1, r0
 802ace2:	dd02      	ble.n	802acea <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802ace4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802ace8:	4770      	bx	lr
 802acea:	29ff      	cmp	r1, #255	; 0xff
 802acec:	bfa8      	it	ge
 802acee:	21ff      	movge	r1, #255	; 0xff
 802acf0:	4608      	mov	r0, r1
 802acf2:	4770      	bx	lr

0802acf4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802acf4:	b410      	push	{r4}
 802acf6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802acfa:	429c      	cmp	r4, r3
 802acfc:	d803      	bhi.n	802ad06 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802acfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad02:	f7ef ba67 	b.w	801a1d4 <_ZN8touchgfx7Outline6lineToEii>
 802ad06:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad0a:	4770      	bx	lr

0802ad0c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad10:	b08b      	sub	sp, #44	; 0x2c
 802ad12:	4606      	mov	r6, r0
 802ad14:	468a      	mov	sl, r1
 802ad16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802ad1a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802ad1e:	9308      	str	r3, [sp, #32]
 802ad20:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802ad24:	9309      	str	r3, [sp, #36]	; 0x24
 802ad26:	f7ef fbc0 	bl	801a4aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802ad2a:	68b5      	ldr	r5, [r6, #8]
 802ad2c:	4604      	mov	r4, r0
 802ad2e:	2d00      	cmp	r5, #0
 802ad30:	d044      	beq.n	802adbc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802ad32:	6873      	ldr	r3, [r6, #4]
 802ad34:	42ab      	cmp	r3, r5
 802ad36:	d33d      	bcc.n	802adb4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802ad38:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802ad3c:	f04f 0800 	mov.w	r8, #0
 802ad40:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802ad44:	eb02 0b03 	add.w	fp, r2, r3
 802ad48:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802ad4c:	fb02 1203 	mla	r2, r2, r3, r1
 802ad50:	9205      	str	r2, [sp, #20]
 802ad52:	1e6a      	subs	r2, r5, #1
 802ad54:	9204      	str	r2, [sp, #16]
 802ad56:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802ad5a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802ad5e:	454b      	cmp	r3, r9
 802ad60:	463a      	mov	r2, r7
 802ad62:	d008      	beq.n	802ad76 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802ad64:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 802ad68:	eb03 0b09 	add.w	fp, r3, r9
 802ad6c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802ad70:	fb03 1309 	mla	r3, r3, r9, r1
 802ad74:	9305      	str	r3, [sp, #20]
 802ad76:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802ad7a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802ad7e:	4498      	add	r8, r3
 802ad80:	9b04      	ldr	r3, [sp, #16]
 802ad82:	3b01      	subs	r3, #1
 802ad84:	9304      	str	r3, [sp, #16]
 802ad86:	9b04      	ldr	r3, [sp, #16]
 802ad88:	3301      	adds	r3, #1
 802ad8a:	d015      	beq.n	802adb8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802ad8c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802ad90:	42bb      	cmp	r3, r7
 802ad92:	d117      	bne.n	802adc4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802ad94:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802ad98:	9b04      	ldr	r3, [sp, #16]
 802ad9a:	4548      	cmp	r0, r9
 802ad9c:	f103 33ff 	add.w	r3, r3, #4294967295
 802ada0:	d17d      	bne.n	802ae9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802ada2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802ada6:	4401      	add	r1, r0
 802ada8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802adac:	4480      	add	r8, r0
 802adae:	e7e9      	b.n	802ad84 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802adb0:	461f      	mov	r7, r3
 802adb2:	e042      	b.n	802ae3a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802adb4:	2000      	movs	r0, #0
 802adb6:	e002      	b.n	802adbe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802adb8:	2900      	cmp	r1, #0
 802adba:	d16d      	bne.n	802ae98 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802adbc:	2001      	movs	r0, #1
 802adbe:	b00b      	add	sp, #44	; 0x2c
 802adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802adc4:	b379      	cbz	r1, 802ae26 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802adc6:	2f00      	cmp	r7, #0
 802adc8:	db29      	blt.n	802ae1e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802adca:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802adce:	42bb      	cmp	r3, r7
 802add0:	dd25      	ble.n	802ae1e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802add2:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802add6:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802adda:	f7ff ff77 	bl	802accc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802adde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ade0:	fb10 f003 	smulbb	r0, r0, r3
 802ade4:	b280      	uxth	r0, r0
 802ade6:	1c41      	adds	r1, r0, #1
 802ade8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802adec:	1209      	asrs	r1, r1, #8
 802adee:	f011 0fff 	tst.w	r1, #255	; 0xff
 802adf2:	d014      	beq.n	802ae1e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802adf4:	b2c9      	uxtb	r1, r1
 802adf6:	9808      	ldr	r0, [sp, #32]
 802adf8:	b2ba      	uxth	r2, r7
 802adfa:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802adfc:	9102      	str	r1, [sp, #8]
 802adfe:	2101      	movs	r1, #1
 802ae00:	4413      	add	r3, r2
 802ae02:	4402      	add	r2, r0
 802ae04:	9101      	str	r1, [sp, #4]
 802ae06:	fa0f f18b 	sxth.w	r1, fp
 802ae0a:	f8da 0000 	ldr.w	r0, [sl]
 802ae0e:	b21b      	sxth	r3, r3
 802ae10:	9100      	str	r1, [sp, #0]
 802ae12:	b212      	sxth	r2, r2
 802ae14:	6941      	ldr	r1, [r0, #20]
 802ae16:	4650      	mov	r0, sl
 802ae18:	460d      	mov	r5, r1
 802ae1a:	9905      	ldr	r1, [sp, #20]
 802ae1c:	47a8      	blx	r5
 802ae1e:	9b04      	ldr	r3, [sp, #16]
 802ae20:	1c7a      	adds	r2, r7, #1
 802ae22:	3301      	adds	r3, #1
 802ae24:	d0ca      	beq.n	802adbc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802ae26:	f9b4 7000 	ldrsh.w	r7, [r4]
 802ae2a:	1abb      	subs	r3, r7, r2
 802ae2c:	2b00      	cmp	r3, #0
 802ae2e:	dd31      	ble.n	802ae94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802ae30:	2a00      	cmp	r2, #0
 802ae32:	dabd      	bge.n	802adb0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802ae34:	2f00      	cmp	r7, #0
 802ae36:	dd2d      	ble.n	802ae94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802ae38:	2200      	movs	r2, #0
 802ae3a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802ae3e:	19d1      	adds	r1, r2, r7
 802ae40:	4299      	cmp	r1, r3
 802ae42:	db02      	blt.n	802ae4a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802ae44:	1a9f      	subs	r7, r3, r2
 802ae46:	2f00      	cmp	r7, #0
 802ae48:	dd24      	ble.n	802ae94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802ae4a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802ae4e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802ae52:	f7ff ff3b 	bl	802accc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802ae56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ae58:	fb10 f003 	smulbb	r0, r0, r3
 802ae5c:	b280      	uxth	r0, r0
 802ae5e:	1c41      	adds	r1, r0, #1
 802ae60:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802ae64:	1209      	asrs	r1, r1, #8
 802ae66:	f011 0fff 	tst.w	r1, #255	; 0xff
 802ae6a:	d013      	beq.n	802ae94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802ae6c:	b292      	uxth	r2, r2
 802ae6e:	9808      	ldr	r0, [sp, #32]
 802ae70:	b2c9      	uxtb	r1, r1
 802ae72:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802ae74:	b23f      	sxth	r7, r7
 802ae76:	4413      	add	r3, r2
 802ae78:	9102      	str	r1, [sp, #8]
 802ae7a:	4402      	add	r2, r0
 802ae7c:	fa0f f18b 	sxth.w	r1, fp
 802ae80:	f8da 0000 	ldr.w	r0, [sl]
 802ae84:	b21b      	sxth	r3, r3
 802ae86:	9100      	str	r1, [sp, #0]
 802ae88:	b212      	sxth	r2, r2
 802ae8a:	9701      	str	r7, [sp, #4]
 802ae8c:	9905      	ldr	r1, [sp, #20]
 802ae8e:	6947      	ldr	r7, [r0, #20]
 802ae90:	4650      	mov	r0, sl
 802ae92:	47b8      	blx	r7
 802ae94:	464b      	mov	r3, r9
 802ae96:	e75e      	b.n	802ad56 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802ae98:	2f00      	cmp	r7, #0
 802ae9a:	da96      	bge.n	802adca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802ae9c:	e78e      	b.n	802adbc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802ae9e:	2900      	cmp	r1, #0
 802aea0:	d0f8      	beq.n	802ae94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802aea2:	e790      	b.n	802adc6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802aea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802aea4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802aea8:	4b4a      	ldr	r3, [pc, #296]	; (802afd4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 802aeaa:	2500      	movs	r5, #0
 802aeac:	f100 0620 	add.w	r6, r0, #32
 802aeb0:	4604      	mov	r4, r0
 802aeb2:	4690      	mov	r8, r2
 802aeb4:	f100 0718 	add.w	r7, r0, #24
 802aeb8:	e9c0 3100 	strd	r3, r1, [r0]
 802aebc:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802aec0:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802aec4:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802aec8:	4630      	mov	r0, r6
 802aeca:	f7ee fcc9 	bl	8019860 <_ZN8touchgfx7OutlineC1Ev>
 802aece:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802aed2:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802aed6:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 802aeda:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 802aede:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 802aee2:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802aee6:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 802aeea:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802aeee:	9500      	str	r5, [sp, #0]
 802aef0:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 802aef4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802aef8:	f9b8 2000 	ldrsh.w	r2, [r8]
 802aefc:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802af00:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802af04:	4410      	add	r0, r2
 802af06:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802af0a:	b280      	uxth	r0, r0
 802af0c:	fa0f fa80 	sxth.w	sl, r0
 802af10:	45aa      	cmp	sl, r5
 802af12:	dd5c      	ble.n	802afce <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802af14:	4591      	cmp	r9, r2
 802af16:	dd5a      	ble.n	802afce <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802af18:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802af1c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802af20:	440b      	add	r3, r1
 802af22:	b29b      	uxth	r3, r3
 802af24:	b21d      	sxth	r5, r3
 802af26:	2d00      	cmp	r5, #0
 802af28:	dd51      	ble.n	802afce <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802af2a:	458e      	cmp	lr, r1
 802af2c:	dd4f      	ble.n	802afce <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802af2e:	45d1      	cmp	r9, sl
 802af30:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802af34:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802af38:	bfb8      	it	lt
 802af3a:	fa1f f089 	uxthlt.w	r0, r9
 802af3e:	45ae      	cmp	lr, r5
 802af40:	f8ad 2000 	strh.w	r2, [sp]
 802af44:	bfb8      	it	lt
 802af46:	fa1f f38e 	uxthlt.w	r3, lr
 802af4a:	1a80      	subs	r0, r0, r2
 802af4c:	f8ad 1002 	strh.w	r1, [sp, #2]
 802af50:	1a5b      	subs	r3, r3, r1
 802af52:	f8ad 0004 	strh.w	r0, [sp, #4]
 802af56:	f8ad 3006 	strh.w	r3, [sp, #6]
 802af5a:	466d      	mov	r5, sp
 802af5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 802af60:	e887 0003 	stmia.w	r7, {r0, r1}
 802af64:	f8dc 3000 	ldr.w	r3, [ip]
 802af68:	4660      	mov	r0, ip
 802af6a:	4639      	mov	r1, r7
 802af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802af6e:	4798      	blx	r3
 802af70:	6861      	ldr	r1, [r4, #4]
 802af72:	4628      	mov	r0, r5
 802af74:	3104      	adds	r1, #4
 802af76:	f7f0 fe43 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802af7a:	4638      	mov	r0, r7
 802af7c:	f7f0 fe18 	bl	801bbb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802af80:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802af84:	f8bd 2000 	ldrh.w	r2, [sp]
 802af88:	4630      	mov	r0, r6
 802af8a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 802af8e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802af92:	f7ee fc49 	bl	8019828 <_ZN8touchgfx7Outline5resetEv>
 802af96:	f9bd 3000 	ldrsh.w	r3, [sp]
 802af9a:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802af9e:	4620      	mov	r0, r4
 802afa0:	015b      	lsls	r3, r3, #5
 802afa2:	60a3      	str	r3, [r4, #8]
 802afa4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802afa8:	015b      	lsls	r3, r3, #5
 802afaa:	60e3      	str	r3, [r4, #12]
 802afac:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802afb0:	015b      	lsls	r3, r3, #5
 802afb2:	6123      	str	r3, [r4, #16]
 802afb4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802afb8:	015b      	lsls	r3, r3, #5
 802afba:	6163      	str	r3, [r4, #20]
 802afbc:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802afc0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802afc4:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802afc8:	b002      	add	sp, #8
 802afca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802afce:	2300      	movs	r3, #0
 802afd0:	9301      	str	r3, [sp, #4]
 802afd2:	e7c2      	b.n	802af5a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 802afd4:	08031698 	.word	0x08031698

0802afd8 <_ZN8touchgfx6Canvas5closeEv>:
 802afd8:	b538      	push	{r3, r4, r5, lr}
 802afda:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802afde:	4604      	mov	r4, r0
 802afe0:	b193      	cbz	r3, 802b008 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802afe2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 802afe6:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802afea:	4213      	tst	r3, r2
 802afec:	d10c      	bne.n	802b008 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802afee:	f100 0520 	add.w	r5, r0, #32
 802aff2:	b123      	cbz	r3, 802affe <_ZN8touchgfx6Canvas5closeEv+0x26>
 802aff4:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802aff8:	4628      	mov	r0, r5
 802affa:	f7ff fe7b 	bl	802acf4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802affe:	4628      	mov	r0, r5
 802b000:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 802b004:	f7ff fe76 	bl	802acf4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b008:	2300      	movs	r3, #0
 802b00a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802b00e:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 802b012:	4298      	cmp	r0, r3
 802b014:	bf34      	ite	cc
 802b016:	2000      	movcc	r0, #0
 802b018:	2001      	movcs	r0, #1
 802b01a:	bd38      	pop	{r3, r4, r5, pc}

0802b01c <_ZN8touchgfx6Canvas6renderEh>:
 802b01c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b020:	4604      	mov	r4, r0
 802b022:	6840      	ldr	r0, [r0, #4]
 802b024:	460d      	mov	r5, r1
 802b026:	6803      	ldr	r3, [r0, #0]
 802b028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b02a:	4798      	blx	r3
 802b02c:	fb10 f105 	smulbb	r1, r0, r5
 802b030:	b289      	uxth	r1, r1
 802b032:	1c4d      	adds	r5, r1, #1
 802b034:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802b038:	122d      	asrs	r5, r5, #8
 802b03a:	f000 8097 	beq.w	802b16c <_ZN8touchgfx6Canvas6renderEh+0x150>
 802b03e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 802b042:	2b00      	cmp	r3, #0
 802b044:	f000 8092 	beq.w	802b16c <_ZN8touchgfx6Canvas6renderEh+0x150>
 802b048:	4620      	mov	r0, r4
 802b04a:	f7ff ffc5 	bl	802afd8 <_ZN8touchgfx6Canvas5closeEv>
 802b04e:	4607      	mov	r7, r0
 802b050:	2800      	cmp	r0, #0
 802b052:	d043      	beq.n	802b0dc <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802b054:	6863      	ldr	r3, [r4, #4]
 802b056:	4e46      	ldr	r6, [pc, #280]	; (802b170 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802b058:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802b05a:	6837      	ldr	r7, [r6, #0]
 802b05c:	6803      	ldr	r3, [r0, #0]
 802b05e:	689b      	ldr	r3, [r3, #8]
 802b060:	4798      	blx	r3
 802b062:	4601      	mov	r1, r0
 802b064:	4638      	mov	r0, r7
 802b066:	f7ec ffdb 	bl	8018020 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802b06a:	4607      	mov	r7, r0
 802b06c:	f7ec fb9c 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 802b070:	6803      	ldr	r3, [r0, #0]
 802b072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b074:	4798      	blx	r3
 802b076:	4680      	mov	r8, r0
 802b078:	f7ec fb96 	bl	80177a8 <_ZN8touchgfx3HAL3lcdEv>
 802b07c:	6803      	ldr	r3, [r0, #0]
 802b07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b080:	4798      	blx	r3
 802b082:	280b      	cmp	r0, #11
 802b084:	d857      	bhi.n	802b136 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802b086:	e8df f000 	tbb	[pc, r0]
 802b08a:	584d      	.short	0x584d
 802b08c:	2d560668 	.word	0x2d560668
 802b090:	6161613d 	.word	0x6161613d
 802b094:	6161      	.short	0x6161
 802b096:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802b09a:	2208      	movs	r2, #8
 802b09c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802b0a0:	fb91 f2f2 	sdiv	r2, r1, r2
 802b0a4:	fb08 2303 	mla	r3, r8, r3, r2
 802b0a8:	441f      	add	r7, r3
 802b0aa:	424b      	negs	r3, r1
 802b0ac:	f001 0107 	and.w	r1, r1, #7
 802b0b0:	f003 0307 	and.w	r3, r3, #7
 802b0b4:	bf58      	it	pl
 802b0b6:	4259      	negpl	r1, r3
 802b0b8:	b2c9      	uxtb	r1, r1
 802b0ba:	6860      	ldr	r0, [r4, #4]
 802b0bc:	b2ed      	uxtb	r5, r5
 802b0be:	fa0f f388 	sxth.w	r3, r8
 802b0c2:	463a      	mov	r2, r7
 802b0c4:	e9cd 1500 	strd	r1, r5, [sp]
 802b0c8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802b0ca:	f104 0020 	add.w	r0, r4, #32
 802b0ce:	f7ff fe1d 	bl	802ad0c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802b0d2:	4607      	mov	r7, r0
 802b0d4:	6830      	ldr	r0, [r6, #0]
 802b0d6:	6803      	ldr	r3, [r0, #0]
 802b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b0da:	4798      	blx	r3
 802b0dc:	4638      	mov	r0, r7
 802b0de:	b002      	add	sp, #8
 802b0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b0e4:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802b0e8:	2204      	movs	r2, #4
 802b0ea:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802b0ee:	fb91 f2f2 	sdiv	r2, r1, r2
 802b0f2:	fb08 2303 	mla	r3, r8, r3, r2
 802b0f6:	441f      	add	r7, r3
 802b0f8:	424b      	negs	r3, r1
 802b0fa:	f001 0103 	and.w	r1, r1, #3
 802b0fe:	f003 0303 	and.w	r3, r3, #3
 802b102:	e7d7      	b.n	802b0b4 <_ZN8touchgfx6Canvas6renderEh+0x98>
 802b104:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802b108:	2202      	movs	r2, #2
 802b10a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802b10e:	2900      	cmp	r1, #0
 802b110:	fb91 f2f2 	sdiv	r2, r1, r2
 802b114:	f001 0101 	and.w	r1, r1, #1
 802b118:	fb08 2303 	mla	r3, r8, r3, r2
 802b11c:	bfb8      	it	lt
 802b11e:	4249      	neglt	r1, r1
 802b120:	441f      	add	r7, r3
 802b122:	e7c9      	b.n	802b0b8 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 802b124:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802b128:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802b12c:	fb08 f303 	mul.w	r3, r8, r3
 802b130:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802b134:	441f      	add	r7, r3
 802b136:	2100      	movs	r1, #0
 802b138:	e7bf      	b.n	802b0ba <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802b13a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802b13e:	2103      	movs	r1, #3
 802b140:	fb08 f203 	mul.w	r2, r8, r3
 802b144:	8b23      	ldrh	r3, [r4, #24]
 802b146:	fb13 2301 	smlabb	r3, r3, r1, r2
 802b14a:	e7f3      	b.n	802b134 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802b14c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802b150:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802b154:	fb08 2303 	mla	r3, r8, r3, r2
 802b158:	e7ec      	b.n	802b134 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802b15a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802b15e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802b162:	fb08 f303 	mul.w	r3, r8, r3
 802b166:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802b16a:	e7e3      	b.n	802b134 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802b16c:	2701      	movs	r7, #1
 802b16e:	e7b5      	b.n	802b0dc <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802b170:	20016e88 	.word	0x20016e88

0802b174 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802b174:	4b07      	ldr	r3, [pc, #28]	; (802b194 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802b176:	b510      	push	{r4, lr}
 802b178:	781b      	ldrb	r3, [r3, #0]
 802b17a:	2b01      	cmp	r3, #1
 802b17c:	d108      	bne.n	802b190 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802b17e:	6843      	ldr	r3, [r0, #4]
 802b180:	6814      	ldr	r4, [r2, #0]
 802b182:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802b186:	680b      	ldr	r3, [r1, #0]
 802b188:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802b18c:	6013      	str	r3, [r2, #0]
 802b18e:	600c      	str	r4, [r1, #0]
 802b190:	bd10      	pop	{r4, pc}
 802b192:	bf00      	nop
 802b194:	20016e80 	.word	0x20016e80

0802b198 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802b198:	b513      	push	{r0, r1, r4, lr}
 802b19a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802b19e:	4604      	mov	r4, r0
 802b1a0:	e9cd 2100 	strd	r2, r1, [sp]
 802b1a4:	b9a3      	cbnz	r3, 802b1d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802b1a6:	466a      	mov	r2, sp
 802b1a8:	a901      	add	r1, sp, #4
 802b1aa:	4620      	mov	r0, r4
 802b1ac:	f7ff ffe2 	bl	802b174 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b1b0:	68a3      	ldr	r3, [r4, #8]
 802b1b2:	9901      	ldr	r1, [sp, #4]
 802b1b4:	9a00      	ldr	r2, [sp, #0]
 802b1b6:	1ac9      	subs	r1, r1, r3
 802b1b8:	68e3      	ldr	r3, [r4, #12]
 802b1ba:	1ad2      	subs	r2, r2, r3
 802b1bc:	9101      	str	r1, [sp, #4]
 802b1be:	2a00      	cmp	r2, #0
 802b1c0:	9200      	str	r2, [sp, #0]
 802b1c2:	da0b      	bge.n	802b1dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802b1c4:	2301      	movs	r3, #1
 802b1c6:	2900      	cmp	r1, #0
 802b1c8:	da0e      	bge.n	802b1e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802b1ca:	f043 0304 	orr.w	r3, r3, #4
 802b1ce:	e013      	b.n	802b1f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802b1d0:	f7ff ff02 	bl	802afd8 <_ZN8touchgfx6Canvas5closeEv>
 802b1d4:	2800      	cmp	r0, #0
 802b1d6:	d1e6      	bne.n	802b1a6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802b1d8:	b002      	add	sp, #8
 802b1da:	bd10      	pop	{r4, pc}
 802b1dc:	6963      	ldr	r3, [r4, #20]
 802b1de:	429a      	cmp	r2, r3
 802b1e0:	bfac      	ite	ge
 802b1e2:	2302      	movge	r3, #2
 802b1e4:	2300      	movlt	r3, #0
 802b1e6:	e7ee      	b.n	802b1c6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802b1e8:	6920      	ldr	r0, [r4, #16]
 802b1ea:	4281      	cmp	r1, r0
 802b1ec:	bfac      	ite	ge
 802b1ee:	2008      	movge	r0, #8
 802b1f0:	2000      	movlt	r0, #0
 802b1f2:	4318      	orrs	r0, r3
 802b1f4:	b2c3      	uxtb	r3, r0
 802b1f6:	b158      	cbz	r0, 802b210 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802b1f8:	2200      	movs	r2, #0
 802b1fa:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802b1fe:	9901      	ldr	r1, [sp, #4]
 802b200:	9a00      	ldr	r2, [sp, #0]
 802b202:	66a1      	str	r1, [r4, #104]	; 0x68
 802b204:	66e2      	str	r2, [r4, #108]	; 0x6c
 802b206:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802b20a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802b20e:	e7e3      	b.n	802b1d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802b210:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802b214:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802b218:	4298      	cmp	r0, r3
 802b21a:	d803      	bhi.n	802b224 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802b21c:	f104 0020 	add.w	r0, r4, #32
 802b220:	f7ee fff2 	bl	801a208 <_ZN8touchgfx7Outline6moveToEii>
 802b224:	2301      	movs	r3, #1
 802b226:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802b22a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802b22e:	2300      	movs	r3, #0
 802b230:	e7e5      	b.n	802b1fe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802b232 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802b232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b234:	ab02      	add	r3, sp, #8
 802b236:	4604      	mov	r4, r0
 802b238:	9101      	str	r1, [sp, #4]
 802b23a:	a901      	add	r1, sp, #4
 802b23c:	f843 2d08 	str.w	r2, [r3, #-8]!
 802b240:	461a      	mov	r2, r3
 802b242:	f7ff ff97 	bl	802b174 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b246:	68a3      	ldr	r3, [r4, #8]
 802b248:	9901      	ldr	r1, [sp, #4]
 802b24a:	9a00      	ldr	r2, [sp, #0]
 802b24c:	1ac9      	subs	r1, r1, r3
 802b24e:	68e3      	ldr	r3, [r4, #12]
 802b250:	1ad2      	subs	r2, r2, r3
 802b252:	9101      	str	r1, [sp, #4]
 802b254:	2a00      	cmp	r2, #0
 802b256:	9200      	str	r2, [sp, #0]
 802b258:	db1c      	blt.n	802b294 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802b25a:	6963      	ldr	r3, [r4, #20]
 802b25c:	429a      	cmp	r2, r3
 802b25e:	bfac      	ite	ge
 802b260:	2002      	movge	r0, #2
 802b262:	2000      	movlt	r0, #0
 802b264:	2900      	cmp	r1, #0
 802b266:	db17      	blt.n	802b298 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802b268:	6923      	ldr	r3, [r4, #16]
 802b26a:	4299      	cmp	r1, r3
 802b26c:	bfac      	ite	ge
 802b26e:	2308      	movge	r3, #8
 802b270:	2300      	movlt	r3, #0
 802b272:	4303      	orrs	r3, r0
 802b274:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802b278:	b2dd      	uxtb	r5, r3
 802b27a:	b978      	cbnz	r0, 802b29c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802b27c:	f104 0020 	add.w	r0, r4, #32
 802b280:	f7ff fd38 	bl	802acf4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b284:	9b01      	ldr	r3, [sp, #4]
 802b286:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802b28a:	65e3      	str	r3, [r4, #92]	; 0x5c
 802b28c:	9b00      	ldr	r3, [sp, #0]
 802b28e:	6623      	str	r3, [r4, #96]	; 0x60
 802b290:	b002      	add	sp, #8
 802b292:	bd70      	pop	{r4, r5, r6, pc}
 802b294:	2001      	movs	r0, #1
 802b296:	e7e5      	b.n	802b264 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802b298:	2304      	movs	r3, #4
 802b29a:	e7ea      	b.n	802b272 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802b29c:	b113      	cbz	r3, 802b2a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802b29e:	ea10 0305 	ands.w	r3, r0, r5
 802b2a2:	d11c      	bne.n	802b2de <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802b2a4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802b2a8:	f104 0620 	add.w	r6, r4, #32
 802b2ac:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 802b2b0:	b98b      	cbnz	r3, 802b2d6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802b2b2:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802b2b6:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802b2ba:	4298      	cmp	r0, r3
 802b2bc:	d802      	bhi.n	802b2c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802b2be:	4630      	mov	r0, r6
 802b2c0:	f7ee ffa2 	bl	801a208 <_ZN8touchgfx7Outline6moveToEii>
 802b2c4:	2301      	movs	r3, #1
 802b2c6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802b2ca:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802b2ce:	4630      	mov	r0, r6
 802b2d0:	e9dd 2100 	ldrd	r2, r1, [sp]
 802b2d4:	e7d4      	b.n	802b280 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802b2d6:	4630      	mov	r0, r6
 802b2d8:	f7ff fd0c 	bl	802acf4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b2dc:	e7f7      	b.n	802b2ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802b2de:	461d      	mov	r5, r3
 802b2e0:	e7d0      	b.n	802b284 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802b2e4 <_ZN8touchgfx6CanvasD1Ev>:
 802b2e4:	4b04      	ldr	r3, [pc, #16]	; (802b2f8 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802b2e6:	b510      	push	{r4, lr}
 802b2e8:	4604      	mov	r4, r0
 802b2ea:	f840 3b20 	str.w	r3, [r0], #32
 802b2ee:	f7ee fa93 	bl	8019818 <_ZN8touchgfx7OutlineD1Ev>
 802b2f2:	4620      	mov	r0, r4
 802b2f4:	bd10      	pop	{r4, pc}
 802b2f6:	bf00      	nop
 802b2f8:	08031698 	.word	0x08031698

0802b2fc <_ZN8touchgfx6CanvasD0Ev>:
 802b2fc:	b510      	push	{r4, lr}
 802b2fe:	4604      	mov	r4, r0
 802b300:	f7ff fff0 	bl	802b2e4 <_ZN8touchgfx6CanvasD1Ev>
 802b304:	2170      	movs	r1, #112	; 0x70
 802b306:	4620      	mov	r0, r4
 802b308:	f000 f807 	bl	802b31a <_ZdlPvj>
 802b30c:	4620      	mov	r0, r4
 802b30e:	bd10      	pop	{r4, pc}

0802b310 <__aeabi_atexit>:
 802b310:	460b      	mov	r3, r1
 802b312:	4601      	mov	r1, r0
 802b314:	4618      	mov	r0, r3
 802b316:	f000 b853 	b.w	802b3c0 <__cxa_atexit>

0802b31a <_ZdlPvj>:
 802b31a:	f000 b812 	b.w	802b342 <_ZdlPv>

0802b31e <__cxa_guard_acquire>:
 802b31e:	6803      	ldr	r3, [r0, #0]
 802b320:	07db      	lsls	r3, r3, #31
 802b322:	d406      	bmi.n	802b332 <__cxa_guard_acquire+0x14>
 802b324:	7843      	ldrb	r3, [r0, #1]
 802b326:	b103      	cbz	r3, 802b32a <__cxa_guard_acquire+0xc>
 802b328:	deff      	udf	#255	; 0xff
 802b32a:	2301      	movs	r3, #1
 802b32c:	7043      	strb	r3, [r0, #1]
 802b32e:	4618      	mov	r0, r3
 802b330:	4770      	bx	lr
 802b332:	2000      	movs	r0, #0
 802b334:	4770      	bx	lr

0802b336 <__cxa_guard_release>:
 802b336:	2301      	movs	r3, #1
 802b338:	6003      	str	r3, [r0, #0]
 802b33a:	4770      	bx	lr

0802b33c <__cxa_pure_virtual>:
 802b33c:	b508      	push	{r3, lr}
 802b33e:	f000 f80f 	bl	802b360 <_ZSt9terminatev>

0802b342 <_ZdlPv>:
 802b342:	f000 b893 	b.w	802b46c <free>

0802b346 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802b346:	b508      	push	{r3, lr}
 802b348:	4780      	blx	r0
 802b34a:	f000 f80e 	bl	802b36a <abort>
	...

0802b350 <_ZSt13get_terminatev>:
 802b350:	4b02      	ldr	r3, [pc, #8]	; (802b35c <_ZSt13get_terminatev+0xc>)
 802b352:	6818      	ldr	r0, [r3, #0]
 802b354:	f3bf 8f5b 	dmb	ish
 802b358:	4770      	bx	lr
 802b35a:	bf00      	nop
 802b35c:	200000b8 	.word	0x200000b8

0802b360 <_ZSt9terminatev>:
 802b360:	b508      	push	{r3, lr}
 802b362:	f7ff fff5 	bl	802b350 <_ZSt13get_terminatev>
 802b366:	f7ff ffee 	bl	802b346 <_ZN10__cxxabiv111__terminateEPFvvE>

0802b36a <abort>:
 802b36a:	b508      	push	{r3, lr}
 802b36c:	2006      	movs	r0, #6
 802b36e:	f000 fca1 	bl	802bcb4 <raise>
 802b372:	2001      	movs	r0, #1
 802b374:	f7d6 faf0 	bl	8001958 <_exit>

0802b378 <__assert_func>:
 802b378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b37a:	4614      	mov	r4, r2
 802b37c:	461a      	mov	r2, r3
 802b37e:	4b09      	ldr	r3, [pc, #36]	; (802b3a4 <__assert_func+0x2c>)
 802b380:	681b      	ldr	r3, [r3, #0]
 802b382:	4605      	mov	r5, r0
 802b384:	68d8      	ldr	r0, [r3, #12]
 802b386:	b14c      	cbz	r4, 802b39c <__assert_func+0x24>
 802b388:	4b07      	ldr	r3, [pc, #28]	; (802b3a8 <__assert_func+0x30>)
 802b38a:	9100      	str	r1, [sp, #0]
 802b38c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b390:	4906      	ldr	r1, [pc, #24]	; (802b3ac <__assert_func+0x34>)
 802b392:	462b      	mov	r3, r5
 802b394:	f000 f828 	bl	802b3e8 <fiprintf>
 802b398:	f7ff ffe7 	bl	802b36a <abort>
 802b39c:	4b04      	ldr	r3, [pc, #16]	; (802b3b0 <__assert_func+0x38>)
 802b39e:	461c      	mov	r4, r3
 802b3a0:	e7f3      	b.n	802b38a <__assert_func+0x12>
 802b3a2:	bf00      	nop
 802b3a4:	200000bc 	.word	0x200000bc
 802b3a8:	080316a4 	.word	0x080316a4
 802b3ac:	080316b1 	.word	0x080316b1
 802b3b0:	080316df 	.word	0x080316df

0802b3b4 <atexit>:
 802b3b4:	2300      	movs	r3, #0
 802b3b6:	4601      	mov	r1, r0
 802b3b8:	461a      	mov	r2, r3
 802b3ba:	4618      	mov	r0, r3
 802b3bc:	f000 bd8a 	b.w	802bed4 <__register_exitproc>

0802b3c0 <__cxa_atexit>:
 802b3c0:	b510      	push	{r4, lr}
 802b3c2:	4c05      	ldr	r4, [pc, #20]	; (802b3d8 <__cxa_atexit+0x18>)
 802b3c4:	4613      	mov	r3, r2
 802b3c6:	b12c      	cbz	r4, 802b3d4 <__cxa_atexit+0x14>
 802b3c8:	460a      	mov	r2, r1
 802b3ca:	4601      	mov	r1, r0
 802b3cc:	2002      	movs	r0, #2
 802b3ce:	f000 fd81 	bl	802bed4 <__register_exitproc>
 802b3d2:	bd10      	pop	{r4, pc}
 802b3d4:	4620      	mov	r0, r4
 802b3d6:	e7fc      	b.n	802b3d2 <__cxa_atexit+0x12>
 802b3d8:	0802bed5 	.word	0x0802bed5

0802b3dc <__errno>:
 802b3dc:	4b01      	ldr	r3, [pc, #4]	; (802b3e4 <__errno+0x8>)
 802b3de:	6818      	ldr	r0, [r3, #0]
 802b3e0:	4770      	bx	lr
 802b3e2:	bf00      	nop
 802b3e4:	200000bc 	.word	0x200000bc

0802b3e8 <fiprintf>:
 802b3e8:	b40e      	push	{r1, r2, r3}
 802b3ea:	b503      	push	{r0, r1, lr}
 802b3ec:	4601      	mov	r1, r0
 802b3ee:	ab03      	add	r3, sp, #12
 802b3f0:	4805      	ldr	r0, [pc, #20]	; (802b408 <fiprintf+0x20>)
 802b3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 802b3f6:	6800      	ldr	r0, [r0, #0]
 802b3f8:	9301      	str	r3, [sp, #4]
 802b3fa:	f000 f95f 	bl	802b6bc <_vfiprintf_r>
 802b3fe:	b002      	add	sp, #8
 802b400:	f85d eb04 	ldr.w	lr, [sp], #4
 802b404:	b003      	add	sp, #12
 802b406:	4770      	bx	lr
 802b408:	200000bc 	.word	0x200000bc

0802b40c <__libc_init_array>:
 802b40c:	b570      	push	{r4, r5, r6, lr}
 802b40e:	4d0d      	ldr	r5, [pc, #52]	; (802b444 <__libc_init_array+0x38>)
 802b410:	4c0d      	ldr	r4, [pc, #52]	; (802b448 <__libc_init_array+0x3c>)
 802b412:	1b64      	subs	r4, r4, r5
 802b414:	10a4      	asrs	r4, r4, #2
 802b416:	2600      	movs	r6, #0
 802b418:	42a6      	cmp	r6, r4
 802b41a:	d109      	bne.n	802b430 <__libc_init_array+0x24>
 802b41c:	4d0b      	ldr	r5, [pc, #44]	; (802b44c <__libc_init_array+0x40>)
 802b41e:	4c0c      	ldr	r4, [pc, #48]	; (802b450 <__libc_init_array+0x44>)
 802b420:	f001 fa3a 	bl	802c898 <_init>
 802b424:	1b64      	subs	r4, r4, r5
 802b426:	10a4      	asrs	r4, r4, #2
 802b428:	2600      	movs	r6, #0
 802b42a:	42a6      	cmp	r6, r4
 802b42c:	d105      	bne.n	802b43a <__libc_init_array+0x2e>
 802b42e:	bd70      	pop	{r4, r5, r6, pc}
 802b430:	f855 3b04 	ldr.w	r3, [r5], #4
 802b434:	4798      	blx	r3
 802b436:	3601      	adds	r6, #1
 802b438:	e7ee      	b.n	802b418 <__libc_init_array+0xc>
 802b43a:	f855 3b04 	ldr.w	r3, [r5], #4
 802b43e:	4798      	blx	r3
 802b440:	3601      	adds	r6, #1
 802b442:	e7f2      	b.n	802b42a <__libc_init_array+0x1e>
 802b444:	0803179c 	.word	0x0803179c
 802b448:	0803179c 	.word	0x0803179c
 802b44c:	0803179c 	.word	0x0803179c
 802b450:	080317b8 	.word	0x080317b8

0802b454 <__retarget_lock_init_recursive>:
 802b454:	4770      	bx	lr

0802b456 <__retarget_lock_acquire_recursive>:
 802b456:	4770      	bx	lr

0802b458 <__retarget_lock_release>:
 802b458:	4770      	bx	lr

0802b45a <__retarget_lock_release_recursive>:
 802b45a:	4770      	bx	lr

0802b45c <malloc>:
 802b45c:	4b02      	ldr	r3, [pc, #8]	; (802b468 <malloc+0xc>)
 802b45e:	4601      	mov	r1, r0
 802b460:	6818      	ldr	r0, [r3, #0]
 802b462:	f000 b88d 	b.w	802b580 <_malloc_r>
 802b466:	bf00      	nop
 802b468:	200000bc 	.word	0x200000bc

0802b46c <free>:
 802b46c:	4b02      	ldr	r3, [pc, #8]	; (802b478 <free+0xc>)
 802b46e:	4601      	mov	r1, r0
 802b470:	6818      	ldr	r0, [r3, #0]
 802b472:	f000 b819 	b.w	802b4a8 <_free_r>
 802b476:	bf00      	nop
 802b478:	200000bc 	.word	0x200000bc

0802b47c <memcpy>:
 802b47c:	440a      	add	r2, r1
 802b47e:	4291      	cmp	r1, r2
 802b480:	f100 33ff 	add.w	r3, r0, #4294967295
 802b484:	d100      	bne.n	802b488 <memcpy+0xc>
 802b486:	4770      	bx	lr
 802b488:	b510      	push	{r4, lr}
 802b48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b492:	4291      	cmp	r1, r2
 802b494:	d1f9      	bne.n	802b48a <memcpy+0xe>
 802b496:	bd10      	pop	{r4, pc}

0802b498 <memset>:
 802b498:	4402      	add	r2, r0
 802b49a:	4603      	mov	r3, r0
 802b49c:	4293      	cmp	r3, r2
 802b49e:	d100      	bne.n	802b4a2 <memset+0xa>
 802b4a0:	4770      	bx	lr
 802b4a2:	f803 1b01 	strb.w	r1, [r3], #1
 802b4a6:	e7f9      	b.n	802b49c <memset+0x4>

0802b4a8 <_free_r>:
 802b4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b4aa:	2900      	cmp	r1, #0
 802b4ac:	d044      	beq.n	802b538 <_free_r+0x90>
 802b4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b4b2:	9001      	str	r0, [sp, #4]
 802b4b4:	2b00      	cmp	r3, #0
 802b4b6:	f1a1 0404 	sub.w	r4, r1, #4
 802b4ba:	bfb8      	it	lt
 802b4bc:	18e4      	addlt	r4, r4, r3
 802b4be:	f000 ffa1 	bl	802c404 <__malloc_lock>
 802b4c2:	4a1e      	ldr	r2, [pc, #120]	; (802b53c <_free_r+0x94>)
 802b4c4:	9801      	ldr	r0, [sp, #4]
 802b4c6:	6813      	ldr	r3, [r2, #0]
 802b4c8:	b933      	cbnz	r3, 802b4d8 <_free_r+0x30>
 802b4ca:	6063      	str	r3, [r4, #4]
 802b4cc:	6014      	str	r4, [r2, #0]
 802b4ce:	b003      	add	sp, #12
 802b4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b4d4:	f000 bf9c 	b.w	802c410 <__malloc_unlock>
 802b4d8:	42a3      	cmp	r3, r4
 802b4da:	d908      	bls.n	802b4ee <_free_r+0x46>
 802b4dc:	6825      	ldr	r5, [r4, #0]
 802b4de:	1961      	adds	r1, r4, r5
 802b4e0:	428b      	cmp	r3, r1
 802b4e2:	bf01      	itttt	eq
 802b4e4:	6819      	ldreq	r1, [r3, #0]
 802b4e6:	685b      	ldreq	r3, [r3, #4]
 802b4e8:	1949      	addeq	r1, r1, r5
 802b4ea:	6021      	streq	r1, [r4, #0]
 802b4ec:	e7ed      	b.n	802b4ca <_free_r+0x22>
 802b4ee:	461a      	mov	r2, r3
 802b4f0:	685b      	ldr	r3, [r3, #4]
 802b4f2:	b10b      	cbz	r3, 802b4f8 <_free_r+0x50>
 802b4f4:	42a3      	cmp	r3, r4
 802b4f6:	d9fa      	bls.n	802b4ee <_free_r+0x46>
 802b4f8:	6811      	ldr	r1, [r2, #0]
 802b4fa:	1855      	adds	r5, r2, r1
 802b4fc:	42a5      	cmp	r5, r4
 802b4fe:	d10b      	bne.n	802b518 <_free_r+0x70>
 802b500:	6824      	ldr	r4, [r4, #0]
 802b502:	4421      	add	r1, r4
 802b504:	1854      	adds	r4, r2, r1
 802b506:	42a3      	cmp	r3, r4
 802b508:	6011      	str	r1, [r2, #0]
 802b50a:	d1e0      	bne.n	802b4ce <_free_r+0x26>
 802b50c:	681c      	ldr	r4, [r3, #0]
 802b50e:	685b      	ldr	r3, [r3, #4]
 802b510:	6053      	str	r3, [r2, #4]
 802b512:	4421      	add	r1, r4
 802b514:	6011      	str	r1, [r2, #0]
 802b516:	e7da      	b.n	802b4ce <_free_r+0x26>
 802b518:	d902      	bls.n	802b520 <_free_r+0x78>
 802b51a:	230c      	movs	r3, #12
 802b51c:	6003      	str	r3, [r0, #0]
 802b51e:	e7d6      	b.n	802b4ce <_free_r+0x26>
 802b520:	6825      	ldr	r5, [r4, #0]
 802b522:	1961      	adds	r1, r4, r5
 802b524:	428b      	cmp	r3, r1
 802b526:	bf04      	itt	eq
 802b528:	6819      	ldreq	r1, [r3, #0]
 802b52a:	685b      	ldreq	r3, [r3, #4]
 802b52c:	6063      	str	r3, [r4, #4]
 802b52e:	bf04      	itt	eq
 802b530:	1949      	addeq	r1, r1, r5
 802b532:	6021      	streq	r1, [r4, #0]
 802b534:	6054      	str	r4, [r2, #4]
 802b536:	e7ca      	b.n	802b4ce <_free_r+0x26>
 802b538:	b003      	add	sp, #12
 802b53a:	bd30      	pop	{r4, r5, pc}
 802b53c:	20016f90 	.word	0x20016f90

0802b540 <sbrk_aligned>:
 802b540:	b570      	push	{r4, r5, r6, lr}
 802b542:	4e0e      	ldr	r6, [pc, #56]	; (802b57c <sbrk_aligned+0x3c>)
 802b544:	460c      	mov	r4, r1
 802b546:	6831      	ldr	r1, [r6, #0]
 802b548:	4605      	mov	r5, r0
 802b54a:	b911      	cbnz	r1, 802b552 <sbrk_aligned+0x12>
 802b54c:	f000 fb7a 	bl	802bc44 <_sbrk_r>
 802b550:	6030      	str	r0, [r6, #0]
 802b552:	4621      	mov	r1, r4
 802b554:	4628      	mov	r0, r5
 802b556:	f000 fb75 	bl	802bc44 <_sbrk_r>
 802b55a:	1c43      	adds	r3, r0, #1
 802b55c:	d00a      	beq.n	802b574 <sbrk_aligned+0x34>
 802b55e:	1cc4      	adds	r4, r0, #3
 802b560:	f024 0403 	bic.w	r4, r4, #3
 802b564:	42a0      	cmp	r0, r4
 802b566:	d007      	beq.n	802b578 <sbrk_aligned+0x38>
 802b568:	1a21      	subs	r1, r4, r0
 802b56a:	4628      	mov	r0, r5
 802b56c:	f000 fb6a 	bl	802bc44 <_sbrk_r>
 802b570:	3001      	adds	r0, #1
 802b572:	d101      	bne.n	802b578 <sbrk_aligned+0x38>
 802b574:	f04f 34ff 	mov.w	r4, #4294967295
 802b578:	4620      	mov	r0, r4
 802b57a:	bd70      	pop	{r4, r5, r6, pc}
 802b57c:	20016f94 	.word	0x20016f94

0802b580 <_malloc_r>:
 802b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b584:	1ccd      	adds	r5, r1, #3
 802b586:	f025 0503 	bic.w	r5, r5, #3
 802b58a:	3508      	adds	r5, #8
 802b58c:	2d0c      	cmp	r5, #12
 802b58e:	bf38      	it	cc
 802b590:	250c      	movcc	r5, #12
 802b592:	2d00      	cmp	r5, #0
 802b594:	4607      	mov	r7, r0
 802b596:	db01      	blt.n	802b59c <_malloc_r+0x1c>
 802b598:	42a9      	cmp	r1, r5
 802b59a:	d905      	bls.n	802b5a8 <_malloc_r+0x28>
 802b59c:	230c      	movs	r3, #12
 802b59e:	603b      	str	r3, [r7, #0]
 802b5a0:	2600      	movs	r6, #0
 802b5a2:	4630      	mov	r0, r6
 802b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b5a8:	4e2e      	ldr	r6, [pc, #184]	; (802b664 <_malloc_r+0xe4>)
 802b5aa:	f000 ff2b 	bl	802c404 <__malloc_lock>
 802b5ae:	6833      	ldr	r3, [r6, #0]
 802b5b0:	461c      	mov	r4, r3
 802b5b2:	bb34      	cbnz	r4, 802b602 <_malloc_r+0x82>
 802b5b4:	4629      	mov	r1, r5
 802b5b6:	4638      	mov	r0, r7
 802b5b8:	f7ff ffc2 	bl	802b540 <sbrk_aligned>
 802b5bc:	1c43      	adds	r3, r0, #1
 802b5be:	4604      	mov	r4, r0
 802b5c0:	d14d      	bne.n	802b65e <_malloc_r+0xde>
 802b5c2:	6834      	ldr	r4, [r6, #0]
 802b5c4:	4626      	mov	r6, r4
 802b5c6:	2e00      	cmp	r6, #0
 802b5c8:	d140      	bne.n	802b64c <_malloc_r+0xcc>
 802b5ca:	6823      	ldr	r3, [r4, #0]
 802b5cc:	4631      	mov	r1, r6
 802b5ce:	4638      	mov	r0, r7
 802b5d0:	eb04 0803 	add.w	r8, r4, r3
 802b5d4:	f000 fb36 	bl	802bc44 <_sbrk_r>
 802b5d8:	4580      	cmp	r8, r0
 802b5da:	d13a      	bne.n	802b652 <_malloc_r+0xd2>
 802b5dc:	6821      	ldr	r1, [r4, #0]
 802b5de:	3503      	adds	r5, #3
 802b5e0:	1a6d      	subs	r5, r5, r1
 802b5e2:	f025 0503 	bic.w	r5, r5, #3
 802b5e6:	3508      	adds	r5, #8
 802b5e8:	2d0c      	cmp	r5, #12
 802b5ea:	bf38      	it	cc
 802b5ec:	250c      	movcc	r5, #12
 802b5ee:	4629      	mov	r1, r5
 802b5f0:	4638      	mov	r0, r7
 802b5f2:	f7ff ffa5 	bl	802b540 <sbrk_aligned>
 802b5f6:	3001      	adds	r0, #1
 802b5f8:	d02b      	beq.n	802b652 <_malloc_r+0xd2>
 802b5fa:	6823      	ldr	r3, [r4, #0]
 802b5fc:	442b      	add	r3, r5
 802b5fe:	6023      	str	r3, [r4, #0]
 802b600:	e00e      	b.n	802b620 <_malloc_r+0xa0>
 802b602:	6822      	ldr	r2, [r4, #0]
 802b604:	1b52      	subs	r2, r2, r5
 802b606:	d41e      	bmi.n	802b646 <_malloc_r+0xc6>
 802b608:	2a0b      	cmp	r2, #11
 802b60a:	d916      	bls.n	802b63a <_malloc_r+0xba>
 802b60c:	1961      	adds	r1, r4, r5
 802b60e:	42a3      	cmp	r3, r4
 802b610:	6025      	str	r5, [r4, #0]
 802b612:	bf18      	it	ne
 802b614:	6059      	strne	r1, [r3, #4]
 802b616:	6863      	ldr	r3, [r4, #4]
 802b618:	bf08      	it	eq
 802b61a:	6031      	streq	r1, [r6, #0]
 802b61c:	5162      	str	r2, [r4, r5]
 802b61e:	604b      	str	r3, [r1, #4]
 802b620:	4638      	mov	r0, r7
 802b622:	f104 060b 	add.w	r6, r4, #11
 802b626:	f000 fef3 	bl	802c410 <__malloc_unlock>
 802b62a:	f026 0607 	bic.w	r6, r6, #7
 802b62e:	1d23      	adds	r3, r4, #4
 802b630:	1af2      	subs	r2, r6, r3
 802b632:	d0b6      	beq.n	802b5a2 <_malloc_r+0x22>
 802b634:	1b9b      	subs	r3, r3, r6
 802b636:	50a3      	str	r3, [r4, r2]
 802b638:	e7b3      	b.n	802b5a2 <_malloc_r+0x22>
 802b63a:	6862      	ldr	r2, [r4, #4]
 802b63c:	42a3      	cmp	r3, r4
 802b63e:	bf0c      	ite	eq
 802b640:	6032      	streq	r2, [r6, #0]
 802b642:	605a      	strne	r2, [r3, #4]
 802b644:	e7ec      	b.n	802b620 <_malloc_r+0xa0>
 802b646:	4623      	mov	r3, r4
 802b648:	6864      	ldr	r4, [r4, #4]
 802b64a:	e7b2      	b.n	802b5b2 <_malloc_r+0x32>
 802b64c:	4634      	mov	r4, r6
 802b64e:	6876      	ldr	r6, [r6, #4]
 802b650:	e7b9      	b.n	802b5c6 <_malloc_r+0x46>
 802b652:	230c      	movs	r3, #12
 802b654:	603b      	str	r3, [r7, #0]
 802b656:	4638      	mov	r0, r7
 802b658:	f000 feda 	bl	802c410 <__malloc_unlock>
 802b65c:	e7a1      	b.n	802b5a2 <_malloc_r+0x22>
 802b65e:	6025      	str	r5, [r4, #0]
 802b660:	e7de      	b.n	802b620 <_malloc_r+0xa0>
 802b662:	bf00      	nop
 802b664:	20016f90 	.word	0x20016f90

0802b668 <__sfputc_r>:
 802b668:	6893      	ldr	r3, [r2, #8]
 802b66a:	3b01      	subs	r3, #1
 802b66c:	2b00      	cmp	r3, #0
 802b66e:	b410      	push	{r4}
 802b670:	6093      	str	r3, [r2, #8]
 802b672:	da08      	bge.n	802b686 <__sfputc_r+0x1e>
 802b674:	6994      	ldr	r4, [r2, #24]
 802b676:	42a3      	cmp	r3, r4
 802b678:	db01      	blt.n	802b67e <__sfputc_r+0x16>
 802b67a:	290a      	cmp	r1, #10
 802b67c:	d103      	bne.n	802b686 <__sfputc_r+0x1e>
 802b67e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b682:	f000 bb67 	b.w	802bd54 <__swbuf_r>
 802b686:	6813      	ldr	r3, [r2, #0]
 802b688:	1c58      	adds	r0, r3, #1
 802b68a:	6010      	str	r0, [r2, #0]
 802b68c:	7019      	strb	r1, [r3, #0]
 802b68e:	4608      	mov	r0, r1
 802b690:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b694:	4770      	bx	lr

0802b696 <__sfputs_r>:
 802b696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b698:	4606      	mov	r6, r0
 802b69a:	460f      	mov	r7, r1
 802b69c:	4614      	mov	r4, r2
 802b69e:	18d5      	adds	r5, r2, r3
 802b6a0:	42ac      	cmp	r4, r5
 802b6a2:	d101      	bne.n	802b6a8 <__sfputs_r+0x12>
 802b6a4:	2000      	movs	r0, #0
 802b6a6:	e007      	b.n	802b6b8 <__sfputs_r+0x22>
 802b6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b6ac:	463a      	mov	r2, r7
 802b6ae:	4630      	mov	r0, r6
 802b6b0:	f7ff ffda 	bl	802b668 <__sfputc_r>
 802b6b4:	1c43      	adds	r3, r0, #1
 802b6b6:	d1f3      	bne.n	802b6a0 <__sfputs_r+0xa>
 802b6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b6bc <_vfiprintf_r>:
 802b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6c0:	460d      	mov	r5, r1
 802b6c2:	b09d      	sub	sp, #116	; 0x74
 802b6c4:	4614      	mov	r4, r2
 802b6c6:	4698      	mov	r8, r3
 802b6c8:	4606      	mov	r6, r0
 802b6ca:	b118      	cbz	r0, 802b6d4 <_vfiprintf_r+0x18>
 802b6cc:	6983      	ldr	r3, [r0, #24]
 802b6ce:	b90b      	cbnz	r3, 802b6d4 <_vfiprintf_r+0x18>
 802b6d0:	f000 fd7c 	bl	802c1cc <__sinit>
 802b6d4:	4b89      	ldr	r3, [pc, #548]	; (802b8fc <_vfiprintf_r+0x240>)
 802b6d6:	429d      	cmp	r5, r3
 802b6d8:	d11b      	bne.n	802b712 <_vfiprintf_r+0x56>
 802b6da:	6875      	ldr	r5, [r6, #4]
 802b6dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b6de:	07d9      	lsls	r1, r3, #31
 802b6e0:	d405      	bmi.n	802b6ee <_vfiprintf_r+0x32>
 802b6e2:	89ab      	ldrh	r3, [r5, #12]
 802b6e4:	059a      	lsls	r2, r3, #22
 802b6e6:	d402      	bmi.n	802b6ee <_vfiprintf_r+0x32>
 802b6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b6ea:	f7ff feb4 	bl	802b456 <__retarget_lock_acquire_recursive>
 802b6ee:	89ab      	ldrh	r3, [r5, #12]
 802b6f0:	071b      	lsls	r3, r3, #28
 802b6f2:	d501      	bpl.n	802b6f8 <_vfiprintf_r+0x3c>
 802b6f4:	692b      	ldr	r3, [r5, #16]
 802b6f6:	b9eb      	cbnz	r3, 802b734 <_vfiprintf_r+0x78>
 802b6f8:	4629      	mov	r1, r5
 802b6fa:	4630      	mov	r0, r6
 802b6fc:	f000 fb7c 	bl	802bdf8 <__swsetup_r>
 802b700:	b1c0      	cbz	r0, 802b734 <_vfiprintf_r+0x78>
 802b702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b704:	07dc      	lsls	r4, r3, #31
 802b706:	d50e      	bpl.n	802b726 <_vfiprintf_r+0x6a>
 802b708:	f04f 30ff 	mov.w	r0, #4294967295
 802b70c:	b01d      	add	sp, #116	; 0x74
 802b70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b712:	4b7b      	ldr	r3, [pc, #492]	; (802b900 <_vfiprintf_r+0x244>)
 802b714:	429d      	cmp	r5, r3
 802b716:	d101      	bne.n	802b71c <_vfiprintf_r+0x60>
 802b718:	68b5      	ldr	r5, [r6, #8]
 802b71a:	e7df      	b.n	802b6dc <_vfiprintf_r+0x20>
 802b71c:	4b79      	ldr	r3, [pc, #484]	; (802b904 <_vfiprintf_r+0x248>)
 802b71e:	429d      	cmp	r5, r3
 802b720:	bf08      	it	eq
 802b722:	68f5      	ldreq	r5, [r6, #12]
 802b724:	e7da      	b.n	802b6dc <_vfiprintf_r+0x20>
 802b726:	89ab      	ldrh	r3, [r5, #12]
 802b728:	0598      	lsls	r0, r3, #22
 802b72a:	d4ed      	bmi.n	802b708 <_vfiprintf_r+0x4c>
 802b72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b72e:	f7ff fe94 	bl	802b45a <__retarget_lock_release_recursive>
 802b732:	e7e9      	b.n	802b708 <_vfiprintf_r+0x4c>
 802b734:	2300      	movs	r3, #0
 802b736:	9309      	str	r3, [sp, #36]	; 0x24
 802b738:	2320      	movs	r3, #32
 802b73a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b73e:	f8cd 800c 	str.w	r8, [sp, #12]
 802b742:	2330      	movs	r3, #48	; 0x30
 802b744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802b908 <_vfiprintf_r+0x24c>
 802b748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b74c:	f04f 0901 	mov.w	r9, #1
 802b750:	4623      	mov	r3, r4
 802b752:	469a      	mov	sl, r3
 802b754:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b758:	b10a      	cbz	r2, 802b75e <_vfiprintf_r+0xa2>
 802b75a:	2a25      	cmp	r2, #37	; 0x25
 802b75c:	d1f9      	bne.n	802b752 <_vfiprintf_r+0x96>
 802b75e:	ebba 0b04 	subs.w	fp, sl, r4
 802b762:	d00b      	beq.n	802b77c <_vfiprintf_r+0xc0>
 802b764:	465b      	mov	r3, fp
 802b766:	4622      	mov	r2, r4
 802b768:	4629      	mov	r1, r5
 802b76a:	4630      	mov	r0, r6
 802b76c:	f7ff ff93 	bl	802b696 <__sfputs_r>
 802b770:	3001      	adds	r0, #1
 802b772:	f000 80aa 	beq.w	802b8ca <_vfiprintf_r+0x20e>
 802b776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b778:	445a      	add	r2, fp
 802b77a:	9209      	str	r2, [sp, #36]	; 0x24
 802b77c:	f89a 3000 	ldrb.w	r3, [sl]
 802b780:	2b00      	cmp	r3, #0
 802b782:	f000 80a2 	beq.w	802b8ca <_vfiprintf_r+0x20e>
 802b786:	2300      	movs	r3, #0
 802b788:	f04f 32ff 	mov.w	r2, #4294967295
 802b78c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b790:	f10a 0a01 	add.w	sl, sl, #1
 802b794:	9304      	str	r3, [sp, #16]
 802b796:	9307      	str	r3, [sp, #28]
 802b798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b79c:	931a      	str	r3, [sp, #104]	; 0x68
 802b79e:	4654      	mov	r4, sl
 802b7a0:	2205      	movs	r2, #5
 802b7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b7a6:	4858      	ldr	r0, [pc, #352]	; (802b908 <_vfiprintf_r+0x24c>)
 802b7a8:	f7d4 fd32 	bl	8000210 <memchr>
 802b7ac:	9a04      	ldr	r2, [sp, #16]
 802b7ae:	b9d8      	cbnz	r0, 802b7e8 <_vfiprintf_r+0x12c>
 802b7b0:	06d1      	lsls	r1, r2, #27
 802b7b2:	bf44      	itt	mi
 802b7b4:	2320      	movmi	r3, #32
 802b7b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b7ba:	0713      	lsls	r3, r2, #28
 802b7bc:	bf44      	itt	mi
 802b7be:	232b      	movmi	r3, #43	; 0x2b
 802b7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b7c4:	f89a 3000 	ldrb.w	r3, [sl]
 802b7c8:	2b2a      	cmp	r3, #42	; 0x2a
 802b7ca:	d015      	beq.n	802b7f8 <_vfiprintf_r+0x13c>
 802b7cc:	9a07      	ldr	r2, [sp, #28]
 802b7ce:	4654      	mov	r4, sl
 802b7d0:	2000      	movs	r0, #0
 802b7d2:	f04f 0c0a 	mov.w	ip, #10
 802b7d6:	4621      	mov	r1, r4
 802b7d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b7dc:	3b30      	subs	r3, #48	; 0x30
 802b7de:	2b09      	cmp	r3, #9
 802b7e0:	d94e      	bls.n	802b880 <_vfiprintf_r+0x1c4>
 802b7e2:	b1b0      	cbz	r0, 802b812 <_vfiprintf_r+0x156>
 802b7e4:	9207      	str	r2, [sp, #28]
 802b7e6:	e014      	b.n	802b812 <_vfiprintf_r+0x156>
 802b7e8:	eba0 0308 	sub.w	r3, r0, r8
 802b7ec:	fa09 f303 	lsl.w	r3, r9, r3
 802b7f0:	4313      	orrs	r3, r2
 802b7f2:	9304      	str	r3, [sp, #16]
 802b7f4:	46a2      	mov	sl, r4
 802b7f6:	e7d2      	b.n	802b79e <_vfiprintf_r+0xe2>
 802b7f8:	9b03      	ldr	r3, [sp, #12]
 802b7fa:	1d19      	adds	r1, r3, #4
 802b7fc:	681b      	ldr	r3, [r3, #0]
 802b7fe:	9103      	str	r1, [sp, #12]
 802b800:	2b00      	cmp	r3, #0
 802b802:	bfbb      	ittet	lt
 802b804:	425b      	neglt	r3, r3
 802b806:	f042 0202 	orrlt.w	r2, r2, #2
 802b80a:	9307      	strge	r3, [sp, #28]
 802b80c:	9307      	strlt	r3, [sp, #28]
 802b80e:	bfb8      	it	lt
 802b810:	9204      	strlt	r2, [sp, #16]
 802b812:	7823      	ldrb	r3, [r4, #0]
 802b814:	2b2e      	cmp	r3, #46	; 0x2e
 802b816:	d10c      	bne.n	802b832 <_vfiprintf_r+0x176>
 802b818:	7863      	ldrb	r3, [r4, #1]
 802b81a:	2b2a      	cmp	r3, #42	; 0x2a
 802b81c:	d135      	bne.n	802b88a <_vfiprintf_r+0x1ce>
 802b81e:	9b03      	ldr	r3, [sp, #12]
 802b820:	1d1a      	adds	r2, r3, #4
 802b822:	681b      	ldr	r3, [r3, #0]
 802b824:	9203      	str	r2, [sp, #12]
 802b826:	2b00      	cmp	r3, #0
 802b828:	bfb8      	it	lt
 802b82a:	f04f 33ff 	movlt.w	r3, #4294967295
 802b82e:	3402      	adds	r4, #2
 802b830:	9305      	str	r3, [sp, #20]
 802b832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802b918 <_vfiprintf_r+0x25c>
 802b836:	7821      	ldrb	r1, [r4, #0]
 802b838:	2203      	movs	r2, #3
 802b83a:	4650      	mov	r0, sl
 802b83c:	f7d4 fce8 	bl	8000210 <memchr>
 802b840:	b140      	cbz	r0, 802b854 <_vfiprintf_r+0x198>
 802b842:	2340      	movs	r3, #64	; 0x40
 802b844:	eba0 000a 	sub.w	r0, r0, sl
 802b848:	fa03 f000 	lsl.w	r0, r3, r0
 802b84c:	9b04      	ldr	r3, [sp, #16]
 802b84e:	4303      	orrs	r3, r0
 802b850:	3401      	adds	r4, #1
 802b852:	9304      	str	r3, [sp, #16]
 802b854:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b858:	482c      	ldr	r0, [pc, #176]	; (802b90c <_vfiprintf_r+0x250>)
 802b85a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b85e:	2206      	movs	r2, #6
 802b860:	f7d4 fcd6 	bl	8000210 <memchr>
 802b864:	2800      	cmp	r0, #0
 802b866:	d03f      	beq.n	802b8e8 <_vfiprintf_r+0x22c>
 802b868:	4b29      	ldr	r3, [pc, #164]	; (802b910 <_vfiprintf_r+0x254>)
 802b86a:	bb1b      	cbnz	r3, 802b8b4 <_vfiprintf_r+0x1f8>
 802b86c:	9b03      	ldr	r3, [sp, #12]
 802b86e:	3307      	adds	r3, #7
 802b870:	f023 0307 	bic.w	r3, r3, #7
 802b874:	3308      	adds	r3, #8
 802b876:	9303      	str	r3, [sp, #12]
 802b878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b87a:	443b      	add	r3, r7
 802b87c:	9309      	str	r3, [sp, #36]	; 0x24
 802b87e:	e767      	b.n	802b750 <_vfiprintf_r+0x94>
 802b880:	fb0c 3202 	mla	r2, ip, r2, r3
 802b884:	460c      	mov	r4, r1
 802b886:	2001      	movs	r0, #1
 802b888:	e7a5      	b.n	802b7d6 <_vfiprintf_r+0x11a>
 802b88a:	2300      	movs	r3, #0
 802b88c:	3401      	adds	r4, #1
 802b88e:	9305      	str	r3, [sp, #20]
 802b890:	4619      	mov	r1, r3
 802b892:	f04f 0c0a 	mov.w	ip, #10
 802b896:	4620      	mov	r0, r4
 802b898:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b89c:	3a30      	subs	r2, #48	; 0x30
 802b89e:	2a09      	cmp	r2, #9
 802b8a0:	d903      	bls.n	802b8aa <_vfiprintf_r+0x1ee>
 802b8a2:	2b00      	cmp	r3, #0
 802b8a4:	d0c5      	beq.n	802b832 <_vfiprintf_r+0x176>
 802b8a6:	9105      	str	r1, [sp, #20]
 802b8a8:	e7c3      	b.n	802b832 <_vfiprintf_r+0x176>
 802b8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 802b8ae:	4604      	mov	r4, r0
 802b8b0:	2301      	movs	r3, #1
 802b8b2:	e7f0      	b.n	802b896 <_vfiprintf_r+0x1da>
 802b8b4:	ab03      	add	r3, sp, #12
 802b8b6:	9300      	str	r3, [sp, #0]
 802b8b8:	462a      	mov	r2, r5
 802b8ba:	4b16      	ldr	r3, [pc, #88]	; (802b914 <_vfiprintf_r+0x258>)
 802b8bc:	a904      	add	r1, sp, #16
 802b8be:	4630      	mov	r0, r6
 802b8c0:	f3af 8000 	nop.w
 802b8c4:	4607      	mov	r7, r0
 802b8c6:	1c78      	adds	r0, r7, #1
 802b8c8:	d1d6      	bne.n	802b878 <_vfiprintf_r+0x1bc>
 802b8ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b8cc:	07d9      	lsls	r1, r3, #31
 802b8ce:	d405      	bmi.n	802b8dc <_vfiprintf_r+0x220>
 802b8d0:	89ab      	ldrh	r3, [r5, #12]
 802b8d2:	059a      	lsls	r2, r3, #22
 802b8d4:	d402      	bmi.n	802b8dc <_vfiprintf_r+0x220>
 802b8d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b8d8:	f7ff fdbf 	bl	802b45a <__retarget_lock_release_recursive>
 802b8dc:	89ab      	ldrh	r3, [r5, #12]
 802b8de:	065b      	lsls	r3, r3, #25
 802b8e0:	f53f af12 	bmi.w	802b708 <_vfiprintf_r+0x4c>
 802b8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b8e6:	e711      	b.n	802b70c <_vfiprintf_r+0x50>
 802b8e8:	ab03      	add	r3, sp, #12
 802b8ea:	9300      	str	r3, [sp, #0]
 802b8ec:	462a      	mov	r2, r5
 802b8ee:	4b09      	ldr	r3, [pc, #36]	; (802b914 <_vfiprintf_r+0x258>)
 802b8f0:	a904      	add	r1, sp, #16
 802b8f2:	4630      	mov	r0, r6
 802b8f4:	f000 f880 	bl	802b9f8 <_printf_i>
 802b8f8:	e7e4      	b.n	802b8c4 <_vfiprintf_r+0x208>
 802b8fa:	bf00      	nop
 802b8fc:	0803173c 	.word	0x0803173c
 802b900:	0803175c 	.word	0x0803175c
 802b904:	0803171c 	.word	0x0803171c
 802b908:	080316e4 	.word	0x080316e4
 802b90c:	080316ee 	.word	0x080316ee
 802b910:	00000000 	.word	0x00000000
 802b914:	0802b697 	.word	0x0802b697
 802b918:	080316ea 	.word	0x080316ea

0802b91c <_printf_common>:
 802b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b920:	4616      	mov	r6, r2
 802b922:	4699      	mov	r9, r3
 802b924:	688a      	ldr	r2, [r1, #8]
 802b926:	690b      	ldr	r3, [r1, #16]
 802b928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b92c:	4293      	cmp	r3, r2
 802b92e:	bfb8      	it	lt
 802b930:	4613      	movlt	r3, r2
 802b932:	6033      	str	r3, [r6, #0]
 802b934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b938:	4607      	mov	r7, r0
 802b93a:	460c      	mov	r4, r1
 802b93c:	b10a      	cbz	r2, 802b942 <_printf_common+0x26>
 802b93e:	3301      	adds	r3, #1
 802b940:	6033      	str	r3, [r6, #0]
 802b942:	6823      	ldr	r3, [r4, #0]
 802b944:	0699      	lsls	r1, r3, #26
 802b946:	bf42      	ittt	mi
 802b948:	6833      	ldrmi	r3, [r6, #0]
 802b94a:	3302      	addmi	r3, #2
 802b94c:	6033      	strmi	r3, [r6, #0]
 802b94e:	6825      	ldr	r5, [r4, #0]
 802b950:	f015 0506 	ands.w	r5, r5, #6
 802b954:	d106      	bne.n	802b964 <_printf_common+0x48>
 802b956:	f104 0a19 	add.w	sl, r4, #25
 802b95a:	68e3      	ldr	r3, [r4, #12]
 802b95c:	6832      	ldr	r2, [r6, #0]
 802b95e:	1a9b      	subs	r3, r3, r2
 802b960:	42ab      	cmp	r3, r5
 802b962:	dc26      	bgt.n	802b9b2 <_printf_common+0x96>
 802b964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b968:	1e13      	subs	r3, r2, #0
 802b96a:	6822      	ldr	r2, [r4, #0]
 802b96c:	bf18      	it	ne
 802b96e:	2301      	movne	r3, #1
 802b970:	0692      	lsls	r2, r2, #26
 802b972:	d42b      	bmi.n	802b9cc <_printf_common+0xb0>
 802b974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b978:	4649      	mov	r1, r9
 802b97a:	4638      	mov	r0, r7
 802b97c:	47c0      	blx	r8
 802b97e:	3001      	adds	r0, #1
 802b980:	d01e      	beq.n	802b9c0 <_printf_common+0xa4>
 802b982:	6823      	ldr	r3, [r4, #0]
 802b984:	68e5      	ldr	r5, [r4, #12]
 802b986:	6832      	ldr	r2, [r6, #0]
 802b988:	f003 0306 	and.w	r3, r3, #6
 802b98c:	2b04      	cmp	r3, #4
 802b98e:	bf08      	it	eq
 802b990:	1aad      	subeq	r5, r5, r2
 802b992:	68a3      	ldr	r3, [r4, #8]
 802b994:	6922      	ldr	r2, [r4, #16]
 802b996:	bf0c      	ite	eq
 802b998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b99c:	2500      	movne	r5, #0
 802b99e:	4293      	cmp	r3, r2
 802b9a0:	bfc4      	itt	gt
 802b9a2:	1a9b      	subgt	r3, r3, r2
 802b9a4:	18ed      	addgt	r5, r5, r3
 802b9a6:	2600      	movs	r6, #0
 802b9a8:	341a      	adds	r4, #26
 802b9aa:	42b5      	cmp	r5, r6
 802b9ac:	d11a      	bne.n	802b9e4 <_printf_common+0xc8>
 802b9ae:	2000      	movs	r0, #0
 802b9b0:	e008      	b.n	802b9c4 <_printf_common+0xa8>
 802b9b2:	2301      	movs	r3, #1
 802b9b4:	4652      	mov	r2, sl
 802b9b6:	4649      	mov	r1, r9
 802b9b8:	4638      	mov	r0, r7
 802b9ba:	47c0      	blx	r8
 802b9bc:	3001      	adds	r0, #1
 802b9be:	d103      	bne.n	802b9c8 <_printf_common+0xac>
 802b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 802b9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b9c8:	3501      	adds	r5, #1
 802b9ca:	e7c6      	b.n	802b95a <_printf_common+0x3e>
 802b9cc:	18e1      	adds	r1, r4, r3
 802b9ce:	1c5a      	adds	r2, r3, #1
 802b9d0:	2030      	movs	r0, #48	; 0x30
 802b9d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b9d6:	4422      	add	r2, r4
 802b9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b9dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b9e0:	3302      	adds	r3, #2
 802b9e2:	e7c7      	b.n	802b974 <_printf_common+0x58>
 802b9e4:	2301      	movs	r3, #1
 802b9e6:	4622      	mov	r2, r4
 802b9e8:	4649      	mov	r1, r9
 802b9ea:	4638      	mov	r0, r7
 802b9ec:	47c0      	blx	r8
 802b9ee:	3001      	adds	r0, #1
 802b9f0:	d0e6      	beq.n	802b9c0 <_printf_common+0xa4>
 802b9f2:	3601      	adds	r6, #1
 802b9f4:	e7d9      	b.n	802b9aa <_printf_common+0x8e>
	...

0802b9f8 <_printf_i>:
 802b9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b9fc:	7e0f      	ldrb	r7, [r1, #24]
 802b9fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802ba00:	2f78      	cmp	r7, #120	; 0x78
 802ba02:	4691      	mov	r9, r2
 802ba04:	4680      	mov	r8, r0
 802ba06:	460c      	mov	r4, r1
 802ba08:	469a      	mov	sl, r3
 802ba0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802ba0e:	d807      	bhi.n	802ba20 <_printf_i+0x28>
 802ba10:	2f62      	cmp	r7, #98	; 0x62
 802ba12:	d80a      	bhi.n	802ba2a <_printf_i+0x32>
 802ba14:	2f00      	cmp	r7, #0
 802ba16:	f000 80d8 	beq.w	802bbca <_printf_i+0x1d2>
 802ba1a:	2f58      	cmp	r7, #88	; 0x58
 802ba1c:	f000 80a3 	beq.w	802bb66 <_printf_i+0x16e>
 802ba20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ba24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ba28:	e03a      	b.n	802baa0 <_printf_i+0xa8>
 802ba2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ba2e:	2b15      	cmp	r3, #21
 802ba30:	d8f6      	bhi.n	802ba20 <_printf_i+0x28>
 802ba32:	a101      	add	r1, pc, #4	; (adr r1, 802ba38 <_printf_i+0x40>)
 802ba34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ba38:	0802ba91 	.word	0x0802ba91
 802ba3c:	0802baa5 	.word	0x0802baa5
 802ba40:	0802ba21 	.word	0x0802ba21
 802ba44:	0802ba21 	.word	0x0802ba21
 802ba48:	0802ba21 	.word	0x0802ba21
 802ba4c:	0802ba21 	.word	0x0802ba21
 802ba50:	0802baa5 	.word	0x0802baa5
 802ba54:	0802ba21 	.word	0x0802ba21
 802ba58:	0802ba21 	.word	0x0802ba21
 802ba5c:	0802ba21 	.word	0x0802ba21
 802ba60:	0802ba21 	.word	0x0802ba21
 802ba64:	0802bbb1 	.word	0x0802bbb1
 802ba68:	0802bad5 	.word	0x0802bad5
 802ba6c:	0802bb93 	.word	0x0802bb93
 802ba70:	0802ba21 	.word	0x0802ba21
 802ba74:	0802ba21 	.word	0x0802ba21
 802ba78:	0802bbd3 	.word	0x0802bbd3
 802ba7c:	0802ba21 	.word	0x0802ba21
 802ba80:	0802bad5 	.word	0x0802bad5
 802ba84:	0802ba21 	.word	0x0802ba21
 802ba88:	0802ba21 	.word	0x0802ba21
 802ba8c:	0802bb9b 	.word	0x0802bb9b
 802ba90:	682b      	ldr	r3, [r5, #0]
 802ba92:	1d1a      	adds	r2, r3, #4
 802ba94:	681b      	ldr	r3, [r3, #0]
 802ba96:	602a      	str	r2, [r5, #0]
 802ba98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ba9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802baa0:	2301      	movs	r3, #1
 802baa2:	e0a3      	b.n	802bbec <_printf_i+0x1f4>
 802baa4:	6820      	ldr	r0, [r4, #0]
 802baa6:	6829      	ldr	r1, [r5, #0]
 802baa8:	0606      	lsls	r6, r0, #24
 802baaa:	f101 0304 	add.w	r3, r1, #4
 802baae:	d50a      	bpl.n	802bac6 <_printf_i+0xce>
 802bab0:	680e      	ldr	r6, [r1, #0]
 802bab2:	602b      	str	r3, [r5, #0]
 802bab4:	2e00      	cmp	r6, #0
 802bab6:	da03      	bge.n	802bac0 <_printf_i+0xc8>
 802bab8:	232d      	movs	r3, #45	; 0x2d
 802baba:	4276      	negs	r6, r6
 802babc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bac0:	485e      	ldr	r0, [pc, #376]	; (802bc3c <_printf_i+0x244>)
 802bac2:	230a      	movs	r3, #10
 802bac4:	e019      	b.n	802bafa <_printf_i+0x102>
 802bac6:	680e      	ldr	r6, [r1, #0]
 802bac8:	602b      	str	r3, [r5, #0]
 802baca:	f010 0f40 	tst.w	r0, #64	; 0x40
 802bace:	bf18      	it	ne
 802bad0:	b236      	sxthne	r6, r6
 802bad2:	e7ef      	b.n	802bab4 <_printf_i+0xbc>
 802bad4:	682b      	ldr	r3, [r5, #0]
 802bad6:	6820      	ldr	r0, [r4, #0]
 802bad8:	1d19      	adds	r1, r3, #4
 802bada:	6029      	str	r1, [r5, #0]
 802badc:	0601      	lsls	r1, r0, #24
 802bade:	d501      	bpl.n	802bae4 <_printf_i+0xec>
 802bae0:	681e      	ldr	r6, [r3, #0]
 802bae2:	e002      	b.n	802baea <_printf_i+0xf2>
 802bae4:	0646      	lsls	r6, r0, #25
 802bae6:	d5fb      	bpl.n	802bae0 <_printf_i+0xe8>
 802bae8:	881e      	ldrh	r6, [r3, #0]
 802baea:	4854      	ldr	r0, [pc, #336]	; (802bc3c <_printf_i+0x244>)
 802baec:	2f6f      	cmp	r7, #111	; 0x6f
 802baee:	bf0c      	ite	eq
 802baf0:	2308      	moveq	r3, #8
 802baf2:	230a      	movne	r3, #10
 802baf4:	2100      	movs	r1, #0
 802baf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802bafa:	6865      	ldr	r5, [r4, #4]
 802bafc:	60a5      	str	r5, [r4, #8]
 802bafe:	2d00      	cmp	r5, #0
 802bb00:	bfa2      	ittt	ge
 802bb02:	6821      	ldrge	r1, [r4, #0]
 802bb04:	f021 0104 	bicge.w	r1, r1, #4
 802bb08:	6021      	strge	r1, [r4, #0]
 802bb0a:	b90e      	cbnz	r6, 802bb10 <_printf_i+0x118>
 802bb0c:	2d00      	cmp	r5, #0
 802bb0e:	d04d      	beq.n	802bbac <_printf_i+0x1b4>
 802bb10:	4615      	mov	r5, r2
 802bb12:	fbb6 f1f3 	udiv	r1, r6, r3
 802bb16:	fb03 6711 	mls	r7, r3, r1, r6
 802bb1a:	5dc7      	ldrb	r7, [r0, r7]
 802bb1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802bb20:	4637      	mov	r7, r6
 802bb22:	42bb      	cmp	r3, r7
 802bb24:	460e      	mov	r6, r1
 802bb26:	d9f4      	bls.n	802bb12 <_printf_i+0x11a>
 802bb28:	2b08      	cmp	r3, #8
 802bb2a:	d10b      	bne.n	802bb44 <_printf_i+0x14c>
 802bb2c:	6823      	ldr	r3, [r4, #0]
 802bb2e:	07de      	lsls	r6, r3, #31
 802bb30:	d508      	bpl.n	802bb44 <_printf_i+0x14c>
 802bb32:	6923      	ldr	r3, [r4, #16]
 802bb34:	6861      	ldr	r1, [r4, #4]
 802bb36:	4299      	cmp	r1, r3
 802bb38:	bfde      	ittt	le
 802bb3a:	2330      	movle	r3, #48	; 0x30
 802bb3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 802bb40:	f105 35ff 	addle.w	r5, r5, #4294967295
 802bb44:	1b52      	subs	r2, r2, r5
 802bb46:	6122      	str	r2, [r4, #16]
 802bb48:	f8cd a000 	str.w	sl, [sp]
 802bb4c:	464b      	mov	r3, r9
 802bb4e:	aa03      	add	r2, sp, #12
 802bb50:	4621      	mov	r1, r4
 802bb52:	4640      	mov	r0, r8
 802bb54:	f7ff fee2 	bl	802b91c <_printf_common>
 802bb58:	3001      	adds	r0, #1
 802bb5a:	d14c      	bne.n	802bbf6 <_printf_i+0x1fe>
 802bb5c:	f04f 30ff 	mov.w	r0, #4294967295
 802bb60:	b004      	add	sp, #16
 802bb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bb66:	4835      	ldr	r0, [pc, #212]	; (802bc3c <_printf_i+0x244>)
 802bb68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802bb6c:	6829      	ldr	r1, [r5, #0]
 802bb6e:	6823      	ldr	r3, [r4, #0]
 802bb70:	f851 6b04 	ldr.w	r6, [r1], #4
 802bb74:	6029      	str	r1, [r5, #0]
 802bb76:	061d      	lsls	r5, r3, #24
 802bb78:	d514      	bpl.n	802bba4 <_printf_i+0x1ac>
 802bb7a:	07df      	lsls	r7, r3, #31
 802bb7c:	bf44      	itt	mi
 802bb7e:	f043 0320 	orrmi.w	r3, r3, #32
 802bb82:	6023      	strmi	r3, [r4, #0]
 802bb84:	b91e      	cbnz	r6, 802bb8e <_printf_i+0x196>
 802bb86:	6823      	ldr	r3, [r4, #0]
 802bb88:	f023 0320 	bic.w	r3, r3, #32
 802bb8c:	6023      	str	r3, [r4, #0]
 802bb8e:	2310      	movs	r3, #16
 802bb90:	e7b0      	b.n	802baf4 <_printf_i+0xfc>
 802bb92:	6823      	ldr	r3, [r4, #0]
 802bb94:	f043 0320 	orr.w	r3, r3, #32
 802bb98:	6023      	str	r3, [r4, #0]
 802bb9a:	2378      	movs	r3, #120	; 0x78
 802bb9c:	4828      	ldr	r0, [pc, #160]	; (802bc40 <_printf_i+0x248>)
 802bb9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802bba2:	e7e3      	b.n	802bb6c <_printf_i+0x174>
 802bba4:	0659      	lsls	r1, r3, #25
 802bba6:	bf48      	it	mi
 802bba8:	b2b6      	uxthmi	r6, r6
 802bbaa:	e7e6      	b.n	802bb7a <_printf_i+0x182>
 802bbac:	4615      	mov	r5, r2
 802bbae:	e7bb      	b.n	802bb28 <_printf_i+0x130>
 802bbb0:	682b      	ldr	r3, [r5, #0]
 802bbb2:	6826      	ldr	r6, [r4, #0]
 802bbb4:	6961      	ldr	r1, [r4, #20]
 802bbb6:	1d18      	adds	r0, r3, #4
 802bbb8:	6028      	str	r0, [r5, #0]
 802bbba:	0635      	lsls	r5, r6, #24
 802bbbc:	681b      	ldr	r3, [r3, #0]
 802bbbe:	d501      	bpl.n	802bbc4 <_printf_i+0x1cc>
 802bbc0:	6019      	str	r1, [r3, #0]
 802bbc2:	e002      	b.n	802bbca <_printf_i+0x1d2>
 802bbc4:	0670      	lsls	r0, r6, #25
 802bbc6:	d5fb      	bpl.n	802bbc0 <_printf_i+0x1c8>
 802bbc8:	8019      	strh	r1, [r3, #0]
 802bbca:	2300      	movs	r3, #0
 802bbcc:	6123      	str	r3, [r4, #16]
 802bbce:	4615      	mov	r5, r2
 802bbd0:	e7ba      	b.n	802bb48 <_printf_i+0x150>
 802bbd2:	682b      	ldr	r3, [r5, #0]
 802bbd4:	1d1a      	adds	r2, r3, #4
 802bbd6:	602a      	str	r2, [r5, #0]
 802bbd8:	681d      	ldr	r5, [r3, #0]
 802bbda:	6862      	ldr	r2, [r4, #4]
 802bbdc:	2100      	movs	r1, #0
 802bbde:	4628      	mov	r0, r5
 802bbe0:	f7d4 fb16 	bl	8000210 <memchr>
 802bbe4:	b108      	cbz	r0, 802bbea <_printf_i+0x1f2>
 802bbe6:	1b40      	subs	r0, r0, r5
 802bbe8:	6060      	str	r0, [r4, #4]
 802bbea:	6863      	ldr	r3, [r4, #4]
 802bbec:	6123      	str	r3, [r4, #16]
 802bbee:	2300      	movs	r3, #0
 802bbf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bbf4:	e7a8      	b.n	802bb48 <_printf_i+0x150>
 802bbf6:	6923      	ldr	r3, [r4, #16]
 802bbf8:	462a      	mov	r2, r5
 802bbfa:	4649      	mov	r1, r9
 802bbfc:	4640      	mov	r0, r8
 802bbfe:	47d0      	blx	sl
 802bc00:	3001      	adds	r0, #1
 802bc02:	d0ab      	beq.n	802bb5c <_printf_i+0x164>
 802bc04:	6823      	ldr	r3, [r4, #0]
 802bc06:	079b      	lsls	r3, r3, #30
 802bc08:	d413      	bmi.n	802bc32 <_printf_i+0x23a>
 802bc0a:	68e0      	ldr	r0, [r4, #12]
 802bc0c:	9b03      	ldr	r3, [sp, #12]
 802bc0e:	4298      	cmp	r0, r3
 802bc10:	bfb8      	it	lt
 802bc12:	4618      	movlt	r0, r3
 802bc14:	e7a4      	b.n	802bb60 <_printf_i+0x168>
 802bc16:	2301      	movs	r3, #1
 802bc18:	4632      	mov	r2, r6
 802bc1a:	4649      	mov	r1, r9
 802bc1c:	4640      	mov	r0, r8
 802bc1e:	47d0      	blx	sl
 802bc20:	3001      	adds	r0, #1
 802bc22:	d09b      	beq.n	802bb5c <_printf_i+0x164>
 802bc24:	3501      	adds	r5, #1
 802bc26:	68e3      	ldr	r3, [r4, #12]
 802bc28:	9903      	ldr	r1, [sp, #12]
 802bc2a:	1a5b      	subs	r3, r3, r1
 802bc2c:	42ab      	cmp	r3, r5
 802bc2e:	dcf2      	bgt.n	802bc16 <_printf_i+0x21e>
 802bc30:	e7eb      	b.n	802bc0a <_printf_i+0x212>
 802bc32:	2500      	movs	r5, #0
 802bc34:	f104 0619 	add.w	r6, r4, #25
 802bc38:	e7f5      	b.n	802bc26 <_printf_i+0x22e>
 802bc3a:	bf00      	nop
 802bc3c:	080316f5 	.word	0x080316f5
 802bc40:	08031706 	.word	0x08031706

0802bc44 <_sbrk_r>:
 802bc44:	b538      	push	{r3, r4, r5, lr}
 802bc46:	4d06      	ldr	r5, [pc, #24]	; (802bc60 <_sbrk_r+0x1c>)
 802bc48:	2300      	movs	r3, #0
 802bc4a:	4604      	mov	r4, r0
 802bc4c:	4608      	mov	r0, r1
 802bc4e:	602b      	str	r3, [r5, #0]
 802bc50:	f7d5 feb0 	bl	80019b4 <_sbrk>
 802bc54:	1c43      	adds	r3, r0, #1
 802bc56:	d102      	bne.n	802bc5e <_sbrk_r+0x1a>
 802bc58:	682b      	ldr	r3, [r5, #0]
 802bc5a:	b103      	cbz	r3, 802bc5e <_sbrk_r+0x1a>
 802bc5c:	6023      	str	r3, [r4, #0]
 802bc5e:	bd38      	pop	{r3, r4, r5, pc}
 802bc60:	20017130 	.word	0x20017130

0802bc64 <_raise_r>:
 802bc64:	291f      	cmp	r1, #31
 802bc66:	b538      	push	{r3, r4, r5, lr}
 802bc68:	4604      	mov	r4, r0
 802bc6a:	460d      	mov	r5, r1
 802bc6c:	d904      	bls.n	802bc78 <_raise_r+0x14>
 802bc6e:	2316      	movs	r3, #22
 802bc70:	6003      	str	r3, [r0, #0]
 802bc72:	f04f 30ff 	mov.w	r0, #4294967295
 802bc76:	bd38      	pop	{r3, r4, r5, pc}
 802bc78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802bc7a:	b112      	cbz	r2, 802bc82 <_raise_r+0x1e>
 802bc7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bc80:	b94b      	cbnz	r3, 802bc96 <_raise_r+0x32>
 802bc82:	4620      	mov	r0, r4
 802bc84:	f000 f830 	bl	802bce8 <_getpid_r>
 802bc88:	462a      	mov	r2, r5
 802bc8a:	4601      	mov	r1, r0
 802bc8c:	4620      	mov	r0, r4
 802bc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bc92:	f000 b817 	b.w	802bcc4 <_kill_r>
 802bc96:	2b01      	cmp	r3, #1
 802bc98:	d00a      	beq.n	802bcb0 <_raise_r+0x4c>
 802bc9a:	1c59      	adds	r1, r3, #1
 802bc9c:	d103      	bne.n	802bca6 <_raise_r+0x42>
 802bc9e:	2316      	movs	r3, #22
 802bca0:	6003      	str	r3, [r0, #0]
 802bca2:	2001      	movs	r0, #1
 802bca4:	e7e7      	b.n	802bc76 <_raise_r+0x12>
 802bca6:	2400      	movs	r4, #0
 802bca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802bcac:	4628      	mov	r0, r5
 802bcae:	4798      	blx	r3
 802bcb0:	2000      	movs	r0, #0
 802bcb2:	e7e0      	b.n	802bc76 <_raise_r+0x12>

0802bcb4 <raise>:
 802bcb4:	4b02      	ldr	r3, [pc, #8]	; (802bcc0 <raise+0xc>)
 802bcb6:	4601      	mov	r1, r0
 802bcb8:	6818      	ldr	r0, [r3, #0]
 802bcba:	f7ff bfd3 	b.w	802bc64 <_raise_r>
 802bcbe:	bf00      	nop
 802bcc0:	200000bc 	.word	0x200000bc

0802bcc4 <_kill_r>:
 802bcc4:	b538      	push	{r3, r4, r5, lr}
 802bcc6:	4d07      	ldr	r5, [pc, #28]	; (802bce4 <_kill_r+0x20>)
 802bcc8:	2300      	movs	r3, #0
 802bcca:	4604      	mov	r4, r0
 802bccc:	4608      	mov	r0, r1
 802bcce:	4611      	mov	r1, r2
 802bcd0:	602b      	str	r3, [r5, #0]
 802bcd2:	f7d5 fe39 	bl	8001948 <_kill>
 802bcd6:	1c43      	adds	r3, r0, #1
 802bcd8:	d102      	bne.n	802bce0 <_kill_r+0x1c>
 802bcda:	682b      	ldr	r3, [r5, #0]
 802bcdc:	b103      	cbz	r3, 802bce0 <_kill_r+0x1c>
 802bcde:	6023      	str	r3, [r4, #0]
 802bce0:	bd38      	pop	{r3, r4, r5, pc}
 802bce2:	bf00      	nop
 802bce4:	20017130 	.word	0x20017130

0802bce8 <_getpid_r>:
 802bce8:	f7d5 be2c 	b.w	8001944 <_getpid>

0802bcec <siprintf>:
 802bcec:	b40e      	push	{r1, r2, r3}
 802bcee:	b500      	push	{lr}
 802bcf0:	b09c      	sub	sp, #112	; 0x70
 802bcf2:	ab1d      	add	r3, sp, #116	; 0x74
 802bcf4:	9002      	str	r0, [sp, #8]
 802bcf6:	9006      	str	r0, [sp, #24]
 802bcf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802bcfc:	4809      	ldr	r0, [pc, #36]	; (802bd24 <siprintf+0x38>)
 802bcfe:	9107      	str	r1, [sp, #28]
 802bd00:	9104      	str	r1, [sp, #16]
 802bd02:	4909      	ldr	r1, [pc, #36]	; (802bd28 <siprintf+0x3c>)
 802bd04:	f853 2b04 	ldr.w	r2, [r3], #4
 802bd08:	9105      	str	r1, [sp, #20]
 802bd0a:	6800      	ldr	r0, [r0, #0]
 802bd0c:	9301      	str	r3, [sp, #4]
 802bd0e:	a902      	add	r1, sp, #8
 802bd10:	f000 fc0e 	bl	802c530 <_svfiprintf_r>
 802bd14:	9b02      	ldr	r3, [sp, #8]
 802bd16:	2200      	movs	r2, #0
 802bd18:	701a      	strb	r2, [r3, #0]
 802bd1a:	b01c      	add	sp, #112	; 0x70
 802bd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 802bd20:	b003      	add	sp, #12
 802bd22:	4770      	bx	lr
 802bd24:	200000bc 	.word	0x200000bc
 802bd28:	ffff0208 	.word	0xffff0208

0802bd2c <strncmp>:
 802bd2c:	b510      	push	{r4, lr}
 802bd2e:	b17a      	cbz	r2, 802bd50 <strncmp+0x24>
 802bd30:	4603      	mov	r3, r0
 802bd32:	3901      	subs	r1, #1
 802bd34:	1884      	adds	r4, r0, r2
 802bd36:	f813 0b01 	ldrb.w	r0, [r3], #1
 802bd3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802bd3e:	4290      	cmp	r0, r2
 802bd40:	d101      	bne.n	802bd46 <strncmp+0x1a>
 802bd42:	42a3      	cmp	r3, r4
 802bd44:	d101      	bne.n	802bd4a <strncmp+0x1e>
 802bd46:	1a80      	subs	r0, r0, r2
 802bd48:	bd10      	pop	{r4, pc}
 802bd4a:	2800      	cmp	r0, #0
 802bd4c:	d1f3      	bne.n	802bd36 <strncmp+0xa>
 802bd4e:	e7fa      	b.n	802bd46 <strncmp+0x1a>
 802bd50:	4610      	mov	r0, r2
 802bd52:	e7f9      	b.n	802bd48 <strncmp+0x1c>

0802bd54 <__swbuf_r>:
 802bd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bd56:	460e      	mov	r6, r1
 802bd58:	4614      	mov	r4, r2
 802bd5a:	4605      	mov	r5, r0
 802bd5c:	b118      	cbz	r0, 802bd66 <__swbuf_r+0x12>
 802bd5e:	6983      	ldr	r3, [r0, #24]
 802bd60:	b90b      	cbnz	r3, 802bd66 <__swbuf_r+0x12>
 802bd62:	f000 fa33 	bl	802c1cc <__sinit>
 802bd66:	4b21      	ldr	r3, [pc, #132]	; (802bdec <__swbuf_r+0x98>)
 802bd68:	429c      	cmp	r4, r3
 802bd6a:	d12b      	bne.n	802bdc4 <__swbuf_r+0x70>
 802bd6c:	686c      	ldr	r4, [r5, #4]
 802bd6e:	69a3      	ldr	r3, [r4, #24]
 802bd70:	60a3      	str	r3, [r4, #8]
 802bd72:	89a3      	ldrh	r3, [r4, #12]
 802bd74:	071a      	lsls	r2, r3, #28
 802bd76:	d52f      	bpl.n	802bdd8 <__swbuf_r+0x84>
 802bd78:	6923      	ldr	r3, [r4, #16]
 802bd7a:	b36b      	cbz	r3, 802bdd8 <__swbuf_r+0x84>
 802bd7c:	6923      	ldr	r3, [r4, #16]
 802bd7e:	6820      	ldr	r0, [r4, #0]
 802bd80:	1ac0      	subs	r0, r0, r3
 802bd82:	6963      	ldr	r3, [r4, #20]
 802bd84:	b2f6      	uxtb	r6, r6
 802bd86:	4283      	cmp	r3, r0
 802bd88:	4637      	mov	r7, r6
 802bd8a:	dc04      	bgt.n	802bd96 <__swbuf_r+0x42>
 802bd8c:	4621      	mov	r1, r4
 802bd8e:	4628      	mov	r0, r5
 802bd90:	f000 f988 	bl	802c0a4 <_fflush_r>
 802bd94:	bb30      	cbnz	r0, 802bde4 <__swbuf_r+0x90>
 802bd96:	68a3      	ldr	r3, [r4, #8]
 802bd98:	3b01      	subs	r3, #1
 802bd9a:	60a3      	str	r3, [r4, #8]
 802bd9c:	6823      	ldr	r3, [r4, #0]
 802bd9e:	1c5a      	adds	r2, r3, #1
 802bda0:	6022      	str	r2, [r4, #0]
 802bda2:	701e      	strb	r6, [r3, #0]
 802bda4:	6963      	ldr	r3, [r4, #20]
 802bda6:	3001      	adds	r0, #1
 802bda8:	4283      	cmp	r3, r0
 802bdaa:	d004      	beq.n	802bdb6 <__swbuf_r+0x62>
 802bdac:	89a3      	ldrh	r3, [r4, #12]
 802bdae:	07db      	lsls	r3, r3, #31
 802bdb0:	d506      	bpl.n	802bdc0 <__swbuf_r+0x6c>
 802bdb2:	2e0a      	cmp	r6, #10
 802bdb4:	d104      	bne.n	802bdc0 <__swbuf_r+0x6c>
 802bdb6:	4621      	mov	r1, r4
 802bdb8:	4628      	mov	r0, r5
 802bdba:	f000 f973 	bl	802c0a4 <_fflush_r>
 802bdbe:	b988      	cbnz	r0, 802bde4 <__swbuf_r+0x90>
 802bdc0:	4638      	mov	r0, r7
 802bdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bdc4:	4b0a      	ldr	r3, [pc, #40]	; (802bdf0 <__swbuf_r+0x9c>)
 802bdc6:	429c      	cmp	r4, r3
 802bdc8:	d101      	bne.n	802bdce <__swbuf_r+0x7a>
 802bdca:	68ac      	ldr	r4, [r5, #8]
 802bdcc:	e7cf      	b.n	802bd6e <__swbuf_r+0x1a>
 802bdce:	4b09      	ldr	r3, [pc, #36]	; (802bdf4 <__swbuf_r+0xa0>)
 802bdd0:	429c      	cmp	r4, r3
 802bdd2:	bf08      	it	eq
 802bdd4:	68ec      	ldreq	r4, [r5, #12]
 802bdd6:	e7ca      	b.n	802bd6e <__swbuf_r+0x1a>
 802bdd8:	4621      	mov	r1, r4
 802bdda:	4628      	mov	r0, r5
 802bddc:	f000 f80c 	bl	802bdf8 <__swsetup_r>
 802bde0:	2800      	cmp	r0, #0
 802bde2:	d0cb      	beq.n	802bd7c <__swbuf_r+0x28>
 802bde4:	f04f 37ff 	mov.w	r7, #4294967295
 802bde8:	e7ea      	b.n	802bdc0 <__swbuf_r+0x6c>
 802bdea:	bf00      	nop
 802bdec:	0803173c 	.word	0x0803173c
 802bdf0:	0803175c 	.word	0x0803175c
 802bdf4:	0803171c 	.word	0x0803171c

0802bdf8 <__swsetup_r>:
 802bdf8:	4b32      	ldr	r3, [pc, #200]	; (802bec4 <__swsetup_r+0xcc>)
 802bdfa:	b570      	push	{r4, r5, r6, lr}
 802bdfc:	681d      	ldr	r5, [r3, #0]
 802bdfe:	4606      	mov	r6, r0
 802be00:	460c      	mov	r4, r1
 802be02:	b125      	cbz	r5, 802be0e <__swsetup_r+0x16>
 802be04:	69ab      	ldr	r3, [r5, #24]
 802be06:	b913      	cbnz	r3, 802be0e <__swsetup_r+0x16>
 802be08:	4628      	mov	r0, r5
 802be0a:	f000 f9df 	bl	802c1cc <__sinit>
 802be0e:	4b2e      	ldr	r3, [pc, #184]	; (802bec8 <__swsetup_r+0xd0>)
 802be10:	429c      	cmp	r4, r3
 802be12:	d10f      	bne.n	802be34 <__swsetup_r+0x3c>
 802be14:	686c      	ldr	r4, [r5, #4]
 802be16:	89a3      	ldrh	r3, [r4, #12]
 802be18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802be1c:	0719      	lsls	r1, r3, #28
 802be1e:	d42c      	bmi.n	802be7a <__swsetup_r+0x82>
 802be20:	06dd      	lsls	r5, r3, #27
 802be22:	d411      	bmi.n	802be48 <__swsetup_r+0x50>
 802be24:	2309      	movs	r3, #9
 802be26:	6033      	str	r3, [r6, #0]
 802be28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802be2c:	81a3      	strh	r3, [r4, #12]
 802be2e:	f04f 30ff 	mov.w	r0, #4294967295
 802be32:	e03e      	b.n	802beb2 <__swsetup_r+0xba>
 802be34:	4b25      	ldr	r3, [pc, #148]	; (802becc <__swsetup_r+0xd4>)
 802be36:	429c      	cmp	r4, r3
 802be38:	d101      	bne.n	802be3e <__swsetup_r+0x46>
 802be3a:	68ac      	ldr	r4, [r5, #8]
 802be3c:	e7eb      	b.n	802be16 <__swsetup_r+0x1e>
 802be3e:	4b24      	ldr	r3, [pc, #144]	; (802bed0 <__swsetup_r+0xd8>)
 802be40:	429c      	cmp	r4, r3
 802be42:	bf08      	it	eq
 802be44:	68ec      	ldreq	r4, [r5, #12]
 802be46:	e7e6      	b.n	802be16 <__swsetup_r+0x1e>
 802be48:	0758      	lsls	r0, r3, #29
 802be4a:	d512      	bpl.n	802be72 <__swsetup_r+0x7a>
 802be4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802be4e:	b141      	cbz	r1, 802be62 <__swsetup_r+0x6a>
 802be50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802be54:	4299      	cmp	r1, r3
 802be56:	d002      	beq.n	802be5e <__swsetup_r+0x66>
 802be58:	4630      	mov	r0, r6
 802be5a:	f7ff fb25 	bl	802b4a8 <_free_r>
 802be5e:	2300      	movs	r3, #0
 802be60:	6363      	str	r3, [r4, #52]	; 0x34
 802be62:	89a3      	ldrh	r3, [r4, #12]
 802be64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802be68:	81a3      	strh	r3, [r4, #12]
 802be6a:	2300      	movs	r3, #0
 802be6c:	6063      	str	r3, [r4, #4]
 802be6e:	6923      	ldr	r3, [r4, #16]
 802be70:	6023      	str	r3, [r4, #0]
 802be72:	89a3      	ldrh	r3, [r4, #12]
 802be74:	f043 0308 	orr.w	r3, r3, #8
 802be78:	81a3      	strh	r3, [r4, #12]
 802be7a:	6923      	ldr	r3, [r4, #16]
 802be7c:	b94b      	cbnz	r3, 802be92 <__swsetup_r+0x9a>
 802be7e:	89a3      	ldrh	r3, [r4, #12]
 802be80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802be84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802be88:	d003      	beq.n	802be92 <__swsetup_r+0x9a>
 802be8a:	4621      	mov	r1, r4
 802be8c:	4630      	mov	r0, r6
 802be8e:	f000 fa5f 	bl	802c350 <__smakebuf_r>
 802be92:	89a0      	ldrh	r0, [r4, #12]
 802be94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802be98:	f010 0301 	ands.w	r3, r0, #1
 802be9c:	d00a      	beq.n	802beb4 <__swsetup_r+0xbc>
 802be9e:	2300      	movs	r3, #0
 802bea0:	60a3      	str	r3, [r4, #8]
 802bea2:	6963      	ldr	r3, [r4, #20]
 802bea4:	425b      	negs	r3, r3
 802bea6:	61a3      	str	r3, [r4, #24]
 802bea8:	6923      	ldr	r3, [r4, #16]
 802beaa:	b943      	cbnz	r3, 802bebe <__swsetup_r+0xc6>
 802beac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802beb0:	d1ba      	bne.n	802be28 <__swsetup_r+0x30>
 802beb2:	bd70      	pop	{r4, r5, r6, pc}
 802beb4:	0781      	lsls	r1, r0, #30
 802beb6:	bf58      	it	pl
 802beb8:	6963      	ldrpl	r3, [r4, #20]
 802beba:	60a3      	str	r3, [r4, #8]
 802bebc:	e7f4      	b.n	802bea8 <__swsetup_r+0xb0>
 802bebe:	2000      	movs	r0, #0
 802bec0:	e7f7      	b.n	802beb2 <__swsetup_r+0xba>
 802bec2:	bf00      	nop
 802bec4:	200000bc 	.word	0x200000bc
 802bec8:	0803173c 	.word	0x0803173c
 802becc:	0803175c 	.word	0x0803175c
 802bed0:	0803171c 	.word	0x0803171c

0802bed4 <__register_exitproc>:
 802bed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bed8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802bf94 <__register_exitproc+0xc0>
 802bedc:	4606      	mov	r6, r0
 802bede:	f8d8 0000 	ldr.w	r0, [r8]
 802bee2:	461f      	mov	r7, r3
 802bee4:	460d      	mov	r5, r1
 802bee6:	4691      	mov	r9, r2
 802bee8:	f7ff fab5 	bl	802b456 <__retarget_lock_acquire_recursive>
 802beec:	4b25      	ldr	r3, [pc, #148]	; (802bf84 <__register_exitproc+0xb0>)
 802beee:	681c      	ldr	r4, [r3, #0]
 802bef0:	b934      	cbnz	r4, 802bf00 <__register_exitproc+0x2c>
 802bef2:	4c25      	ldr	r4, [pc, #148]	; (802bf88 <__register_exitproc+0xb4>)
 802bef4:	601c      	str	r4, [r3, #0]
 802bef6:	4b25      	ldr	r3, [pc, #148]	; (802bf8c <__register_exitproc+0xb8>)
 802bef8:	b113      	cbz	r3, 802bf00 <__register_exitproc+0x2c>
 802befa:	681b      	ldr	r3, [r3, #0]
 802befc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802bf00:	6863      	ldr	r3, [r4, #4]
 802bf02:	2b1f      	cmp	r3, #31
 802bf04:	dd07      	ble.n	802bf16 <__register_exitproc+0x42>
 802bf06:	f8d8 0000 	ldr.w	r0, [r8]
 802bf0a:	f7ff faa6 	bl	802b45a <__retarget_lock_release_recursive>
 802bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 802bf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bf16:	b34e      	cbz	r6, 802bf6c <__register_exitproc+0x98>
 802bf18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802bf1c:	b988      	cbnz	r0, 802bf42 <__register_exitproc+0x6e>
 802bf1e:	4b1c      	ldr	r3, [pc, #112]	; (802bf90 <__register_exitproc+0xbc>)
 802bf20:	b923      	cbnz	r3, 802bf2c <__register_exitproc+0x58>
 802bf22:	f8d8 0000 	ldr.w	r0, [r8]
 802bf26:	f7ff fa97 	bl	802b458 <__retarget_lock_release>
 802bf2a:	e7f0      	b.n	802bf0e <__register_exitproc+0x3a>
 802bf2c:	f44f 7084 	mov.w	r0, #264	; 0x108
 802bf30:	f7ff fa94 	bl	802b45c <malloc>
 802bf34:	2800      	cmp	r0, #0
 802bf36:	d0f4      	beq.n	802bf22 <__register_exitproc+0x4e>
 802bf38:	2300      	movs	r3, #0
 802bf3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802bf3e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802bf42:	6863      	ldr	r3, [r4, #4]
 802bf44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802bf48:	2201      	movs	r2, #1
 802bf4a:	409a      	lsls	r2, r3
 802bf4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802bf50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802bf54:	4313      	orrs	r3, r2
 802bf56:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802bf5a:	2e02      	cmp	r6, #2
 802bf5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802bf60:	bf02      	ittt	eq
 802bf62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802bf66:	4313      	orreq	r3, r2
 802bf68:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802bf6c:	6863      	ldr	r3, [r4, #4]
 802bf6e:	f8d8 0000 	ldr.w	r0, [r8]
 802bf72:	1c5a      	adds	r2, r3, #1
 802bf74:	3302      	adds	r3, #2
 802bf76:	6062      	str	r2, [r4, #4]
 802bf78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802bf7c:	f7ff fa6d 	bl	802b45a <__retarget_lock_release_recursive>
 802bf80:	2000      	movs	r0, #0
 802bf82:	e7c6      	b.n	802bf12 <__register_exitproc+0x3e>
 802bf84:	2001712c 	.word	0x2001712c
 802bf88:	200170a0 	.word	0x200170a0
 802bf8c:	08031718 	.word	0x08031718
 802bf90:	0802b45d 	.word	0x0802b45d
 802bf94:	20000120 	.word	0x20000120

0802bf98 <__sflush_r>:
 802bf98:	898a      	ldrh	r2, [r1, #12]
 802bf9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bf9e:	4605      	mov	r5, r0
 802bfa0:	0710      	lsls	r0, r2, #28
 802bfa2:	460c      	mov	r4, r1
 802bfa4:	d458      	bmi.n	802c058 <__sflush_r+0xc0>
 802bfa6:	684b      	ldr	r3, [r1, #4]
 802bfa8:	2b00      	cmp	r3, #0
 802bfaa:	dc05      	bgt.n	802bfb8 <__sflush_r+0x20>
 802bfac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bfae:	2b00      	cmp	r3, #0
 802bfb0:	dc02      	bgt.n	802bfb8 <__sflush_r+0x20>
 802bfb2:	2000      	movs	r0, #0
 802bfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bfb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bfba:	2e00      	cmp	r6, #0
 802bfbc:	d0f9      	beq.n	802bfb2 <__sflush_r+0x1a>
 802bfbe:	2300      	movs	r3, #0
 802bfc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bfc4:	682f      	ldr	r7, [r5, #0]
 802bfc6:	602b      	str	r3, [r5, #0]
 802bfc8:	d032      	beq.n	802c030 <__sflush_r+0x98>
 802bfca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bfcc:	89a3      	ldrh	r3, [r4, #12]
 802bfce:	075a      	lsls	r2, r3, #29
 802bfd0:	d505      	bpl.n	802bfde <__sflush_r+0x46>
 802bfd2:	6863      	ldr	r3, [r4, #4]
 802bfd4:	1ac0      	subs	r0, r0, r3
 802bfd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bfd8:	b10b      	cbz	r3, 802bfde <__sflush_r+0x46>
 802bfda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bfdc:	1ac0      	subs	r0, r0, r3
 802bfde:	2300      	movs	r3, #0
 802bfe0:	4602      	mov	r2, r0
 802bfe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bfe4:	6a21      	ldr	r1, [r4, #32]
 802bfe6:	4628      	mov	r0, r5
 802bfe8:	47b0      	blx	r6
 802bfea:	1c43      	adds	r3, r0, #1
 802bfec:	89a3      	ldrh	r3, [r4, #12]
 802bfee:	d106      	bne.n	802bffe <__sflush_r+0x66>
 802bff0:	6829      	ldr	r1, [r5, #0]
 802bff2:	291d      	cmp	r1, #29
 802bff4:	d82c      	bhi.n	802c050 <__sflush_r+0xb8>
 802bff6:	4a2a      	ldr	r2, [pc, #168]	; (802c0a0 <__sflush_r+0x108>)
 802bff8:	40ca      	lsrs	r2, r1
 802bffa:	07d6      	lsls	r6, r2, #31
 802bffc:	d528      	bpl.n	802c050 <__sflush_r+0xb8>
 802bffe:	2200      	movs	r2, #0
 802c000:	6062      	str	r2, [r4, #4]
 802c002:	04d9      	lsls	r1, r3, #19
 802c004:	6922      	ldr	r2, [r4, #16]
 802c006:	6022      	str	r2, [r4, #0]
 802c008:	d504      	bpl.n	802c014 <__sflush_r+0x7c>
 802c00a:	1c42      	adds	r2, r0, #1
 802c00c:	d101      	bne.n	802c012 <__sflush_r+0x7a>
 802c00e:	682b      	ldr	r3, [r5, #0]
 802c010:	b903      	cbnz	r3, 802c014 <__sflush_r+0x7c>
 802c012:	6560      	str	r0, [r4, #84]	; 0x54
 802c014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c016:	602f      	str	r7, [r5, #0]
 802c018:	2900      	cmp	r1, #0
 802c01a:	d0ca      	beq.n	802bfb2 <__sflush_r+0x1a>
 802c01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c020:	4299      	cmp	r1, r3
 802c022:	d002      	beq.n	802c02a <__sflush_r+0x92>
 802c024:	4628      	mov	r0, r5
 802c026:	f7ff fa3f 	bl	802b4a8 <_free_r>
 802c02a:	2000      	movs	r0, #0
 802c02c:	6360      	str	r0, [r4, #52]	; 0x34
 802c02e:	e7c1      	b.n	802bfb4 <__sflush_r+0x1c>
 802c030:	6a21      	ldr	r1, [r4, #32]
 802c032:	2301      	movs	r3, #1
 802c034:	4628      	mov	r0, r5
 802c036:	47b0      	blx	r6
 802c038:	1c41      	adds	r1, r0, #1
 802c03a:	d1c7      	bne.n	802bfcc <__sflush_r+0x34>
 802c03c:	682b      	ldr	r3, [r5, #0]
 802c03e:	2b00      	cmp	r3, #0
 802c040:	d0c4      	beq.n	802bfcc <__sflush_r+0x34>
 802c042:	2b1d      	cmp	r3, #29
 802c044:	d001      	beq.n	802c04a <__sflush_r+0xb2>
 802c046:	2b16      	cmp	r3, #22
 802c048:	d101      	bne.n	802c04e <__sflush_r+0xb6>
 802c04a:	602f      	str	r7, [r5, #0]
 802c04c:	e7b1      	b.n	802bfb2 <__sflush_r+0x1a>
 802c04e:	89a3      	ldrh	r3, [r4, #12]
 802c050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c054:	81a3      	strh	r3, [r4, #12]
 802c056:	e7ad      	b.n	802bfb4 <__sflush_r+0x1c>
 802c058:	690f      	ldr	r7, [r1, #16]
 802c05a:	2f00      	cmp	r7, #0
 802c05c:	d0a9      	beq.n	802bfb2 <__sflush_r+0x1a>
 802c05e:	0793      	lsls	r3, r2, #30
 802c060:	680e      	ldr	r6, [r1, #0]
 802c062:	bf08      	it	eq
 802c064:	694b      	ldreq	r3, [r1, #20]
 802c066:	600f      	str	r7, [r1, #0]
 802c068:	bf18      	it	ne
 802c06a:	2300      	movne	r3, #0
 802c06c:	eba6 0807 	sub.w	r8, r6, r7
 802c070:	608b      	str	r3, [r1, #8]
 802c072:	f1b8 0f00 	cmp.w	r8, #0
 802c076:	dd9c      	ble.n	802bfb2 <__sflush_r+0x1a>
 802c078:	6a21      	ldr	r1, [r4, #32]
 802c07a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802c07c:	4643      	mov	r3, r8
 802c07e:	463a      	mov	r2, r7
 802c080:	4628      	mov	r0, r5
 802c082:	47b0      	blx	r6
 802c084:	2800      	cmp	r0, #0
 802c086:	dc06      	bgt.n	802c096 <__sflush_r+0xfe>
 802c088:	89a3      	ldrh	r3, [r4, #12]
 802c08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c08e:	81a3      	strh	r3, [r4, #12]
 802c090:	f04f 30ff 	mov.w	r0, #4294967295
 802c094:	e78e      	b.n	802bfb4 <__sflush_r+0x1c>
 802c096:	4407      	add	r7, r0
 802c098:	eba8 0800 	sub.w	r8, r8, r0
 802c09c:	e7e9      	b.n	802c072 <__sflush_r+0xda>
 802c09e:	bf00      	nop
 802c0a0:	20400001 	.word	0x20400001

0802c0a4 <_fflush_r>:
 802c0a4:	b538      	push	{r3, r4, r5, lr}
 802c0a6:	690b      	ldr	r3, [r1, #16]
 802c0a8:	4605      	mov	r5, r0
 802c0aa:	460c      	mov	r4, r1
 802c0ac:	b913      	cbnz	r3, 802c0b4 <_fflush_r+0x10>
 802c0ae:	2500      	movs	r5, #0
 802c0b0:	4628      	mov	r0, r5
 802c0b2:	bd38      	pop	{r3, r4, r5, pc}
 802c0b4:	b118      	cbz	r0, 802c0be <_fflush_r+0x1a>
 802c0b6:	6983      	ldr	r3, [r0, #24]
 802c0b8:	b90b      	cbnz	r3, 802c0be <_fflush_r+0x1a>
 802c0ba:	f000 f887 	bl	802c1cc <__sinit>
 802c0be:	4b14      	ldr	r3, [pc, #80]	; (802c110 <_fflush_r+0x6c>)
 802c0c0:	429c      	cmp	r4, r3
 802c0c2:	d11b      	bne.n	802c0fc <_fflush_r+0x58>
 802c0c4:	686c      	ldr	r4, [r5, #4]
 802c0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c0ca:	2b00      	cmp	r3, #0
 802c0cc:	d0ef      	beq.n	802c0ae <_fflush_r+0xa>
 802c0ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802c0d0:	07d0      	lsls	r0, r2, #31
 802c0d2:	d404      	bmi.n	802c0de <_fflush_r+0x3a>
 802c0d4:	0599      	lsls	r1, r3, #22
 802c0d6:	d402      	bmi.n	802c0de <_fflush_r+0x3a>
 802c0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c0da:	f7ff f9bc 	bl	802b456 <__retarget_lock_acquire_recursive>
 802c0de:	4628      	mov	r0, r5
 802c0e0:	4621      	mov	r1, r4
 802c0e2:	f7ff ff59 	bl	802bf98 <__sflush_r>
 802c0e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c0e8:	07da      	lsls	r2, r3, #31
 802c0ea:	4605      	mov	r5, r0
 802c0ec:	d4e0      	bmi.n	802c0b0 <_fflush_r+0xc>
 802c0ee:	89a3      	ldrh	r3, [r4, #12]
 802c0f0:	059b      	lsls	r3, r3, #22
 802c0f2:	d4dd      	bmi.n	802c0b0 <_fflush_r+0xc>
 802c0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c0f6:	f7ff f9b0 	bl	802b45a <__retarget_lock_release_recursive>
 802c0fa:	e7d9      	b.n	802c0b0 <_fflush_r+0xc>
 802c0fc:	4b05      	ldr	r3, [pc, #20]	; (802c114 <_fflush_r+0x70>)
 802c0fe:	429c      	cmp	r4, r3
 802c100:	d101      	bne.n	802c106 <_fflush_r+0x62>
 802c102:	68ac      	ldr	r4, [r5, #8]
 802c104:	e7df      	b.n	802c0c6 <_fflush_r+0x22>
 802c106:	4b04      	ldr	r3, [pc, #16]	; (802c118 <_fflush_r+0x74>)
 802c108:	429c      	cmp	r4, r3
 802c10a:	bf08      	it	eq
 802c10c:	68ec      	ldreq	r4, [r5, #12]
 802c10e:	e7da      	b.n	802c0c6 <_fflush_r+0x22>
 802c110:	0803173c 	.word	0x0803173c
 802c114:	0803175c 	.word	0x0803175c
 802c118:	0803171c 	.word	0x0803171c

0802c11c <std>:
 802c11c:	2300      	movs	r3, #0
 802c11e:	b510      	push	{r4, lr}
 802c120:	4604      	mov	r4, r0
 802c122:	e9c0 3300 	strd	r3, r3, [r0]
 802c126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c12a:	6083      	str	r3, [r0, #8]
 802c12c:	8181      	strh	r1, [r0, #12]
 802c12e:	6643      	str	r3, [r0, #100]	; 0x64
 802c130:	81c2      	strh	r2, [r0, #14]
 802c132:	6183      	str	r3, [r0, #24]
 802c134:	4619      	mov	r1, r3
 802c136:	2208      	movs	r2, #8
 802c138:	305c      	adds	r0, #92	; 0x5c
 802c13a:	f7ff f9ad 	bl	802b498 <memset>
 802c13e:	4b05      	ldr	r3, [pc, #20]	; (802c154 <std+0x38>)
 802c140:	6263      	str	r3, [r4, #36]	; 0x24
 802c142:	4b05      	ldr	r3, [pc, #20]	; (802c158 <std+0x3c>)
 802c144:	62a3      	str	r3, [r4, #40]	; 0x28
 802c146:	4b05      	ldr	r3, [pc, #20]	; (802c15c <std+0x40>)
 802c148:	62e3      	str	r3, [r4, #44]	; 0x2c
 802c14a:	4b05      	ldr	r3, [pc, #20]	; (802c160 <std+0x44>)
 802c14c:	6224      	str	r4, [r4, #32]
 802c14e:	6323      	str	r3, [r4, #48]	; 0x30
 802c150:	bd10      	pop	{r4, pc}
 802c152:	bf00      	nop
 802c154:	0802c731 	.word	0x0802c731
 802c158:	0802c753 	.word	0x0802c753
 802c15c:	0802c78b 	.word	0x0802c78b
 802c160:	0802c7af 	.word	0x0802c7af

0802c164 <_cleanup_r>:
 802c164:	4901      	ldr	r1, [pc, #4]	; (802c16c <_cleanup_r+0x8>)
 802c166:	f000 b8af 	b.w	802c2c8 <_fwalk_reent>
 802c16a:	bf00      	nop
 802c16c:	0802c0a5 	.word	0x0802c0a5

0802c170 <__sfmoreglue>:
 802c170:	b570      	push	{r4, r5, r6, lr}
 802c172:	2268      	movs	r2, #104	; 0x68
 802c174:	1e4d      	subs	r5, r1, #1
 802c176:	4355      	muls	r5, r2
 802c178:	460e      	mov	r6, r1
 802c17a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802c17e:	f7ff f9ff 	bl	802b580 <_malloc_r>
 802c182:	4604      	mov	r4, r0
 802c184:	b140      	cbz	r0, 802c198 <__sfmoreglue+0x28>
 802c186:	2100      	movs	r1, #0
 802c188:	e9c0 1600 	strd	r1, r6, [r0]
 802c18c:	300c      	adds	r0, #12
 802c18e:	60a0      	str	r0, [r4, #8]
 802c190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802c194:	f7ff f980 	bl	802b498 <memset>
 802c198:	4620      	mov	r0, r4
 802c19a:	bd70      	pop	{r4, r5, r6, pc}

0802c19c <__sfp_lock_acquire>:
 802c19c:	4801      	ldr	r0, [pc, #4]	; (802c1a4 <__sfp_lock_acquire+0x8>)
 802c19e:	f7ff b95a 	b.w	802b456 <__retarget_lock_acquire_recursive>
 802c1a2:	bf00      	nop
 802c1a4:	20016f8e 	.word	0x20016f8e

0802c1a8 <__sfp_lock_release>:
 802c1a8:	4801      	ldr	r0, [pc, #4]	; (802c1b0 <__sfp_lock_release+0x8>)
 802c1aa:	f7ff b956 	b.w	802b45a <__retarget_lock_release_recursive>
 802c1ae:	bf00      	nop
 802c1b0:	20016f8e 	.word	0x20016f8e

0802c1b4 <__sinit_lock_acquire>:
 802c1b4:	4801      	ldr	r0, [pc, #4]	; (802c1bc <__sinit_lock_acquire+0x8>)
 802c1b6:	f7ff b94e 	b.w	802b456 <__retarget_lock_acquire_recursive>
 802c1ba:	bf00      	nop
 802c1bc:	20016f8f 	.word	0x20016f8f

0802c1c0 <__sinit_lock_release>:
 802c1c0:	4801      	ldr	r0, [pc, #4]	; (802c1c8 <__sinit_lock_release+0x8>)
 802c1c2:	f7ff b94a 	b.w	802b45a <__retarget_lock_release_recursive>
 802c1c6:	bf00      	nop
 802c1c8:	20016f8f 	.word	0x20016f8f

0802c1cc <__sinit>:
 802c1cc:	b510      	push	{r4, lr}
 802c1ce:	4604      	mov	r4, r0
 802c1d0:	f7ff fff0 	bl	802c1b4 <__sinit_lock_acquire>
 802c1d4:	69a3      	ldr	r3, [r4, #24]
 802c1d6:	b11b      	cbz	r3, 802c1e0 <__sinit+0x14>
 802c1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c1dc:	f7ff bff0 	b.w	802c1c0 <__sinit_lock_release>
 802c1e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802c1e4:	6523      	str	r3, [r4, #80]	; 0x50
 802c1e6:	4b13      	ldr	r3, [pc, #76]	; (802c234 <__sinit+0x68>)
 802c1e8:	4a13      	ldr	r2, [pc, #76]	; (802c238 <__sinit+0x6c>)
 802c1ea:	681b      	ldr	r3, [r3, #0]
 802c1ec:	62a2      	str	r2, [r4, #40]	; 0x28
 802c1ee:	42a3      	cmp	r3, r4
 802c1f0:	bf04      	itt	eq
 802c1f2:	2301      	moveq	r3, #1
 802c1f4:	61a3      	streq	r3, [r4, #24]
 802c1f6:	4620      	mov	r0, r4
 802c1f8:	f000 f820 	bl	802c23c <__sfp>
 802c1fc:	6060      	str	r0, [r4, #4]
 802c1fe:	4620      	mov	r0, r4
 802c200:	f000 f81c 	bl	802c23c <__sfp>
 802c204:	60a0      	str	r0, [r4, #8]
 802c206:	4620      	mov	r0, r4
 802c208:	f000 f818 	bl	802c23c <__sfp>
 802c20c:	2200      	movs	r2, #0
 802c20e:	60e0      	str	r0, [r4, #12]
 802c210:	2104      	movs	r1, #4
 802c212:	6860      	ldr	r0, [r4, #4]
 802c214:	f7ff ff82 	bl	802c11c <std>
 802c218:	68a0      	ldr	r0, [r4, #8]
 802c21a:	2201      	movs	r2, #1
 802c21c:	2109      	movs	r1, #9
 802c21e:	f7ff ff7d 	bl	802c11c <std>
 802c222:	68e0      	ldr	r0, [r4, #12]
 802c224:	2202      	movs	r2, #2
 802c226:	2112      	movs	r1, #18
 802c228:	f7ff ff78 	bl	802c11c <std>
 802c22c:	2301      	movs	r3, #1
 802c22e:	61a3      	str	r3, [r4, #24]
 802c230:	e7d2      	b.n	802c1d8 <__sinit+0xc>
 802c232:	bf00      	nop
 802c234:	080316e0 	.word	0x080316e0
 802c238:	0802c165 	.word	0x0802c165

0802c23c <__sfp>:
 802c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c23e:	4607      	mov	r7, r0
 802c240:	f7ff ffac 	bl	802c19c <__sfp_lock_acquire>
 802c244:	4b1e      	ldr	r3, [pc, #120]	; (802c2c0 <__sfp+0x84>)
 802c246:	681e      	ldr	r6, [r3, #0]
 802c248:	69b3      	ldr	r3, [r6, #24]
 802c24a:	b913      	cbnz	r3, 802c252 <__sfp+0x16>
 802c24c:	4630      	mov	r0, r6
 802c24e:	f7ff ffbd 	bl	802c1cc <__sinit>
 802c252:	3648      	adds	r6, #72	; 0x48
 802c254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c258:	3b01      	subs	r3, #1
 802c25a:	d503      	bpl.n	802c264 <__sfp+0x28>
 802c25c:	6833      	ldr	r3, [r6, #0]
 802c25e:	b30b      	cbz	r3, 802c2a4 <__sfp+0x68>
 802c260:	6836      	ldr	r6, [r6, #0]
 802c262:	e7f7      	b.n	802c254 <__sfp+0x18>
 802c264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c268:	b9d5      	cbnz	r5, 802c2a0 <__sfp+0x64>
 802c26a:	4b16      	ldr	r3, [pc, #88]	; (802c2c4 <__sfp+0x88>)
 802c26c:	60e3      	str	r3, [r4, #12]
 802c26e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c272:	6665      	str	r5, [r4, #100]	; 0x64
 802c274:	f7ff f8ee 	bl	802b454 <__retarget_lock_init_recursive>
 802c278:	f7ff ff96 	bl	802c1a8 <__sfp_lock_release>
 802c27c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802c280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802c284:	6025      	str	r5, [r4, #0]
 802c286:	61a5      	str	r5, [r4, #24]
 802c288:	2208      	movs	r2, #8
 802c28a:	4629      	mov	r1, r5
 802c28c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c290:	f7ff f902 	bl	802b498 <memset>
 802c294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c29c:	4620      	mov	r0, r4
 802c29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c2a0:	3468      	adds	r4, #104	; 0x68
 802c2a2:	e7d9      	b.n	802c258 <__sfp+0x1c>
 802c2a4:	2104      	movs	r1, #4
 802c2a6:	4638      	mov	r0, r7
 802c2a8:	f7ff ff62 	bl	802c170 <__sfmoreglue>
 802c2ac:	4604      	mov	r4, r0
 802c2ae:	6030      	str	r0, [r6, #0]
 802c2b0:	2800      	cmp	r0, #0
 802c2b2:	d1d5      	bne.n	802c260 <__sfp+0x24>
 802c2b4:	f7ff ff78 	bl	802c1a8 <__sfp_lock_release>
 802c2b8:	230c      	movs	r3, #12
 802c2ba:	603b      	str	r3, [r7, #0]
 802c2bc:	e7ee      	b.n	802c29c <__sfp+0x60>
 802c2be:	bf00      	nop
 802c2c0:	080316e0 	.word	0x080316e0
 802c2c4:	ffff0001 	.word	0xffff0001

0802c2c8 <_fwalk_reent>:
 802c2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c2cc:	4606      	mov	r6, r0
 802c2ce:	4688      	mov	r8, r1
 802c2d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c2d4:	2700      	movs	r7, #0
 802c2d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c2da:	f1b9 0901 	subs.w	r9, r9, #1
 802c2de:	d505      	bpl.n	802c2ec <_fwalk_reent+0x24>
 802c2e0:	6824      	ldr	r4, [r4, #0]
 802c2e2:	2c00      	cmp	r4, #0
 802c2e4:	d1f7      	bne.n	802c2d6 <_fwalk_reent+0xe>
 802c2e6:	4638      	mov	r0, r7
 802c2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c2ec:	89ab      	ldrh	r3, [r5, #12]
 802c2ee:	2b01      	cmp	r3, #1
 802c2f0:	d907      	bls.n	802c302 <_fwalk_reent+0x3a>
 802c2f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c2f6:	3301      	adds	r3, #1
 802c2f8:	d003      	beq.n	802c302 <_fwalk_reent+0x3a>
 802c2fa:	4629      	mov	r1, r5
 802c2fc:	4630      	mov	r0, r6
 802c2fe:	47c0      	blx	r8
 802c300:	4307      	orrs	r7, r0
 802c302:	3568      	adds	r5, #104	; 0x68
 802c304:	e7e9      	b.n	802c2da <_fwalk_reent+0x12>

0802c306 <__swhatbuf_r>:
 802c306:	b570      	push	{r4, r5, r6, lr}
 802c308:	460e      	mov	r6, r1
 802c30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c30e:	2900      	cmp	r1, #0
 802c310:	b096      	sub	sp, #88	; 0x58
 802c312:	4614      	mov	r4, r2
 802c314:	461d      	mov	r5, r3
 802c316:	da08      	bge.n	802c32a <__swhatbuf_r+0x24>
 802c318:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802c31c:	2200      	movs	r2, #0
 802c31e:	602a      	str	r2, [r5, #0]
 802c320:	061a      	lsls	r2, r3, #24
 802c322:	d410      	bmi.n	802c346 <__swhatbuf_r+0x40>
 802c324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c328:	e00e      	b.n	802c348 <__swhatbuf_r+0x42>
 802c32a:	466a      	mov	r2, sp
 802c32c:	f000 fa66 	bl	802c7fc <_fstat_r>
 802c330:	2800      	cmp	r0, #0
 802c332:	dbf1      	blt.n	802c318 <__swhatbuf_r+0x12>
 802c334:	9a01      	ldr	r2, [sp, #4]
 802c336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c33a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c33e:	425a      	negs	r2, r3
 802c340:	415a      	adcs	r2, r3
 802c342:	602a      	str	r2, [r5, #0]
 802c344:	e7ee      	b.n	802c324 <__swhatbuf_r+0x1e>
 802c346:	2340      	movs	r3, #64	; 0x40
 802c348:	2000      	movs	r0, #0
 802c34a:	6023      	str	r3, [r4, #0]
 802c34c:	b016      	add	sp, #88	; 0x58
 802c34e:	bd70      	pop	{r4, r5, r6, pc}

0802c350 <__smakebuf_r>:
 802c350:	898b      	ldrh	r3, [r1, #12]
 802c352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c354:	079d      	lsls	r5, r3, #30
 802c356:	4606      	mov	r6, r0
 802c358:	460c      	mov	r4, r1
 802c35a:	d507      	bpl.n	802c36c <__smakebuf_r+0x1c>
 802c35c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c360:	6023      	str	r3, [r4, #0]
 802c362:	6123      	str	r3, [r4, #16]
 802c364:	2301      	movs	r3, #1
 802c366:	6163      	str	r3, [r4, #20]
 802c368:	b002      	add	sp, #8
 802c36a:	bd70      	pop	{r4, r5, r6, pc}
 802c36c:	ab01      	add	r3, sp, #4
 802c36e:	466a      	mov	r2, sp
 802c370:	f7ff ffc9 	bl	802c306 <__swhatbuf_r>
 802c374:	9900      	ldr	r1, [sp, #0]
 802c376:	4605      	mov	r5, r0
 802c378:	4630      	mov	r0, r6
 802c37a:	f7ff f901 	bl	802b580 <_malloc_r>
 802c37e:	b948      	cbnz	r0, 802c394 <__smakebuf_r+0x44>
 802c380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c384:	059a      	lsls	r2, r3, #22
 802c386:	d4ef      	bmi.n	802c368 <__smakebuf_r+0x18>
 802c388:	f023 0303 	bic.w	r3, r3, #3
 802c38c:	f043 0302 	orr.w	r3, r3, #2
 802c390:	81a3      	strh	r3, [r4, #12]
 802c392:	e7e3      	b.n	802c35c <__smakebuf_r+0xc>
 802c394:	4b0d      	ldr	r3, [pc, #52]	; (802c3cc <__smakebuf_r+0x7c>)
 802c396:	62b3      	str	r3, [r6, #40]	; 0x28
 802c398:	89a3      	ldrh	r3, [r4, #12]
 802c39a:	6020      	str	r0, [r4, #0]
 802c39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c3a0:	81a3      	strh	r3, [r4, #12]
 802c3a2:	9b00      	ldr	r3, [sp, #0]
 802c3a4:	6163      	str	r3, [r4, #20]
 802c3a6:	9b01      	ldr	r3, [sp, #4]
 802c3a8:	6120      	str	r0, [r4, #16]
 802c3aa:	b15b      	cbz	r3, 802c3c4 <__smakebuf_r+0x74>
 802c3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c3b0:	4630      	mov	r0, r6
 802c3b2:	f000 fa35 	bl	802c820 <_isatty_r>
 802c3b6:	b128      	cbz	r0, 802c3c4 <__smakebuf_r+0x74>
 802c3b8:	89a3      	ldrh	r3, [r4, #12]
 802c3ba:	f023 0303 	bic.w	r3, r3, #3
 802c3be:	f043 0301 	orr.w	r3, r3, #1
 802c3c2:	81a3      	strh	r3, [r4, #12]
 802c3c4:	89a0      	ldrh	r0, [r4, #12]
 802c3c6:	4305      	orrs	r5, r0
 802c3c8:	81a5      	strh	r5, [r4, #12]
 802c3ca:	e7cd      	b.n	802c368 <__smakebuf_r+0x18>
 802c3cc:	0802c165 	.word	0x0802c165

0802c3d0 <memmove>:
 802c3d0:	4288      	cmp	r0, r1
 802c3d2:	b510      	push	{r4, lr}
 802c3d4:	eb01 0402 	add.w	r4, r1, r2
 802c3d8:	d902      	bls.n	802c3e0 <memmove+0x10>
 802c3da:	4284      	cmp	r4, r0
 802c3dc:	4623      	mov	r3, r4
 802c3de:	d807      	bhi.n	802c3f0 <memmove+0x20>
 802c3e0:	1e43      	subs	r3, r0, #1
 802c3e2:	42a1      	cmp	r1, r4
 802c3e4:	d008      	beq.n	802c3f8 <memmove+0x28>
 802c3e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c3ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c3ee:	e7f8      	b.n	802c3e2 <memmove+0x12>
 802c3f0:	4402      	add	r2, r0
 802c3f2:	4601      	mov	r1, r0
 802c3f4:	428a      	cmp	r2, r1
 802c3f6:	d100      	bne.n	802c3fa <memmove+0x2a>
 802c3f8:	bd10      	pop	{r4, pc}
 802c3fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c3fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c402:	e7f7      	b.n	802c3f4 <memmove+0x24>

0802c404 <__malloc_lock>:
 802c404:	4801      	ldr	r0, [pc, #4]	; (802c40c <__malloc_lock+0x8>)
 802c406:	f7ff b826 	b.w	802b456 <__retarget_lock_acquire_recursive>
 802c40a:	bf00      	nop
 802c40c:	20016f8d 	.word	0x20016f8d

0802c410 <__malloc_unlock>:
 802c410:	4801      	ldr	r0, [pc, #4]	; (802c418 <__malloc_unlock+0x8>)
 802c412:	f7ff b822 	b.w	802b45a <__retarget_lock_release_recursive>
 802c416:	bf00      	nop
 802c418:	20016f8d 	.word	0x20016f8d

0802c41c <_realloc_r>:
 802c41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c420:	4680      	mov	r8, r0
 802c422:	4614      	mov	r4, r2
 802c424:	460e      	mov	r6, r1
 802c426:	b921      	cbnz	r1, 802c432 <_realloc_r+0x16>
 802c428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c42c:	4611      	mov	r1, r2
 802c42e:	f7ff b8a7 	b.w	802b580 <_malloc_r>
 802c432:	b92a      	cbnz	r2, 802c440 <_realloc_r+0x24>
 802c434:	f7ff f838 	bl	802b4a8 <_free_r>
 802c438:	4625      	mov	r5, r4
 802c43a:	4628      	mov	r0, r5
 802c43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c440:	f000 fa10 	bl	802c864 <_malloc_usable_size_r>
 802c444:	4284      	cmp	r4, r0
 802c446:	4607      	mov	r7, r0
 802c448:	d802      	bhi.n	802c450 <_realloc_r+0x34>
 802c44a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802c44e:	d812      	bhi.n	802c476 <_realloc_r+0x5a>
 802c450:	4621      	mov	r1, r4
 802c452:	4640      	mov	r0, r8
 802c454:	f7ff f894 	bl	802b580 <_malloc_r>
 802c458:	4605      	mov	r5, r0
 802c45a:	2800      	cmp	r0, #0
 802c45c:	d0ed      	beq.n	802c43a <_realloc_r+0x1e>
 802c45e:	42bc      	cmp	r4, r7
 802c460:	4622      	mov	r2, r4
 802c462:	4631      	mov	r1, r6
 802c464:	bf28      	it	cs
 802c466:	463a      	movcs	r2, r7
 802c468:	f7ff f808 	bl	802b47c <memcpy>
 802c46c:	4631      	mov	r1, r6
 802c46e:	4640      	mov	r0, r8
 802c470:	f7ff f81a 	bl	802b4a8 <_free_r>
 802c474:	e7e1      	b.n	802c43a <_realloc_r+0x1e>
 802c476:	4635      	mov	r5, r6
 802c478:	e7df      	b.n	802c43a <_realloc_r+0x1e>

0802c47a <__ssputs_r>:
 802c47a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c47e:	688e      	ldr	r6, [r1, #8]
 802c480:	429e      	cmp	r6, r3
 802c482:	4682      	mov	sl, r0
 802c484:	460c      	mov	r4, r1
 802c486:	4690      	mov	r8, r2
 802c488:	461f      	mov	r7, r3
 802c48a:	d838      	bhi.n	802c4fe <__ssputs_r+0x84>
 802c48c:	898a      	ldrh	r2, [r1, #12]
 802c48e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802c492:	d032      	beq.n	802c4fa <__ssputs_r+0x80>
 802c494:	6825      	ldr	r5, [r4, #0]
 802c496:	6909      	ldr	r1, [r1, #16]
 802c498:	eba5 0901 	sub.w	r9, r5, r1
 802c49c:	6965      	ldr	r5, [r4, #20]
 802c49e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c4a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c4a6:	3301      	adds	r3, #1
 802c4a8:	444b      	add	r3, r9
 802c4aa:	106d      	asrs	r5, r5, #1
 802c4ac:	429d      	cmp	r5, r3
 802c4ae:	bf38      	it	cc
 802c4b0:	461d      	movcc	r5, r3
 802c4b2:	0553      	lsls	r3, r2, #21
 802c4b4:	d531      	bpl.n	802c51a <__ssputs_r+0xa0>
 802c4b6:	4629      	mov	r1, r5
 802c4b8:	f7ff f862 	bl	802b580 <_malloc_r>
 802c4bc:	4606      	mov	r6, r0
 802c4be:	b950      	cbnz	r0, 802c4d6 <__ssputs_r+0x5c>
 802c4c0:	230c      	movs	r3, #12
 802c4c2:	f8ca 3000 	str.w	r3, [sl]
 802c4c6:	89a3      	ldrh	r3, [r4, #12]
 802c4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c4cc:	81a3      	strh	r3, [r4, #12]
 802c4ce:	f04f 30ff 	mov.w	r0, #4294967295
 802c4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c4d6:	6921      	ldr	r1, [r4, #16]
 802c4d8:	464a      	mov	r2, r9
 802c4da:	f7fe ffcf 	bl	802b47c <memcpy>
 802c4de:	89a3      	ldrh	r3, [r4, #12]
 802c4e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802c4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c4e8:	81a3      	strh	r3, [r4, #12]
 802c4ea:	6126      	str	r6, [r4, #16]
 802c4ec:	6165      	str	r5, [r4, #20]
 802c4ee:	444e      	add	r6, r9
 802c4f0:	eba5 0509 	sub.w	r5, r5, r9
 802c4f4:	6026      	str	r6, [r4, #0]
 802c4f6:	60a5      	str	r5, [r4, #8]
 802c4f8:	463e      	mov	r6, r7
 802c4fa:	42be      	cmp	r6, r7
 802c4fc:	d900      	bls.n	802c500 <__ssputs_r+0x86>
 802c4fe:	463e      	mov	r6, r7
 802c500:	6820      	ldr	r0, [r4, #0]
 802c502:	4632      	mov	r2, r6
 802c504:	4641      	mov	r1, r8
 802c506:	f7ff ff63 	bl	802c3d0 <memmove>
 802c50a:	68a3      	ldr	r3, [r4, #8]
 802c50c:	1b9b      	subs	r3, r3, r6
 802c50e:	60a3      	str	r3, [r4, #8]
 802c510:	6823      	ldr	r3, [r4, #0]
 802c512:	4433      	add	r3, r6
 802c514:	6023      	str	r3, [r4, #0]
 802c516:	2000      	movs	r0, #0
 802c518:	e7db      	b.n	802c4d2 <__ssputs_r+0x58>
 802c51a:	462a      	mov	r2, r5
 802c51c:	f7ff ff7e 	bl	802c41c <_realloc_r>
 802c520:	4606      	mov	r6, r0
 802c522:	2800      	cmp	r0, #0
 802c524:	d1e1      	bne.n	802c4ea <__ssputs_r+0x70>
 802c526:	6921      	ldr	r1, [r4, #16]
 802c528:	4650      	mov	r0, sl
 802c52a:	f7fe ffbd 	bl	802b4a8 <_free_r>
 802c52e:	e7c7      	b.n	802c4c0 <__ssputs_r+0x46>

0802c530 <_svfiprintf_r>:
 802c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c534:	4698      	mov	r8, r3
 802c536:	898b      	ldrh	r3, [r1, #12]
 802c538:	061b      	lsls	r3, r3, #24
 802c53a:	b09d      	sub	sp, #116	; 0x74
 802c53c:	4607      	mov	r7, r0
 802c53e:	460d      	mov	r5, r1
 802c540:	4614      	mov	r4, r2
 802c542:	d50e      	bpl.n	802c562 <_svfiprintf_r+0x32>
 802c544:	690b      	ldr	r3, [r1, #16]
 802c546:	b963      	cbnz	r3, 802c562 <_svfiprintf_r+0x32>
 802c548:	2140      	movs	r1, #64	; 0x40
 802c54a:	f7ff f819 	bl	802b580 <_malloc_r>
 802c54e:	6028      	str	r0, [r5, #0]
 802c550:	6128      	str	r0, [r5, #16]
 802c552:	b920      	cbnz	r0, 802c55e <_svfiprintf_r+0x2e>
 802c554:	230c      	movs	r3, #12
 802c556:	603b      	str	r3, [r7, #0]
 802c558:	f04f 30ff 	mov.w	r0, #4294967295
 802c55c:	e0d1      	b.n	802c702 <_svfiprintf_r+0x1d2>
 802c55e:	2340      	movs	r3, #64	; 0x40
 802c560:	616b      	str	r3, [r5, #20]
 802c562:	2300      	movs	r3, #0
 802c564:	9309      	str	r3, [sp, #36]	; 0x24
 802c566:	2320      	movs	r3, #32
 802c568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c56c:	f8cd 800c 	str.w	r8, [sp, #12]
 802c570:	2330      	movs	r3, #48	; 0x30
 802c572:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802c71c <_svfiprintf_r+0x1ec>
 802c576:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c57a:	f04f 0901 	mov.w	r9, #1
 802c57e:	4623      	mov	r3, r4
 802c580:	469a      	mov	sl, r3
 802c582:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c586:	b10a      	cbz	r2, 802c58c <_svfiprintf_r+0x5c>
 802c588:	2a25      	cmp	r2, #37	; 0x25
 802c58a:	d1f9      	bne.n	802c580 <_svfiprintf_r+0x50>
 802c58c:	ebba 0b04 	subs.w	fp, sl, r4
 802c590:	d00b      	beq.n	802c5aa <_svfiprintf_r+0x7a>
 802c592:	465b      	mov	r3, fp
 802c594:	4622      	mov	r2, r4
 802c596:	4629      	mov	r1, r5
 802c598:	4638      	mov	r0, r7
 802c59a:	f7ff ff6e 	bl	802c47a <__ssputs_r>
 802c59e:	3001      	adds	r0, #1
 802c5a0:	f000 80aa 	beq.w	802c6f8 <_svfiprintf_r+0x1c8>
 802c5a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c5a6:	445a      	add	r2, fp
 802c5a8:	9209      	str	r2, [sp, #36]	; 0x24
 802c5aa:	f89a 3000 	ldrb.w	r3, [sl]
 802c5ae:	2b00      	cmp	r3, #0
 802c5b0:	f000 80a2 	beq.w	802c6f8 <_svfiprintf_r+0x1c8>
 802c5b4:	2300      	movs	r3, #0
 802c5b6:	f04f 32ff 	mov.w	r2, #4294967295
 802c5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c5be:	f10a 0a01 	add.w	sl, sl, #1
 802c5c2:	9304      	str	r3, [sp, #16]
 802c5c4:	9307      	str	r3, [sp, #28]
 802c5c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802c5ca:	931a      	str	r3, [sp, #104]	; 0x68
 802c5cc:	4654      	mov	r4, sl
 802c5ce:	2205      	movs	r2, #5
 802c5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c5d4:	4851      	ldr	r0, [pc, #324]	; (802c71c <_svfiprintf_r+0x1ec>)
 802c5d6:	f7d3 fe1b 	bl	8000210 <memchr>
 802c5da:	9a04      	ldr	r2, [sp, #16]
 802c5dc:	b9d8      	cbnz	r0, 802c616 <_svfiprintf_r+0xe6>
 802c5de:	06d0      	lsls	r0, r2, #27
 802c5e0:	bf44      	itt	mi
 802c5e2:	2320      	movmi	r3, #32
 802c5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c5e8:	0711      	lsls	r1, r2, #28
 802c5ea:	bf44      	itt	mi
 802c5ec:	232b      	movmi	r3, #43	; 0x2b
 802c5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802c5f2:	f89a 3000 	ldrb.w	r3, [sl]
 802c5f6:	2b2a      	cmp	r3, #42	; 0x2a
 802c5f8:	d015      	beq.n	802c626 <_svfiprintf_r+0xf6>
 802c5fa:	9a07      	ldr	r2, [sp, #28]
 802c5fc:	4654      	mov	r4, sl
 802c5fe:	2000      	movs	r0, #0
 802c600:	f04f 0c0a 	mov.w	ip, #10
 802c604:	4621      	mov	r1, r4
 802c606:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c60a:	3b30      	subs	r3, #48	; 0x30
 802c60c:	2b09      	cmp	r3, #9
 802c60e:	d94e      	bls.n	802c6ae <_svfiprintf_r+0x17e>
 802c610:	b1b0      	cbz	r0, 802c640 <_svfiprintf_r+0x110>
 802c612:	9207      	str	r2, [sp, #28]
 802c614:	e014      	b.n	802c640 <_svfiprintf_r+0x110>
 802c616:	eba0 0308 	sub.w	r3, r0, r8
 802c61a:	fa09 f303 	lsl.w	r3, r9, r3
 802c61e:	4313      	orrs	r3, r2
 802c620:	9304      	str	r3, [sp, #16]
 802c622:	46a2      	mov	sl, r4
 802c624:	e7d2      	b.n	802c5cc <_svfiprintf_r+0x9c>
 802c626:	9b03      	ldr	r3, [sp, #12]
 802c628:	1d19      	adds	r1, r3, #4
 802c62a:	681b      	ldr	r3, [r3, #0]
 802c62c:	9103      	str	r1, [sp, #12]
 802c62e:	2b00      	cmp	r3, #0
 802c630:	bfbb      	ittet	lt
 802c632:	425b      	neglt	r3, r3
 802c634:	f042 0202 	orrlt.w	r2, r2, #2
 802c638:	9307      	strge	r3, [sp, #28]
 802c63a:	9307      	strlt	r3, [sp, #28]
 802c63c:	bfb8      	it	lt
 802c63e:	9204      	strlt	r2, [sp, #16]
 802c640:	7823      	ldrb	r3, [r4, #0]
 802c642:	2b2e      	cmp	r3, #46	; 0x2e
 802c644:	d10c      	bne.n	802c660 <_svfiprintf_r+0x130>
 802c646:	7863      	ldrb	r3, [r4, #1]
 802c648:	2b2a      	cmp	r3, #42	; 0x2a
 802c64a:	d135      	bne.n	802c6b8 <_svfiprintf_r+0x188>
 802c64c:	9b03      	ldr	r3, [sp, #12]
 802c64e:	1d1a      	adds	r2, r3, #4
 802c650:	681b      	ldr	r3, [r3, #0]
 802c652:	9203      	str	r2, [sp, #12]
 802c654:	2b00      	cmp	r3, #0
 802c656:	bfb8      	it	lt
 802c658:	f04f 33ff 	movlt.w	r3, #4294967295
 802c65c:	3402      	adds	r4, #2
 802c65e:	9305      	str	r3, [sp, #20]
 802c660:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802c72c <_svfiprintf_r+0x1fc>
 802c664:	7821      	ldrb	r1, [r4, #0]
 802c666:	2203      	movs	r2, #3
 802c668:	4650      	mov	r0, sl
 802c66a:	f7d3 fdd1 	bl	8000210 <memchr>
 802c66e:	b140      	cbz	r0, 802c682 <_svfiprintf_r+0x152>
 802c670:	2340      	movs	r3, #64	; 0x40
 802c672:	eba0 000a 	sub.w	r0, r0, sl
 802c676:	fa03 f000 	lsl.w	r0, r3, r0
 802c67a:	9b04      	ldr	r3, [sp, #16]
 802c67c:	4303      	orrs	r3, r0
 802c67e:	3401      	adds	r4, #1
 802c680:	9304      	str	r3, [sp, #16]
 802c682:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c686:	4826      	ldr	r0, [pc, #152]	; (802c720 <_svfiprintf_r+0x1f0>)
 802c688:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802c68c:	2206      	movs	r2, #6
 802c68e:	f7d3 fdbf 	bl	8000210 <memchr>
 802c692:	2800      	cmp	r0, #0
 802c694:	d038      	beq.n	802c708 <_svfiprintf_r+0x1d8>
 802c696:	4b23      	ldr	r3, [pc, #140]	; (802c724 <_svfiprintf_r+0x1f4>)
 802c698:	bb1b      	cbnz	r3, 802c6e2 <_svfiprintf_r+0x1b2>
 802c69a:	9b03      	ldr	r3, [sp, #12]
 802c69c:	3307      	adds	r3, #7
 802c69e:	f023 0307 	bic.w	r3, r3, #7
 802c6a2:	3308      	adds	r3, #8
 802c6a4:	9303      	str	r3, [sp, #12]
 802c6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c6a8:	4433      	add	r3, r6
 802c6aa:	9309      	str	r3, [sp, #36]	; 0x24
 802c6ac:	e767      	b.n	802c57e <_svfiprintf_r+0x4e>
 802c6ae:	fb0c 3202 	mla	r2, ip, r2, r3
 802c6b2:	460c      	mov	r4, r1
 802c6b4:	2001      	movs	r0, #1
 802c6b6:	e7a5      	b.n	802c604 <_svfiprintf_r+0xd4>
 802c6b8:	2300      	movs	r3, #0
 802c6ba:	3401      	adds	r4, #1
 802c6bc:	9305      	str	r3, [sp, #20]
 802c6be:	4619      	mov	r1, r3
 802c6c0:	f04f 0c0a 	mov.w	ip, #10
 802c6c4:	4620      	mov	r0, r4
 802c6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c6ca:	3a30      	subs	r2, #48	; 0x30
 802c6cc:	2a09      	cmp	r2, #9
 802c6ce:	d903      	bls.n	802c6d8 <_svfiprintf_r+0x1a8>
 802c6d0:	2b00      	cmp	r3, #0
 802c6d2:	d0c5      	beq.n	802c660 <_svfiprintf_r+0x130>
 802c6d4:	9105      	str	r1, [sp, #20]
 802c6d6:	e7c3      	b.n	802c660 <_svfiprintf_r+0x130>
 802c6d8:	fb0c 2101 	mla	r1, ip, r1, r2
 802c6dc:	4604      	mov	r4, r0
 802c6de:	2301      	movs	r3, #1
 802c6e0:	e7f0      	b.n	802c6c4 <_svfiprintf_r+0x194>
 802c6e2:	ab03      	add	r3, sp, #12
 802c6e4:	9300      	str	r3, [sp, #0]
 802c6e6:	462a      	mov	r2, r5
 802c6e8:	4b0f      	ldr	r3, [pc, #60]	; (802c728 <_svfiprintf_r+0x1f8>)
 802c6ea:	a904      	add	r1, sp, #16
 802c6ec:	4638      	mov	r0, r7
 802c6ee:	f3af 8000 	nop.w
 802c6f2:	1c42      	adds	r2, r0, #1
 802c6f4:	4606      	mov	r6, r0
 802c6f6:	d1d6      	bne.n	802c6a6 <_svfiprintf_r+0x176>
 802c6f8:	89ab      	ldrh	r3, [r5, #12]
 802c6fa:	065b      	lsls	r3, r3, #25
 802c6fc:	f53f af2c 	bmi.w	802c558 <_svfiprintf_r+0x28>
 802c700:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c702:	b01d      	add	sp, #116	; 0x74
 802c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c708:	ab03      	add	r3, sp, #12
 802c70a:	9300      	str	r3, [sp, #0]
 802c70c:	462a      	mov	r2, r5
 802c70e:	4b06      	ldr	r3, [pc, #24]	; (802c728 <_svfiprintf_r+0x1f8>)
 802c710:	a904      	add	r1, sp, #16
 802c712:	4638      	mov	r0, r7
 802c714:	f7ff f970 	bl	802b9f8 <_printf_i>
 802c718:	e7eb      	b.n	802c6f2 <_svfiprintf_r+0x1c2>
 802c71a:	bf00      	nop
 802c71c:	080316e4 	.word	0x080316e4
 802c720:	080316ee 	.word	0x080316ee
 802c724:	00000000 	.word	0x00000000
 802c728:	0802c47b 	.word	0x0802c47b
 802c72c:	080316ea 	.word	0x080316ea

0802c730 <__sread>:
 802c730:	b510      	push	{r4, lr}
 802c732:	460c      	mov	r4, r1
 802c734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c738:	f000 f89c 	bl	802c874 <_read_r>
 802c73c:	2800      	cmp	r0, #0
 802c73e:	bfab      	itete	ge
 802c740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802c742:	89a3      	ldrhlt	r3, [r4, #12]
 802c744:	181b      	addge	r3, r3, r0
 802c746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802c74a:	bfac      	ite	ge
 802c74c:	6563      	strge	r3, [r4, #84]	; 0x54
 802c74e:	81a3      	strhlt	r3, [r4, #12]
 802c750:	bd10      	pop	{r4, pc}

0802c752 <__swrite>:
 802c752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c756:	461f      	mov	r7, r3
 802c758:	898b      	ldrh	r3, [r1, #12]
 802c75a:	05db      	lsls	r3, r3, #23
 802c75c:	4605      	mov	r5, r0
 802c75e:	460c      	mov	r4, r1
 802c760:	4616      	mov	r6, r2
 802c762:	d505      	bpl.n	802c770 <__swrite+0x1e>
 802c764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c768:	2302      	movs	r3, #2
 802c76a:	2200      	movs	r2, #0
 802c76c:	f000 f868 	bl	802c840 <_lseek_r>
 802c770:	89a3      	ldrh	r3, [r4, #12]
 802c772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c77a:	81a3      	strh	r3, [r4, #12]
 802c77c:	4632      	mov	r2, r6
 802c77e:	463b      	mov	r3, r7
 802c780:	4628      	mov	r0, r5
 802c782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c786:	f000 b817 	b.w	802c7b8 <_write_r>

0802c78a <__sseek>:
 802c78a:	b510      	push	{r4, lr}
 802c78c:	460c      	mov	r4, r1
 802c78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c792:	f000 f855 	bl	802c840 <_lseek_r>
 802c796:	1c43      	adds	r3, r0, #1
 802c798:	89a3      	ldrh	r3, [r4, #12]
 802c79a:	bf15      	itete	ne
 802c79c:	6560      	strne	r0, [r4, #84]	; 0x54
 802c79e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c7a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c7a6:	81a3      	strheq	r3, [r4, #12]
 802c7a8:	bf18      	it	ne
 802c7aa:	81a3      	strhne	r3, [r4, #12]
 802c7ac:	bd10      	pop	{r4, pc}

0802c7ae <__sclose>:
 802c7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c7b2:	f000 b813 	b.w	802c7dc <_close_r>
	...

0802c7b8 <_write_r>:
 802c7b8:	b538      	push	{r3, r4, r5, lr}
 802c7ba:	4d07      	ldr	r5, [pc, #28]	; (802c7d8 <_write_r+0x20>)
 802c7bc:	4604      	mov	r4, r0
 802c7be:	4608      	mov	r0, r1
 802c7c0:	4611      	mov	r1, r2
 802c7c2:	2200      	movs	r2, #0
 802c7c4:	602a      	str	r2, [r5, #0]
 802c7c6:	461a      	mov	r2, r3
 802c7c8:	f7d5 f8da 	bl	8001980 <_write>
 802c7cc:	1c43      	adds	r3, r0, #1
 802c7ce:	d102      	bne.n	802c7d6 <_write_r+0x1e>
 802c7d0:	682b      	ldr	r3, [r5, #0]
 802c7d2:	b103      	cbz	r3, 802c7d6 <_write_r+0x1e>
 802c7d4:	6023      	str	r3, [r4, #0]
 802c7d6:	bd38      	pop	{r3, r4, r5, pc}
 802c7d8:	20017130 	.word	0x20017130

0802c7dc <_close_r>:
 802c7dc:	b538      	push	{r3, r4, r5, lr}
 802c7de:	4d06      	ldr	r5, [pc, #24]	; (802c7f8 <_close_r+0x1c>)
 802c7e0:	2300      	movs	r3, #0
 802c7e2:	4604      	mov	r4, r0
 802c7e4:	4608      	mov	r0, r1
 802c7e6:	602b      	str	r3, [r5, #0]
 802c7e8:	f7d5 f8d8 	bl	800199c <_close>
 802c7ec:	1c43      	adds	r3, r0, #1
 802c7ee:	d102      	bne.n	802c7f6 <_close_r+0x1a>
 802c7f0:	682b      	ldr	r3, [r5, #0]
 802c7f2:	b103      	cbz	r3, 802c7f6 <_close_r+0x1a>
 802c7f4:	6023      	str	r3, [r4, #0]
 802c7f6:	bd38      	pop	{r3, r4, r5, pc}
 802c7f8:	20017130 	.word	0x20017130

0802c7fc <_fstat_r>:
 802c7fc:	b538      	push	{r3, r4, r5, lr}
 802c7fe:	4d07      	ldr	r5, [pc, #28]	; (802c81c <_fstat_r+0x20>)
 802c800:	2300      	movs	r3, #0
 802c802:	4604      	mov	r4, r0
 802c804:	4608      	mov	r0, r1
 802c806:	4611      	mov	r1, r2
 802c808:	602b      	str	r3, [r5, #0]
 802c80a:	f7d5 f8ca 	bl	80019a2 <_fstat>
 802c80e:	1c43      	adds	r3, r0, #1
 802c810:	d102      	bne.n	802c818 <_fstat_r+0x1c>
 802c812:	682b      	ldr	r3, [r5, #0]
 802c814:	b103      	cbz	r3, 802c818 <_fstat_r+0x1c>
 802c816:	6023      	str	r3, [r4, #0]
 802c818:	bd38      	pop	{r3, r4, r5, pc}
 802c81a:	bf00      	nop
 802c81c:	20017130 	.word	0x20017130

0802c820 <_isatty_r>:
 802c820:	b538      	push	{r3, r4, r5, lr}
 802c822:	4d06      	ldr	r5, [pc, #24]	; (802c83c <_isatty_r+0x1c>)
 802c824:	2300      	movs	r3, #0
 802c826:	4604      	mov	r4, r0
 802c828:	4608      	mov	r0, r1
 802c82a:	602b      	str	r3, [r5, #0]
 802c82c:	f7d5 f8be 	bl	80019ac <_isatty>
 802c830:	1c43      	adds	r3, r0, #1
 802c832:	d102      	bne.n	802c83a <_isatty_r+0x1a>
 802c834:	682b      	ldr	r3, [r5, #0]
 802c836:	b103      	cbz	r3, 802c83a <_isatty_r+0x1a>
 802c838:	6023      	str	r3, [r4, #0]
 802c83a:	bd38      	pop	{r3, r4, r5, pc}
 802c83c:	20017130 	.word	0x20017130

0802c840 <_lseek_r>:
 802c840:	b538      	push	{r3, r4, r5, lr}
 802c842:	4d07      	ldr	r5, [pc, #28]	; (802c860 <_lseek_r+0x20>)
 802c844:	4604      	mov	r4, r0
 802c846:	4608      	mov	r0, r1
 802c848:	4611      	mov	r1, r2
 802c84a:	2200      	movs	r2, #0
 802c84c:	602a      	str	r2, [r5, #0]
 802c84e:	461a      	mov	r2, r3
 802c850:	f7d5 f8ae 	bl	80019b0 <_lseek>
 802c854:	1c43      	adds	r3, r0, #1
 802c856:	d102      	bne.n	802c85e <_lseek_r+0x1e>
 802c858:	682b      	ldr	r3, [r5, #0]
 802c85a:	b103      	cbz	r3, 802c85e <_lseek_r+0x1e>
 802c85c:	6023      	str	r3, [r4, #0]
 802c85e:	bd38      	pop	{r3, r4, r5, pc}
 802c860:	20017130 	.word	0x20017130

0802c864 <_malloc_usable_size_r>:
 802c864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c868:	1f18      	subs	r0, r3, #4
 802c86a:	2b00      	cmp	r3, #0
 802c86c:	bfbc      	itt	lt
 802c86e:	580b      	ldrlt	r3, [r1, r0]
 802c870:	18c0      	addlt	r0, r0, r3
 802c872:	4770      	bx	lr

0802c874 <_read_r>:
 802c874:	b538      	push	{r3, r4, r5, lr}
 802c876:	4d07      	ldr	r5, [pc, #28]	; (802c894 <_read_r+0x20>)
 802c878:	4604      	mov	r4, r0
 802c87a:	4608      	mov	r0, r1
 802c87c:	4611      	mov	r1, r2
 802c87e:	2200      	movs	r2, #0
 802c880:	602a      	str	r2, [r5, #0]
 802c882:	461a      	mov	r2, r3
 802c884:	f7d5 f86e 	bl	8001964 <_read>
 802c888:	1c43      	adds	r3, r0, #1
 802c88a:	d102      	bne.n	802c892 <_read_r+0x1e>
 802c88c:	682b      	ldr	r3, [r5, #0]
 802c88e:	b103      	cbz	r3, 802c892 <_read_r+0x1e>
 802c890:	6023      	str	r3, [r4, #0]
 802c892:	bd38      	pop	{r3, r4, r5, pc}
 802c894:	20017130 	.word	0x20017130

0802c898 <_init>:
 802c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c89a:	bf00      	nop
 802c89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c89e:	bc08      	pop	{r3}
 802c8a0:	469e      	mov	lr, r3
 802c8a2:	4770      	bx	lr

0802c8a4 <_fini>:
 802c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c8a6:	bf00      	nop
 802c8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c8aa:	bc08      	pop	{r3}
 802c8ac:	469e      	mov	lr, r3
 802c8ae:	4770      	bx	lr
